/*
 * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License, version 2.0,
 * as published by the Free Software Foundation.
 *
 * This program is also distributed with certain software (including
 * but not limited to OpenSSL) that is licensed under separate terms, as
 * designated in a particular file or component or in included license
 * documentation. The authors of MySql hereby grant you an additional
 * permission to link the program and your derivative works with the
 * separately licensed software that they have included with MySql.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
 * the GNU General Public License, version 2.0, for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 */

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
public partial class MySqlParser : MySqlBaseRecognizer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ACCESSIBLE_SYMBOL=1, ACCOUNT_SYMBOL=2, ACTION_SYMBOL=3, ADD_SYMBOL=4, 
		ADDDATE_SYMBOL=5, AFTER_SYMBOL=6, AGAINST_SYMBOL=7, AGGREGATE_SYMBOL=8, 
		ALGORITHM_SYMBOL=9, ALL_SYMBOL=10, ALTER_SYMBOL=11, ALWAYS_SYMBOL=12, 
		ANALYSE_SYMBOL=13, ANALYZE_SYMBOL=14, AND_SYMBOL=15, ANY_SYMBOL=16, AS_SYMBOL=17, 
		ASC_SYMBOL=18, ASCII_SYMBOL=19, ASENSITIVE_SYMBOL=20, AT_SYMBOL=21, AUTHORS_SYMBOL=22, 
		AUTOEXTEND_SIZE_SYMBOL=23, AUTO_INCREMENT_SYMBOL=24, AVG_ROW_LENGTH_SYMBOL=25, 
		AVG_SYMBOL=26, BACKUP_SYMBOL=27, BEFORE_SYMBOL=28, BEGIN_SYMBOL=29, BETWEEN_SYMBOL=30, 
		BIGINT_SYMBOL=31, BINARY_SYMBOL=32, BINLOG_SYMBOL=33, BIN_NUM_SYMBOL=34, 
		BIT_AND_SYMBOL=35, BIT_OR_SYMBOL=36, BIT_SYMBOL=37, BIT_XOR_SYMBOL=38, 
		BLOB_SYMBOL=39, BLOCK_SYMBOL=40, BOOLEAN_SYMBOL=41, BOOL_SYMBOL=42, BOTH_SYMBOL=43, 
		BTREE_SYMBOL=44, BY_SYMBOL=45, BYTE_SYMBOL=46, CACHE_SYMBOL=47, CALL_SYMBOL=48, 
		CASCADE_SYMBOL=49, CASCADED_SYMBOL=50, CASE_SYMBOL=51, CAST_SYMBOL=52, 
		CATALOG_NAME_SYMBOL=53, CHAIN_SYMBOL=54, CHANGE_SYMBOL=55, CHANGED_SYMBOL=56, 
		CHANNEL_SYMBOL=57, CHARSET_SYMBOL=58, CHARACTER_SYMBOL=59, CHAR_SYMBOL=60, 
		CHECKSUM_SYMBOL=61, CHECK_SYMBOL=62, CIPHER_SYMBOL=63, CLASS_ORIGIN_SYMBOL=64, 
		CLIENT_SYMBOL=65, CLOSE_SYMBOL=66, COALESCE_SYMBOL=67, CODE_SYMBOL=68, 
		COLLATE_SYMBOL=69, COLLATION_SYMBOL=70, COLUMNS_SYMBOL=71, COLUMN_SYMBOL=72, 
		COLUMN_NAME_SYMBOL=73, COLUMN_FORMAT_SYMBOL=74, COMMENT_SYMBOL=75, COMMITTED_SYMBOL=76, 
		COMMIT_SYMBOL=77, COMPACT_SYMBOL=78, COMPLETION_SYMBOL=79, COMPRESSED_SYMBOL=80, 
		COMPRESSION_SYMBOL=81, CONCURRENT_SYMBOL=82, CONDITION_SYMBOL=83, CONNECTION_SYMBOL=84, 
		CONSISTENT_SYMBOL=85, CONSTRAINT_SYMBOL=86, CONSTRAINT_CATALOG_SYMBOL=87, 
		CONSTRAINT_NAME_SYMBOL=88, CONSTRAINT_SCHEMA_SYMBOL=89, CONTAINS_SYMBOL=90, 
		CONTEXT_SYMBOL=91, CONTINUE_SYMBOL=92, CONTRIBUTORS_SYMBOL=93, CONVERT_SYMBOL=94, 
		COUNT_SYMBOL=95, CPU_SYMBOL=96, CREATE_SYMBOL=97, CROSS_SYMBOL=98, CUBE_SYMBOL=99, 
		CURDATE_SYMBOL=100, CURRENT_SYMBOL=101, CURRENT_DATE_SYMBOL=102, CURRENT_TIME_SYMBOL=103, 
		CURRENT_TIMESTAMP_SYMBOL=104, CURRENT_USER_SYMBOL=105, CURSOR_SYMBOL=106, 
		CURSOR_NAME_SYMBOL=107, CURTIME_SYMBOL=108, DATABASE_SYMBOL=109, DATABASES_SYMBOL=110, 
		DATAFILE_SYMBOL=111, DATA_SYMBOL=112, DATETIME_SYMBOL=113, DATE_ADD_SYMBOL=114, 
		DATE_SUB_SYMBOL=115, DATE_SYMBOL=116, DAYOFMONTH_SYMBOL=117, DAY_HOUR_SYMBOL=118, 
		DAY_MICROSECOND_SYMBOL=119, DAY_MINUTE_SYMBOL=120, DAY_SECOND_SYMBOL=121, 
		DAY_SYMBOL=122, DEALLOCATE_SYMBOL=123, DEC_SYMBOL=124, DECIMAL_NUM_SYMBOL=125, 
		DECIMAL_SYMBOL=126, DECLARE_SYMBOL=127, DEFAULT_SYMBOL=128, DEFAULT_AUTH_SYMBOL=129, 
		DEFINER_SYMBOL=130, DELAYED_SYMBOL=131, DELAY_KEY_WRITE_SYMBOL=132, DELETE_SYMBOL=133, 
		DESC_SYMBOL=134, DESCRIBE_SYMBOL=135, DES_KEY_FILE_SYMBOL=136, DETERMINISTIC_SYMBOL=137, 
		DIAGNOSTICS_SYMBOL=138, DIRECTORY_SYMBOL=139, DISABLE_SYMBOL=140, DISCARD_SYMBOL=141, 
		DISK_SYMBOL=142, DISTINCT_SYMBOL=143, DISTINCTROW_SYMBOL=144, DIV_SYMBOL=145, 
		DOUBLE_SYMBOL=146, DO_SYMBOL=147, DROP_SYMBOL=148, DUAL_SYMBOL=149, DUMPFILE_SYMBOL=150, 
		DUPLICATE_SYMBOL=151, DYNAMIC_SYMBOL=152, EACH_SYMBOL=153, ELSE_SYMBOL=154, 
		ELSEIF_SYMBOL=155, ENABLE_SYMBOL=156, ENCLOSED_SYMBOL=157, ENCRYPTION_SYMBOL=158, 
		END_SYMBOL=159, ENDS_SYMBOL=160, END_OF_INPUT_SYMBOL=161, ENGINES_SYMBOL=162, 
		ENGINE_SYMBOL=163, ENUM_SYMBOL=164, ERROR_SYMBOL=165, ERRORS_SYMBOL=166, 
		ESCAPED_SYMBOL=167, ESCAPE_SYMBOL=168, EVENTS_SYMBOL=169, EVENT_SYMBOL=170, 
		EVERY_SYMBOL=171, EXCHANGE_SYMBOL=172, EXECUTE_SYMBOL=173, EXISTS_SYMBOL=174, 
		EXIT_SYMBOL=175, EXPANSION_SYMBOL=176, EXPIRE_SYMBOL=177, EXPLAIN_SYMBOL=178, 
		EXPORT_SYMBOL=179, EXTENDED_SYMBOL=180, EXTENT_SIZE_SYMBOL=181, EXTRACT_SYMBOL=182, 
		FALSE_SYMBOL=183, FAST_SYMBOL=184, FAULTS_SYMBOL=185, FETCH_SYMBOL=186, 
		FIELDS_SYMBOL=187, FILE_SYMBOL=188, FILE_BLOCK_SIZE_SYMBOL=189, FILTER_SYMBOL=190, 
		FIRST_SYMBOL=191, FIXED_SYMBOL=192, FLOAT4_SYMBOL=193, FLOAT8_SYMBOL=194, 
		FLOAT_SYMBOL=195, FLUSH_SYMBOL=196, FOLLOWS_SYMBOL=197, FORCE_SYMBOL=198, 
		FOREIGN_SYMBOL=199, FOR_SYMBOL=200, FORMAT_SYMBOL=201, FOUND_SYMBOL=202, 
		FROM_SYMBOL=203, FULL_SYMBOL=204, FULLTEXT_SYMBOL=205, FUNCTION_SYMBOL=206, 
		GET_SYMBOL=207, GENERAL_SYMBOL=208, GENERATED_SYMBOL=209, GROUP_REPLICATION_SYMBOL=210, 
		GEOMETRYCOLLECTION_SYMBOL=211, GEOMETRY_SYMBOL=212, GET_FORMAT_SYMBOL=213, 
		GLOBAL_SYMBOL=214, GRANT_SYMBOL=215, GRANTS_SYMBOL=216, GROUP_SYMBOL=217, 
		GROUP_CONCAT_SYMBOL=218, HANDLER_SYMBOL=219, HASH_SYMBOL=220, HAVING_SYMBOL=221, 
		HELP_SYMBOL=222, HIGH_PRIORITY_SYMBOL=223, HOST_SYMBOL=224, HOSTS_SYMBOL=225, 
		HOUR_MICROSECOND_SYMBOL=226, HOUR_MINUTE_SYMBOL=227, HOUR_SECOND_SYMBOL=228, 
		HOUR_SYMBOL=229, IDENTIFIED_SYMBOL=230, IF_SYMBOL=231, IGNORE_SYMBOL=232, 
		IGNORE_SERVER_IDS_SYMBOL=233, IMPORT_SYMBOL=234, INDEXES_SYMBOL=235, INDEX_SYMBOL=236, 
		INFILE_SYMBOL=237, INITIAL_SIZE_SYMBOL=238, INNER_SYMBOL=239, INOUT_SYMBOL=240, 
		INSENSITIVE_SYMBOL=241, INSERT_SYMBOL=242, INSERT_METHOD_SYMBOL=243, INSTANCE_SYMBOL=244, 
		INSTALL_SYMBOL=245, INTEGER_SYMBOL=246, INTERVAL_SYMBOL=247, INTO_SYMBOL=248, 
		INT_SYMBOL=249, INVOKER_SYMBOL=250, IN_SYMBOL=251, IO_AFTER_GTIDS_SYMBOL=252, 
		IO_BEFORE_GTIDS_SYMBOL=253, IO_THREAD_SYMBOL=254, IO_SYMBOL=255, IPC_SYMBOL=256, 
		IS_SYMBOL=257, ISOLATION_SYMBOL=258, ISSUER_SYMBOL=259, ITERATE_SYMBOL=260, 
		JOIN_SYMBOL=261, JSON_SYMBOL=262, KEYS_SYMBOL=263, KEY_BLOCK_SIZE_SYMBOL=264, 
		KEY_SYMBOL=265, KILL_SYMBOL=266, LANGUAGE_SYMBOL=267, LAST_SYMBOL=268, 
		LEADING_SYMBOL=269, LEAVES_SYMBOL=270, LEAVE_SYMBOL=271, LEFT_SYMBOL=272, 
		LESS_SYMBOL=273, LEVEL_SYMBOL=274, LIKE_SYMBOL=275, LIMIT_SYMBOL=276, 
		LINEAR_SYMBOL=277, LINES_SYMBOL=278, LINESTRING_SYMBOL=279, LIST_SYMBOL=280, 
		LOAD_SYMBOL=281, LOCALTIME_SYMBOL=282, LOCALTIMESTAMP_SYMBOL=283, LOCAL_SYMBOL=284, 
		LOCATOR_SYMBOL=285, LOCKS_SYMBOL=286, LOCK_SYMBOL=287, LOGFILE_SYMBOL=288, 
		LOGS_SYMBOL=289, LONGBLOB_SYMBOL=290, LONGTEXT_SYMBOL=291, LONG_NUM_SYMBOL=292, 
		LONG_SYMBOL=293, LOOP_SYMBOL=294, LOW_PRIORITY_SYMBOL=295, MASTER_AUTO_POSITION_SYMBOL=296, 
		MASTER_BIND_SYMBOL=297, MASTER_CONNECT_RETRY_SYMBOL=298, MASTER_DELAY_SYMBOL=299, 
		MASTER_HOST_SYMBOL=300, MASTER_LOG_FILE_SYMBOL=301, MASTER_LOG_POS_SYMBOL=302, 
		MASTER_PASSWORD_SYMBOL=303, MASTER_PORT_SYMBOL=304, MASTER_RETRY_COUNT_SYMBOL=305, 
		MASTER_SERVER_ID_SYMBOL=306, MASTER_SSL_CAPATH_SYMBOL=307, MASTER_SSL_CA_SYMBOL=308, 
		MASTER_SSL_CERT_SYMBOL=309, MASTER_SSL_CIPHER_SYMBOL=310, MASTER_SSL_CRL_SYMBOL=311, 
		MASTER_SSL_CRLPATH_SYMBOL=312, MASTER_SSL_KEY_SYMBOL=313, MASTER_SSL_SYMBOL=314, 
		MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL=315, MASTER_SYMBOL=316, MASTER_TLS_VERSION_SYMBOL=317, 
		MASTER_USER_SYMBOL=318, MASTER_HEARTBEAT_PERIOD_SYMBOL=319, MATCH_SYMBOL=320, 
		MAX_CONNECTIONS_PER_HOUR_SYMBOL=321, MAX_QUERIES_PER_HOUR_SYMBOL=322, 
		MAX_ROWS_SYMBOL=323, MAX_SIZE_SYMBOL=324, MAX_STATEMENT_TIME_SYMBOL=325, 
		MAX_SYMBOL=326, MAX_UPDATES_PER_HOUR_SYMBOL=327, MAX_USER_CONNECTIONS_SYMBOL=328, 
		MAXVALUE_SYMBOL=329, MEDIUMBLOB_SYMBOL=330, MEDIUMINT_SYMBOL=331, MEDIUMTEXT_SYMBOL=332, 
		MEDIUM_SYMBOL=333, MEMORY_SYMBOL=334, MERGE_SYMBOL=335, MESSAGE_TEXT_SYMBOL=336, 
		MICROSECOND_SYMBOL=337, MID_SYMBOL=338, MIDDLEINT_SYMBOL=339, MIGRATE_SYMBOL=340, 
		MINUTE_MICROSECOND_SYMBOL=341, MINUTE_SECOND_SYMBOL=342, MINUTE_SYMBOL=343, 
		MIN_ROWS_SYMBOL=344, MIN_SYMBOL=345, MODE_SYMBOL=346, MODIFIES_SYMBOL=347, 
		MODIFY_SYMBOL=348, MOD_SYMBOL=349, MONTH_SYMBOL=350, MULTILINESTRING_SYMBOL=351, 
		MULTIPOINT_SYMBOL=352, MULTIPOLYGON_SYMBOL=353, MUTEX_SYMBOL=354, MySql_ERRNO_SYMBOL=355, 
		NAMES_SYMBOL=356, NAME_SYMBOL=357, NATIONAL_SYMBOL=358, NATURAL_SYMBOL=359, 
		NCHAR_STRING_SYMBOL=360, NCHAR_SYMBOL=361, NDB_SYMBOL=362, NDBCLUSTER_SYMBOL=363, 
		NEG_SYMBOL=364, NEVER_SYMBOL=365, NEW_SYMBOL=366, NEXT_SYMBOL=367, NODEGROUP_SYMBOL=368, 
		NONE_SYMBOL=369, NONBLOCKING_SYMBOL=370, NOT_SYMBOL=371, NOW_SYMBOL=372, 
		NO_SYMBOL=373, NO_WAIT_SYMBOL=374, NO_WRITE_TO_BINLOG_SYMBOL=375, NULL_SYMBOL=376, 
		NUMBER_SYMBOL=377, NUMERIC_SYMBOL=378, NVARCHAR_SYMBOL=379, OFFLINE_SYMBOL=380, 
		OFFSET_SYMBOL=381, OLD_PASSWORD_SYMBOL=382, ON_SYMBOL=383, ONE_SYMBOL=384, 
		ONLINE_SYMBOL=385, ONLY_SYMBOL=386, OPEN_SYMBOL=387, OPTIMIZE_SYMBOL=388, 
		OPTIMIZER_COSTS_SYMBOL=389, OPTIONS_SYMBOL=390, OPTION_SYMBOL=391, OPTIONALLY_SYMBOL=392, 
		ORDER_SYMBOL=393, OR_SYMBOL=394, OUTER_SYMBOL=395, OUTFILE_SYMBOL=396, 
		OUT_SYMBOL=397, OWNER_SYMBOL=398, PACK_KEYS_SYMBOL=399, PAGE_SYMBOL=400, 
		PARSER_SYMBOL=401, PARTIAL_SYMBOL=402, PARTITIONING_SYMBOL=403, PARTITIONS_SYMBOL=404, 
		PARTITION_SYMBOL=405, PASSWORD_SYMBOL=406, PHASE_SYMBOL=407, PLUGINS_SYMBOL=408, 
		PLUGIN_DIR_SYMBOL=409, PLUGIN_SYMBOL=410, POINT_SYMBOL=411, POLYGON_SYMBOL=412, 
		PORT_SYMBOL=413, POSITION_SYMBOL=414, PRECEDES_SYMBOL=415, PRECISION_SYMBOL=416, 
		PREPARE_SYMBOL=417, PRESERVE_SYMBOL=418, PREV_SYMBOL=419, PRIMARY_SYMBOL=420, 
		PRIVILEGES_SYMBOL=421, PROCEDURE_SYMBOL=422, PROCESS_SYMBOL=423, PROCESSLIST_SYMBOL=424, 
		PROFILE_SYMBOL=425, PROFILES_SYMBOL=426, PROXY_SYMBOL=427, PURGE_SYMBOL=428, 
		QUARTER_SYMBOL=429, QUERY_SYMBOL=430, QUICK_SYMBOL=431, RANGE_SYMBOL=432, 
		READS_SYMBOL=433, READ_ONLY_SYMBOL=434, READ_SYMBOL=435, READ_WRITE_SYMBOL=436, 
		REAL_SYMBOL=437, REBUILD_SYMBOL=438, RECOVER_SYMBOL=439, REDOFILE_SYMBOL=440, 
		REDO_BUFFER_SIZE_SYMBOL=441, REDUNDANT_SYMBOL=442, REFERENCES_SYMBOL=443, 
		REGEXP_SYMBOL=444, RELAY_SYMBOL=445, RELAYLOG_SYMBOL=446, RELAY_LOG_FILE_SYMBOL=447, 
		RELAY_LOG_POS_SYMBOL=448, RELAY_THREAD_SYMBOL=449, RELEASE_SYMBOL=450, 
		RELOAD_SYMBOL=451, REMOVE_SYMBOL=452, RENAME_SYMBOL=453, REORGANIZE_SYMBOL=454, 
		REPAIR_SYMBOL=455, REPEATABLE_SYMBOL=456, REPEAT_SYMBOL=457, REPLACE_SYMBOL=458, 
		REPLICATION_SYMBOL=459, REPLICATE_DO_DB_SYMBOL=460, REPLICATE_IGNORE_DB_SYMBOL=461, 
		REPLICATE_DO_TABLE_SYMBOL=462, REPLICATE_IGNORE_TABLE_SYMBOL=463, REPLICATE_WILD_DO_TABLE_SYMBOL=464, 
		REPLICATE_WILD_IGNORE_TABLE_SYMBOL=465, REPLICATE_REWRITE_DB_SYMBOL=466, 
		REQUIRE_SYMBOL=467, RESET_SYMBOL=468, RESIGNAL_SYMBOL=469, RESTORE_SYMBOL=470, 
		RESTRICT_SYMBOL=471, RESUME_SYMBOL=472, RETURNED_SQLSTATE_SYMBOL=473, 
		RETURNS_SYMBOL=474, RETURN_SYMBOL=475, REVERSE_SYMBOL=476, REVOKE_SYMBOL=477, 
		RIGHT_SYMBOL=478, RLIKE_SYMBOL=479, ROLLBACK_SYMBOL=480, ROLLUP_SYMBOL=481, 
		ROTATE_SYMBOL=482, ROUTINE_SYMBOL=483, ROWS_SYMBOL=484, ROW_COUNT_SYMBOL=485, 
		ROW_FORMAT_SYMBOL=486, ROW_SYMBOL=487, RTREE_SYMBOL=488, SAVEPOINT_SYMBOL=489, 
		SCHEDULE_SYMBOL=490, SCHEMA_SYMBOL=491, SCHEMA_NAME_SYMBOL=492, SCHEMAS_SYMBOL=493, 
		SECOND_MICROSECOND_SYMBOL=494, SECOND_SYMBOL=495, SECURITY_SYMBOL=496, 
		SELECT_SYMBOL=497, SENSITIVE_SYMBOL=498, SEPARATOR_SYMBOL=499, SERIALIZABLE_SYMBOL=500, 
		SERIAL_SYMBOL=501, SESSION_SYMBOL=502, SERVER_SYMBOL=503, SERVER_OPTIONS_SYMBOL=504, 
		SESSION_USER_SYMBOL=505, SET_SYMBOL=506, SET_VAR_SYMBOL=507, SHARE_SYMBOL=508, 
		SHOW_SYMBOL=509, SHUTDOWN_SYMBOL=510, SIGNAL_SYMBOL=511, SIGNED_SYMBOL=512, 
		SIMPLE_SYMBOL=513, SLAVE_SYMBOL=514, SLOW_SYMBOL=515, SMALLINT_SYMBOL=516, 
		SNAPSHOT_SYMBOL=517, SOME_SYMBOL=518, SOCKET_SYMBOL=519, SONAME_SYMBOL=520, 
		SOUNDS_SYMBOL=521, SOURCE_SYMBOL=522, SPATIAL_SYMBOL=523, SPECIFIC_SYMBOL=524, 
		SQLEXCEPTION_SYMBOL=525, SQLSTATE_SYMBOL=526, SQLWARNING_SYMBOL=527, SQL_AFTER_GTIDS_SYMBOL=528, 
		SQL_AFTER_MTS_GAPS_SYMBOL=529, SQL_BEFORE_GTIDS_SYMBOL=530, SQL_BIG_RESULT_SYMBOL=531, 
		SQL_BUFFER_RESULT_SYMBOL=532, SQL_CACHE_SYMBOL=533, SQL_CALC_FOUND_ROWS_SYMBOL=534, 
		SQL_NO_CACHE_SYMBOL=535, SQL_SMALL_RESULT_SYMBOL=536, SQL_SYMBOL=537, 
		SQL_THREAD_SYMBOL=538, SSL_SYMBOL=539, STACKED_SYMBOL=540, STARTING_SYMBOL=541, 
		STARTS_SYMBOL=542, START_SYMBOL=543, STATS_AUTO_RECALC_SYMBOL=544, STATS_PERSISTENT_SYMBOL=545, 
		STATS_SAMPLE_PAGES_SYMBOL=546, STATUS_SYMBOL=547, STDDEV_SAMP_SYMBOL=548, 
		STDDEV_SYMBOL=549, STDDEV_POP_SYMBOL=550, STD_SYMBOL=551, STOP_SYMBOL=552, 
		STORAGE_SYMBOL=553, STORED_SYMBOL=554, STRAIGHT_JOIN_SYMBOL=555, STRING_SYMBOL=556, 
		SUBCLASS_ORIGIN_SYMBOL=557, SUBDATE_SYMBOL=558, SUBJECT_SYMBOL=559, SUBPARTITIONS_SYMBOL=560, 
		SUBPARTITION_SYMBOL=561, SUBSTR_SYMBOL=562, SUBSTRING_SYMBOL=563, SUM_SYMBOL=564, 
		SUPER_SYMBOL=565, SUSPEND_SYMBOL=566, SWAPS_SYMBOL=567, SWITCHES_SYMBOL=568, 
		SYSDATE_SYMBOL=569, SYSTEM_USER_SYMBOL=570, TABLES_SYMBOL=571, TABLESPACE_SYMBOL=572, 
		TABLE_REF_PRIORITY_SYMBOL=573, TABLE_SYMBOL=574, TABLE_CHECKSUM_SYMBOL=575, 
		TABLE_NAME_SYMBOL=576, TEMPORARY_SYMBOL=577, TEMPTABLE_SYMBOL=578, TERMINATED_SYMBOL=579, 
		TEXT_SYMBOL=580, THAN_SYMBOL=581, THEN_SYMBOL=582, TIMESTAMP_SYMBOL=583, 
		TIMESTAMP_ADD_SYMBOL=584, TIMESTAMP_DIFF_SYMBOL=585, TIME_SYMBOL=586, 
		TINYBLOB_SYMBOL=587, TINYINT_SYMBOL=588, TINYTEXT_SYMBOL=589, TO_SYMBOL=590, 
		TRAILING_SYMBOL=591, TRANSACTION_SYMBOL=592, TRIGGERS_SYMBOL=593, TRIGGER_SYMBOL=594, 
		TRIM_SYMBOL=595, TRUE_SYMBOL=596, TRUNCATE_SYMBOL=597, TYPES_SYMBOL=598, 
		TYPE_SYMBOL=599, UDF_RETURNS_SYMBOL=600, UNCOMMITTED_SYMBOL=601, UNDEFINED_SYMBOL=602, 
		UNDOFILE_SYMBOL=603, UNDO_BUFFER_SIZE_SYMBOL=604, UNDO_SYMBOL=605, UNICODE_SYMBOL=606, 
		UNINSTALL_SYMBOL=607, UNION_SYMBOL=608, UNIQUE_SYMBOL=609, UNKNOWN_SYMBOL=610, 
		UNLOCK_SYMBOL=611, UNSIGNED_SYMBOL=612, UNTIL_SYMBOL=613, UPDATE_SYMBOL=614, 
		UPGRADE_SYMBOL=615, USAGE_SYMBOL=616, USER_RESOURCES_SYMBOL=617, USER_SYMBOL=618, 
		USE_FRM_SYMBOL=619, USE_SYMBOL=620, USING_SYMBOL=621, UTC_DATE_SYMBOL=622, 
		UTC_TIMESTAMP_SYMBOL=623, UTC_TIME_SYMBOL=624, VALIDATION_SYMBOL=625, 
		VALUES_SYMBOL=626, VALUE_SYMBOL=627, VARBINARY_SYMBOL=628, VARCHAR_SYMBOL=629, 
		VARCHARACTER_SYMBOL=630, VARIABLES_SYMBOL=631, VARIANCE_SYMBOL=632, VARYING_SYMBOL=633, 
		VAR_POP_SYMBOL=634, VAR_SAMP_SYMBOL=635, VIEW_SYMBOL=636, VIRTUAL_SYMBOL=637, 
		WAIT_SYMBOL=638, WARNINGS_SYMBOL=639, WEEK_SYMBOL=640, WEIGHT_STRING_SYMBOL=641, 
		WHEN_SYMBOL=642, WHERE_SYMBOL=643, WHILE_SYMBOL=644, WITH_SYMBOL=645, 
		WITHOUT_SYMBOL=646, WORK_SYMBOL=647, WRAPPER_SYMBOL=648, WRITE_SYMBOL=649, 
		X509_SYMBOL=650, XA_SYMBOL=651, XID_SYMBOL=652, XML_SYMBOL=653, XOR_SYMBOL=654, 
		YEAR_MONTH_SYMBOL=655, YEAR_SYMBOL=656, ZEROFILL_SYMBOL=657, PERSIST_SYMBOL=658, 
		ROLE_SYMBOL=659, ADMIN_SYMBOL=660, INVISIBLE_SYMBOL=661, VISIBLE_SYMBOL=662, 
		EXCEPT_SYMBOL=663, COMPONENT_SYMBOL=664, RECURSIVE_SYMBOL=665, JSON_OBJECTAGG_SYMBOL=666, 
		JSON_ARRAYAGG_SYMBOL=667, OF_SYMBOL=668, SKIP_SYMBOL=669, LOCKED_SYMBOL=670, 
		NOWAIT_SYMBOL=671, GROUPING_SYMBOL=672, PERSIST_ONLY_SYMBOL=673, HISTOGRAM_SYMBOL=674, 
		BUCKETS_SYMBOL=675, REMOTE_SYMBOL=676, CLONE_SYMBOL=677, CUME_DIST_SYMBOL=678, 
		DENSE_RANK_SYMBOL=679, EXCLUDE_SYMBOL=680, FIRST_VALUE_SYMBOL=681, FOLLOWING_SYMBOL=682, 
		GROUPS_SYMBOL=683, LAG_SYMBOL=684, LAST_VALUE_SYMBOL=685, LEAD_SYMBOL=686, 
		NTH_VALUE_SYMBOL=687, NTILE_SYMBOL=688, NULLS_SYMBOL=689, OTHERS_SYMBOL=690, 
		OVER_SYMBOL=691, PERCENT_RANK_SYMBOL=692, PRECEDING_SYMBOL=693, RANK_SYMBOL=694, 
		RESPECT_SYMBOL=695, ROW_NUMBER_SYMBOL=696, TIES_SYMBOL=697, UNBOUNDED_SYMBOL=698, 
		WINDOW_SYMBOL=699, EMPTY_SYMBOL=700, JSON_TABLE_SYMBOL=701, NESTED_SYMBOL=702, 
		ORDINALITY_SYMBOL=703, PATH_SYMBOL=704, HISTORY_SYMBOL=705, REUSE_SYMBOL=706, 
		SRID_SYMBOL=707, THREAD_PRIORITY_SYMBOL=708, RESOURCE_SYMBOL=709, SYSTEM_SYMBOL=710, 
		VCPU_SYMBOL=711, MASTER_PUBLIC_KEY_PATH_SYMBOL=712, GET_MASTER_PUBLIC_KEY_SYMBOL=713, 
		RESTART_SYMBOL=714, DEFINITION_SYMBOL=715, DESCRIPTION_SYMBOL=716, ORGANIZATION_SYMBOL=717, 
		REFERENCE_SYMBOL=718, OPTIONAL_SYMBOL=719, SECONDARY_SYMBOL=720, SECONDARY_ENGINE_SYMBOL=721, 
		SECONDARY_LOAD_SYMBOL=722, SECONDARY_UNLOAD_SYMBOL=723, ACTIVE_SYMBOL=724, 
		INACTIVE_SYMBOL=725, LATERAL_SYMBOL=726, RETAIN_SYMBOL=727, OLD_SYMBOL=728, 
		NETWORK_NAMESPACE_SYMBOL=729, ENFORCED_SYMBOL=730, ARRAY_SYMBOL=731, OJ_SYMBOL=732, 
		MEMBER_SYMBOL=733, RANDOM_SYMBOL=734, MASTER_COMPRESSION_ALGORITHM_SYMBOL=735, 
		MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL=736, PRIVILEGE_CHECKS_USER_SYMBOL=737, 
		MASTER_TLS_CIPHERSUITES_SYMBOL=738, REQUIRE_ROW_FORMAT_SYMBOL=739, PASSWORD_LOCK_TIME_SYMBOL=740, 
		FAILED_LOGIN_ATTEMPTS_SYMBOL=741, REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL=742, 
		STREAM_SYMBOL=743, OFF_SYMBOL=744, NOT2_SYMBOL=745, CONCAT_PIPES_SYMBOL=746, 
		INT_NUMBER=747, LONG_NUMBER=748, ULONGLONG_NUMBER=749, EQUAL_OPERATOR=750, 
		ASSIGN_OPERATOR=751, NULL_SAFE_EQUAL_OPERATOR=752, GREATER_OR_EQUAL_OPERATOR=753, 
		GREATER_THAN_OPERATOR=754, LESS_OR_EQUAL_OPERATOR=755, LESS_THAN_OPERATOR=756, 
		NOT_EQUAL_OPERATOR=757, PLUS_OPERATOR=758, MINUS_OPERATOR=759, MULT_OPERATOR=760, 
		DIV_OPERATOR=761, MOD_OPERATOR=762, LOGICAL_NOT_OPERATOR=763, BITWISE_NOT_OPERATOR=764, 
		SHIFT_LEFT_OPERATOR=765, SHIFT_RIGHT_OPERATOR=766, LOGICAL_AND_OPERATOR=767, 
		BITWISE_AND_OPERATOR=768, BITWISE_XOR_OPERATOR=769, LOGICAL_OR_OPERATOR=770, 
		BITWISE_OR_OPERATOR=771, DOT_SYMBOL=772, COMMA_SYMBOL=773, SEMICOLON_SYMBOL=774, 
		COLON_SYMBOL=775, OPEN_PAR_SYMBOL=776, CLOSE_PAR_SYMBOL=777, OPEN_CURLY_SYMBOL=778, 
		CLOSE_CURLY_SYMBOL=779, UNDERLINE_SYMBOL=780, JSON_SEPARATOR_SYMBOL=781, 
		JSON_UNQUOTED_SEPARATOR_SYMBOL=782, AT_SIGN_SYMBOL=783, AT_TEXT_SUFFIX=784, 
		AT_AT_SIGN_SYMBOL=785, NULL2_SYMBOL=786, PARAM_MARKER=787, HEX_NUMBER=788, 
		BIN_NUMBER=789, DECIMAL_NUMBER=790, FLOAT_NUMBER=791, WHITESPACE=792, 
		INVALID_INPUT=793, UNDERSCORE_CHARSET=794, IDENTIFIER=795, NCHAR_TEXT=796, 
		BACK_TICK_QUOTED_ID=797, DOUBLE_QUOTED_TEXT=798, SINGLE_QUOTED_TEXT=799, 
		VERSION_COMMENT_START=800, MySql_COMMENT_START=801, VERSION_COMMENT_END=802, 
		BLOCK_COMMENT=803, POUND_COMMENT=804, DASHDASH_COMMENT=805, NOT_EQUAL2_OPERATOR=806;
	public const int
		RULE_query = 0, RULE_simpleStatement = 1, RULE_alterStatement = 2, RULE_alterDatabase = 3, 
		RULE_alterEvent = 4, RULE_alterLogfileGroup = 5, RULE_alterLogfileGroupOptions = 6, 
		RULE_alterLogfileGroupOption = 7, RULE_alterServer = 8, RULE_alterTable = 9, 
		RULE_alterTableActions = 10, RULE_alterCommandList = 11, RULE_alterCommandsModifierList = 12, 
		RULE_standaloneAlterCommands = 13, RULE_alterPartition = 14, RULE_alterList = 15, 
		RULE_alterCommandsModifier = 16, RULE_alterListItem = 17, RULE_place = 18, 
		RULE_restrict = 19, RULE_alterOrderList = 20, RULE_alterAlgorithmOption = 21, 
		RULE_alterLockOption = 22, RULE_indexLockAndAlgorithm = 23, RULE_withValidation = 24, 
		RULE_removePartitioning = 25, RULE_allOrPartitionNameList = 26, RULE_alterTablespace = 27, 
		RULE_alterUndoTablespace = 28, RULE_undoTableSpaceOptions = 29, RULE_undoTableSpaceOption = 30, 
		RULE_alterTablespaceOptions = 31, RULE_alterTablespaceOption = 32, RULE_changeTablespaceOption = 33, 
		RULE_alterView = 34, RULE_viewTail = 35, RULE_viewSelect = 36, RULE_viewCheckOption = 37, 
		RULE_createStatement = 38, RULE_createDatabase = 39, RULE_createDatabaseOption = 40, 
		RULE_createTable = 41, RULE_tableElementList = 42, RULE_tableElement = 43, 
		RULE_duplicateAsQueryExpression = 44, RULE_queryExpressionOrParens = 45, 
		RULE_createRoutine = 46, RULE_createProcedure = 47, RULE_createFunction = 48, 
		RULE_createUdf = 49, RULE_routineCreateOption = 50, RULE_routineAlterOptions = 51, 
		RULE_routineOption = 52, RULE_createIndex = 53, RULE_indexNameAndType = 54, 
		RULE_createIndexTarget = 55, RULE_createLogfileGroup = 56, RULE_logfileGroupOptions = 57, 
		RULE_logfileGroupOption = 58, RULE_createServer = 59, RULE_serverOptions = 60, 
		RULE_serverOption = 61, RULE_createTablespace = 62, RULE_createUndoTablespace = 63, 
		RULE_tsDataFileName = 64, RULE_tsDataFile = 65, RULE_tablespaceOptions = 66, 
		RULE_tablespaceOption = 67, RULE_tsOptionInitialSize = 68, RULE_tsOptionUndoRedoBufferSize = 69, 
		RULE_tsOptionAutoextendSize = 70, RULE_tsOptionMaxSize = 71, RULE_tsOptionExtentSize = 72, 
		RULE_tsOptionNodegroup = 73, RULE_tsOptionEngine = 74, RULE_tsOptionWait = 75, 
		RULE_tsOptionComment = 76, RULE_tsOptionFileblockSize = 77, RULE_tsOptionEncryption = 78, 
		RULE_createView = 79, RULE_viewReplaceOrAlgorithm = 80, RULE_viewAlgorithm = 81, 
		RULE_viewSuid = 82, RULE_createTrigger = 83, RULE_triggerFollowsPrecedesClause = 84, 
		RULE_createEvent = 85, RULE_createRole = 86, RULE_createSpatialReference = 87, 
		RULE_srsAttribute = 88, RULE_dropStatement = 89, RULE_dropDatabase = 90, 
		RULE_dropEvent = 91, RULE_dropFunction = 92, RULE_dropProcedure = 93, 
		RULE_dropIndex = 94, RULE_dropLogfileGroup = 95, RULE_dropLogfileGroupOption = 96, 
		RULE_dropServer = 97, RULE_dropTable = 98, RULE_dropTableSpace = 99, RULE_dropTrigger = 100, 
		RULE_dropView = 101, RULE_dropRole = 102, RULE_dropSpatialReference = 103, 
		RULE_dropUndoTablespace = 104, RULE_renameTableStatement = 105, RULE_renamePair = 106, 
		RULE_truncateTableStatement = 107, RULE_importStatement = 108, RULE_callStatement = 109, 
		RULE_deleteStatement = 110, RULE_partitionDelete = 111, RULE_deleteStatementOption = 112, 
		RULE_doStatement = 113, RULE_handlerStatement = 114, RULE_handlerReadOrScan = 115, 
		RULE_insertStatement = 116, RULE_insertLockOption = 117, RULE_insertFromConstructor = 118, 
		RULE_fields = 119, RULE_insertValues = 120, RULE_insertQueryExpression = 121, 
		RULE_valueList = 122, RULE_values = 123, RULE_valuesReference = 124, RULE_insertUpdateList = 125, 
		RULE_loadStatement = 126, RULE_dataOrXml = 127, RULE_xmlRowsIdentifiedBy = 128, 
		RULE_loadDataFileTail = 129, RULE_loadDataFileTargetList = 130, RULE_fieldOrVariableList = 131, 
		RULE_replaceStatement = 132, RULE_selectStatement = 133, RULE_selectStatementWithInto = 134, 
		RULE_queryExpression = 135, RULE_queryExpressionBody = 136, RULE_queryExpressionParens = 137, 
		RULE_queryPrimary = 138, RULE_querySpecification = 139, RULE_subquery = 140, 
		RULE_querySpecOption = 141, RULE_limitClause = 142, RULE_simpleLimitClause = 143, 
		RULE_limitOptions = 144, RULE_limitOption = 145, RULE_intoClause = 146, 
		RULE_procedureAnalyseClause = 147, RULE_havingClause = 148, RULE_windowClause = 149, 
		RULE_windowDefinition = 150, RULE_windowSpec = 151, RULE_windowSpecDetails = 152, 
		RULE_windowFrameClause = 153, RULE_windowFrameUnits = 154, RULE_windowFrameExtent = 155, 
		RULE_windowFrameStart = 156, RULE_windowFrameBetween = 157, RULE_windowFrameBound = 158, 
		RULE_windowFrameExclusion = 159, RULE_withClause = 160, RULE_commonTableExpression = 161, 
		RULE_groupByClause = 162, RULE_olapOption = 163, RULE_orderClause = 164, 
		RULE_direction = 165, RULE_fromClause = 166, RULE_tableReferenceList = 167, 
		RULE_tableValueConstructor = 168, RULE_explicitTable = 169, RULE_rowValueExplicit = 170, 
		RULE_selectOption = 171, RULE_lockingClauseList = 172, RULE_lockingClause = 173, 
		RULE_lockStrengh = 174, RULE_lockedRowAction = 175, RULE_selectItemList = 176, 
		RULE_selectItem = 177, RULE_selectAlias = 178, RULE_whereClause = 179, 
		RULE_tableReference = 180, RULE_escapedTableReference = 181, RULE_joinedTable = 182, 
		RULE_naturalJoinType = 183, RULE_innerJoinType = 184, RULE_outerJoinType = 185, 
		RULE_tableFactor = 186, RULE_singleTable = 187, RULE_singleTableParens = 188, 
		RULE_derivedTable = 189, RULE_tableReferenceListParens = 190, RULE_tableFunction = 191, 
		RULE_columnsClause = 192, RULE_jtColumn = 193, RULE_onEmptyOrError = 194, 
		RULE_onEmpty = 195, RULE_onError = 196, RULE_jtOnResponse = 197, RULE_unionOption = 198, 
		RULE_tableAlias = 199, RULE_indexHintList = 200, RULE_indexHint = 201, 
		RULE_indexHintType = 202, RULE_keyOrIndex = 203, RULE_constraintKeyType = 204, 
		RULE_indexHintClause = 205, RULE_indexList = 206, RULE_indexListElement = 207, 
		RULE_updateStatement = 208, RULE_transactionOrLockingStatement = 209, 
		RULE_transactionStatement = 210, RULE_beginWork = 211, RULE_transactionCharacteristic = 212, 
		RULE_savepointStatement = 213, RULE_lockStatement = 214, RULE_lockItem = 215, 
		RULE_lockOption = 216, RULE_xaStatement = 217, RULE_xaConvert = 218, RULE_xid = 219, 
		RULE_replicationStatement = 220, RULE_resetOption = 221, RULE_masterResetOptions = 222, 
		RULE_replicationLoad = 223, RULE_changeMaster = 224, RULE_changeMasterOptions = 225, 
		RULE_masterOption = 226, RULE_privilegeCheckDef = 227, RULE_tablePrimaryKeyCheckDef = 228, 
		RULE_masterTlsCiphersuitesDef = 229, RULE_masterFileDef = 230, RULE_serverIdList = 231, 
		RULE_changeReplication = 232, RULE_filterDefinition = 233, RULE_filterDbList = 234, 
		RULE_filterTableList = 235, RULE_filterStringList = 236, RULE_filterWildDbTableString = 237, 
		RULE_filterDbPairList = 238, RULE_slave = 239, RULE_slaveUntilOptions = 240, 
		RULE_slaveConnectionOptions = 241, RULE_slaveThreadOptions = 242, RULE_slaveThreadOption = 243, 
		RULE_groupReplication = 244, RULE_preparedStatement = 245, RULE_executeStatement = 246, 
		RULE_executeVarList = 247, RULE_cloneStatement = 248, RULE_dataDirSSL = 249, 
		RULE_ssl = 250, RULE_accountManagementStatement = 251, RULE_alterUser = 252, 
		RULE_alterUserTail = 253, RULE_userFunction = 254, RULE_createUser = 255, 
		RULE_createUserTail = 256, RULE_defaultRoleClause = 257, RULE_requireClause = 258, 
		RULE_connectOptions = 259, RULE_accountLockPasswordExpireOptions = 260, 
		RULE_dropUser = 261, RULE_grant = 262, RULE_grantTargetList = 263, RULE_grantOptions = 264, 
		RULE_exceptRoleList = 265, RULE_withRoles = 266, RULE_grantAs = 267, RULE_versionedRequireClause = 268, 
		RULE_renameUser = 269, RULE_revoke = 270, RULE_onTypeTo = 271, RULE_aclType = 272, 
		RULE_roleOrPrivilegesList = 273, RULE_roleOrPrivilege = 274, RULE_grantIdentifier = 275, 
		RULE_requireList = 276, RULE_requireListElement = 277, RULE_grantOption = 278, 
		RULE_setRole = 279, RULE_roleList = 280, RULE_role = 281, RULE_tableAdministrationStatement = 282, 
		RULE_histogram = 283, RULE_checkOption = 284, RULE_repairType = 285, RULE_installUninstallStatment = 286, 
		RULE_setStatement = 287, RULE_startOptionValueList = 288, RULE_transactionCharacteristics = 289, 
		RULE_transactionAccessMode = 290, RULE_isolationLevel = 291, RULE_optionValueListContinued = 292, 
		RULE_optionValueNoOptionType = 293, RULE_optionValue = 294, RULE_setSystemVariable = 295, 
		RULE_startOptionValueListFollowingOptionType = 296, RULE_optionValueFollowingOptionType = 297, 
		RULE_setExprOrDefault = 298, RULE_showStatement = 299, RULE_showCommandType = 300, 
		RULE_nonBlocking = 301, RULE_fromOrIn = 302, RULE_inDb = 303, RULE_profileType = 304, 
		RULE_otherAdministrativeStatement = 305, RULE_keyCacheListOrParts = 306, 
		RULE_keyCacheList = 307, RULE_assignToKeycache = 308, RULE_assignToKeycachePartition = 309, 
		RULE_cacheKeyList = 310, RULE_keyUsageElement = 311, RULE_keyUsageList = 312, 
		RULE_flushOption = 313, RULE_logType = 314, RULE_flushTables = 315, RULE_flushTablesOptions = 316, 
		RULE_preloadTail = 317, RULE_preloadList = 318, RULE_preloadKeys = 319, 
		RULE_adminPartition = 320, RULE_resourceGroupManagement = 321, RULE_createResourceGroup = 322, 
		RULE_resourceGroupVcpuList = 323, RULE_vcpuNumOrRange = 324, RULE_resourceGroupPriority = 325, 
		RULE_resourceGroupEnableDisable = 326, RULE_alterResourceGroup = 327, 
		RULE_setResourceGroup = 328, RULE_threadIdList = 329, RULE_dropResourceGroup = 330, 
		RULE_utilityStatement = 331, RULE_describeStatement = 332, RULE_explainStatement = 333, 
		RULE_explainableStatement = 334, RULE_helpCommand = 335, RULE_useCommand = 336, 
		RULE_restartServer = 337, RULE_expr = 338, RULE_boolPri = 339, RULE_compOp = 340, 
		RULE_predicate = 341, RULE_predicateOperations = 342, RULE_bitExpr = 343, 
		RULE_simpleExpr = 344, RULE_arrayCast = 345, RULE_jsonOperator = 346, 
		RULE_sumExpr = 347, RULE_groupingOperation = 348, RULE_windowFunctionCall = 349, 
		RULE_windowingClause = 350, RULE_leadLagInfo = 351, RULE_nullTreatment = 352, 
		RULE_jsonFunction = 353, RULE_inSumExpr = 354, RULE_identListArg = 355, 
		RULE_identList = 356, RULE_fulltextOptions = 357, RULE_runtimeFunctionCall = 358, 
		RULE_geometryFunction = 359, RULE_timeFunctionParameters = 360, RULE_fractionalPrecision = 361, 
		RULE_weightStringLevels = 362, RULE_weightStringLevelListItem = 363, RULE_dateTimeTtype = 364, 
		RULE_trimFunction = 365, RULE_substringFunction = 366, RULE_functionCall = 367, 
		RULE_udfExprList = 368, RULE_udfExpr = 369, RULE_variable = 370, RULE_userVariable = 371, 
		RULE_systemVariable = 372, RULE_internalVariableName = 373, RULE_whenExpression = 374, 
		RULE_thenExpression = 375, RULE_elseExpression = 376, RULE_castType = 377, 
		RULE_exprList = 378, RULE_charset = 379, RULE_notRule = 380, RULE_not2Rule = 381, 
		RULE_interval = 382, RULE_intervalTimeStamp = 383, RULE_exprListWithParentheses = 384, 
		RULE_exprWithParentheses = 385, RULE_simpleExprWithParentheses = 386, 
		RULE_orderList = 387, RULE_orderExpression = 388, RULE_groupList = 389, 
		RULE_groupingExpression = 390, RULE_channel = 391, RULE_compoundStatement = 392, 
		RULE_returnStatement = 393, RULE_ifStatement = 394, RULE_ifBody = 395, 
		RULE_thenStatement = 396, RULE_compoundStatementList = 397, RULE_caseStatement = 398, 
		RULE_elseStatement = 399, RULE_labeledBlock = 400, RULE_unlabeledBlock = 401, 
		RULE_label = 402, RULE_beginEndBlock = 403, RULE_labeledControl = 404, 
		RULE_unlabeledControl = 405, RULE_loopBlock = 406, RULE_whileDoBlock = 407, 
		RULE_repeatUntilBlock = 408, RULE_spDeclarations = 409, RULE_spDeclaration = 410, 
		RULE_variableDeclaration = 411, RULE_conditionDeclaration = 412, RULE_spCondition = 413, 
		RULE_sqlstate = 414, RULE_handlerDeclaration = 415, RULE_handlerCondition = 416, 
		RULE_cursorDeclaration = 417, RULE_iterateStatement = 418, RULE_leaveStatement = 419, 
		RULE_getDiagnostics = 420, RULE_signalAllowedExpr = 421, RULE_statementInformationItem = 422, 
		RULE_conditionInformationItem = 423, RULE_signalInformationItemName = 424, 
		RULE_signalStatement = 425, RULE_resignalStatement = 426, RULE_signalInformationItem = 427, 
		RULE_cursorOpen = 428, RULE_cursorClose = 429, RULE_cursorFetch = 430, 
		RULE_schedule = 431, RULE_columnDefinition = 432, RULE_checkOrReferences = 433, 
		RULE_checkConstraint = 434, RULE_constraintEnforcement = 435, RULE_tableConstraintDef = 436, 
		RULE_constraintName = 437, RULE_fieldDefinition = 438, RULE_columnAttribute = 439, 
		RULE_columnFormat = 440, RULE_storageMedia = 441, RULE_gcolAttribute = 442, 
		RULE_references = 443, RULE_deleteOption = 444, RULE_keyList = 445, RULE_keyPart = 446, 
		RULE_keyListWithExpression = 447, RULE_keyPartOrExpression = 448, RULE_keyListVariants = 449, 
		RULE_indexType = 450, RULE_indexOption = 451, RULE_commonIndexOption = 452, 
		RULE_visibility = 453, RULE_indexTypeClause = 454, RULE_fulltextIndexOption = 455, 
		RULE_spatialIndexOption = 456, RULE_dataTypeDefinition = 457, RULE_dataType = 458, 
		RULE_nchar = 459, RULE_realType = 460, RULE_fieldLength = 461, RULE_fieldOptions = 462, 
		RULE_charsetWithOptBinary = 463, RULE_ascii = 464, RULE_unicode = 465, 
		RULE_wsNumCodepoints = 466, RULE_typeDatetimePrecision = 467, RULE_charsetName = 468, 
		RULE_collationName = 469, RULE_createTableOptions = 470, RULE_createTableOptionsSpaceSeparated = 471, 
		RULE_createTableOption = 472, RULE_ternaryOption = 473, RULE_defaultCollation = 474, 
		RULE_defaultEncryption = 475, RULE_defaultCharset = 476, RULE_partitionClause = 477, 
		RULE_partitionTypeDef = 478, RULE_subPartitions = 479, RULE_partitionKeyAlgorithm = 480, 
		RULE_partitionDefinitions = 481, RULE_partitionDefinition = 482, RULE_partitionValuesIn = 483, 
		RULE_partitionOption = 484, RULE_subpartitionDefinition = 485, RULE_partitionValueItemListParen = 486, 
		RULE_partitionValueItem = 487, RULE_definerClause = 488, RULE_ifExists = 489, 
		RULE_ifNotExists = 490, RULE_procedureParameter = 491, RULE_functionParameter = 492, 
		RULE_collate = 493, RULE_typeWithOptCollate = 494, RULE_schemaIdentifierPair = 495, 
		RULE_viewRefList = 496, RULE_updateList = 497, RULE_updateElement = 498, 
		RULE_charsetClause = 499, RULE_fieldsClause = 500, RULE_fieldTerm = 501, 
		RULE_linesClause = 502, RULE_lineTerm = 503, RULE_userList = 504, RULE_createUserList = 505, 
		RULE_alterUserList = 506, RULE_createUserEntry = 507, RULE_alterUserEntry = 508, 
		RULE_retainCurrentPassword = 509, RULE_discardOldPassword = 510, RULE_replacePassword = 511, 
		RULE_userIdentifierOrText = 512, RULE_user = 513, RULE_likeClause = 514, 
		RULE_likeOrWhere = 515, RULE_onlineOption = 516, RULE_noWriteToBinLog = 517, 
		RULE_usePartition = 518, RULE_fieldIdentifier = 519, RULE_columnName = 520, 
		RULE_columnInternalRef = 521, RULE_columnInternalRefList = 522, RULE_columnRef = 523, 
		RULE_insertIdentifier = 524, RULE_indexName = 525, RULE_indexRef = 526, 
		RULE_tableWild = 527, RULE_schemaName = 528, RULE_schemaRef = 529, RULE_procedureName = 530, 
		RULE_procedureRef = 531, RULE_functionName = 532, RULE_functionRef = 533, 
		RULE_triggerName = 534, RULE_triggerRef = 535, RULE_viewName = 536, RULE_viewRef = 537, 
		RULE_tablespaceName = 538, RULE_tablespaceRef = 539, RULE_logfileGroupName = 540, 
		RULE_logfileGroupRef = 541, RULE_eventName = 542, RULE_eventRef = 543, 
		RULE_udfName = 544, RULE_serverName = 545, RULE_serverRef = 546, RULE_engineRef = 547, 
		RULE_tableName = 548, RULE_filterTableRef = 549, RULE_tableRefWithWildcard = 550, 
		RULE_tableRef = 551, RULE_tableRefList = 552, RULE_tableAliasRefList = 553, 
		RULE_parameterName = 554, RULE_labelIdentifier = 555, RULE_labelRef = 556, 
		RULE_roleIdentifier = 557, RULE_roleRef = 558, RULE_pluginRef = 559, RULE_componentRef = 560, 
		RULE_resourceGroupRef = 561, RULE_windowName = 562, RULE_pureIdentifier = 563, 
		RULE_identifier = 564, RULE_identifierList = 565, RULE_identifierListWithParentheses = 566, 
		RULE_qualifiedIdentifier = 567, RULE_simpleIdentifier = 568, RULE_dotIdentifier = 569, 
		RULE_ulong_number = 570, RULE_real_ulong_number = 571, RULE_ulonglong_number = 572, 
		RULE_real_ulonglong_number = 573, RULE_literal = 574, RULE_signedLiteral = 575, 
		RULE_stringList = 576, RULE_textStringLiteral = 577, RULE_textString = 578, 
		RULE_textStringHash = 579, RULE_textLiteral = 580, RULE_textStringNoLinebreak = 581, 
		RULE_textStringLiteralList = 582, RULE_numLiteral = 583, RULE_boolLiteral = 584, 
		RULE_nullLiteral = 585, RULE_temporalLiteral = 586, RULE_floatOptions = 587, 
		RULE_standardFloatOptions = 588, RULE_precision = 589, RULE_textOrIdentifier = 590, 
		RULE_lValueIdentifier = 591, RULE_roleIdentifierOrText = 592, RULE_sizeNumber = 593, 
		RULE_parentheses = 594, RULE_equal = 595, RULE_optionType = 596, RULE_varIdentType = 597, 
		RULE_setVarIdentType = 598, RULE_identifierKeyword = 599, RULE_identifierKeywordsAmbiguous1RolesAndLabels = 600, 
		RULE_identifierKeywordsAmbiguous2Labels = 601, RULE_labelKeyword = 602, 
		RULE_identifierKeywordsAmbiguous3Roles = 603, RULE_identifierKeywordsUnambiguous = 604, 
		RULE_roleKeyword = 605, RULE_lValueKeyword = 606, RULE_identifierKeywordsAmbiguous4SystemVariables = 607, 
		RULE_roleOrIdentifierKeyword = 608, RULE_roleOrLabelKeyword = 609;
	public static readonly string[] ruleNames = {
		"query", "simpleStatement", "alterStatement", "alterDatabase", "alterEvent", 
		"alterLogfileGroup", "alterLogfileGroupOptions", "alterLogfileGroupOption", 
		"alterServer", "alterTable", "alterTableActions", "alterCommandList", 
		"alterCommandsModifierList", "standaloneAlterCommands", "alterPartition", 
		"alterList", "alterCommandsModifier", "alterListItem", "place", "restrict", 
		"alterOrderList", "alterAlgorithmOption", "alterLockOption", "indexLockAndAlgorithm", 
		"withValidation", "removePartitioning", "allOrPartitionNameList", "alterTablespace", 
		"alterUndoTablespace", "undoTableSpaceOptions", "undoTableSpaceOption", 
		"alterTablespaceOptions", "alterTablespaceOption", "changeTablespaceOption", 
		"alterView", "viewTail", "viewSelect", "viewCheckOption", "createStatement", 
		"createDatabase", "createDatabaseOption", "createTable", "tableElementList", 
		"tableElement", "duplicateAsQueryExpression", "queryExpressionOrParens", 
		"createRoutine", "createProcedure", "createFunction", "createUdf", "routineCreateOption", 
		"routineAlterOptions", "routineOption", "createIndex", "indexNameAndType", 
		"createIndexTarget", "createLogfileGroup", "logfileGroupOptions", "logfileGroupOption", 
		"createServer", "serverOptions", "serverOption", "createTablespace", "createUndoTablespace", 
		"tsDataFileName", "tsDataFile", "tablespaceOptions", "tablespaceOption", 
		"tsOptionInitialSize", "tsOptionUndoRedoBufferSize", "tsOptionAutoextendSize", 
		"tsOptionMaxSize", "tsOptionExtentSize", "tsOptionNodegroup", "tsOptionEngine", 
		"tsOptionWait", "tsOptionComment", "tsOptionFileblockSize", "tsOptionEncryption", 
		"createView", "viewReplaceOrAlgorithm", "viewAlgorithm", "viewSuid", "createTrigger", 
		"triggerFollowsPrecedesClause", "createEvent", "createRole", "createSpatialReference", 
		"srsAttribute", "dropStatement", "dropDatabase", "dropEvent", "dropFunction", 
		"dropProcedure", "dropIndex", "dropLogfileGroup", "dropLogfileGroupOption", 
		"dropServer", "dropTable", "dropTableSpace", "dropTrigger", "dropView", 
		"dropRole", "dropSpatialReference", "dropUndoTablespace", "renameTableStatement", 
		"renamePair", "truncateTableStatement", "importStatement", "callStatement", 
		"deleteStatement", "partitionDelete", "deleteStatementOption", "doStatement", 
		"handlerStatement", "handlerReadOrScan", "insertStatement", "insertLockOption", 
		"insertFromConstructor", "fields", "insertValues", "insertQueryExpression", 
		"valueList", "values", "valuesReference", "insertUpdateList", "loadStatement", 
		"dataOrXml", "xmlRowsIdentifiedBy", "loadDataFileTail", "loadDataFileTargetList", 
		"fieldOrVariableList", "replaceStatement", "selectStatement", "selectStatementWithInto", 
		"queryExpression", "queryExpressionBody", "queryExpressionParens", "queryPrimary", 
		"querySpecification", "subquery", "querySpecOption", "limitClause", "simpleLimitClause", 
		"limitOptions", "limitOption", "intoClause", "procedureAnalyseClause", 
		"havingClause", "windowClause", "windowDefinition", "windowSpec", "windowSpecDetails", 
		"windowFrameClause", "windowFrameUnits", "windowFrameExtent", "windowFrameStart", 
		"windowFrameBetween", "windowFrameBound", "windowFrameExclusion", "withClause", 
		"commonTableExpression", "groupByClause", "olapOption", "orderClause", 
		"direction", "fromClause", "tableReferenceList", "tableValueConstructor", 
		"explicitTable", "rowValueExplicit", "selectOption", "lockingClauseList", 
		"lockingClause", "lockStrengh", "lockedRowAction", "selectItemList", "selectItem", 
		"selectAlias", "whereClause", "tableReference", "escapedTableReference", 
		"joinedTable", "naturalJoinType", "innerJoinType", "outerJoinType", "tableFactor", 
		"singleTable", "singleTableParens", "derivedTable", "tableReferenceListParens", 
		"tableFunction", "columnsClause", "jtColumn", "onEmptyOrError", "onEmpty", 
		"onError", "jtOnResponse", "unionOption", "tableAlias", "indexHintList", 
		"indexHint", "indexHintType", "keyOrIndex", "constraintKeyType", "indexHintClause", 
		"indexList", "indexListElement", "updateStatement", "transactionOrLockingStatement", 
		"transactionStatement", "beginWork", "transactionCharacteristic", "savepointStatement", 
		"lockStatement", "lockItem", "lockOption", "xaStatement", "xaConvert", 
		"xid", "replicationStatement", "resetOption", "masterResetOptions", "replicationLoad", 
		"changeMaster", "changeMasterOptions", "masterOption", "privilegeCheckDef", 
		"tablePrimaryKeyCheckDef", "masterTlsCiphersuitesDef", "masterFileDef", 
		"serverIdList", "changeReplication", "filterDefinition", "filterDbList", 
		"filterTableList", "filterStringList", "filterWildDbTableString", "filterDbPairList", 
		"slave", "slaveUntilOptions", "slaveConnectionOptions", "slaveThreadOptions", 
		"slaveThreadOption", "groupReplication", "preparedStatement", "executeStatement", 
		"executeVarList", "cloneStatement", "dataDirSSL", "ssl", "accountManagementStatement", 
		"alterUser", "alterUserTail", "userFunction", "createUser", "createUserTail", 
		"defaultRoleClause", "requireClause", "connectOptions", "accountLockPasswordExpireOptions", 
		"dropUser", "grant", "grantTargetList", "grantOptions", "exceptRoleList", 
		"withRoles", "grantAs", "versionedRequireClause", "renameUser", "revoke", 
		"onTypeTo", "aclType", "roleOrPrivilegesList", "roleOrPrivilege", "grantIdentifier", 
		"requireList", "requireListElement", "grantOption", "setRole", "roleList", 
		"role", "tableAdministrationStatement", "histogram", "checkOption", "repairType", 
		"installUninstallStatment", "setStatement", "startOptionValueList", "transactionCharacteristics", 
		"transactionAccessMode", "isolationLevel", "optionValueListContinued", 
		"optionValueNoOptionType", "optionValue", "setSystemVariable", "startOptionValueListFollowingOptionType", 
		"optionValueFollowingOptionType", "setExprOrDefault", "showStatement", 
		"showCommandType", "nonBlocking", "fromOrIn", "inDb", "profileType", "otherAdministrativeStatement", 
		"keyCacheListOrParts", "keyCacheList", "assignToKeycache", "assignToKeycachePartition", 
		"cacheKeyList", "keyUsageElement", "keyUsageList", "flushOption", "logType", 
		"flushTables", "flushTablesOptions", "preloadTail", "preloadList", "preloadKeys", 
		"adminPartition", "resourceGroupManagement", "createResourceGroup", "resourceGroupVcpuList", 
		"vcpuNumOrRange", "resourceGroupPriority", "resourceGroupEnableDisable", 
		"alterResourceGroup", "setResourceGroup", "threadIdList", "dropResourceGroup", 
		"utilityStatement", "describeStatement", "explainStatement", "explainableStatement", 
		"helpCommand", "useCommand", "restartServer", "expr", "boolPri", "compOp", 
		"predicate", "predicateOperations", "bitExpr", "simpleExpr", "arrayCast", 
		"jsonOperator", "sumExpr", "groupingOperation", "windowFunctionCall", 
		"windowingClause", "leadLagInfo", "nullTreatment", "jsonFunction", "inSumExpr", 
		"identListArg", "identList", "fulltextOptions", "runtimeFunctionCall", 
		"geometryFunction", "timeFunctionParameters", "fractionalPrecision", "weightStringLevels", 
		"weightStringLevelListItem", "dateTimeTtype", "trimFunction", "substringFunction", 
		"functionCall", "udfExprList", "udfExpr", "variable", "userVariable", 
		"systemVariable", "internalVariableName", "whenExpression", "thenExpression", 
		"elseExpression", "castType", "exprList", "charset", "notRule", "not2Rule", 
		"interval", "intervalTimeStamp", "exprListWithParentheses", "exprWithParentheses", 
		"simpleExprWithParentheses", "orderList", "orderExpression", "groupList", 
		"groupingExpression", "channel", "compoundStatement", "returnStatement", 
		"ifStatement", "ifBody", "thenStatement", "compoundStatementList", "caseStatement", 
		"elseStatement", "labeledBlock", "unlabeledBlock", "label", "beginEndBlock", 
		"labeledControl", "unlabeledControl", "loopBlock", "whileDoBlock", "repeatUntilBlock", 
		"spDeclarations", "spDeclaration", "variableDeclaration", "conditionDeclaration", 
		"spCondition", "sqlstate", "handlerDeclaration", "handlerCondition", "cursorDeclaration", 
		"iterateStatement", "leaveStatement", "getDiagnostics", "signalAllowedExpr", 
		"statementInformationItem", "conditionInformationItem", "signalInformationItemName", 
		"signalStatement", "resignalStatement", "signalInformationItem", "cursorOpen", 
		"cursorClose", "cursorFetch", "schedule", "columnDefinition", "checkOrReferences", 
		"checkConstraint", "constraintEnforcement", "tableConstraintDef", "constraintName", 
		"fieldDefinition", "columnAttribute", "columnFormat", "storageMedia", 
		"gcolAttribute", "references", "deleteOption", "keyList", "keyPart", "keyListWithExpression", 
		"keyPartOrExpression", "keyListVariants", "indexType", "indexOption", 
		"commonIndexOption", "visibility", "indexTypeClause", "fulltextIndexOption", 
		"spatialIndexOption", "dataTypeDefinition", "dataType", "nchar", "realType", 
		"fieldLength", "fieldOptions", "charsetWithOptBinary", "ascii", "unicode", 
		"wsNumCodepoints", "typeDatetimePrecision", "charsetName", "collationName", 
		"createTableOptions", "createTableOptionsSpaceSeparated", "createTableOption", 
		"ternaryOption", "defaultCollation", "defaultEncryption", "defaultCharset", 
		"partitionClause", "partitionTypeDef", "subPartitions", "partitionKeyAlgorithm", 
		"partitionDefinitions", "partitionDefinition", "partitionValuesIn", "partitionOption", 
		"subpartitionDefinition", "partitionValueItemListParen", "partitionValueItem", 
		"definerClause", "ifExists", "ifNotExists", "procedureParameter", "functionParameter", 
		"collate", "typeWithOptCollate", "schemaIdentifierPair", "viewRefList", 
		"updateList", "updateElement", "charsetClause", "fieldsClause", "fieldTerm", 
		"linesClause", "lineTerm", "userList", "createUserList", "alterUserList", 
		"createUserEntry", "alterUserEntry", "retainCurrentPassword", "discardOldPassword", 
		"replacePassword", "userIdentifierOrText", "user", "likeClause", "likeOrWhere", 
		"onlineOption", "noWriteToBinLog", "usePartition", "fieldIdentifier", 
		"columnName", "columnInternalRef", "columnInternalRefList", "columnRef", 
		"insertIdentifier", "indexName", "indexRef", "tableWild", "schemaName", 
		"schemaRef", "procedureName", "procedureRef", "functionName", "functionRef", 
		"triggerName", "triggerRef", "viewName", "viewRef", "tablespaceName", 
		"tablespaceRef", "logfileGroupName", "logfileGroupRef", "eventName", "eventRef", 
		"udfName", "serverName", "serverRef", "engineRef", "tableName", "filterTableRef", 
		"tableRefWithWildcard", "tableRef", "tableRefList", "tableAliasRefList", 
		"parameterName", "labelIdentifier", "labelRef", "roleIdentifier", "roleRef", 
		"pluginRef", "componentRef", "resourceGroupRef", "windowName", "pureIdentifier", 
		"identifier", "identifierList", "identifierListWithParentheses", "qualifiedIdentifier", 
		"simpleIdentifier", "dotIdentifier", "ulong_number", "real_ulong_number", 
		"ulonglong_number", "real_ulonglong_number", "literal", "signedLiteral", 
		"stringList", "textStringLiteral", "textString", "textStringHash", "textLiteral", 
		"textStringNoLinebreak", "textStringLiteralList", "numLiteral", "boolLiteral", 
		"nullLiteral", "temporalLiteral", "floatOptions", "standardFloatOptions", 
		"precision", "textOrIdentifier", "lValueIdentifier", "roleIdentifierOrText", 
		"sizeNumber", "parentheses", "equal", "optionType", "varIdentType", "setVarIdentType", 
		"identifierKeyword", "identifierKeywordsAmbiguous1RolesAndLabels", "identifierKeywordsAmbiguous2Labels", 
		"labelKeyword", "identifierKeywordsAmbiguous3Roles", "identifierKeywordsUnambiguous", 
		"roleKeyword", "lValueKeyword", "identifierKeywordsAmbiguous4SystemVariables", 
		"roleOrIdentifierKeyword", "roleOrLabelKeyword"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "'='", "':='", "'<=>'", "'>='", "'>'", 
		"'<='", "'<'", "'!='", "'+'", "'-'", "'*'", "'/'", "'%'", "'!'", "'~'", 
		"'<<'", "'>>'", "'&&'", "'&'", "'^'", "'||'", "'|'", "'.'", "','", "';'", 
		"':'", "'('", "')'", "'{'", "'}'", "'_'", "'->'", "'->>'", "'@'", null, 
		"'@@'", "'\\N'", "'?'", null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "'<>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ACCESSIBLE_SYMBOL", "ACCOUNT_SYMBOL", "ACTION_SYMBOL", "ADD_SYMBOL", 
		"ADDDATE_SYMBOL", "AFTER_SYMBOL", "AGAINST_SYMBOL", "AGGREGATE_SYMBOL", 
		"ALGORITHM_SYMBOL", "ALL_SYMBOL", "ALTER_SYMBOL", "ALWAYS_SYMBOL", "ANALYSE_SYMBOL", 
		"ANALYZE_SYMBOL", "AND_SYMBOL", "ANY_SYMBOL", "AS_SYMBOL", "ASC_SYMBOL", 
		"ASCII_SYMBOL", "ASENSITIVE_SYMBOL", "AT_SYMBOL", "AUTHORS_SYMBOL", "AUTOEXTEND_SIZE_SYMBOL", 
		"AUTO_INCREMENT_SYMBOL", "AVG_ROW_LENGTH_SYMBOL", "AVG_SYMBOL", "BACKUP_SYMBOL", 
		"BEFORE_SYMBOL", "BEGIN_SYMBOL", "BETWEEN_SYMBOL", "BIGINT_SYMBOL", "BINARY_SYMBOL", 
		"BINLOG_SYMBOL", "BIN_NUM_SYMBOL", "BIT_AND_SYMBOL", "BIT_OR_SYMBOL", 
		"BIT_SYMBOL", "BIT_XOR_SYMBOL", "BLOB_SYMBOL", "BLOCK_SYMBOL", "BOOLEAN_SYMBOL", 
		"BOOL_SYMBOL", "BOTH_SYMBOL", "BTREE_SYMBOL", "BY_SYMBOL", "BYTE_SYMBOL", 
		"CACHE_SYMBOL", "CALL_SYMBOL", "CASCADE_SYMBOL", "CASCADED_SYMBOL", "CASE_SYMBOL", 
		"CAST_SYMBOL", "CATALOG_NAME_SYMBOL", "CHAIN_SYMBOL", "CHANGE_SYMBOL", 
		"CHANGED_SYMBOL", "CHANNEL_SYMBOL", "CHARSET_SYMBOL", "CHARACTER_SYMBOL", 
		"CHAR_SYMBOL", "CHECKSUM_SYMBOL", "CHECK_SYMBOL", "CIPHER_SYMBOL", "CLASS_ORIGIN_SYMBOL", 
		"CLIENT_SYMBOL", "CLOSE_SYMBOL", "COALESCE_SYMBOL", "CODE_SYMBOL", "COLLATE_SYMBOL", 
		"COLLATION_SYMBOL", "COLUMNS_SYMBOL", "COLUMN_SYMBOL", "COLUMN_NAME_SYMBOL", 
		"COLUMN_FORMAT_SYMBOL", "COMMENT_SYMBOL", "COMMITTED_SYMBOL", "COMMIT_SYMBOL", 
		"COMPACT_SYMBOL", "COMPLETION_SYMBOL", "COMPRESSED_SYMBOL", "COMPRESSION_SYMBOL", 
		"CONCURRENT_SYMBOL", "CONDITION_SYMBOL", "CONNECTION_SYMBOL", "CONSISTENT_SYMBOL", 
		"CONSTRAINT_SYMBOL", "CONSTRAINT_CATALOG_SYMBOL", "CONSTRAINT_NAME_SYMBOL", 
		"CONSTRAINT_SCHEMA_SYMBOL", "CONTAINS_SYMBOL", "CONTEXT_SYMBOL", "CONTINUE_SYMBOL", 
		"CONTRIBUTORS_SYMBOL", "CONVERT_SYMBOL", "COUNT_SYMBOL", "CPU_SYMBOL", 
		"CREATE_SYMBOL", "CROSS_SYMBOL", "CUBE_SYMBOL", "CURDATE_SYMBOL", "CURRENT_SYMBOL", 
		"CURRENT_DATE_SYMBOL", "CURRENT_TIME_SYMBOL", "CURRENT_TIMESTAMP_SYMBOL", 
		"CURRENT_USER_SYMBOL", "CURSOR_SYMBOL", "CURSOR_NAME_SYMBOL", "CURTIME_SYMBOL", 
		"DATABASE_SYMBOL", "DATABASES_SYMBOL", "DATAFILE_SYMBOL", "DATA_SYMBOL", 
		"DATETIME_SYMBOL", "DATE_ADD_SYMBOL", "DATE_SUB_SYMBOL", "DATE_SYMBOL", 
		"DAYOFMONTH_SYMBOL", "DAY_HOUR_SYMBOL", "DAY_MICROSECOND_SYMBOL", "DAY_MINUTE_SYMBOL", 
		"DAY_SECOND_SYMBOL", "DAY_SYMBOL", "DEALLOCATE_SYMBOL", "DEC_SYMBOL", 
		"DECIMAL_NUM_SYMBOL", "DECIMAL_SYMBOL", "DECLARE_SYMBOL", "DEFAULT_SYMBOL", 
		"DEFAULT_AUTH_SYMBOL", "DEFINER_SYMBOL", "DELAYED_SYMBOL", "DELAY_KEY_WRITE_SYMBOL", 
		"DELETE_SYMBOL", "DESC_SYMBOL", "DESCRIBE_SYMBOL", "DES_KEY_FILE_SYMBOL", 
		"DETERMINISTIC_SYMBOL", "DIAGNOSTICS_SYMBOL", "DIRECTORY_SYMBOL", "DISABLE_SYMBOL", 
		"DISCARD_SYMBOL", "DISK_SYMBOL", "DISTINCT_SYMBOL", "DISTINCTROW_SYMBOL", 
		"DIV_SYMBOL", "DOUBLE_SYMBOL", "DO_SYMBOL", "DROP_SYMBOL", "DUAL_SYMBOL", 
		"DUMPFILE_SYMBOL", "DUPLICATE_SYMBOL", "DYNAMIC_SYMBOL", "EACH_SYMBOL", 
		"ELSE_SYMBOL", "ELSEIF_SYMBOL", "ENABLE_SYMBOL", "ENCLOSED_SYMBOL", "ENCRYPTION_SYMBOL", 
		"END_SYMBOL", "ENDS_SYMBOL", "END_OF_INPUT_SYMBOL", "ENGINES_SYMBOL", 
		"ENGINE_SYMBOL", "ENUM_SYMBOL", "ERROR_SYMBOL", "ERRORS_SYMBOL", "ESCAPED_SYMBOL", 
		"ESCAPE_SYMBOL", "EVENTS_SYMBOL", "EVENT_SYMBOL", "EVERY_SYMBOL", "EXCHANGE_SYMBOL", 
		"EXECUTE_SYMBOL", "EXISTS_SYMBOL", "EXIT_SYMBOL", "EXPANSION_SYMBOL", 
		"EXPIRE_SYMBOL", "EXPLAIN_SYMBOL", "EXPORT_SYMBOL", "EXTENDED_SYMBOL", 
		"EXTENT_SIZE_SYMBOL", "EXTRACT_SYMBOL", "FALSE_SYMBOL", "FAST_SYMBOL", 
		"FAULTS_SYMBOL", "FETCH_SYMBOL", "FIELDS_SYMBOL", "FILE_SYMBOL", "FILE_BLOCK_SIZE_SYMBOL", 
		"FILTER_SYMBOL", "FIRST_SYMBOL", "FIXED_SYMBOL", "FLOAT4_SYMBOL", "FLOAT8_SYMBOL", 
		"FLOAT_SYMBOL", "FLUSH_SYMBOL", "FOLLOWS_SYMBOL", "FORCE_SYMBOL", "FOREIGN_SYMBOL", 
		"FOR_SYMBOL", "FORMAT_SYMBOL", "FOUND_SYMBOL", "FROM_SYMBOL", "FULL_SYMBOL", 
		"FULLTEXT_SYMBOL", "FUNCTION_SYMBOL", "GET_SYMBOL", "GENERAL_SYMBOL", 
		"GENERATED_SYMBOL", "GROUP_REPLICATION_SYMBOL", "GEOMETRYCOLLECTION_SYMBOL", 
		"GEOMETRY_SYMBOL", "GET_FORMAT_SYMBOL", "GLOBAL_SYMBOL", "GRANT_SYMBOL", 
		"GRANTS_SYMBOL", "GROUP_SYMBOL", "GROUP_CONCAT_SYMBOL", "HANDLER_SYMBOL", 
		"HASH_SYMBOL", "HAVING_SYMBOL", "HELP_SYMBOL", "HIGH_PRIORITY_SYMBOL", 
		"HOST_SYMBOL", "HOSTS_SYMBOL", "HOUR_MICROSECOND_SYMBOL", "HOUR_MINUTE_SYMBOL", 
		"HOUR_SECOND_SYMBOL", "HOUR_SYMBOL", "IDENTIFIED_SYMBOL", "IF_SYMBOL", 
		"IGNORE_SYMBOL", "IGNORE_SERVER_IDS_SYMBOL", "IMPORT_SYMBOL", "INDEXES_SYMBOL", 
		"INDEX_SYMBOL", "INFILE_SYMBOL", "INITIAL_SIZE_SYMBOL", "INNER_SYMBOL", 
		"INOUT_SYMBOL", "INSENSITIVE_SYMBOL", "INSERT_SYMBOL", "INSERT_METHOD_SYMBOL", 
		"INSTANCE_SYMBOL", "INSTALL_SYMBOL", "INTEGER_SYMBOL", "INTERVAL_SYMBOL", 
		"INTO_SYMBOL", "INT_SYMBOL", "INVOKER_SYMBOL", "IN_SYMBOL", "IO_AFTER_GTIDS_SYMBOL", 
		"IO_BEFORE_GTIDS_SYMBOL", "IO_THREAD_SYMBOL", "IO_SYMBOL", "IPC_SYMBOL", 
		"IS_SYMBOL", "ISOLATION_SYMBOL", "ISSUER_SYMBOL", "ITERATE_SYMBOL", "JOIN_SYMBOL", 
		"JSON_SYMBOL", "KEYS_SYMBOL", "KEY_BLOCK_SIZE_SYMBOL", "KEY_SYMBOL", "KILL_SYMBOL", 
		"LANGUAGE_SYMBOL", "LAST_SYMBOL", "LEADING_SYMBOL", "LEAVES_SYMBOL", "LEAVE_SYMBOL", 
		"LEFT_SYMBOL", "LESS_SYMBOL", "LEVEL_SYMBOL", "LIKE_SYMBOL", "LIMIT_SYMBOL", 
		"LINEAR_SYMBOL", "LINES_SYMBOL", "LINESTRING_SYMBOL", "LIST_SYMBOL", "LOAD_SYMBOL", 
		"LOCALTIME_SYMBOL", "LOCALTIMESTAMP_SYMBOL", "LOCAL_SYMBOL", "LOCATOR_SYMBOL", 
		"LOCKS_SYMBOL", "LOCK_SYMBOL", "LOGFILE_SYMBOL", "LOGS_SYMBOL", "LONGBLOB_SYMBOL", 
		"LONGTEXT_SYMBOL", "LONG_NUM_SYMBOL", "LONG_SYMBOL", "LOOP_SYMBOL", "LOW_PRIORITY_SYMBOL", 
		"MASTER_AUTO_POSITION_SYMBOL", "MASTER_BIND_SYMBOL", "MASTER_CONNECT_RETRY_SYMBOL", 
		"MASTER_DELAY_SYMBOL", "MASTER_HOST_SYMBOL", "MASTER_LOG_FILE_SYMBOL", 
		"MASTER_LOG_POS_SYMBOL", "MASTER_PASSWORD_SYMBOL", "MASTER_PORT_SYMBOL", 
		"MASTER_RETRY_COUNT_SYMBOL", "MASTER_SERVER_ID_SYMBOL", "MASTER_SSL_CAPATH_SYMBOL", 
		"MASTER_SSL_CA_SYMBOL", "MASTER_SSL_CERT_SYMBOL", "MASTER_SSL_CIPHER_SYMBOL", 
		"MASTER_SSL_CRL_SYMBOL", "MASTER_SSL_CRLPATH_SYMBOL", "MASTER_SSL_KEY_SYMBOL", 
		"MASTER_SSL_SYMBOL", "MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL", "MASTER_SYMBOL", 
		"MASTER_TLS_VERSION_SYMBOL", "MASTER_USER_SYMBOL", "MASTER_HEARTBEAT_PERIOD_SYMBOL", 
		"MATCH_SYMBOL", "MAX_CONNECTIONS_PER_HOUR_SYMBOL", "MAX_QUERIES_PER_HOUR_SYMBOL", 
		"MAX_ROWS_SYMBOL", "MAX_SIZE_SYMBOL", "MAX_STATEMENT_TIME_SYMBOL", "MAX_SYMBOL", 
		"MAX_UPDATES_PER_HOUR_SYMBOL", "MAX_USER_CONNECTIONS_SYMBOL", "MAXVALUE_SYMBOL", 
		"MEDIUMBLOB_SYMBOL", "MEDIUMINT_SYMBOL", "MEDIUMTEXT_SYMBOL", "MEDIUM_SYMBOL", 
		"MEMORY_SYMBOL", "MERGE_SYMBOL", "MESSAGE_TEXT_SYMBOL", "MICROSECOND_SYMBOL", 
		"MID_SYMBOL", "MIDDLEINT_SYMBOL", "MIGRATE_SYMBOL", "MINUTE_MICROSECOND_SYMBOL", 
		"MINUTE_SECOND_SYMBOL", "MINUTE_SYMBOL", "MIN_ROWS_SYMBOL", "MIN_SYMBOL", 
		"MODE_SYMBOL", "MODIFIES_SYMBOL", "MODIFY_SYMBOL", "MOD_SYMBOL", "MONTH_SYMBOL", 
		"MULTILINESTRING_SYMBOL", "MULTIPOINT_SYMBOL", "MULTIPOLYGON_SYMBOL", 
		"MUTEX_SYMBOL", "MySql_ERRNO_SYMBOL", "NAMES_SYMBOL", "NAME_SYMBOL", "NATIONAL_SYMBOL", 
		"NATURAL_SYMBOL", "NCHAR_STRING_SYMBOL", "NCHAR_SYMBOL", "NDB_SYMBOL", 
		"NDBCLUSTER_SYMBOL", "NEG_SYMBOL", "NEVER_SYMBOL", "NEW_SYMBOL", "NEXT_SYMBOL", 
		"NODEGROUP_SYMBOL", "NONE_SYMBOL", "NONBLOCKING_SYMBOL", "NOT_SYMBOL", 
		"NOW_SYMBOL", "NO_SYMBOL", "NO_WAIT_SYMBOL", "NO_WRITE_TO_BINLOG_SYMBOL", 
		"NULL_SYMBOL", "NUMBER_SYMBOL", "NUMERIC_SYMBOL", "NVARCHAR_SYMBOL", "OFFLINE_SYMBOL", 
		"OFFSET_SYMBOL", "OLD_PASSWORD_SYMBOL", "ON_SYMBOL", "ONE_SYMBOL", "ONLINE_SYMBOL", 
		"ONLY_SYMBOL", "OPEN_SYMBOL", "OPTIMIZE_SYMBOL", "OPTIMIZER_COSTS_SYMBOL", 
		"OPTIONS_SYMBOL", "OPTION_SYMBOL", "OPTIONALLY_SYMBOL", "ORDER_SYMBOL", 
		"OR_SYMBOL", "OUTER_SYMBOL", "OUTFILE_SYMBOL", "OUT_SYMBOL", "OWNER_SYMBOL", 
		"PACK_KEYS_SYMBOL", "PAGE_SYMBOL", "PARSER_SYMBOL", "PARTIAL_SYMBOL", 
		"PARTITIONING_SYMBOL", "PARTITIONS_SYMBOL", "PARTITION_SYMBOL", "PASSWORD_SYMBOL", 
		"PHASE_SYMBOL", "PLUGINS_SYMBOL", "PLUGIN_DIR_SYMBOL", "PLUGIN_SYMBOL", 
		"POINT_SYMBOL", "POLYGON_SYMBOL", "PORT_SYMBOL", "POSITION_SYMBOL", "PRECEDES_SYMBOL", 
		"PRECISION_SYMBOL", "PREPARE_SYMBOL", "PRESERVE_SYMBOL", "PREV_SYMBOL", 
		"PRIMARY_SYMBOL", "PRIVILEGES_SYMBOL", "PROCEDURE_SYMBOL", "PROCESS_SYMBOL", 
		"PROCESSLIST_SYMBOL", "PROFILE_SYMBOL", "PROFILES_SYMBOL", "PROXY_SYMBOL", 
		"PURGE_SYMBOL", "QUARTER_SYMBOL", "QUERY_SYMBOL", "QUICK_SYMBOL", "RANGE_SYMBOL", 
		"READS_SYMBOL", "READ_ONLY_SYMBOL", "READ_SYMBOL", "READ_WRITE_SYMBOL", 
		"REAL_SYMBOL", "REBUILD_SYMBOL", "RECOVER_SYMBOL", "REDOFILE_SYMBOL", 
		"REDO_BUFFER_SIZE_SYMBOL", "REDUNDANT_SYMBOL", "REFERENCES_SYMBOL", "REGEXP_SYMBOL", 
		"RELAY_SYMBOL", "RELAYLOG_SYMBOL", "RELAY_LOG_FILE_SYMBOL", "RELAY_LOG_POS_SYMBOL", 
		"RELAY_THREAD_SYMBOL", "RELEASE_SYMBOL", "RELOAD_SYMBOL", "REMOVE_SYMBOL", 
		"RENAME_SYMBOL", "REORGANIZE_SYMBOL", "REPAIR_SYMBOL", "REPEATABLE_SYMBOL", 
		"REPEAT_SYMBOL", "REPLACE_SYMBOL", "REPLICATION_SYMBOL", "REPLICATE_DO_DB_SYMBOL", 
		"REPLICATE_IGNORE_DB_SYMBOL", "REPLICATE_DO_TABLE_SYMBOL", "REPLICATE_IGNORE_TABLE_SYMBOL", 
		"REPLICATE_WILD_DO_TABLE_SYMBOL", "REPLICATE_WILD_IGNORE_TABLE_SYMBOL", 
		"REPLICATE_REWRITE_DB_SYMBOL", "REQUIRE_SYMBOL", "RESET_SYMBOL", "RESIGNAL_SYMBOL", 
		"RESTORE_SYMBOL", "RESTRICT_SYMBOL", "RESUME_SYMBOL", "RETURNED_SQLSTATE_SYMBOL", 
		"RETURNS_SYMBOL", "RETURN_SYMBOL", "REVERSE_SYMBOL", "REVOKE_SYMBOL", 
		"RIGHT_SYMBOL", "RLIKE_SYMBOL", "ROLLBACK_SYMBOL", "ROLLUP_SYMBOL", "ROTATE_SYMBOL", 
		"ROUTINE_SYMBOL", "ROWS_SYMBOL", "ROW_COUNT_SYMBOL", "ROW_FORMAT_SYMBOL", 
		"ROW_SYMBOL", "RTREE_SYMBOL", "SAVEPOINT_SYMBOL", "SCHEDULE_SYMBOL", "SCHEMA_SYMBOL", 
		"SCHEMA_NAME_SYMBOL", "SCHEMAS_SYMBOL", "SECOND_MICROSECOND_SYMBOL", "SECOND_SYMBOL", 
		"SECURITY_SYMBOL", "SELECT_SYMBOL", "SENSITIVE_SYMBOL", "SEPARATOR_SYMBOL", 
		"SERIALIZABLE_SYMBOL", "SERIAL_SYMBOL", "SESSION_SYMBOL", "SERVER_SYMBOL", 
		"SERVER_OPTIONS_SYMBOL", "SESSION_USER_SYMBOL", "SET_SYMBOL", "SET_VAR_SYMBOL", 
		"SHARE_SYMBOL", "SHOW_SYMBOL", "SHUTDOWN_SYMBOL", "SIGNAL_SYMBOL", "SIGNED_SYMBOL", 
		"SIMPLE_SYMBOL", "SLAVE_SYMBOL", "SLOW_SYMBOL", "SMALLINT_SYMBOL", "SNAPSHOT_SYMBOL", 
		"SOME_SYMBOL", "SOCKET_SYMBOL", "SONAME_SYMBOL", "SOUNDS_SYMBOL", "SOURCE_SYMBOL", 
		"SPATIAL_SYMBOL", "SPECIFIC_SYMBOL", "SQLEXCEPTION_SYMBOL", "SQLSTATE_SYMBOL", 
		"SQLWARNING_SYMBOL", "SQL_AFTER_GTIDS_SYMBOL", "SQL_AFTER_MTS_GAPS_SYMBOL", 
		"SQL_BEFORE_GTIDS_SYMBOL", "SQL_BIG_RESULT_SYMBOL", "SQL_BUFFER_RESULT_SYMBOL", 
		"SQL_CACHE_SYMBOL", "SQL_CALC_FOUND_ROWS_SYMBOL", "SQL_NO_CACHE_SYMBOL", 
		"SQL_SMALL_RESULT_SYMBOL", "SQL_SYMBOL", "SQL_THREAD_SYMBOL", "SSL_SYMBOL", 
		"STACKED_SYMBOL", "STARTING_SYMBOL", "STARTS_SYMBOL", "START_SYMBOL", 
		"STATS_AUTO_RECALC_SYMBOL", "STATS_PERSISTENT_SYMBOL", "STATS_SAMPLE_PAGES_SYMBOL", 
		"STATUS_SYMBOL", "STDDEV_SAMP_SYMBOL", "STDDEV_SYMBOL", "STDDEV_POP_SYMBOL", 
		"STD_SYMBOL", "STOP_SYMBOL", "STORAGE_SYMBOL", "STORED_SYMBOL", "STRAIGHT_JOIN_SYMBOL", 
		"STRING_SYMBOL", "SUBCLASS_ORIGIN_SYMBOL", "SUBDATE_SYMBOL", "SUBJECT_SYMBOL", 
		"SUBPARTITIONS_SYMBOL", "SUBPARTITION_SYMBOL", "SUBSTR_SYMBOL", "SUBSTRING_SYMBOL", 
		"SUM_SYMBOL", "SUPER_SYMBOL", "SUSPEND_SYMBOL", "SWAPS_SYMBOL", "SWITCHES_SYMBOL", 
		"SYSDATE_SYMBOL", "SYSTEM_USER_SYMBOL", "TABLES_SYMBOL", "TABLESPACE_SYMBOL", 
		"TABLE_REF_PRIORITY_SYMBOL", "TABLE_SYMBOL", "TABLE_CHECKSUM_SYMBOL", 
		"TABLE_NAME_SYMBOL", "TEMPORARY_SYMBOL", "TEMPTABLE_SYMBOL", "TERMINATED_SYMBOL", 
		"TEXT_SYMBOL", "THAN_SYMBOL", "THEN_SYMBOL", "TIMESTAMP_SYMBOL", "TIMESTAMP_ADD_SYMBOL", 
		"TIMESTAMP_DIFF_SYMBOL", "TIME_SYMBOL", "TINYBLOB_SYMBOL", "TINYINT_SYMBOL", 
		"TINYTEXT_SYMBOL", "TO_SYMBOL", "TRAILING_SYMBOL", "TRANSACTION_SYMBOL", 
		"TRIGGERS_SYMBOL", "TRIGGER_SYMBOL", "TRIM_SYMBOL", "TRUE_SYMBOL", "TRUNCATE_SYMBOL", 
		"TYPES_SYMBOL", "TYPE_SYMBOL", "UDF_RETURNS_SYMBOL", "UNCOMMITTED_SYMBOL", 
		"UNDEFINED_SYMBOL", "UNDOFILE_SYMBOL", "UNDO_BUFFER_SIZE_SYMBOL", "UNDO_SYMBOL", 
		"UNICODE_SYMBOL", "UNINSTALL_SYMBOL", "UNION_SYMBOL", "UNIQUE_SYMBOL", 
		"UNKNOWN_SYMBOL", "UNLOCK_SYMBOL", "UNSIGNED_SYMBOL", "UNTIL_SYMBOL", 
		"UPDATE_SYMBOL", "UPGRADE_SYMBOL", "USAGE_SYMBOL", "USER_RESOURCES_SYMBOL", 
		"USER_SYMBOL", "USE_FRM_SYMBOL", "USE_SYMBOL", "USING_SYMBOL", "UTC_DATE_SYMBOL", 
		"UTC_TIMESTAMP_SYMBOL", "UTC_TIME_SYMBOL", "VALIDATION_SYMBOL", "VALUES_SYMBOL", 
		"VALUE_SYMBOL", "VARBINARY_SYMBOL", "VARCHAR_SYMBOL", "VARCHARACTER_SYMBOL", 
		"VARIABLES_SYMBOL", "VARIANCE_SYMBOL", "VARYING_SYMBOL", "VAR_POP_SYMBOL", 
		"VAR_SAMP_SYMBOL", "VIEW_SYMBOL", "VIRTUAL_SYMBOL", "WAIT_SYMBOL", "WARNINGS_SYMBOL", 
		"WEEK_SYMBOL", "WEIGHT_STRING_SYMBOL", "WHEN_SYMBOL", "WHERE_SYMBOL", 
		"WHILE_SYMBOL", "WITH_SYMBOL", "WITHOUT_SYMBOL", "WORK_SYMBOL", "WRAPPER_SYMBOL", 
		"WRITE_SYMBOL", "X509_SYMBOL", "XA_SYMBOL", "XID_SYMBOL", "XML_SYMBOL", 
		"XOR_SYMBOL", "YEAR_MONTH_SYMBOL", "YEAR_SYMBOL", "ZEROFILL_SYMBOL", "PERSIST_SYMBOL", 
		"ROLE_SYMBOL", "ADMIN_SYMBOL", "INVISIBLE_SYMBOL", "VISIBLE_SYMBOL", "EXCEPT_SYMBOL", 
		"COMPONENT_SYMBOL", "RECURSIVE_SYMBOL", "JSON_OBJECTAGG_SYMBOL", "JSON_ARRAYAGG_SYMBOL", 
		"OF_SYMBOL", "SKIP_SYMBOL", "LOCKED_SYMBOL", "NOWAIT_SYMBOL", "GROUPING_SYMBOL", 
		"PERSIST_ONLY_SYMBOL", "HISTOGRAM_SYMBOL", "BUCKETS_SYMBOL", "REMOTE_SYMBOL", 
		"CLONE_SYMBOL", "CUME_DIST_SYMBOL", "DENSE_RANK_SYMBOL", "EXCLUDE_SYMBOL", 
		"FIRST_VALUE_SYMBOL", "FOLLOWING_SYMBOL", "GROUPS_SYMBOL", "LAG_SYMBOL", 
		"LAST_VALUE_SYMBOL", "LEAD_SYMBOL", "NTH_VALUE_SYMBOL", "NTILE_SYMBOL", 
		"NULLS_SYMBOL", "OTHERS_SYMBOL", "OVER_SYMBOL", "PERCENT_RANK_SYMBOL", 
		"PRECEDING_SYMBOL", "RANK_SYMBOL", "RESPECT_SYMBOL", "ROW_NUMBER_SYMBOL", 
		"TIES_SYMBOL", "UNBOUNDED_SYMBOL", "WINDOW_SYMBOL", "EMPTY_SYMBOL", "JSON_TABLE_SYMBOL", 
		"NESTED_SYMBOL", "ORDINALITY_SYMBOL", "PATH_SYMBOL", "HISTORY_SYMBOL", 
		"REUSE_SYMBOL", "SRID_SYMBOL", "THREAD_PRIORITY_SYMBOL", "RESOURCE_SYMBOL", 
		"SYSTEM_SYMBOL", "VCPU_SYMBOL", "MASTER_PUBLIC_KEY_PATH_SYMBOL", "GET_MASTER_PUBLIC_KEY_SYMBOL", 
		"RESTART_SYMBOL", "DEFINITION_SYMBOL", "DESCRIPTION_SYMBOL", "ORGANIZATION_SYMBOL", 
		"REFERENCE_SYMBOL", "OPTIONAL_SYMBOL", "SECONDARY_SYMBOL", "SECONDARY_ENGINE_SYMBOL", 
		"SECONDARY_LOAD_SYMBOL", "SECONDARY_UNLOAD_SYMBOL", "ACTIVE_SYMBOL", "INACTIVE_SYMBOL", 
		"LATERAL_SYMBOL", "RETAIN_SYMBOL", "OLD_SYMBOL", "NETWORK_NAMESPACE_SYMBOL", 
		"ENFORCED_SYMBOL", "ARRAY_SYMBOL", "OJ_SYMBOL", "MEMBER_SYMBOL", "RANDOM_SYMBOL", 
		"MASTER_COMPRESSION_ALGORITHM_SYMBOL", "MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL", 
		"PRIVILEGE_CHECKS_USER_SYMBOL", "MASTER_TLS_CIPHERSUITES_SYMBOL", "REQUIRE_ROW_FORMAT_SYMBOL", 
		"PASSWORD_LOCK_TIME_SYMBOL", "FAILED_LOGIN_ATTEMPTS_SYMBOL", "REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL", 
		"STREAM_SYMBOL", "OFF_SYMBOL", "NOT2_SYMBOL", "CONCAT_PIPES_SYMBOL", "INT_NUMBER", 
		"LONG_NUMBER", "ULONGLONG_NUMBER", "EQUAL_OPERATOR", "ASSIGN_OPERATOR", 
		"NULL_SAFE_EQUAL_OPERATOR", "GREATER_OR_EQUAL_OPERATOR", "GREATER_THAN_OPERATOR", 
		"LESS_OR_EQUAL_OPERATOR", "LESS_THAN_OPERATOR", "NOT_EQUAL_OPERATOR", 
		"PLUS_OPERATOR", "MINUS_OPERATOR", "MULT_OPERATOR", "DIV_OPERATOR", "MOD_OPERATOR", 
		"LOGICAL_NOT_OPERATOR", "BITWISE_NOT_OPERATOR", "SHIFT_LEFT_OPERATOR", 
		"SHIFT_RIGHT_OPERATOR", "LOGICAL_AND_OPERATOR", "BITWISE_AND_OPERATOR", 
		"BITWISE_XOR_OPERATOR", "LOGICAL_OR_OPERATOR", "BITWISE_OR_OPERATOR", 
		"DOT_SYMBOL", "COMMA_SYMBOL", "SEMICOLON_SYMBOL", "COLON_SYMBOL", "OPEN_PAR_SYMBOL", 
		"CLOSE_PAR_SYMBOL", "OPEN_CURLY_SYMBOL", "CLOSE_CURLY_SYMBOL", "UNDERLINE_SYMBOL", 
		"JSON_SEPARATOR_SYMBOL", "JSON_UNQUOTED_SEPARATOR_SYMBOL", "AT_SIGN_SYMBOL", 
		"AT_TEXT_SUFFIX", "AT_AT_SIGN_SYMBOL", "NULL2_SYMBOL", "PARAM_MARKER", 
		"HEX_NUMBER", "BIN_NUMBER", "DECIMAL_NUMBER", "FLOAT_NUMBER", "WHITESPACE", 
		"INVALID_INPUT", "UNDERSCORE_CHARSET", "IDENTIFIER", "NCHAR_TEXT", "BACK_TICK_QUOTED_ID", 
		"DOUBLE_QUOTED_TEXT", "SINGLE_QUOTED_TEXT", "VERSION_COMMENT_START", "MySql_COMMENT_START", 
		"VERSION_COMMENT_END", "BLOCK_COMMENT", "POUND_COMMENT", "DASHDASH_COMMENT", 
		"NOT_EQUAL2_OPERATOR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MySqlParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MySqlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MySqlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MySqlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MySqlParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BeginWorkContext beginWork() {
			return GetRuleContext<BeginWorkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON_SYMBOL() { return GetToken(MySqlParser.SEMICOLON_SYMBOL, 0); }
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 0, RULE_query);
		try {
			State = 1232;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1220;
				Match(Eof);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1223;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 1221;
					simpleStatement();
					}
					break;
				case 2:
					{
					State = 1222;
					beginWork();
					}
					break;
				}
				State = 1230;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SEMICOLON_SYMBOL:
					{
					State = 1225;
					Match(SEMICOLON_SYMBOL);
					State = 1227;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						State = 1226;
						Match(Eof);
						}
						break;
					}
					}
					break;
				case Eof:
					{
					State = 1229;
					Match(Eof);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterStatementContext alterStatement() {
			return GetRuleContext<AlterStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateStatementContext createStatement() {
			return GetRuleContext<CreateStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropStatementContext dropStatement() {
			return GetRuleContext<DropStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RenameTableStatementContext renameTableStatement() {
			return GetRuleContext<RenameTableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TruncateTableStatementContext truncateTableStatement() {
			return GetRuleContext<TruncateTableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext importStatement() {
			return GetRuleContext<ImportStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallStatementContext callStatement() {
			return GetRuleContext<CallStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoStatementContext doStatement() {
			return GetRuleContext<DoStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerStatementContext handlerStatement() {
			return GetRuleContext<HandlerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertStatementContext insertStatement() {
			return GetRuleContext<InsertStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadStatementContext loadStatement() {
			return GetRuleContext<LoadStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplaceStatementContext replaceStatement() {
			return GetRuleContext<ReplaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateStatementContext updateStatement() {
			return GetRuleContext<UpdateStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransactionOrLockingStatementContext transactionOrLockingStatement() {
			return GetRuleContext<TransactionOrLockingStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplicationStatementContext replicationStatement() {
			return GetRuleContext<ReplicationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreparedStatementContext preparedStatement() {
			return GetRuleContext<PreparedStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CloneStatementContext cloneStatement() {
			return GetRuleContext<CloneStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccountManagementStatementContext accountManagementStatement() {
			return GetRuleContext<AccountManagementStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableAdministrationStatementContext tableAdministrationStatement() {
			return GetRuleContext<TableAdministrationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstallUninstallStatmentContext installUninstallStatment() {
			return GetRuleContext<InstallUninstallStatmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetStatementContext setStatement() {
			return GetRuleContext<SetStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowStatementContext showStatement() {
			return GetRuleContext<ShowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResourceGroupManagementContext resourceGroupManagement() {
			return GetRuleContext<ResourceGroupManagementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherAdministrativeStatementContext otherAdministrativeStatement() {
			return GetRuleContext<OtherAdministrativeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UtilityStatementContext utilityStatement() {
			return GetRuleContext<UtilityStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GetDiagnosticsContext getDiagnostics() {
			return GetRuleContext<GetDiagnosticsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignalStatementContext signalStatement() {
			return GetRuleContext<SignalStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResignalStatementContext resignalStatement() {
			return GetRuleContext<ResignalStatementContext>(0);
		}
		public SimpleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleStatement(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStatementContext simpleStatement() {
		SimpleStatementContext _localctx = new SimpleStatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_simpleStatement);
		try {
			State = 1268;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1234;
				alterStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1235;
				createStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1236;
				dropStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1237;
				renameTableStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1238;
				truncateTableStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1239;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 1240;
				importStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1241;
				callStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1242;
				deleteStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1243;
				doStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1244;
				handlerStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1245;
				insertStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1246;
				loadStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1247;
				replaceStatement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1248;
				selectStatement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1249;
				updateStatement();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1250;
				transactionOrLockingStatement();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1251;
				replicationStatement();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1252;
				preparedStatement();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1253;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 1254;
				cloneStatement();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1255;
				accountManagementStatement();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1256;
				tableAdministrationStatement();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1257;
				installUninstallStatment();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 1258;
				setStatement();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 1259;
				showStatement();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 1260;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 1261;
				resourceGroupManagement();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 1262;
				otherAdministrativeStatement();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 1263;
				utilityStatement();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 1264;
				if (!(serverVersion >= 50604)) throw new FailedPredicateException(this, "serverVersion >= 50604");
				State = 1265;
				getDiagnostics();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 1266;
				signalStatement();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 1267;
				resignalStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER_SYMBOL() { return GetToken(MySqlParser.ALTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AlterTableContext alterTable() {
			return GetRuleContext<AlterTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterDatabaseContext alterDatabase() {
			return GetRuleContext<AlterDatabaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE_SYMBOL() { return GetToken(MySqlParser.PROCEDURE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureRefContext procedureRef() {
			return GetRuleContext<ProcedureRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION_SYMBOL() { return GetToken(MySqlParser.FUNCTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionRefContext functionRef() {
			return GetRuleContext<FunctionRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterViewContext alterView() {
			return GetRuleContext<AlterViewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterEventContext alterEvent() {
			return GetRuleContext<AlterEventContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterTablespaceContext alterTablespace() {
			return GetRuleContext<AlterTablespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterUndoTablespaceContext alterUndoTablespace() {
			return GetRuleContext<AlterUndoTablespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterLogfileGroupContext alterLogfileGroup() {
			return GetRuleContext<AlterLogfileGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterServerContext alterServer() {
			return GetRuleContext<AlterServerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANCE_SYMBOL() { return GetToken(MySqlParser.INSTANCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROTATE_SYMBOL() { return GetToken(MySqlParser.ROTATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SYMBOL() { return GetToken(MySqlParser.MASTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_SYMBOL() { return GetToken(MySqlParser.KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoutineAlterOptionsContext routineAlterOptions() {
			return GetRuleContext<RoutineAlterOptionsContext>(0);
		}
		public AlterStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterStatement(this);
		}
	}

	[RuleVersion(0)]
	public AlterStatementContext alterStatement() {
		AlterStatementContext _localctx = new AlterStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_alterStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1270;
			Match(ALTER_SYMBOL);
			State = 1297;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 1271;
				alterTable();
				}
				break;
			case 2:
				{
				State = 1272;
				alterDatabase();
				}
				break;
			case 3:
				{
				State = 1273;
				Match(PROCEDURE_SYMBOL);
				State = 1274;
				procedureRef();
				State = 1276;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (COMMENT_SYMBOL - 75)) | (1L << (CONTAINS_SYMBOL - 75)) | (1L << (DETERMINISTIC_SYMBOL - 75)))) != 0) || _la==LANGUAGE_SYMBOL || ((((_la - 347)) & ~0x3f) == 0 && ((1L << (_la - 347)) & ((1L << (MODIFIES_SYMBOL - 347)) | (1L << (NOT_SYMBOL - 347)) | (1L << (NO_SYMBOL - 347)))) != 0) || _la==READS_SYMBOL || _la==SQL_SYMBOL) {
					{
					State = 1275;
					routineAlterOptions();
					}
				}

				}
				break;
			case 4:
				{
				State = 1278;
				Match(FUNCTION_SYMBOL);
				State = 1279;
				functionRef();
				State = 1281;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (COMMENT_SYMBOL - 75)) | (1L << (CONTAINS_SYMBOL - 75)) | (1L << (DETERMINISTIC_SYMBOL - 75)))) != 0) || _la==LANGUAGE_SYMBOL || ((((_la - 347)) & ~0x3f) == 0 && ((1L << (_la - 347)) & ((1L << (MODIFIES_SYMBOL - 347)) | (1L << (NOT_SYMBOL - 347)) | (1L << (NO_SYMBOL - 347)))) != 0) || _la==READS_SYMBOL || _la==SQL_SYMBOL) {
					{
					State = 1280;
					routineAlterOptions();
					}
				}

				}
				break;
			case 5:
				{
				State = 1283;
				alterView();
				}
				break;
			case 6:
				{
				State = 1284;
				alterEvent();
				}
				break;
			case 7:
				{
				State = 1285;
				alterTablespace();
				}
				break;
			case 8:
				{
				State = 1286;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 1287;
				alterUndoTablespace();
				}
				break;
			case 9:
				{
				State = 1288;
				alterLogfileGroup();
				}
				break;
			case 10:
				{
				State = 1289;
				alterServer();
				}
				break;
			case 11:
				{
				State = 1290;
				if (!(serverVersion >= 50713)) throw new FailedPredicateException(this, "serverVersion >= 50713");
				State = 1291;
				Match(INSTANCE_SYMBOL);
				State = 1292;
				Match(ROTATE_SYMBOL);
				State = 1293;
				textOrIdentifier();
				State = 1294;
				Match(MASTER_SYMBOL);
				State = 1295;
				Match(KEY_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterDatabaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE_SYMBOL() { return GetToken(MySqlParser.DATABASE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SchemaRefContext schemaRef() {
			return GetRuleContext<SchemaRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPGRADE_SYMBOL() { return GetToken(MySqlParser.UPGRADE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_SYMBOL() { return GetToken(MySqlParser.DATA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY_SYMBOL() { return GetToken(MySqlParser.DIRECTORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME_SYMBOL() { return GetToken(MySqlParser.NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatabaseOptionContext[] createDatabaseOption() {
			return GetRuleContexts<CreateDatabaseOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return GetRuleContext<CreateDatabaseOptionContext>(i);
		}
		public AlterDatabaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterDatabase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterDatabase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterDatabase(this);
		}
	}

	[RuleVersion(0)]
	public AlterDatabaseContext alterDatabase() {
		AlterDatabaseContext _localctx = new AlterDatabaseContext(Context, State);
		EnterRule(_localctx, 6, RULE_alterDatabase);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1299;
			Match(DATABASE_SYMBOL);
			State = 1300;
			schemaRef();
			State = 1311;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 1302;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1301;
						createDatabaseOption();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1304;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				State = 1306;
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				State = 1307;
				Match(UPGRADE_SYMBOL);
				State = 1308;
				Match(DATA_SYMBOL);
				State = 1309;
				Match(DIRECTORY_SYMBOL);
				State = 1310;
				Match(NAME_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterEventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT_SYMBOL() { return GetToken(MySqlParser.EVENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EventRefContext eventRef() {
			return GetRuleContext<EventRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinerClauseContext definerClause() {
			return GetRuleContext<DefinerClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON_SYMBOL() { return GetTokens(MySqlParser.ON_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL(int i) {
			return GetToken(MySqlParser.ON_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEDULE_SYMBOL() { return GetToken(MySqlParser.SCHEDULE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScheduleContext schedule() {
			return GetRuleContext<ScheduleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPLETION_SYMBOL() { return GetToken(MySqlParser.COMPLETION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE_SYMBOL() { return GetToken(MySqlParser.PRESERVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME_SYMBOL() { return GetToken(MySqlParser.RENAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SYMBOL() { return GetToken(MySqlParser.TO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_SYMBOL() { return GetToken(MySqlParser.ENABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_SYMBOL() { return GetToken(MySqlParser.DISABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySqlParser.COMMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO_SYMBOL() { return GetToken(MySqlParser.DO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_SYMBOL() { return GetToken(MySqlParser.NOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE_SYMBOL() { return GetToken(MySqlParser.SLAVE_SYMBOL, 0); }
		public AlterEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterEvent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterEvent(this);
		}
	}

	[RuleVersion(0)]
	public AlterEventContext alterEvent() {
		AlterEventContext _localctx = new AlterEventContext(Context, State);
		EnterRule(_localctx, 8, RULE_alterEvent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1314;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				State = 1313;
				definerClause();
				}
			}

			State = 1316;
			Match(EVENT_SYMBOL);
			State = 1317;
			eventRef();
			State = 1321;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 1318;
				Match(ON_SYMBOL);
				State = 1319;
				Match(SCHEDULE_SYMBOL);
				State = 1320;
				schedule();
				}
				break;
			}
			State = 1329;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON_SYMBOL) {
				{
				State = 1323;
				Match(ON_SYMBOL);
				State = 1324;
				Match(COMPLETION_SYMBOL);
				State = 1326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					State = 1325;
					Match(NOT_SYMBOL);
					}
				}

				State = 1328;
				Match(PRESERVE_SYMBOL);
				}
			}

			State = 1334;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RENAME_SYMBOL) {
				{
				State = 1331;
				Match(RENAME_SYMBOL);
				State = 1332;
				Match(TO_SYMBOL);
				State = 1333;
				identifier();
				}
			}

			State = 1342;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENABLE_SYMBOL:
				{
				State = 1336;
				Match(ENABLE_SYMBOL);
				}
				break;
			case DISABLE_SYMBOL:
				{
				State = 1337;
				Match(DISABLE_SYMBOL);
				State = 1340;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON_SYMBOL) {
					{
					State = 1338;
					Match(ON_SYMBOL);
					State = 1339;
					Match(SLAVE_SYMBOL);
					}
				}

				}
				break;
			case Eof:
			case COMMENT_SYMBOL:
			case DO_SYMBOL:
			case SEMICOLON_SYMBOL:
				break;
			default:
				break;
			}
			State = 1346;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT_SYMBOL) {
				{
				State = 1344;
				Match(COMMENT_SYMBOL);
				State = 1345;
				textLiteral();
				}
			}

			State = 1350;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DO_SYMBOL) {
				{
				State = 1348;
				Match(DO_SYMBOL);
				State = 1349;
				compoundStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterLogfileGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE_SYMBOL() { return GetToken(MySqlParser.LOGFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_SYMBOL() { return GetToken(MySqlParser.GROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogfileGroupRefContext logfileGroupRef() {
			return GetRuleContext<LogfileGroupRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_SYMBOL() { return GetToken(MySqlParser.ADD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDOFILE_SYMBOL() { return GetToken(MySqlParser.UNDOFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterLogfileGroupOptionsContext alterLogfileGroupOptions() {
			return GetRuleContext<AlterLogfileGroupOptionsContext>(0);
		}
		public AlterLogfileGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterLogfileGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterLogfileGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterLogfileGroup(this);
		}
	}

	[RuleVersion(0)]
	public AlterLogfileGroupContext alterLogfileGroup() {
		AlterLogfileGroupContext _localctx = new AlterLogfileGroupContext(Context, State);
		EnterRule(_localctx, 10, RULE_alterLogfileGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1352;
			Match(LOGFILE_SYMBOL);
			State = 1353;
			Match(GROUP_SYMBOL);
			State = 1354;
			logfileGroupRef();
			State = 1355;
			Match(ADD_SYMBOL);
			State = 1356;
			Match(UNDOFILE_SYMBOL);
			State = 1357;
			textLiteral();
			State = 1359;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
				{
				State = 1358;
				alterLogfileGroupOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterLogfileGroupOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterLogfileGroupOptionContext[] alterLogfileGroupOption() {
			return GetRuleContexts<AlterLogfileGroupOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterLogfileGroupOptionContext alterLogfileGroupOption(int i) {
			return GetRuleContext<AlterLogfileGroupOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public AlterLogfileGroupOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterLogfileGroupOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterLogfileGroupOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterLogfileGroupOptions(this);
		}
	}

	[RuleVersion(0)]
	public AlterLogfileGroupOptionsContext alterLogfileGroupOptions() {
		AlterLogfileGroupOptionsContext _localctx = new AlterLogfileGroupOptionsContext(Context, State);
		EnterRule(_localctx, 12, RULE_alterLogfileGroupOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1361;
			alterLogfileGroupOption();
			State = 1368;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL || _la==COMMA_SYMBOL) {
				{
				{
				State = 1363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 1362;
					Match(COMMA_SYMBOL);
					}
				}

				State = 1365;
				alterLogfileGroupOption();
				}
				}
				State = 1370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterLogfileGroupOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionInitialSizeContext tsOptionInitialSize() {
			return GetRuleContext<TsOptionInitialSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionEngineContext tsOptionEngine() {
			return GetRuleContext<TsOptionEngineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionWaitContext tsOptionWait() {
			return GetRuleContext<TsOptionWaitContext>(0);
		}
		public AlterLogfileGroupOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterLogfileGroupOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterLogfileGroupOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterLogfileGroupOption(this);
		}
	}

	[RuleVersion(0)]
	public AlterLogfileGroupOptionContext alterLogfileGroupOption() {
		AlterLogfileGroupOptionContext _localctx = new AlterLogfileGroupOptionContext(Context, State);
		EnterRule(_localctx, 14, RULE_alterLogfileGroupOption);
		try {
			State = 1374;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INITIAL_SIZE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1371;
				tsOptionInitialSize();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1372;
				tsOptionEngine();
				}
				break;
			case NO_WAIT_SYMBOL:
			case WAIT_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1373;
				tsOptionWait();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterServerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER_SYMBOL() { return GetToken(MySqlParser.SERVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ServerRefContext serverRef() {
			return GetRuleContext<ServerRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ServerOptionsContext serverOptions() {
			return GetRuleContext<ServerOptionsContext>(0);
		}
		public AlterServerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterServer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterServer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterServer(this);
		}
	}

	[RuleVersion(0)]
	public AlterServerContext alterServer() {
		AlterServerContext _localctx = new AlterServerContext(Context, State);
		EnterRule(_localctx, 16, RULE_alterServer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1376;
			Match(SERVER_SYMBOL);
			State = 1377;
			serverRef();
			State = 1378;
			serverOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySqlParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OnlineOptionContext onlineOption() {
			return GetRuleContext<OnlineOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySqlParser.IGNORE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AlterTableActionsContext alterTableActions() {
			return GetRuleContext<AlterTableActionsContext>(0);
		}
		public AlterTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterTable(this);
		}
	}

	[RuleVersion(0)]
	public AlterTableContext alterTable() {
		AlterTableContext _localctx = new AlterTableContext(Context, State);
		EnterRule(_localctx, 18, RULE_alterTable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1381;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 1380;
				onlineOption();
				}
				break;
			}
			State = 1385;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 1383;
				if (!(serverVersion < 50700)) throw new FailedPredicateException(this, "serverVersion < 50700");
				State = 1384;
				Match(IGNORE_SYMBOL);
				}
				break;
			}
			State = 1387;
			Match(TABLE_SYMBOL);
			State = 1388;
			tableRef();
			State = 1390;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 1389;
				alterTableActions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTableActionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterCommandListContext alterCommandList() {
			return GetRuleContext<AlterCommandListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionClauseContext partitionClause() {
			return GetRuleContext<PartitionClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemovePartitioningContext removePartitioning() {
			return GetRuleContext<RemovePartitioningContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StandaloneAlterCommandsContext standaloneAlterCommands() {
			return GetRuleContext<StandaloneAlterCommandsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterCommandsModifierListContext alterCommandsModifierList() {
			return GetRuleContext<AlterCommandsModifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL() { return GetToken(MySqlParser.COMMA_SYMBOL, 0); }
		public AlterTableActionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTableActions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterTableActions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterTableActions(this);
		}
	}

	[RuleVersion(0)]
	public AlterTableActionsContext alterTableActions() {
		AlterTableActionsContext _localctx = new AlterTableActionsContext(Context, State);
		EnterRule(_localctx, 20, RULE_alterTableActions);
		try {
			State = 1405;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1392;
				alterCommandList();
				State = 1395;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PARTITION_SYMBOL:
					{
					State = 1393;
					partitionClause();
					}
					break;
				case REMOVE_SYMBOL:
					{
					State = 1394;
					removePartitioning();
					}
					break;
				case Eof:
				case SEMICOLON_SYMBOL:
					break;
				default:
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1397;
				partitionClause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1398;
				removePartitioning();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1402;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 1399;
					alterCommandsModifierList();
					State = 1400;
					Match(COMMA_SYMBOL);
					}
					break;
				}
				State = 1404;
				standaloneAlterCommands();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterCommandListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterCommandsModifierListContext alterCommandsModifierList() {
			return GetRuleContext<AlterCommandsModifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterListContext alterList() {
			return GetRuleContext<AlterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL() { return GetToken(MySqlParser.COMMA_SYMBOL, 0); }
		public AlterCommandListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterCommandList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterCommandList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterCommandList(this);
		}
	}

	[RuleVersion(0)]
	public AlterCommandListContext alterCommandList() {
		AlterCommandListContext _localctx = new AlterCommandListContext(Context, State);
		EnterRule(_localctx, 22, RULE_alterCommandList);
		try {
			State = 1414;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1407;
				alterCommandsModifierList();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1411;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
				case 1:
					{
					State = 1408;
					alterCommandsModifierList();
					State = 1409;
					Match(COMMA_SYMBOL);
					}
					break;
				}
				State = 1413;
				alterList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterCommandsModifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterCommandsModifierContext[] alterCommandsModifier() {
			return GetRuleContexts<AlterCommandsModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterCommandsModifierContext alterCommandsModifier(int i) {
			return GetRuleContext<AlterCommandsModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public AlterCommandsModifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterCommandsModifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterCommandsModifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterCommandsModifierList(this);
		}
	}

	[RuleVersion(0)]
	public AlterCommandsModifierListContext alterCommandsModifierList() {
		AlterCommandsModifierListContext _localctx = new AlterCommandsModifierListContext(Context, State);
		EnterRule(_localctx, 24, RULE_alterCommandsModifierList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1416;
			alterCommandsModifier();
			State = 1421;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1417;
					Match(COMMA_SYMBOL);
					State = 1418;
					alterCommandsModifier();
					}
					} 
				}
				State = 1423;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StandaloneAlterCommandsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD_SYMBOL() { return GetToken(MySqlParser.DISCARD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySqlParser.TABLESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT_SYMBOL() { return GetToken(MySqlParser.IMPORT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AlterPartitionContext alterPartition() {
			return GetRuleContext<AlterPartitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_LOAD_SYMBOL() { return GetToken(MySqlParser.SECONDARY_LOAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_UNLOAD_SYMBOL() { return GetToken(MySqlParser.SECONDARY_UNLOAD_SYMBOL, 0); }
		public StandaloneAlterCommandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standaloneAlterCommands; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStandaloneAlterCommands(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStandaloneAlterCommands(this);
		}
	}

	[RuleVersion(0)]
	public StandaloneAlterCommandsContext standaloneAlterCommands() {
		StandaloneAlterCommandsContext _localctx = new StandaloneAlterCommandsContext(Context, State);
		EnterRule(_localctx, 26, RULE_standaloneAlterCommands);
		int _la;
		try {
			State = 1431;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1424;
				Match(DISCARD_SYMBOL);
				State = 1425;
				Match(TABLESPACE_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1426;
				Match(IMPORT_SYMBOL);
				State = 1427;
				Match(TABLESPACE_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1428;
				alterPartition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1429;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 1430;
				_la = TokenStream.LA(1);
				if ( !(_la==SECONDARY_LOAD_SYMBOL || _la==SECONDARY_UNLOAD_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterPartitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_SYMBOL() { return GetToken(MySqlParser.ADD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySqlParser.PARTITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionsContext partitionDefinitions() {
			return GetRuleContext<PartitionDefinitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONS_SYMBOL() { return GetToken(MySqlParser.PARTITIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoWriteToBinLogContext[] noWriteToBinLog() {
			return GetRuleContexts<NoWriteToBinLogContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoWriteToBinLogContext noWriteToBinLog(int i) {
			return GetRuleContext<NoWriteToBinLogContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP_SYMBOL() { return GetToken(MySqlParser.DROP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REBUILD_SYMBOL() { return GetToken(MySqlParser.REBUILD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AllOrPartitionNameListContext allOrPartitionNameList() {
			return GetRuleContext<AllOrPartitionNameListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIMIZE_SYMBOL() { return GetToken(MySqlParser.OPTIMIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE_SYMBOL() { return GetToken(MySqlParser.ANALYZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK_SYMBOL() { return GetToken(MySqlParser.CHECK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CheckOptionContext[] checkOption() {
			return GetRuleContexts<CheckOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckOptionContext checkOption(int i) {
			return GetRuleContext<CheckOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPAIR_SYMBOL() { return GetToken(MySqlParser.REPAIR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RepairTypeContext[] repairType() {
			return GetRuleContexts<RepairTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepairTypeContext repairType(int i) {
			return GetRuleContext<RepairTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE_SYMBOL() { return GetToken(MySqlParser.COALESCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE_SYMBOL() { return GetToken(MySqlParser.TRUNCATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REORGANIZE_SYMBOL() { return GetToken(MySqlParser.REORGANIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO_SYMBOL() { return GetToken(MySqlParser.INTO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCHANGE_SYMBOL() { return GetToken(MySqlParser.EXCHANGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySqlParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySqlParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithValidationContext withValidation() {
			return GetRuleContext<WithValidationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD_SYMBOL() { return GetToken(MySqlParser.DISCARD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySqlParser.TABLESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT_SYMBOL() { return GetToken(MySqlParser.IMPORT_SYMBOL, 0); }
		public AlterPartitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterPartition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterPartition(this);
		}
	}

	[RuleVersion(0)]
	public AlterPartitionContext alterPartition() {
		AlterPartitionContext _localctx = new AlterPartitionContext(Context, State);
		EnterRule(_localctx, 28, RULE_alterPartition);
		int _la;
		try {
			State = 1529;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1433;
				Match(ADD_SYMBOL);
				State = 1434;
				Match(PARTITION_SYMBOL);
				State = 1436;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					State = 1435;
					noWriteToBinLog();
					}
				}

				State = 1441;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_PAR_SYMBOL:
					{
					State = 1438;
					partitionDefinitions();
					}
					break;
				case PARTITIONS_SYMBOL:
					{
					State = 1439;
					Match(PARTITIONS_SYMBOL);
					State = 1440;
					real_ulong_number();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1443;
				Match(DROP_SYMBOL);
				State = 1444;
				Match(PARTITION_SYMBOL);
				State = 1445;
				identifierList();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1446;
				Match(REBUILD_SYMBOL);
				State = 1447;
				Match(PARTITION_SYMBOL);
				State = 1449;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
				case 1:
					{
					State = 1448;
					noWriteToBinLog();
					}
					break;
				}
				State = 1451;
				allOrPartitionNameList();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1452;
				Match(OPTIMIZE_SYMBOL);
				State = 1453;
				Match(PARTITION_SYMBOL);
				State = 1455;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
				case 1:
					{
					State = 1454;
					noWriteToBinLog();
					}
					break;
				}
				State = 1457;
				allOrPartitionNameList();
				State = 1459;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					State = 1458;
					noWriteToBinLog();
					}
				}

				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1461;
				Match(ANALYZE_SYMBOL);
				State = 1462;
				Match(PARTITION_SYMBOL);
				State = 1464;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
				case 1:
					{
					State = 1463;
					noWriteToBinLog();
					}
					break;
				}
				State = 1466;
				allOrPartitionNameList();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1467;
				Match(CHECK_SYMBOL);
				State = 1468;
				Match(PARTITION_SYMBOL);
				State = 1469;
				allOrPartitionNameList();
				State = 1473;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CHANGED_SYMBOL || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (EXTENDED_SYMBOL - 180)) | (1L << (FAST_SYMBOL - 180)) | (1L << (FOR_SYMBOL - 180)))) != 0) || _la==MEDIUM_SYMBOL || _la==QUICK_SYMBOL) {
					{
					{
					State = 1470;
					checkOption();
					}
					}
					State = 1475;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1476;
				Match(REPAIR_SYMBOL);
				State = 1477;
				Match(PARTITION_SYMBOL);
				State = 1479;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
				case 1:
					{
					State = 1478;
					noWriteToBinLog();
					}
					break;
				}
				State = 1481;
				allOrPartitionNameList();
				State = 1485;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL || _la==USE_FRM_SYMBOL) {
					{
					{
					State = 1482;
					repairType();
					}
					}
					State = 1487;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1488;
				Match(COALESCE_SYMBOL);
				State = 1489;
				Match(PARTITION_SYMBOL);
				State = 1491;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					State = 1490;
					noWriteToBinLog();
					}
				}

				State = 1493;
				real_ulong_number();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1494;
				Match(TRUNCATE_SYMBOL);
				State = 1495;
				Match(PARTITION_SYMBOL);
				State = 1496;
				allOrPartitionNameList();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1497;
				Match(REORGANIZE_SYMBOL);
				State = 1498;
				Match(PARTITION_SYMBOL);
				State = 1500;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
				case 1:
					{
					State = 1499;
					noWriteToBinLog();
					}
					break;
				}
				State = 1506;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
				case 1:
					{
					State = 1502;
					identifierList();
					State = 1503;
					Match(INTO_SYMBOL);
					State = 1504;
					partitionDefinitions();
					}
					break;
				}
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1508;
				Match(EXCHANGE_SYMBOL);
				State = 1509;
				Match(PARTITION_SYMBOL);
				State = 1510;
				identifier();
				State = 1511;
				Match(WITH_SYMBOL);
				State = 1512;
				Match(TABLE_SYMBOL);
				State = 1513;
				tableRef();
				State = 1515;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
				case 1:
					{
					State = 1514;
					withValidation();
					}
					break;
				}
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1517;
				if (!(serverVersion >= 50704)) throw new FailedPredicateException(this, "serverVersion >= 50704");
				State = 1518;
				Match(DISCARD_SYMBOL);
				State = 1519;
				Match(PARTITION_SYMBOL);
				State = 1520;
				allOrPartitionNameList();
				State = 1521;
				Match(TABLESPACE_SYMBOL);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1523;
				if (!(serverVersion >= 50704)) throw new FailedPredicateException(this, "serverVersion >= 50704");
				State = 1524;
				Match(IMPORT_SYMBOL);
				State = 1525;
				Match(PARTITION_SYMBOL);
				State = 1526;
				allOrPartitionNameList();
				State = 1527;
				Match(TABLESPACE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterListItemContext[] alterListItem() {
			return GetRuleContexts<AlterListItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterListItemContext alterListItem(int i) {
			return GetRuleContext<AlterListItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTableOptionsSpaceSeparatedContext[] createTableOptionsSpaceSeparated() {
			return GetRuleContexts<CreateTableOptionsSpaceSeparatedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTableOptionsSpaceSeparatedContext createTableOptionsSpaceSeparated(int i) {
			return GetRuleContext<CreateTableOptionsSpaceSeparatedContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterCommandsModifierContext[] alterCommandsModifier() {
			return GetRuleContexts<AlterCommandsModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterCommandsModifierContext alterCommandsModifier(int i) {
			return GetRuleContext<AlterCommandsModifierContext>(i);
		}
		public AlterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterList(this);
		}
	}

	[RuleVersion(0)]
	public AlterListContext alterList() {
		AlterListContext _localctx = new AlterListContext(Context, State);
		EnterRule(_localctx, 30, RULE_alterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1533;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 1531;
				alterListItem();
				}
				break;
			case 2:
				{
				State = 1532;
				createTableOptionsSpaceSeparated();
				}
				break;
			}
			State = 1543;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 1535;
				Match(COMMA_SYMBOL);
				State = 1539;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
				case 1:
					{
					State = 1536;
					alterListItem();
					}
					break;
				case 2:
					{
					State = 1537;
					alterCommandsModifier();
					}
					break;
				case 3:
					{
					State = 1538;
					createTableOptionsSpaceSeparated();
					}
					break;
				}
				}
				}
				State = 1545;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterCommandsModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterAlgorithmOptionContext alterAlgorithmOption() {
			return GetRuleContext<AlterAlgorithmOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterLockOptionContext alterLockOption() {
			return GetRuleContext<AlterLockOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithValidationContext withValidation() {
			return GetRuleContext<WithValidationContext>(0);
		}
		public AlterCommandsModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterCommandsModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterCommandsModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterCommandsModifier(this);
		}
	}

	[RuleVersion(0)]
	public AlterCommandsModifierContext alterCommandsModifier() {
		AlterCommandsModifierContext _localctx = new AlterCommandsModifierContext(Context, State);
		EnterRule(_localctx, 32, RULE_alterCommandsModifier);
		try {
			State = 1549;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1546;
				alterAlgorithmOption();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1547;
				alterLockOption();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1548;
				withValidation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterListItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_SYMBOL() { return GetToken(MySqlParser.ADD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDefinitionContext fieldDefinition() {
			return GetRuleContext<FieldDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableElementListContext tableElementList() {
			return GetRuleContext<TableElementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_SYMBOL() { return GetToken(MySqlParser.COLUMN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CheckOrReferencesContext checkOrReferences() {
			return GetRuleContext<CheckOrReferencesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableConstraintDefContext tableConstraintDef() {
			return GetRuleContext<TableConstraintDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGE_SYMBOL() { return GetToken(MySqlParser.CHANGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnInternalRefContext columnInternalRef() {
			return GetRuleContext<ColumnInternalRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFY_SYMBOL() { return GetToken(MySqlParser.MODIFY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP_SYMBOL() { return GetToken(MySqlParser.DROP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN_SYMBOL() { return GetToken(MySqlParser.FOREIGN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_SYMBOL() { return GetToken(MySqlParser.KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY_SYMBOL() { return GetToken(MySqlParser.PRIMARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeyOrIndexContext keyOrIndex() {
			return GetRuleContext<KeyOrIndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexRefContext indexRef() {
			return GetRuleContext<IndexRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK_SYMBOL() { return GetToken(MySqlParser.CHECK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_SYMBOL() { return GetToken(MySqlParser.CONSTRAINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RestrictContext restrict() {
			return GetRuleContext<RestrictContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_SYMBOL() { return GetToken(MySqlParser.DISABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYS_SYMBOL() { return GetToken(MySqlParser.KEYS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_SYMBOL() { return GetToken(MySqlParser.ENABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER_SYMBOL() { return GetToken(MySqlParser.ALTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySqlParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprWithParenthesesContext exprWithParentheses() {
			return GetRuleContext<ExprWithParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignedLiteralContext signedLiteral() {
			return GetRuleContext<SignedLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_SYMBOL() { return GetToken(MySqlParser.INDEX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintEnforcementContext constraintEnforcement() {
			return GetRuleContext<ConstraintEnforcementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME_SYMBOL() { return GetToken(MySqlParser.RENAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SYMBOL() { return GetToken(MySqlParser.TO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySqlParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexNameContext indexName() {
			return GetRuleContext<IndexNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT_SYMBOL() { return GetToken(MySqlParser.CONVERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetContext charset() {
			return GetRuleContext<CharsetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE_SYMBOL() { return GetToken(MySqlParser.FORCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER_SYMBOL() { return GetToken(MySqlParser.ORDER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySqlParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AlterOrderListContext alterOrderList() {
			return GetRuleContext<AlterOrderListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPGRADE_SYMBOL() { return GetToken(MySqlParser.UPGRADE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONING_SYMBOL() { return GetToken(MySqlParser.PARTITIONING_SYMBOL, 0); }
		public AlterListItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterListItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterListItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterListItem(this);
		}
	}

	[RuleVersion(0)]
	public AlterListItemContext alterListItem() {
		AlterListItemContext _localctx = new AlterListItemContext(Context, State);
		EnterRule(_localctx, 34, RULE_alterListItem);
		int _la;
		try {
			State = 1696;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1551;
				Match(ADD_SYMBOL);
				State = 1553;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
				case 1:
					{
					State = 1552;
					Match(COLUMN_SYMBOL);
					}
					break;
				}
				State = 1567;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
				case 1:
					{
					State = 1555;
					identifier();
					State = 1556;
					fieldDefinition();
					State = 1558;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
					case 1:
						{
						State = 1557;
						checkOrReferences();
						}
						break;
					}
					State = 1561;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AFTER_SYMBOL || _la==FIRST_SYMBOL) {
						{
						State = 1560;
						place();
						}
					}

					}
					break;
				case 2:
					{
					State = 1563;
					Match(OPEN_PAR_SYMBOL);
					State = 1564;
					tableElementList();
					State = 1565;
					Match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1569;
				Match(ADD_SYMBOL);
				State = 1570;
				tableConstraintDef();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1571;
				Match(CHANGE_SYMBOL);
				State = 1573;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
				case 1:
					{
					State = 1572;
					Match(COLUMN_SYMBOL);
					}
					break;
				}
				State = 1575;
				columnInternalRef();
				State = 1576;
				identifier();
				State = 1577;
				fieldDefinition();
				State = 1579;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AFTER_SYMBOL || _la==FIRST_SYMBOL) {
					{
					State = 1578;
					place();
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1581;
				Match(MODIFY_SYMBOL);
				State = 1583;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
				case 1:
					{
					State = 1582;
					Match(COLUMN_SYMBOL);
					}
					break;
				}
				State = 1585;
				columnInternalRef();
				State = 1586;
				fieldDefinition();
				State = 1588;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AFTER_SYMBOL || _la==FIRST_SYMBOL) {
					{
					State = 1587;
					place();
					}
				}

				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1590;
				Match(DROP_SYMBOL);
				State = 1619;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
				case 1:
					{
					State = 1592;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
					case 1:
						{
						State = 1591;
						Match(COLUMN_SYMBOL);
						}
						break;
					}
					State = 1594;
					columnInternalRef();
					State = 1596;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) {
						{
						State = 1595;
						restrict();
						}
					}

					}
					break;
				case 2:
					{
					State = 1598;
					Match(FOREIGN_SYMBOL);
					State = 1599;
					Match(KEY_SYMBOL);
					State = 1606;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
					case 1:
						{
						State = 1600;
						if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
						State = 1601;
						columnInternalRef();
						}
						break;
					case 2:
						{
						State = 1602;
						if (!(serverVersion < 50700)) throw new FailedPredicateException(this, "serverVersion < 50700");
						State = 1604;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
						case 1:
							{
							State = 1603;
							columnInternalRef();
							}
							break;
						}
						}
						break;
					}
					}
					break;
				case 3:
					{
					State = 1608;
					Match(PRIMARY_SYMBOL);
					State = 1609;
					Match(KEY_SYMBOL);
					}
					break;
				case 4:
					{
					State = 1610;
					keyOrIndex();
					State = 1611;
					indexRef();
					}
					break;
				case 5:
					{
					State = 1613;
					if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
					State = 1614;
					Match(CHECK_SYMBOL);
					State = 1615;
					identifier();
					}
					break;
				case 6:
					{
					State = 1616;
					if (!(serverVersion >= 80019)) throw new FailedPredicateException(this, "serverVersion >= 80019");
					State = 1617;
					Match(CONSTRAINT_SYMBOL);
					State = 1618;
					identifier();
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1621;
				Match(DISABLE_SYMBOL);
				State = 1622;
				Match(KEYS_SYMBOL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1623;
				Match(ENABLE_SYMBOL);
				State = 1624;
				Match(KEYS_SYMBOL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1625;
				Match(ALTER_SYMBOL);
				State = 1627;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
				case 1:
					{
					State = 1626;
					Match(COLUMN_SYMBOL);
					}
					break;
				}
				State = 1629;
				columnInternalRef();
				State = 1639;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SET_SYMBOL:
					{
					State = 1630;
					Match(SET_SYMBOL);
					State = 1631;
					Match(DEFAULT_SYMBOL);
					State = 1635;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
					case 1:
						{
						State = 1632;
						if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
						State = 1633;
						exprWithParentheses();
						}
						break;
					case 2:
						{
						State = 1634;
						signedLiteral();
						}
						break;
					}
					}
					break;
				case DROP_SYMBOL:
					{
					State = 1637;
					Match(DROP_SYMBOL);
					State = 1638;
					Match(DEFAULT_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1641;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 1642;
				Match(ALTER_SYMBOL);
				State = 1643;
				Match(INDEX_SYMBOL);
				State = 1644;
				indexRef();
				State = 1645;
				visibility();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1647;
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				State = 1648;
				Match(ALTER_SYMBOL);
				State = 1649;
				Match(CHECK_SYMBOL);
				State = 1650;
				identifier();
				State = 1651;
				constraintEnforcement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1653;
				if (!(serverVersion >= 80019)) throw new FailedPredicateException(this, "serverVersion >= 80019");
				State = 1654;
				Match(ALTER_SYMBOL);
				State = 1655;
				Match(CONSTRAINT_SYMBOL);
				State = 1656;
				identifier();
				State = 1657;
				constraintEnforcement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1659;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 1660;
				Match(RENAME_SYMBOL);
				State = 1661;
				Match(COLUMN_SYMBOL);
				State = 1662;
				columnInternalRef();
				State = 1663;
				Match(TO_SYMBOL);
				State = 1664;
				identifier();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1666;
				Match(RENAME_SYMBOL);
				State = 1668;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
				case 1:
					{
					State = 1667;
					_la = TokenStream.LA(1);
					if ( !(_la==AS_SYMBOL || _la==TO_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 1670;
				tableName();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1671;
				if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
				State = 1672;
				Match(RENAME_SYMBOL);
				State = 1673;
				keyOrIndex();
				State = 1674;
				indexRef();
				State = 1675;
				Match(TO_SYMBOL);
				State = 1676;
				indexName();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1678;
				Match(CONVERT_SYMBOL);
				State = 1679;
				Match(TO_SYMBOL);
				State = 1680;
				charset();
				State = 1684;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
				case 1:
					{
					State = 1681;
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					State = 1682;
					Match(DEFAULT_SYMBOL);
					}
					break;
				case 2:
					{
					State = 1683;
					charsetName();
					}
					break;
				}
				State = 1687;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLLATE_SYMBOL) {
					{
					State = 1686;
					collate();
					}
				}

				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1689;
				Match(FORCE_SYMBOL);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1690;
				Match(ORDER_SYMBOL);
				State = 1691;
				Match(BY_SYMBOL);
				State = 1692;
				alterOrderList();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1693;
				if (!(serverVersion >= 50708 && serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion >= 50708 && serverVersion < 80000");
				State = 1694;
				Match(UPGRADE_SYMBOL);
				State = 1695;
				Match(PARTITIONING_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER_SYMBOL() { return GetToken(MySqlParser.AFTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_SYMBOL() { return GetToken(MySqlParser.FIRST_SYMBOL, 0); }
		public PlaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_place; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPlace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPlace(this);
		}
	}

	[RuleVersion(0)]
	public PlaceContext place() {
		PlaceContext _localctx = new PlaceContext(Context, State);
		EnterRule(_localctx, 36, RULE_place);
		try {
			State = 1701;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AFTER_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1698;
				Match(AFTER_SYMBOL);
				State = 1699;
				identifier();
				}
				break;
			case FIRST_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1700;
				Match(FIRST_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RestrictContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT_SYMBOL() { return GetToken(MySqlParser.RESTRICT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE_SYMBOL() { return GetToken(MySqlParser.CASCADE_SYMBOL, 0); }
		public RestrictContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_restrict; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRestrict(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRestrict(this);
		}
	}

	[RuleVersion(0)]
	public RestrictContext restrict() {
		RestrictContext _localctx = new RestrictContext(Context, State);
		EnterRule(_localctx, 38, RULE_restrict);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1703;
			_la = TokenStream.LA(1);
			if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterOrderListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionContext[] direction() {
			return GetRuleContexts<DirectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionContext direction(int i) {
			return GetRuleContext<DirectionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public AlterOrderListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterOrderList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterOrderList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterOrderList(this);
		}
	}

	[RuleVersion(0)]
	public AlterOrderListContext alterOrderList() {
		AlterOrderListContext _localctx = new AlterOrderListContext(Context, State);
		EnterRule(_localctx, 40, RULE_alterOrderList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1705;
			identifier();
			State = 1707;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC_SYMBOL || _la==DESC_SYMBOL) {
				{
				State = 1706;
				direction();
				}
			}

			State = 1716;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1709;
					Match(COMMA_SYMBOL);
					State = 1710;
					identifier();
					State = 1712;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ASC_SYMBOL || _la==DESC_SYMBOL) {
						{
						State = 1711;
						direction();
						}
					}

					}
					} 
				}
				State = 1718;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterAlgorithmOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM_SYMBOL() { return GetToken(MySqlParser.ALGORITHM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		public AlterAlgorithmOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterAlgorithmOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterAlgorithmOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterAlgorithmOption(this);
		}
	}

	[RuleVersion(0)]
	public AlterAlgorithmOptionContext alterAlgorithmOption() {
		AlterAlgorithmOptionContext _localctx = new AlterAlgorithmOptionContext(Context, State);
		EnterRule(_localctx, 42, RULE_alterAlgorithmOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1719;
			Match(ALGORITHM_SYMBOL);
			State = 1721;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				{
				State = 1720;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 1725;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				{
				State = 1723;
				Match(DEFAULT_SYMBOL);
				}
				break;
			case 2:
				{
				State = 1724;
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterLockOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK_SYMBOL() { return GetToken(MySqlParser.LOCK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		public AlterLockOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterLockOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterLockOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterLockOption(this);
		}
	}

	[RuleVersion(0)]
	public AlterLockOptionContext alterLockOption() {
		AlterLockOptionContext _localctx = new AlterLockOptionContext(Context, State);
		EnterRule(_localctx, 44, RULE_alterLockOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1727;
			Match(LOCK_SYMBOL);
			State = 1729;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				{
				State = 1728;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 1733;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				{
				State = 1731;
				Match(DEFAULT_SYMBOL);
				}
				break;
			case 2:
				{
				State = 1732;
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexLockAndAlgorithmContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterAlgorithmOptionContext alterAlgorithmOption() {
			return GetRuleContext<AlterAlgorithmOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterLockOptionContext alterLockOption() {
			return GetRuleContext<AlterLockOptionContext>(0);
		}
		public IndexLockAndAlgorithmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexLockAndAlgorithm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexLockAndAlgorithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexLockAndAlgorithm(this);
		}
	}

	[RuleVersion(0)]
	public IndexLockAndAlgorithmContext indexLockAndAlgorithm() {
		IndexLockAndAlgorithmContext _localctx = new IndexLockAndAlgorithmContext(Context, State);
		EnterRule(_localctx, 46, RULE_indexLockAndAlgorithm);
		int _la;
		try {
			State = 1743;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALGORITHM_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1735;
				alterAlgorithmOption();
				State = 1737;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCK_SYMBOL) {
					{
					State = 1736;
					alterLockOption();
					}
				}

				}
				break;
			case LOCK_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1739;
				alterLockOption();
				State = 1741;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALGORITHM_SYMBOL) {
					{
					State = 1740;
					alterAlgorithmOption();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithValidationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATION_SYMBOL() { return GetToken(MySqlParser.VALIDATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySqlParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT_SYMBOL() { return GetToken(MySqlParser.WITHOUT_SYMBOL, 0); }
		public WithValidationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withValidation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWithValidation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWithValidation(this);
		}
	}

	[RuleVersion(0)]
	public WithValidationContext withValidation() {
		WithValidationContext _localctx = new WithValidationContext(Context, State);
		EnterRule(_localctx, 48, RULE_withValidation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1745;
			if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
			State = 1746;
			_la = TokenStream.LA(1);
			if ( !(_la==WITH_SYMBOL || _la==WITHOUT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1747;
			Match(VALIDATION_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemovePartitioningContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE_SYMBOL() { return GetToken(MySqlParser.REMOVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONING_SYMBOL() { return GetToken(MySqlParser.PARTITIONING_SYMBOL, 0); }
		public RemovePartitioningContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removePartitioning; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRemovePartitioning(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRemovePartitioning(this);
		}
	}

	[RuleVersion(0)]
	public RemovePartitioningContext removePartitioning() {
		RemovePartitioningContext _localctx = new RemovePartitioningContext(Context, State);
		EnterRule(_localctx, 50, RULE_removePartitioning);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1749;
			Match(REMOVE_SYMBOL);
			State = 1750;
			Match(PARTITIONING_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllOrPartitionNameListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySqlParser.ALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public AllOrPartitionNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allOrPartitionNameList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAllOrPartitionNameList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAllOrPartitionNameList(this);
		}
	}

	[RuleVersion(0)]
	public AllOrPartitionNameListContext allOrPartitionNameList() {
		AllOrPartitionNameListContext _localctx = new AllOrPartitionNameListContext(Context, State);
		EnterRule(_localctx, 52, RULE_allOrPartitionNameList);
		try {
			State = 1754;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1752;
				Match(ALL_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1753;
				identifierList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTablespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySqlParser.TABLESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablespaceRefContext tablespaceRef() {
			return GetRuleContext<TablespaceRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATAFILE_SYMBOL() { return GetToken(MySqlParser.DATAFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME_SYMBOL() { return GetToken(MySqlParser.RENAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SYMBOL() { return GetToken(MySqlParser.TO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterTablespaceOptionsContext alterTablespaceOptions() {
			return GetRuleContext<AlterTablespaceOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_SYMBOL() { return GetToken(MySqlParser.ADD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP_SYMBOL() { return GetToken(MySqlParser.DROP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGE_SYMBOL() { return GetToken(MySqlParser.CHANGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_SYMBOL() { return GetToken(MySqlParser.NOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESSIBLE_SYMBOL() { return GetToken(MySqlParser.ACCESSIBLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_ONLY_SYMBOL() { return GetToken(MySqlParser.READ_ONLY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_WRITE_SYMBOL() { return GetToken(MySqlParser.READ_WRITE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChangeTablespaceOptionContext[] changeTablespaceOption() {
			return GetRuleContexts<ChangeTablespaceOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeTablespaceOptionContext changeTablespaceOption(int i) {
			return GetRuleContext<ChangeTablespaceOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public AlterTablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTablespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterTablespace(this);
		}
	}

	[RuleVersion(0)]
	public AlterTablespaceContext alterTablespace() {
		AlterTablespaceContext _localctx = new AlterTablespaceContext(Context, State);
		EnterRule(_localctx, 54, RULE_alterTablespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1756;
			Match(TABLESPACE_SYMBOL);
			State = 1757;
			tablespaceRef();
			State = 1791;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				{
				State = 1758;
				_la = TokenStream.LA(1);
				if ( !(_la==ADD_SYMBOL || _la==DROP_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1759;
				Match(DATAFILE_SYMBOL);
				State = 1760;
				textLiteral();
				State = 1762;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AUTOEXTEND_SIZE_SYMBOL || _la==ENCRYPTION_SYMBOL || _la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==MAX_SIZE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
					{
					State = 1761;
					alterTablespaceOptions();
					}
				}

				}
				break;
			case 2:
				{
				State = 1764;
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				State = 1784;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Eof:
				case SEMICOLON_SYMBOL:
					{
					}
					break;
				case CHANGE_SYMBOL:
					{
					State = 1766;
					Match(CHANGE_SYMBOL);
					State = 1767;
					Match(DATAFILE_SYMBOL);
					State = 1768;
					textLiteral();
					State = 1779;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AUTOEXTEND_SIZE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==MAX_SIZE_SYMBOL) {
						{
						State = 1769;
						changeTablespaceOption();
						State = 1776;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==AUTOEXTEND_SIZE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==MAX_SIZE_SYMBOL || _la==COMMA_SYMBOL) {
							{
							{
							State = 1771;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA_SYMBOL) {
								{
								State = 1770;
								Match(COMMA_SYMBOL);
								}
							}

							State = 1773;
							changeTablespaceOption();
							}
							}
							State = 1778;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
					}

					}
					break;
				case READ_ONLY_SYMBOL:
				case READ_WRITE_SYMBOL:
					{
					State = 1781;
					_la = TokenStream.LA(1);
					if ( !(_la==READ_ONLY_SYMBOL || _la==READ_WRITE_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case NOT_SYMBOL:
					{
					State = 1782;
					Match(NOT_SYMBOL);
					State = 1783;
					Match(ACCESSIBLE_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				{
				State = 1786;
				Match(RENAME_SYMBOL);
				State = 1787;
				Match(TO_SYMBOL);
				State = 1788;
				identifier();
				}
				break;
			case 4:
				{
				State = 1789;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 1790;
				alterTablespaceOptions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterUndoTablespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDO_SYMBOL() { return GetToken(MySqlParser.UNDO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySqlParser.TABLESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablespaceRefContext tablespaceRef() {
			return GetRuleContext<TablespaceRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySqlParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTIVE_SYMBOL() { return GetToken(MySqlParser.ACTIVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INACTIVE_SYMBOL() { return GetToken(MySqlParser.INACTIVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UndoTableSpaceOptionsContext undoTableSpaceOptions() {
			return GetRuleContext<UndoTableSpaceOptionsContext>(0);
		}
		public AlterUndoTablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterUndoTablespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterUndoTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterUndoTablespace(this);
		}
	}

	[RuleVersion(0)]
	public AlterUndoTablespaceContext alterUndoTablespace() {
		AlterUndoTablespaceContext _localctx = new AlterUndoTablespaceContext(Context, State);
		EnterRule(_localctx, 56, RULE_alterUndoTablespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1793;
			Match(UNDO_SYMBOL);
			State = 1794;
			Match(TABLESPACE_SYMBOL);
			State = 1795;
			tablespaceRef();
			State = 1796;
			Match(SET_SYMBOL);
			State = 1797;
			_la = TokenStream.LA(1);
			if ( !(_la==ACTIVE_SYMBOL || _la==INACTIVE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1799;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE_SYMBOL || _la==STORAGE_SYMBOL) {
				{
				State = 1798;
				undoTableSpaceOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UndoTableSpaceOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UndoTableSpaceOptionContext[] undoTableSpaceOption() {
			return GetRuleContexts<UndoTableSpaceOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UndoTableSpaceOptionContext undoTableSpaceOption(int i) {
			return GetRuleContext<UndoTableSpaceOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public UndoTableSpaceOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_undoTableSpaceOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUndoTableSpaceOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUndoTableSpaceOptions(this);
		}
	}

	[RuleVersion(0)]
	public UndoTableSpaceOptionsContext undoTableSpaceOptions() {
		UndoTableSpaceOptionsContext _localctx = new UndoTableSpaceOptionsContext(Context, State);
		EnterRule(_localctx, 58, RULE_undoTableSpaceOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1801;
			undoTableSpaceOption();
			State = 1808;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ENGINE_SYMBOL || _la==STORAGE_SYMBOL || _la==COMMA_SYMBOL) {
				{
				{
				State = 1803;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 1802;
					Match(COMMA_SYMBOL);
					}
				}

				State = 1805;
				undoTableSpaceOption();
				}
				}
				State = 1810;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UndoTableSpaceOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionEngineContext tsOptionEngine() {
			return GetRuleContext<TsOptionEngineContext>(0);
		}
		public UndoTableSpaceOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_undoTableSpaceOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUndoTableSpaceOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUndoTableSpaceOption(this);
		}
	}

	[RuleVersion(0)]
	public UndoTableSpaceOptionContext undoTableSpaceOption() {
		UndoTableSpaceOptionContext _localctx = new UndoTableSpaceOptionContext(Context, State);
		EnterRule(_localctx, 60, RULE_undoTableSpaceOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1811;
			tsOptionEngine();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTablespaceOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterTablespaceOptionContext[] alterTablespaceOption() {
			return GetRuleContexts<AlterTablespaceOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterTablespaceOptionContext alterTablespaceOption(int i) {
			return GetRuleContext<AlterTablespaceOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public AlterTablespaceOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTablespaceOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterTablespaceOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterTablespaceOptions(this);
		}
	}

	[RuleVersion(0)]
	public AlterTablespaceOptionsContext alterTablespaceOptions() {
		AlterTablespaceOptionsContext _localctx = new AlterTablespaceOptionsContext(Context, State);
		EnterRule(_localctx, 62, RULE_alterTablespaceOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1813;
			alterTablespaceOption();
			State = 1820;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AUTOEXTEND_SIZE_SYMBOL || _la==ENCRYPTION_SYMBOL || _la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==MAX_SIZE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL || _la==COMMA_SYMBOL) {
				{
				{
				State = 1815;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 1814;
					Match(COMMA_SYMBOL);
					}
				}

				State = 1817;
				alterTablespaceOption();
				}
				}
				State = 1822;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTablespaceOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE_SYMBOL() { return GetToken(MySqlParser.INITIAL_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionAutoextendSizeContext tsOptionAutoextendSize() {
			return GetRuleContext<TsOptionAutoextendSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionMaxSizeContext tsOptionMaxSize() {
			return GetRuleContext<TsOptionMaxSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionEngineContext tsOptionEngine() {
			return GetRuleContext<TsOptionEngineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionWaitContext tsOptionWait() {
			return GetRuleContext<TsOptionWaitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionEncryptionContext tsOptionEncryption() {
			return GetRuleContext<TsOptionEncryptionContext>(0);
		}
		public AlterTablespaceOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTablespaceOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterTablespaceOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterTablespaceOption(this);
		}
	}

	[RuleVersion(0)]
	public AlterTablespaceOptionContext alterTablespaceOption() {
		AlterTablespaceOptionContext _localctx = new AlterTablespaceOptionContext(Context, State);
		EnterRule(_localctx, 64, RULE_alterTablespaceOption);
		try {
			State = 1833;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INITIAL_SIZE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1823;
				Match(INITIAL_SIZE_SYMBOL);
				State = 1825;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
				case 1:
					{
					State = 1824;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 1827;
				sizeNumber();
				}
				break;
			case AUTOEXTEND_SIZE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1828;
				tsOptionAutoextendSize();
				}
				break;
			case MAX_SIZE_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1829;
				tsOptionMaxSize();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1830;
				tsOptionEngine();
				}
				break;
			case NO_WAIT_SYMBOL:
			case WAIT_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1831;
				tsOptionWait();
				}
				break;
			case ENCRYPTION_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1832;
				tsOptionEncryption();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeTablespaceOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE_SYMBOL() { return GetToken(MySqlParser.INITIAL_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionAutoextendSizeContext tsOptionAutoextendSize() {
			return GetRuleContext<TsOptionAutoextendSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionMaxSizeContext tsOptionMaxSize() {
			return GetRuleContext<TsOptionMaxSizeContext>(0);
		}
		public ChangeTablespaceOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeTablespaceOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChangeTablespaceOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChangeTablespaceOption(this);
		}
	}

	[RuleVersion(0)]
	public ChangeTablespaceOptionContext changeTablespaceOption() {
		ChangeTablespaceOptionContext _localctx = new ChangeTablespaceOptionContext(Context, State);
		EnterRule(_localctx, 66, RULE_changeTablespaceOption);
		try {
			State = 1842;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INITIAL_SIZE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1835;
				Match(INITIAL_SIZE_SYMBOL);
				State = 1837;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
				case 1:
					{
					State = 1836;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 1839;
				sizeNumber();
				}
				break;
			case AUTOEXTEND_SIZE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1840;
				tsOptionAutoextendSize();
				}
				break;
			case MAX_SIZE_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1841;
				tsOptionMaxSize();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterViewContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW_SYMBOL() { return GetToken(MySqlParser.VIEW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ViewRefContext viewRef() {
			return GetRuleContext<ViewRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewTailContext viewTail() {
			return GetRuleContext<ViewTailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewAlgorithmContext viewAlgorithm() {
			return GetRuleContext<ViewAlgorithmContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinerClauseContext definerClause() {
			return GetRuleContext<DefinerClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewSuidContext viewSuid() {
			return GetRuleContext<ViewSuidContext>(0);
		}
		public AlterViewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterView; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterView(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterView(this);
		}
	}

	[RuleVersion(0)]
	public AlterViewContext alterView() {
		AlterViewContext _localctx = new AlterViewContext(Context, State);
		EnterRule(_localctx, 68, RULE_alterView);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1845;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALGORITHM_SYMBOL) {
				{
				State = 1844;
				viewAlgorithm();
				}
			}

			State = 1848;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				State = 1847;
				definerClause();
				}
			}

			State = 1851;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SQL_SYMBOL) {
				{
				State = 1850;
				viewSuid();
				}
			}

			State = 1853;
			Match(VIEW_SYMBOL);
			State = 1854;
			viewRef();
			State = 1855;
			viewTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewTailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySqlParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ViewSelectContext viewSelect() {
			return GetRuleContext<ViewSelectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnInternalRefListContext columnInternalRefList() {
			return GetRuleContext<ColumnInternalRefListContext>(0);
		}
		public ViewTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewTail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterViewTail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitViewTail(this);
		}
	}

	[RuleVersion(0)]
	public ViewTailContext viewTail() {
		ViewTailContext _localctx = new ViewTailContext(Context, State);
		EnterRule(_localctx, 70, RULE_viewTail);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1858;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 1857;
				columnInternalRefList();
				}
			}

			State = 1860;
			Match(AS_SYMBOL);
			State = 1861;
			viewSelect();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewSelectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionOrParensContext queryExpressionOrParens() {
			return GetRuleContext<QueryExpressionOrParensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewCheckOptionContext viewCheckOption() {
			return GetRuleContext<ViewCheckOptionContext>(0);
		}
		public ViewSelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewSelect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterViewSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitViewSelect(this);
		}
	}

	[RuleVersion(0)]
	public ViewSelectContext viewSelect() {
		ViewSelectContext _localctx = new ViewSelectContext(Context, State);
		EnterRule(_localctx, 72, RULE_viewSelect);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1863;
			queryExpressionOrParens();
			State = 1865;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH_SYMBOL) {
				{
				State = 1864;
				viewCheckOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewCheckOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySqlParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK_SYMBOL() { return GetToken(MySqlParser.CHECK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION_SYMBOL() { return GetToken(MySqlParser.OPTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADED_SYMBOL() { return GetToken(MySqlParser.CASCADED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySqlParser.LOCAL_SYMBOL, 0); }
		public ViewCheckOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewCheckOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterViewCheckOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitViewCheckOption(this);
		}
	}

	[RuleVersion(0)]
	public ViewCheckOptionContext viewCheckOption() {
		ViewCheckOptionContext _localctx = new ViewCheckOptionContext(Context, State);
		EnterRule(_localctx, 74, RULE_viewCheckOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1867;
			Match(WITH_SYMBOL);
			State = 1869;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADED_SYMBOL || _la==LOCAL_SYMBOL) {
				{
				State = 1868;
				_la = TokenStream.LA(1);
				if ( !(_la==CASCADED_SYMBOL || _la==LOCAL_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1871;
			Match(CHECK_SYMBOL);
			State = 1872;
			Match(OPTION_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySqlParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatabaseContext createDatabase() {
			return GetRuleContext<CreateDatabaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTableContext createTable() {
			return GetRuleContext<CreateTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateFunctionContext createFunction() {
			return GetRuleContext<CreateFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateProcedureContext createProcedure() {
			return GetRuleContext<CreateProcedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateUdfContext createUdf() {
			return GetRuleContext<CreateUdfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateLogfileGroupContext createLogfileGroup() {
			return GetRuleContext<CreateLogfileGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateViewContext createView() {
			return GetRuleContext<CreateViewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTriggerContext createTrigger() {
			return GetRuleContext<CreateTriggerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateIndexContext createIndex() {
			return GetRuleContext<CreateIndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateServerContext createServer() {
			return GetRuleContext<CreateServerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTablespaceContext createTablespace() {
			return GetRuleContext<CreateTablespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateEventContext createEvent() {
			return GetRuleContext<CreateEventContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateRoleContext createRole() {
			return GetRuleContext<CreateRoleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateSpatialReferenceContext createSpatialReference() {
			return GetRuleContext<CreateSpatialReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateUndoTablespaceContext createUndoTablespace() {
			return GetRuleContext<CreateUndoTablespaceContext>(0);
		}
		public CreateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateStatement(this);
		}
	}

	[RuleVersion(0)]
	public CreateStatementContext createStatement() {
		CreateStatementContext _localctx = new CreateStatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_createStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1874;
			Match(CREATE_SYMBOL);
			State = 1893;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
			case 1:
				{
				State = 1875;
				createDatabase();
				}
				break;
			case 2:
				{
				State = 1876;
				createTable();
				}
				break;
			case 3:
				{
				State = 1877;
				createFunction();
				}
				break;
			case 4:
				{
				State = 1878;
				createProcedure();
				}
				break;
			case 5:
				{
				State = 1879;
				createUdf();
				}
				break;
			case 6:
				{
				State = 1880;
				createLogfileGroup();
				}
				break;
			case 7:
				{
				State = 1881;
				createView();
				}
				break;
			case 8:
				{
				State = 1882;
				createTrigger();
				}
				break;
			case 9:
				{
				State = 1883;
				createIndex();
				}
				break;
			case 10:
				{
				State = 1884;
				createServer();
				}
				break;
			case 11:
				{
				State = 1885;
				createTablespace();
				}
				break;
			case 12:
				{
				State = 1886;
				createEvent();
				}
				break;
			case 13:
				{
				State = 1887;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 1888;
				createRole();
				}
				break;
			case 14:
				{
				State = 1889;
				if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
				State = 1890;
				createSpatialReference();
				}
				break;
			case 15:
				{
				State = 1891;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 1892;
				createUndoTablespace();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatabaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE_SYMBOL() { return GetToken(MySqlParser.DATABASE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SchemaNameContext schemaName() {
			return GetRuleContext<SchemaNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatabaseOptionContext[] createDatabaseOption() {
			return GetRuleContexts<CreateDatabaseOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return GetRuleContext<CreateDatabaseOptionContext>(i);
		}
		public CreateDatabaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatabase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateDatabase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateDatabase(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatabaseContext createDatabase() {
		CreateDatabaseContext _localctx = new CreateDatabaseContext(Context, State);
		EnterRule(_localctx, 78, RULE_createDatabase);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1895;
			Match(DATABASE_SYMBOL);
			State = 1897;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				{
				State = 1896;
				ifNotExists();
				}
				break;
			}
			State = 1899;
			schemaName();
			State = 1903;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,106,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1900;
					createDatabaseOption();
					}
					} 
				}
				State = 1905;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,106,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatabaseOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefaultCharsetContext defaultCharset() {
			return GetRuleContext<DefaultCharsetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultCollationContext defaultCollation() {
			return GetRuleContext<DefaultCollationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultEncryptionContext defaultEncryption() {
			return GetRuleContext<DefaultEncryptionContext>(0);
		}
		public CreateDatabaseOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatabaseOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateDatabaseOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateDatabaseOption(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatabaseOptionContext createDatabaseOption() {
		CreateDatabaseOptionContext _localctx = new CreateDatabaseOptionContext(Context, State);
		EnterRule(_localctx, 80, RULE_createDatabaseOption);
		try {
			State = 1910;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1906;
				defaultCharset();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1907;
				defaultCollation();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1908;
				if (!(serverVersion >= 80016)) throw new FailedPredicateException(this, "serverVersion >= 80016");
				State = 1909;
				defaultEncryption();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySqlParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE_SYMBOL() { return GetToken(MySqlParser.LIKE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY_SYMBOL() { return GetToken(MySqlParser.TEMPORARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableElementListContext tableElementList() {
			return GetRuleContext<TableElementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTableOptionsContext createTableOptions() {
			return GetRuleContext<CreateTableOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionClauseContext partitionClause() {
			return GetRuleContext<PartitionClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DuplicateAsQueryExpressionContext duplicateAsQueryExpression() {
			return GetRuleContext<DuplicateAsQueryExpressionContext>(0);
		}
		public CreateTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateTable(this);
		}
	}

	[RuleVersion(0)]
	public CreateTableContext createTable() {
		CreateTableContext _localctx = new CreateTableContext(Context, State);
		EnterRule(_localctx, 82, RULE_createTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1913;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMPORARY_SYMBOL) {
				{
				State = 1912;
				Match(TEMPORARY_SYMBOL);
				}
			}

			State = 1915;
			Match(TABLE_SYMBOL);
			State = 1917;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
			case 1:
				{
				State = 1916;
				ifNotExists();
				}
				break;
			}
			State = 1919;
			tableName();
			State = 1942;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				{
				State = 1924;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
				case 1:
					{
					State = 1920;
					Match(OPEN_PAR_SYMBOL);
					State = 1921;
					tableElementList();
					State = 1922;
					Match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				State = 1927;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
				case 1:
					{
					State = 1926;
					createTableOptions();
					}
					break;
				}
				State = 1930;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,112,Context) ) {
				case 1:
					{
					State = 1929;
					partitionClause();
					}
					break;
				}
				State = 1933;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
				case 1:
					{
					State = 1932;
					duplicateAsQueryExpression();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 1935;
				Match(LIKE_SYMBOL);
				State = 1936;
				tableRef();
				}
				break;
			case 3:
				{
				State = 1937;
				Match(OPEN_PAR_SYMBOL);
				State = 1938;
				Match(LIKE_SYMBOL);
				State = 1939;
				tableRef();
				State = 1940;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableElementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableElementContext[] tableElement() {
			return GetRuleContexts<TableElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableElementContext tableElement(int i) {
			return GetRuleContext<TableElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public TableElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableElementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableElementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableElementList(this);
		}
	}

	[RuleVersion(0)]
	public TableElementListContext tableElementList() {
		TableElementListContext _localctx = new TableElementListContext(Context, State);
		EnterRule(_localctx, 84, RULE_tableElementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1944;
			tableElement();
			State = 1949;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 1945;
				Match(COMMA_SYMBOL);
				State = 1946;
				tableElement();
				}
				}
				State = 1951;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefinitionContext columnDefinition() {
			return GetRuleContext<ColumnDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableConstraintDefContext tableConstraintDef() {
			return GetRuleContext<TableConstraintDefContext>(0);
		}
		public TableElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableElement(this);
		}
	}

	[RuleVersion(0)]
	public TableElementContext tableElement() {
		TableElementContext _localctx = new TableElementContext(Context, State);
		EnterRule(_localctx, 86, RULE_tableElement);
		try {
			State = 1954;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1952;
				columnDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1953;
				tableConstraintDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DuplicateAsQueryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionOrParensContext queryExpressionOrParens() {
			return GetRuleContext<QueryExpressionOrParensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySqlParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySqlParser.REPLACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySqlParser.IGNORE_SYMBOL, 0); }
		public DuplicateAsQueryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_duplicateAsQueryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDuplicateAsQueryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDuplicateAsQueryExpression(this);
		}
	}

	[RuleVersion(0)]
	public DuplicateAsQueryExpressionContext duplicateAsQueryExpression() {
		DuplicateAsQueryExpressionContext _localctx = new DuplicateAsQueryExpressionContext(Context, State);
		EnterRule(_localctx, 88, RULE_duplicateAsQueryExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1957;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
			case 1:
				{
				State = 1956;
				_la = TokenStream.LA(1);
				if ( !(_la==IGNORE_SYMBOL || _la==REPLACE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 1960;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
			case 1:
				{
				State = 1959;
				Match(AS_SYMBOL);
				}
				break;
			}
			State = 1962;
			queryExpressionOrParens();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryExpressionOrParensContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionParensContext queryExpressionParens() {
			return GetRuleContext<QueryExpressionParensContext>(0);
		}
		public QueryExpressionOrParensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryExpressionOrParens; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterQueryExpressionOrParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitQueryExpressionOrParens(this);
		}
	}

	[RuleVersion(0)]
	public QueryExpressionOrParensContext queryExpressionOrParens() {
		QueryExpressionOrParensContext _localctx = new QueryExpressionOrParensContext(Context, State);
		EnterRule(_localctx, 90, RULE_queryExpressionOrParens);
		try {
			State = 1966;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1964;
				queryExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1965;
				queryExpressionParens();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateRoutineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySqlParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MySqlParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CreateProcedureContext createProcedure() {
			return GetRuleContext<CreateProcedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateFunctionContext createFunction() {
			return GetRuleContext<CreateFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateUdfContext createUdf() {
			return GetRuleContext<CreateUdfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON_SYMBOL() { return GetToken(MySqlParser.SEMICOLON_SYMBOL, 0); }
		public CreateRoutineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createRoutine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateRoutine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateRoutine(this);
		}
	}

	[RuleVersion(0)]
	public CreateRoutineContext createRoutine() {
		CreateRoutineContext _localctx = new CreateRoutineContext(Context, State);
		EnterRule(_localctx, 92, RULE_createRoutine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1968;
			Match(CREATE_SYMBOL);
			State = 1972;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,120,Context) ) {
			case 1:
				{
				State = 1969;
				createProcedure();
				}
				break;
			case 2:
				{
				State = 1970;
				createFunction();
				}
				break;
			case 3:
				{
				State = 1971;
				createUdf();
				}
				break;
			}
			State = 1975;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON_SYMBOL) {
				{
				State = 1974;
				Match(SEMICOLON_SYMBOL);
				}
			}

			State = 1977;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateProcedureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE_SYMBOL() { return GetToken(MySqlParser.PROCEDURE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureNameContext procedureName() {
			return GetRuleContext<ProcedureNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinerClauseContext definerClause() {
			return GetRuleContext<DefinerClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureParameterContext[] procedureParameter() {
			return GetRuleContexts<ProcedureParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureParameterContext procedureParameter(int i) {
			return GetRuleContext<ProcedureParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineCreateOptionContext[] routineCreateOption() {
			return GetRuleContexts<RoutineCreateOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineCreateOptionContext routineCreateOption(int i) {
			return GetRuleContext<RoutineCreateOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public CreateProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createProcedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateProcedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateProcedure(this);
		}
	}

	[RuleVersion(0)]
	public CreateProcedureContext createProcedure() {
		CreateProcedureContext _localctx = new CreateProcedureContext(Context, State);
		EnterRule(_localctx, 94, RULE_createProcedure);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1980;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				State = 1979;
				definerClause();
				}
			}

			State = 1982;
			Match(PROCEDURE_SYMBOL);
			State = 1983;
			procedureName();
			State = 1984;
			Match(OPEN_PAR_SYMBOL);
			State = 1993;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
			case 1:
				{
				State = 1985;
				procedureParameter();
				State = 1990;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 1986;
					Match(COMMA_SYMBOL);
					State = 1987;
					procedureParameter();
					}
					}
					State = 1992;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 1995;
			Match(CLOSE_PAR_SYMBOL);
			State = 1999;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,125,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1996;
					routineCreateOption();
					}
					} 
				}
				State = 2001;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,125,Context);
			}
			State = 2002;
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION_SYMBOL() { return GetToken(MySqlParser.FUNCTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS_SYMBOL() { return GetToken(MySqlParser.RETURNS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeWithOptCollateContext typeWithOptCollate() {
			return GetRuleContext<TypeWithOptCollateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinerClauseContext definerClause() {
			return GetRuleContext<DefinerClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext[] functionParameter() {
			return GetRuleContexts<FunctionParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext functionParameter(int i) {
			return GetRuleContext<FunctionParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineCreateOptionContext[] routineCreateOption() {
			return GetRuleContexts<RoutineCreateOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineCreateOptionContext routineCreateOption(int i) {
			return GetRuleContext<RoutineCreateOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public CreateFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateFunction(this);
		}
	}

	[RuleVersion(0)]
	public CreateFunctionContext createFunction() {
		CreateFunctionContext _localctx = new CreateFunctionContext(Context, State);
		EnterRule(_localctx, 96, RULE_createFunction);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2005;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				State = 2004;
				definerClause();
				}
			}

			State = 2007;
			Match(FUNCTION_SYMBOL);
			State = 2008;
			functionName();
			State = 2009;
			Match(OPEN_PAR_SYMBOL);
			State = 2018;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,128,Context) ) {
			case 1:
				{
				State = 2010;
				functionParameter();
				State = 2015;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 2011;
					Match(COMMA_SYMBOL);
					State = 2012;
					functionParameter();
					}
					}
					State = 2017;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 2020;
			Match(CLOSE_PAR_SYMBOL);
			State = 2021;
			Match(RETURNS_SYMBOL);
			State = 2022;
			typeWithOptCollate();
			State = 2026;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,129,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2023;
					routineCreateOption();
					}
					} 
				}
				State = 2028;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,129,Context);
			}
			State = 2029;
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUdfContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION_SYMBOL() { return GetToken(MySqlParser.FUNCTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UdfNameContext udfName() {
			return GetRuleContext<UdfNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS_SYMBOL() { return GetToken(MySqlParser.RETURNS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SONAME_SYMBOL() { return GetToken(MySqlParser.SONAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_SYMBOL() { return GetToken(MySqlParser.STRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_SYMBOL() { return GetToken(MySqlParser.INT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_SYMBOL() { return GetToken(MySqlParser.REAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_SYMBOL() { return GetToken(MySqlParser.DECIMAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE_SYMBOL() { return GetToken(MySqlParser.AGGREGATE_SYMBOL, 0); }
		public CreateUdfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUdf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateUdf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateUdf(this);
		}
	}

	[RuleVersion(0)]
	public CreateUdfContext createUdf() {
		CreateUdfContext _localctx = new CreateUdfContext(Context, State);
		EnterRule(_localctx, 98, RULE_createUdf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2032;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AGGREGATE_SYMBOL) {
				{
				State = 2031;
				Match(AGGREGATE_SYMBOL);
				}
			}

			State = 2034;
			Match(FUNCTION_SYMBOL);
			State = 2035;
			udfName();
			State = 2036;
			Match(RETURNS_SYMBOL);
			State = 2037;
			_localctx.type = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DECIMAL_SYMBOL || _la==INT_SYMBOL || _la==REAL_SYMBOL || _la==STRING_SYMBOL) ) {
				_localctx.type = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2038;
			Match(SONAME_SYMBOL);
			State = 2039;
			textLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineCreateOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext routineOption() {
			return GetRuleContext<RoutineOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DETERMINISTIC_SYMBOL() { return GetToken(MySqlParser.DETERMINISTIC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_SYMBOL() { return GetToken(MySqlParser.NOT_SYMBOL, 0); }
		public RoutineCreateOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineCreateOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoutineCreateOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoutineCreateOption(this);
		}
	}

	[RuleVersion(0)]
	public RoutineCreateOptionContext routineCreateOption() {
		RoutineCreateOptionContext _localctx = new RoutineCreateOptionContext(Context, State);
		EnterRule(_localctx, 100, RULE_routineCreateOption);
		int _la;
		try {
			State = 2046;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMENT_SYMBOL:
			case CONTAINS_SYMBOL:
			case LANGUAGE_SYMBOL:
			case MODIFIES_SYMBOL:
			case NO_SYMBOL:
			case READS_SYMBOL:
			case SQL_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2041;
				routineOption();
				}
				break;
			case DETERMINISTIC_SYMBOL:
			case NOT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2043;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					State = 2042;
					Match(NOT_SYMBOL);
					}
				}

				State = 2045;
				Match(DETERMINISTIC_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineAlterOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RoutineCreateOptionContext[] routineCreateOption() {
			return GetRuleContexts<RoutineCreateOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineCreateOptionContext routineCreateOption(int i) {
			return GetRuleContext<RoutineCreateOptionContext>(i);
		}
		public RoutineAlterOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineAlterOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoutineAlterOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoutineAlterOptions(this);
		}
	}

	[RuleVersion(0)]
	public RoutineAlterOptionsContext routineAlterOptions() {
		RoutineAlterOptionsContext _localctx = new RoutineAlterOptionsContext(Context, State);
		EnterRule(_localctx, 102, RULE_routineAlterOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2049;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2048;
				routineCreateOption();
				}
				}
				State = 2051;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (COMMENT_SYMBOL - 75)) | (1L << (CONTAINS_SYMBOL - 75)) | (1L << (DETERMINISTIC_SYMBOL - 75)))) != 0) || _la==LANGUAGE_SYMBOL || ((((_la - 347)) & ~0x3f) == 0 && ((1L << (_la - 347)) & ((1L << (MODIFIES_SYMBOL - 347)) | (1L << (NOT_SYMBOL - 347)) | (1L << (NO_SYMBOL - 347)))) != 0) || _la==READS_SYMBOL || _la==SQL_SYMBOL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineOptionContext : ParserRuleContext {
		public IToken option;
		public IToken security;
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySqlParser.COMMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_SYMBOL() { return GetToken(MySqlParser.SQL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE_SYMBOL() { return GetToken(MySqlParser.LANGUAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_SYMBOL() { return GetToken(MySqlParser.NO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS_SYMBOL() { return GetToken(MySqlParser.CONTAINS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_SYMBOL() { return GetToken(MySqlParser.DATA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READS_SYMBOL() { return GetToken(MySqlParser.READS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFIES_SYMBOL() { return GetToken(MySqlParser.MODIFIES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY_SYMBOL() { return GetToken(MySqlParser.SECURITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER_SYMBOL() { return GetToken(MySqlParser.DEFINER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER_SYMBOL() { return GetToken(MySqlParser.INVOKER_SYMBOL, 0); }
		public RoutineOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoutineOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoutineOption(this);
		}
	}

	[RuleVersion(0)]
	public RoutineOptionContext routineOption() {
		RoutineOptionContext _localctx = new RoutineOptionContext(Context, State);
		EnterRule(_localctx, 104, RULE_routineOption);
		int _la;
		try {
			State = 2070;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMENT_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2053;
				_localctx.option = Match(COMMENT_SYMBOL);
				State = 2054;
				textLiteral();
				}
				break;
			case LANGUAGE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2055;
				_localctx.option = Match(LANGUAGE_SYMBOL);
				State = 2056;
				Match(SQL_SYMBOL);
				}
				break;
			case NO_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2057;
				_localctx.option = Match(NO_SYMBOL);
				State = 2058;
				Match(SQL_SYMBOL);
				}
				break;
			case CONTAINS_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2059;
				_localctx.option = Match(CONTAINS_SYMBOL);
				State = 2060;
				Match(SQL_SYMBOL);
				}
				break;
			case READS_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2061;
				_localctx.option = Match(READS_SYMBOL);
				State = 2062;
				Match(SQL_SYMBOL);
				State = 2063;
				Match(DATA_SYMBOL);
				}
				break;
			case MODIFIES_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2064;
				_localctx.option = Match(MODIFIES_SYMBOL);
				State = 2065;
				Match(SQL_SYMBOL);
				State = 2066;
				Match(DATA_SYMBOL);
				}
				break;
			case SQL_SYMBOL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2067;
				_localctx.option = Match(SQL_SYMBOL);
				State = 2068;
				Match(SECURITY_SYMBOL);
				State = 2069;
				_localctx.security = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFINER_SYMBOL || _la==INVOKER_SYMBOL) ) {
					_localctx.security = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateIndexContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public CreateIndexTargetContext createIndexTarget() {
			return GetRuleContext<CreateIndexTargetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_SYMBOL() { return GetToken(MySqlParser.INDEX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexNameContext indexName() {
			return GetRuleContext<IndexNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OnlineOptionContext onlineOption() {
			return GetRuleContext<OnlineOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULLTEXT_SYMBOL() { return GetToken(MySqlParser.FULLTEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPATIAL_SYMBOL() { return GetToken(MySqlParser.SPATIAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexLockAndAlgorithmContext indexLockAndAlgorithm() {
			return GetRuleContext<IndexLockAndAlgorithmContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE_SYMBOL() { return GetToken(MySqlParser.UNIQUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FulltextIndexOptionContext[] fulltextIndexOption() {
			return GetRuleContexts<FulltextIndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FulltextIndexOptionContext fulltextIndexOption(int i) {
			return GetRuleContext<FulltextIndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpatialIndexOptionContext[] spatialIndexOption() {
			return GetRuleContexts<SpatialIndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpatialIndexOptionContext spatialIndexOption(int i) {
			return GetRuleContext<SpatialIndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeClauseContext indexTypeClause() {
			return GetRuleContext<IndexTypeClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexNameAndTypeContext indexNameAndType() {
			return GetRuleContext<IndexNameAndTypeContext>(0);
		}
		public CreateIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createIndex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateIndex(this);
		}
	}

	[RuleVersion(0)]
	public CreateIndexContext createIndex() {
		CreateIndexContext _localctx = new CreateIndexContext(Context, State);
		EnterRule(_localctx, 106, RULE_createIndex);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2073;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OFFLINE_SYMBOL || _la==ONLINE_SYMBOL) {
				{
				State = 2072;
				onlineOption();
				}
			}

			State = 2116;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INDEX_SYMBOL:
			case UNIQUE_SYMBOL:
				{
				State = 2076;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNIQUE_SYMBOL) {
					{
					State = 2075;
					Match(UNIQUE_SYMBOL);
					}
				}

				State = 2078;
				_localctx.type = Match(INDEX_SYMBOL);
				State = 2087;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,139,Context) ) {
				case 1:
					{
					State = 2079;
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					State = 2080;
					indexName();
					State = 2082;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==TYPE_SYMBOL || _la==USING_SYMBOL) {
						{
						State = 2081;
						indexTypeClause();
						}
					}

					}
					break;
				case 2:
					{
					State = 2085;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,138,Context) ) {
					case 1:
						{
						State = 2084;
						indexNameAndType();
						}
						break;
					}
					}
					break;
				}
				State = 2089;
				createIndexTarget();
				State = 2093;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,140,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2090;
						indexOption();
						}
						} 
					}
					State = 2095;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,140,Context);
				}
				}
				break;
			case FULLTEXT_SYMBOL:
				{
				State = 2096;
				_localctx.type = Match(FULLTEXT_SYMBOL);
				State = 2097;
				Match(INDEX_SYMBOL);
				State = 2098;
				indexName();
				State = 2099;
				createIndexTarget();
				State = 2103;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,141,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2100;
						fulltextIndexOption();
						}
						} 
					}
					State = 2105;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,141,Context);
				}
				}
				break;
			case SPATIAL_SYMBOL:
				{
				State = 2106;
				_localctx.type = Match(SPATIAL_SYMBOL);
				State = 2107;
				Match(INDEX_SYMBOL);
				State = 2108;
				indexName();
				State = 2109;
				createIndexTarget();
				State = 2113;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,142,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2110;
						spatialIndexOption();
						}
						} 
					}
					State = 2115;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,142,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALGORITHM_SYMBOL || _la==LOCK_SYMBOL) {
				{
				State = 2118;
				indexLockAndAlgorithm();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexNameAndTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndexNameContext indexName() {
			return GetRuleContext<IndexNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING_SYMBOL() { return GetToken(MySqlParser.USING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_SYMBOL() { return GetToken(MySqlParser.TYPE_SYMBOL, 0); }
		public IndexNameAndTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexNameAndType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexNameAndType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexNameAndType(this);
		}
	}

	[RuleVersion(0)]
	public IndexNameAndTypeContext indexNameAndType() {
		IndexNameAndTypeContext _localctx = new IndexNameAndTypeContext(Context, State);
		EnterRule(_localctx, 108, RULE_indexNameAndType);
		try {
			State = 2130;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,146,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2121;
				indexName();
				State = 2124;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,145,Context) ) {
				case 1:
					{
					State = 2122;
					Match(USING_SYMBOL);
					State = 2123;
					indexType();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2126;
				indexName();
				State = 2127;
				Match(TYPE_SYMBOL);
				State = 2128;
				indexType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateIndexTargetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySqlParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyListVariantsContext keyListVariants() {
			return GetRuleContext<KeyListVariantsContext>(0);
		}
		public CreateIndexTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createIndexTarget; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateIndexTarget(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateIndexTarget(this);
		}
	}

	[RuleVersion(0)]
	public CreateIndexTargetContext createIndexTarget() {
		CreateIndexTargetContext _localctx = new CreateIndexTargetContext(Context, State);
		EnterRule(_localctx, 110, RULE_createIndexTarget);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2132;
			Match(ON_SYMBOL);
			State = 2133;
			tableRef();
			State = 2134;
			keyListVariants();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateLogfileGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE_SYMBOL() { return GetToken(MySqlParser.LOGFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_SYMBOL() { return GetToken(MySqlParser.GROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogfileGroupNameContext logfileGroupName() {
			return GetRuleContext<LogfileGroupNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_SYMBOL() { return GetToken(MySqlParser.ADD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDOFILE_SYMBOL() { return GetToken(MySqlParser.UNDOFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDOFILE_SYMBOL() { return GetToken(MySqlParser.REDOFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogfileGroupOptionsContext logfileGroupOptions() {
			return GetRuleContext<LogfileGroupOptionsContext>(0);
		}
		public CreateLogfileGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createLogfileGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateLogfileGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateLogfileGroup(this);
		}
	}

	[RuleVersion(0)]
	public CreateLogfileGroupContext createLogfileGroup() {
		CreateLogfileGroupContext _localctx = new CreateLogfileGroupContext(Context, State);
		EnterRule(_localctx, 112, RULE_createLogfileGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2136;
			Match(LOGFILE_SYMBOL);
			State = 2137;
			Match(GROUP_SYMBOL);
			State = 2138;
			logfileGroupName();
			State = 2139;
			Match(ADD_SYMBOL);
			State = 2140;
			_la = TokenStream.LA(1);
			if ( !(_la==REDOFILE_SYMBOL || _la==UNDOFILE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2141;
			textLiteral();
			State = 2143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT_SYMBOL || _la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==NODEGROUP_SYMBOL || _la==NO_WAIT_SYMBOL || _la==REDO_BUFFER_SIZE_SYMBOL || _la==STORAGE_SYMBOL || _la==UNDO_BUFFER_SIZE_SYMBOL || _la==WAIT_SYMBOL) {
				{
				State = 2142;
				logfileGroupOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogfileGroupOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogfileGroupOptionContext[] logfileGroupOption() {
			return GetRuleContexts<LogfileGroupOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogfileGroupOptionContext logfileGroupOption(int i) {
			return GetRuleContext<LogfileGroupOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public LogfileGroupOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logfileGroupOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLogfileGroupOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLogfileGroupOptions(this);
		}
	}

	[RuleVersion(0)]
	public LogfileGroupOptionsContext logfileGroupOptions() {
		LogfileGroupOptionsContext _localctx = new LogfileGroupOptionsContext(Context, State);
		EnterRule(_localctx, 114, RULE_logfileGroupOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2145;
			logfileGroupOption();
			State = 2152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMENT_SYMBOL || _la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==NODEGROUP_SYMBOL || _la==NO_WAIT_SYMBOL || _la==REDO_BUFFER_SIZE_SYMBOL || _la==STORAGE_SYMBOL || _la==UNDO_BUFFER_SIZE_SYMBOL || _la==WAIT_SYMBOL || _la==COMMA_SYMBOL) {
				{
				{
				State = 2147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 2146;
					Match(COMMA_SYMBOL);
					}
				}

				State = 2149;
				logfileGroupOption();
				}
				}
				State = 2154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogfileGroupOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionInitialSizeContext tsOptionInitialSize() {
			return GetRuleContext<TsOptionInitialSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionUndoRedoBufferSizeContext tsOptionUndoRedoBufferSize() {
			return GetRuleContext<TsOptionUndoRedoBufferSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionNodegroupContext tsOptionNodegroup() {
			return GetRuleContext<TsOptionNodegroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionEngineContext tsOptionEngine() {
			return GetRuleContext<TsOptionEngineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionWaitContext tsOptionWait() {
			return GetRuleContext<TsOptionWaitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionCommentContext tsOptionComment() {
			return GetRuleContext<TsOptionCommentContext>(0);
		}
		public LogfileGroupOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logfileGroupOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLogfileGroupOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLogfileGroupOption(this);
		}
	}

	[RuleVersion(0)]
	public LogfileGroupOptionContext logfileGroupOption() {
		LogfileGroupOptionContext _localctx = new LogfileGroupOptionContext(Context, State);
		EnterRule(_localctx, 116, RULE_logfileGroupOption);
		try {
			State = 2161;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INITIAL_SIZE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2155;
				tsOptionInitialSize();
				}
				break;
			case REDO_BUFFER_SIZE_SYMBOL:
			case UNDO_BUFFER_SIZE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2156;
				tsOptionUndoRedoBufferSize();
				}
				break;
			case NODEGROUP_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2157;
				tsOptionNodegroup();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2158;
				tsOptionEngine();
				}
				break;
			case NO_WAIT_SYMBOL:
			case WAIT_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2159;
				tsOptionWait();
				}
				break;
			case COMMENT_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2160;
				tsOptionComment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateServerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER_SYMBOL() { return GetToken(MySqlParser.SERVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ServerNameContext serverName() {
			return GetRuleContext<ServerNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN_SYMBOL() { return GetToken(MySqlParser.FOREIGN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_SYMBOL() { return GetToken(MySqlParser.DATA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER_SYMBOL() { return GetToken(MySqlParser.WRAPPER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ServerOptionsContext serverOptions() {
			return GetRuleContext<ServerOptionsContext>(0);
		}
		public CreateServerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createServer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateServer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateServer(this);
		}
	}

	[RuleVersion(0)]
	public CreateServerContext createServer() {
		CreateServerContext _localctx = new CreateServerContext(Context, State);
		EnterRule(_localctx, 118, RULE_createServer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2163;
			Match(SERVER_SYMBOL);
			State = 2164;
			serverName();
			State = 2165;
			Match(FOREIGN_SYMBOL);
			State = 2166;
			Match(DATA_SYMBOL);
			State = 2167;
			Match(WRAPPER_SYMBOL);
			State = 2168;
			textOrIdentifier();
			State = 2169;
			serverOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServerOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS_SYMBOL() { return GetToken(MySqlParser.OPTIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ServerOptionContext[] serverOption() {
			return GetRuleContexts<ServerOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ServerOptionContext serverOption(int i) {
			return GetRuleContext<ServerOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public ServerOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serverOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterServerOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitServerOptions(this);
		}
	}

	[RuleVersion(0)]
	public ServerOptionsContext serverOptions() {
		ServerOptionsContext _localctx = new ServerOptionsContext(Context, State);
		EnterRule(_localctx, 120, RULE_serverOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2171;
			Match(OPTIONS_SYMBOL);
			State = 2172;
			Match(OPEN_PAR_SYMBOL);
			State = 2173;
			serverOption();
			State = 2178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 2174;
				Match(COMMA_SYMBOL);
				State = 2175;
				serverOption();
				}
				}
				State = 2180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2181;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServerOptionContext : ParserRuleContext {
		public IToken option;
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOST_SYMBOL() { return GetToken(MySqlParser.HOST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE_SYMBOL() { return GetToken(MySqlParser.DATABASE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySqlParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySqlParser.PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOCKET_SYMBOL() { return GetToken(MySqlParser.SOCKET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER_SYMBOL() { return GetToken(MySqlParser.OWNER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PORT_SYMBOL() { return GetToken(MySqlParser.PORT_SYMBOL, 0); }
		public ServerOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serverOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterServerOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitServerOption(this);
		}
	}

	[RuleVersion(0)]
	public ServerOptionContext serverOption() {
		ServerOptionContext _localctx = new ServerOptionContext(Context, State);
		EnterRule(_localctx, 122, RULE_serverOption);
		try {
			State = 2197;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HOST_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2183;
				_localctx.option = Match(HOST_SYMBOL);
				State = 2184;
				textLiteral();
				}
				break;
			case DATABASE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2185;
				_localctx.option = Match(DATABASE_SYMBOL);
				State = 2186;
				textLiteral();
				}
				break;
			case USER_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2187;
				_localctx.option = Match(USER_SYMBOL);
				State = 2188;
				textLiteral();
				}
				break;
			case PASSWORD_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2189;
				_localctx.option = Match(PASSWORD_SYMBOL);
				State = 2190;
				textLiteral();
				}
				break;
			case SOCKET_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2191;
				_localctx.option = Match(SOCKET_SYMBOL);
				State = 2192;
				textLiteral();
				}
				break;
			case OWNER_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2193;
				_localctx.option = Match(OWNER_SYMBOL);
				State = 2194;
				textLiteral();
				}
				break;
			case PORT_SYMBOL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2195;
				_localctx.option = Match(PORT_SYMBOL);
				State = 2196;
				ulong_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTablespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySqlParser.TABLESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablespaceNameContext tablespaceName() {
			return GetRuleContext<TablespaceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsDataFileNameContext tsDataFileName() {
			return GetRuleContext<TsDataFileNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_SYMBOL() { return GetToken(MySqlParser.USE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE_SYMBOL() { return GetToken(MySqlParser.LOGFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_SYMBOL() { return GetToken(MySqlParser.GROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogfileGroupRefContext logfileGroupRef() {
			return GetRuleContext<LogfileGroupRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablespaceOptionsContext tablespaceOptions() {
			return GetRuleContext<TablespaceOptionsContext>(0);
		}
		public CreateTablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTablespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateTablespace(this);
		}
	}

	[RuleVersion(0)]
	public CreateTablespaceContext createTablespace() {
		CreateTablespaceContext _localctx = new CreateTablespaceContext(Context, State);
		EnterRule(_localctx, 124, RULE_createTablespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2199;
			Match(TABLESPACE_SYMBOL);
			State = 2200;
			tablespaceName();
			State = 2201;
			tsDataFileName();
			State = 2206;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,153,Context) ) {
			case 1:
				{
				State = 2202;
				Match(USE_SYMBOL);
				State = 2203;
				Match(LOGFILE_SYMBOL);
				State = 2204;
				Match(GROUP_SYMBOL);
				State = 2205;
				logfileGroupRef();
				}
				break;
			}
			State = 2209;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,154,Context) ) {
			case 1:
				{
				State = 2208;
				tablespaceOptions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUndoTablespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDO_SYMBOL() { return GetToken(MySqlParser.UNDO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySqlParser.TABLESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablespaceNameContext tablespaceName() {
			return GetRuleContext<TablespaceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_SYMBOL() { return GetToken(MySqlParser.ADD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TsDataFileContext tsDataFile() {
			return GetRuleContext<TsDataFileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UndoTableSpaceOptionsContext undoTableSpaceOptions() {
			return GetRuleContext<UndoTableSpaceOptionsContext>(0);
		}
		public CreateUndoTablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUndoTablespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateUndoTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateUndoTablespace(this);
		}
	}

	[RuleVersion(0)]
	public CreateUndoTablespaceContext createUndoTablespace() {
		CreateUndoTablespaceContext _localctx = new CreateUndoTablespaceContext(Context, State);
		EnterRule(_localctx, 126, RULE_createUndoTablespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2211;
			Match(UNDO_SYMBOL);
			State = 2212;
			Match(TABLESPACE_SYMBOL);
			State = 2213;
			tablespaceName();
			State = 2214;
			Match(ADD_SYMBOL);
			State = 2215;
			tsDataFile();
			State = 2217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE_SYMBOL || _la==STORAGE_SYMBOL) {
				{
				State = 2216;
				undoTableSpaceOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsDataFileNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_SYMBOL() { return GetToken(MySqlParser.ADD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TsDataFileContext tsDataFile() {
			return GetRuleContext<TsDataFileContext>(0);
		}
		public TsDataFileNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsDataFileName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTsDataFileName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTsDataFileName(this);
		}
	}

	[RuleVersion(0)]
	public TsDataFileNameContext tsDataFileName() {
		TsDataFileNameContext _localctx = new TsDataFileNameContext(Context, State);
		EnterRule(_localctx, 128, RULE_tsDataFileName);
		try {
			State = 2226;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,157,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2219;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 2222;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,156,Context) ) {
				case 1:
					{
					State = 2220;
					Match(ADD_SYMBOL);
					State = 2221;
					tsDataFile();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2224;
				Match(ADD_SYMBOL);
				State = 2225;
				tsDataFile();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsDataFileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATAFILE_SYMBOL() { return GetToken(MySqlParser.DATAFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public TsDataFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsDataFile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTsDataFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTsDataFile(this);
		}
	}

	[RuleVersion(0)]
	public TsDataFileContext tsDataFile() {
		TsDataFileContext _localctx = new TsDataFileContext(Context, State);
		EnterRule(_localctx, 130, RULE_tsDataFile);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2228;
			Match(DATAFILE_SYMBOL);
			State = 2229;
			textLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablespaceOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TablespaceOptionContext[] tablespaceOption() {
			return GetRuleContexts<TablespaceOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablespaceOptionContext tablespaceOption(int i) {
			return GetRuleContext<TablespaceOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public TablespaceOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablespaceOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTablespaceOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTablespaceOptions(this);
		}
	}

	[RuleVersion(0)]
	public TablespaceOptionsContext tablespaceOptions() {
		TablespaceOptionsContext _localctx = new TablespaceOptionsContext(Context, State);
		EnterRule(_localctx, 132, RULE_tablespaceOptions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2231;
			tablespaceOption();
			State = 2238;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,159,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2233;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,158,Context) ) {
					case 1:
						{
						State = 2232;
						Match(COMMA_SYMBOL);
						}
						break;
					}
					State = 2235;
					tablespaceOption();
					}
					} 
				}
				State = 2240;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,159,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablespaceOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionInitialSizeContext tsOptionInitialSize() {
			return GetRuleContext<TsOptionInitialSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionAutoextendSizeContext tsOptionAutoextendSize() {
			return GetRuleContext<TsOptionAutoextendSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionMaxSizeContext tsOptionMaxSize() {
			return GetRuleContext<TsOptionMaxSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionExtentSizeContext tsOptionExtentSize() {
			return GetRuleContext<TsOptionExtentSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionNodegroupContext tsOptionNodegroup() {
			return GetRuleContext<TsOptionNodegroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionEngineContext tsOptionEngine() {
			return GetRuleContext<TsOptionEngineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionWaitContext tsOptionWait() {
			return GetRuleContext<TsOptionWaitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionCommentContext tsOptionComment() {
			return GetRuleContext<TsOptionCommentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionFileblockSizeContext tsOptionFileblockSize() {
			return GetRuleContext<TsOptionFileblockSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionEncryptionContext tsOptionEncryption() {
			return GetRuleContext<TsOptionEncryptionContext>(0);
		}
		public TablespaceOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablespaceOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTablespaceOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTablespaceOption(this);
		}
	}

	[RuleVersion(0)]
	public TablespaceOptionContext tablespaceOption() {
		TablespaceOptionContext _localctx = new TablespaceOptionContext(Context, State);
		EnterRule(_localctx, 134, RULE_tablespaceOption);
		try {
			State = 2253;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,160,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2241;
				tsOptionInitialSize();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2242;
				tsOptionAutoextendSize();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2243;
				tsOptionMaxSize();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2244;
				tsOptionExtentSize();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2245;
				tsOptionNodegroup();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2246;
				tsOptionEngine();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2247;
				tsOptionWait();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2248;
				tsOptionComment();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2249;
				if (!(serverVersion >= 50707)) throw new FailedPredicateException(this, "serverVersion >= 50707");
				State = 2250;
				tsOptionFileblockSize();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2251;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 2252;
				tsOptionEncryption();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionInitialSizeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE_SYMBOL() { return GetToken(MySqlParser.INITIAL_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		public TsOptionInitialSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionInitialSize; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTsOptionInitialSize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTsOptionInitialSize(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionInitialSizeContext tsOptionInitialSize() {
		TsOptionInitialSizeContext _localctx = new TsOptionInitialSizeContext(Context, State);
		EnterRule(_localctx, 136, RULE_tsOptionInitialSize);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2255;
			Match(INITIAL_SIZE_SYMBOL);
			State = 2257;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,161,Context) ) {
			case 1:
				{
				State = 2256;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2259;
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionUndoRedoBufferSizeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDO_BUFFER_SIZE_SYMBOL() { return GetToken(MySqlParser.UNDO_BUFFER_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDO_BUFFER_SIZE_SYMBOL() { return GetToken(MySqlParser.REDO_BUFFER_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		public TsOptionUndoRedoBufferSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionUndoRedoBufferSize; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTsOptionUndoRedoBufferSize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTsOptionUndoRedoBufferSize(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionUndoRedoBufferSizeContext tsOptionUndoRedoBufferSize() {
		TsOptionUndoRedoBufferSizeContext _localctx = new TsOptionUndoRedoBufferSizeContext(Context, State);
		EnterRule(_localctx, 138, RULE_tsOptionUndoRedoBufferSize);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2261;
			_la = TokenStream.LA(1);
			if ( !(_la==REDO_BUFFER_SIZE_SYMBOL || _la==UNDO_BUFFER_SIZE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2263;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,162,Context) ) {
			case 1:
				{
				State = 2262;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2265;
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionAutoextendSizeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOEXTEND_SIZE_SYMBOL() { return GetToken(MySqlParser.AUTOEXTEND_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		public TsOptionAutoextendSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionAutoextendSize; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTsOptionAutoextendSize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTsOptionAutoextendSize(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionAutoextendSizeContext tsOptionAutoextendSize() {
		TsOptionAutoextendSizeContext _localctx = new TsOptionAutoextendSizeContext(Context, State);
		EnterRule(_localctx, 140, RULE_tsOptionAutoextendSize);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2267;
			Match(AUTOEXTEND_SIZE_SYMBOL);
			State = 2269;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,163,Context) ) {
			case 1:
				{
				State = 2268;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2271;
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionMaxSizeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_SIZE_SYMBOL() { return GetToken(MySqlParser.MAX_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		public TsOptionMaxSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionMaxSize; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTsOptionMaxSize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTsOptionMaxSize(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionMaxSizeContext tsOptionMaxSize() {
		TsOptionMaxSizeContext _localctx = new TsOptionMaxSizeContext(Context, State);
		EnterRule(_localctx, 142, RULE_tsOptionMaxSize);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2273;
			Match(MAX_SIZE_SYMBOL);
			State = 2275;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,164,Context) ) {
			case 1:
				{
				State = 2274;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2277;
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionExtentSizeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENT_SIZE_SYMBOL() { return GetToken(MySqlParser.EXTENT_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		public TsOptionExtentSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionExtentSize; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTsOptionExtentSize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTsOptionExtentSize(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionExtentSizeContext tsOptionExtentSize() {
		TsOptionExtentSizeContext _localctx = new TsOptionExtentSizeContext(Context, State);
		EnterRule(_localctx, 144, RULE_tsOptionExtentSize);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2279;
			Match(EXTENT_SIZE_SYMBOL);
			State = 2281;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,165,Context) ) {
			case 1:
				{
				State = 2280;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2283;
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionNodegroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODEGROUP_SYMBOL() { return GetToken(MySqlParser.NODEGROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		public TsOptionNodegroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionNodegroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTsOptionNodegroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTsOptionNodegroup(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionNodegroupContext tsOptionNodegroup() {
		TsOptionNodegroupContext _localctx = new TsOptionNodegroupContext(Context, State);
		EnterRule(_localctx, 146, RULE_tsOptionNodegroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2285;
			Match(NODEGROUP_SYMBOL);
			State = 2287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_OPERATOR) {
				{
				State = 2286;
				Match(EQUAL_OPERATOR);
				}
			}

			State = 2289;
			real_ulong_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionEngineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySqlParser.ENGINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineRefContext engineRef() {
			return GetRuleContext<EngineRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE_SYMBOL() { return GetToken(MySqlParser.STORAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		public TsOptionEngineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionEngine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTsOptionEngine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTsOptionEngine(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionEngineContext tsOptionEngine() {
		TsOptionEngineContext _localctx = new TsOptionEngineContext(Context, State);
		EnterRule(_localctx, 148, RULE_tsOptionEngine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STORAGE_SYMBOL) {
				{
				State = 2291;
				Match(STORAGE_SYMBOL);
				}
			}

			State = 2294;
			Match(ENGINE_SYMBOL);
			State = 2296;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,168,Context) ) {
			case 1:
				{
				State = 2295;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2298;
			engineRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionWaitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT_SYMBOL() { return GetToken(MySqlParser.WAIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_WAIT_SYMBOL() { return GetToken(MySqlParser.NO_WAIT_SYMBOL, 0); }
		public TsOptionWaitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionWait; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTsOptionWait(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTsOptionWait(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionWaitContext tsOptionWait() {
		TsOptionWaitContext _localctx = new TsOptionWaitContext(Context, State);
		EnterRule(_localctx, 150, RULE_tsOptionWait);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2300;
			_la = TokenStream.LA(1);
			if ( !(_la==NO_WAIT_SYMBOL || _la==WAIT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionCommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySqlParser.COMMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		public TsOptionCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionComment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTsOptionComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTsOptionComment(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionCommentContext tsOptionComment() {
		TsOptionCommentContext _localctx = new TsOptionCommentContext(Context, State);
		EnterRule(_localctx, 152, RULE_tsOptionComment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2302;
			Match(COMMENT_SYMBOL);
			State = 2304;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,169,Context) ) {
			case 1:
				{
				State = 2303;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2306;
			textLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionFileblockSizeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE_BLOCK_SIZE_SYMBOL() { return GetToken(MySqlParser.FILE_BLOCK_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		public TsOptionFileblockSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionFileblockSize; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTsOptionFileblockSize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTsOptionFileblockSize(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionFileblockSizeContext tsOptionFileblockSize() {
		TsOptionFileblockSizeContext _localctx = new TsOptionFileblockSizeContext(Context, State);
		EnterRule(_localctx, 154, RULE_tsOptionFileblockSize);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2308;
			Match(FILE_BLOCK_SIZE_SYMBOL);
			State = 2310;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,170,Context) ) {
			case 1:
				{
				State = 2309;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2312;
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionEncryptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION_SYMBOL() { return GetToken(MySqlParser.ENCRYPTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		public TsOptionEncryptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionEncryption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTsOptionEncryption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTsOptionEncryption(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionEncryptionContext tsOptionEncryption() {
		TsOptionEncryptionContext _localctx = new TsOptionEncryptionContext(Context, State);
		EnterRule(_localctx, 156, RULE_tsOptionEncryption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2314;
			Match(ENCRYPTION_SYMBOL);
			State = 2316;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,171,Context) ) {
			case 1:
				{
				State = 2315;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2318;
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateViewContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW_SYMBOL() { return GetToken(MySqlParser.VIEW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ViewNameContext viewName() {
			return GetRuleContext<ViewNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewTailContext viewTail() {
			return GetRuleContext<ViewTailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewReplaceOrAlgorithmContext viewReplaceOrAlgorithm() {
			return GetRuleContext<ViewReplaceOrAlgorithmContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinerClauseContext definerClause() {
			return GetRuleContext<DefinerClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewSuidContext viewSuid() {
			return GetRuleContext<ViewSuidContext>(0);
		}
		public CreateViewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createView; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateView(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateView(this);
		}
	}

	[RuleVersion(0)]
	public CreateViewContext createView() {
		CreateViewContext _localctx = new CreateViewContext(Context, State);
		EnterRule(_localctx, 158, RULE_createView);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2321;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALGORITHM_SYMBOL || _la==OR_SYMBOL) {
				{
				State = 2320;
				viewReplaceOrAlgorithm();
				}
			}

			State = 2324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				State = 2323;
				definerClause();
				}
			}

			State = 2327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SQL_SYMBOL) {
				{
				State = 2326;
				viewSuid();
				}
			}

			State = 2329;
			Match(VIEW_SYMBOL);
			State = 2330;
			viewName();
			State = 2331;
			viewTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewReplaceOrAlgorithmContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_SYMBOL() { return GetToken(MySqlParser.OR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySqlParser.REPLACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ViewAlgorithmContext viewAlgorithm() {
			return GetRuleContext<ViewAlgorithmContext>(0);
		}
		public ViewReplaceOrAlgorithmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewReplaceOrAlgorithm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterViewReplaceOrAlgorithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitViewReplaceOrAlgorithm(this);
		}
	}

	[RuleVersion(0)]
	public ViewReplaceOrAlgorithmContext viewReplaceOrAlgorithm() {
		ViewReplaceOrAlgorithmContext _localctx = new ViewReplaceOrAlgorithmContext(Context, State);
		EnterRule(_localctx, 160, RULE_viewReplaceOrAlgorithm);
		int _la;
		try {
			State = 2339;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2333;
				Match(OR_SYMBOL);
				State = 2334;
				Match(REPLACE_SYMBOL);
				State = 2336;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALGORITHM_SYMBOL) {
					{
					State = 2335;
					viewAlgorithm();
					}
				}

				}
				break;
			case ALGORITHM_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2338;
				viewAlgorithm();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewAlgorithmContext : ParserRuleContext {
		public IToken algorithm;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM_SYMBOL() { return GetToken(MySqlParser.ALGORITHM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDEFINED_SYMBOL() { return GetToken(MySqlParser.UNDEFINED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE_SYMBOL() { return GetToken(MySqlParser.MERGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPTABLE_SYMBOL() { return GetToken(MySqlParser.TEMPTABLE_SYMBOL, 0); }
		public ViewAlgorithmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewAlgorithm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterViewAlgorithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitViewAlgorithm(this);
		}
	}

	[RuleVersion(0)]
	public ViewAlgorithmContext viewAlgorithm() {
		ViewAlgorithmContext _localctx = new ViewAlgorithmContext(Context, State);
		EnterRule(_localctx, 162, RULE_viewAlgorithm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2341;
			Match(ALGORITHM_SYMBOL);
			State = 2342;
			Match(EQUAL_OPERATOR);
			State = 2343;
			_localctx.algorithm = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==MERGE_SYMBOL || _la==TEMPTABLE_SYMBOL || _la==UNDEFINED_SYMBOL) ) {
				_localctx.algorithm = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewSuidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_SYMBOL() { return GetToken(MySqlParser.SQL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY_SYMBOL() { return GetToken(MySqlParser.SECURITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER_SYMBOL() { return GetToken(MySqlParser.DEFINER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER_SYMBOL() { return GetToken(MySqlParser.INVOKER_SYMBOL, 0); }
		public ViewSuidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewSuid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterViewSuid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitViewSuid(this);
		}
	}

	[RuleVersion(0)]
	public ViewSuidContext viewSuid() {
		ViewSuidContext _localctx = new ViewSuidContext(Context, State);
		EnterRule(_localctx, 164, RULE_viewSuid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2345;
			Match(SQL_SYMBOL);
			State = 2346;
			Match(SECURITY_SYMBOL);
			State = 2347;
			_la = TokenStream.LA(1);
			if ( !(_la==DEFINER_SYMBOL || _la==INVOKER_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTriggerContext : ParserRuleContext {
		public IToken timing;
		public IToken @event;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER_SYMBOL() { return GetToken(MySqlParser.TRIGGER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TriggerNameContext triggerName() {
			return GetRuleContext<TriggerNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySqlParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySqlParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH_SYMBOL() { return GetToken(MySqlParser.EACH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_SYMBOL() { return GetToken(MySqlParser.ROW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE_SYMBOL() { return GetToken(MySqlParser.BEFORE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER_SYMBOL() { return GetToken(MySqlParser.AFTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT_SYMBOL() { return GetToken(MySqlParser.INSERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySqlParser.UPDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_SYMBOL() { return GetToken(MySqlParser.DELETE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefinerClauseContext definerClause() {
			return GetRuleContext<DefinerClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggerFollowsPrecedesClauseContext triggerFollowsPrecedesClause() {
			return GetRuleContext<TriggerFollowsPrecedesClauseContext>(0);
		}
		public CreateTriggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTrigger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateTrigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateTrigger(this);
		}
	}

	[RuleVersion(0)]
	public CreateTriggerContext createTrigger() {
		CreateTriggerContext _localctx = new CreateTriggerContext(Context, State);
		EnterRule(_localctx, 166, RULE_createTrigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2350;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				State = 2349;
				definerClause();
				}
			}

			State = 2352;
			Match(TRIGGER_SYMBOL);
			State = 2353;
			triggerName();
			State = 2354;
			_localctx.timing = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==AFTER_SYMBOL || _la==BEFORE_SYMBOL) ) {
				_localctx.timing = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2355;
			_localctx.@event = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DELETE_SYMBOL || _la==INSERT_SYMBOL || _la==UPDATE_SYMBOL) ) {
				_localctx.@event = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2356;
			Match(ON_SYMBOL);
			State = 2357;
			tableRef();
			State = 2358;
			Match(FOR_SYMBOL);
			State = 2359;
			Match(EACH_SYMBOL);
			State = 2360;
			Match(ROW_SYMBOL);
			State = 2362;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,178,Context) ) {
			case 1:
				{
				State = 2361;
				triggerFollowsPrecedesClause();
				}
				break;
			}
			State = 2364;
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerFollowsPrecedesClauseContext : ParserRuleContext {
		public IToken ordering;
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWS_SYMBOL() { return GetToken(MySqlParser.FOLLOWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDES_SYMBOL() { return GetToken(MySqlParser.PRECEDES_SYMBOL, 0); }
		public TriggerFollowsPrecedesClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerFollowsPrecedesClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTriggerFollowsPrecedesClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTriggerFollowsPrecedesClause(this);
		}
	}

	[RuleVersion(0)]
	public TriggerFollowsPrecedesClauseContext triggerFollowsPrecedesClause() {
		TriggerFollowsPrecedesClauseContext _localctx = new TriggerFollowsPrecedesClauseContext(Context, State);
		EnterRule(_localctx, 168, RULE_triggerFollowsPrecedesClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2366;
			if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
			State = 2367;
			_localctx.ordering = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==FOLLOWS_SYMBOL || _la==PRECEDES_SYMBOL) ) {
				_localctx.ordering = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2368;
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateEventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT_SYMBOL() { return GetToken(MySqlParser.EVENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EventNameContext eventName() {
			return GetRuleContext<EventNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON_SYMBOL() { return GetTokens(MySqlParser.ON_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL(int i) {
			return GetToken(MySqlParser.ON_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEDULE_SYMBOL() { return GetToken(MySqlParser.SCHEDULE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScheduleContext schedule() {
			return GetRuleContext<ScheduleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO_SYMBOL() { return GetToken(MySqlParser.DO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinerClauseContext definerClause() {
			return GetRuleContext<DefinerClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPLETION_SYMBOL() { return GetToken(MySqlParser.COMPLETION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE_SYMBOL() { return GetToken(MySqlParser.PRESERVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_SYMBOL() { return GetToken(MySqlParser.ENABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_SYMBOL() { return GetToken(MySqlParser.DISABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySqlParser.COMMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_SYMBOL() { return GetToken(MySqlParser.NOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE_SYMBOL() { return GetToken(MySqlParser.SLAVE_SYMBOL, 0); }
		public CreateEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createEvent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateEvent(this);
		}
	}

	[RuleVersion(0)]
	public CreateEventContext createEvent() {
		CreateEventContext _localctx = new CreateEventContext(Context, State);
		EnterRule(_localctx, 170, RULE_createEvent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2371;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				State = 2370;
				definerClause();
				}
			}

			State = 2373;
			Match(EVENT_SYMBOL);
			State = 2375;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,180,Context) ) {
			case 1:
				{
				State = 2374;
				ifNotExists();
				}
				break;
			}
			State = 2377;
			eventName();
			State = 2378;
			Match(ON_SYMBOL);
			State = 2379;
			Match(SCHEDULE_SYMBOL);
			State = 2380;
			schedule();
			State = 2387;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON_SYMBOL) {
				{
				State = 2381;
				Match(ON_SYMBOL);
				State = 2382;
				Match(COMPLETION_SYMBOL);
				State = 2384;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					State = 2383;
					Match(NOT_SYMBOL);
					}
				}

				State = 2386;
				Match(PRESERVE_SYMBOL);
				}
			}

			State = 2395;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENABLE_SYMBOL:
				{
				State = 2389;
				Match(ENABLE_SYMBOL);
				}
				break;
			case DISABLE_SYMBOL:
				{
				State = 2390;
				Match(DISABLE_SYMBOL);
				State = 2393;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON_SYMBOL) {
					{
					State = 2391;
					Match(ON_SYMBOL);
					State = 2392;
					Match(SLAVE_SYMBOL);
					}
				}

				}
				break;
			case COMMENT_SYMBOL:
			case DO_SYMBOL:
				break;
			default:
				break;
			}
			State = 2399;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT_SYMBOL) {
				{
				State = 2397;
				Match(COMMENT_SYMBOL);
				State = 2398;
				textLiteral();
				}
			}

			State = 2401;
			Match(DO_SYMBOL);
			State = 2402;
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateRoleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE_SYMBOL() { return GetToken(MySqlParser.ROLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleListContext roleList() {
			return GetRuleContext<RoleListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public CreateRoleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createRole; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateRole(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateRole(this);
		}
	}

	[RuleVersion(0)]
	public CreateRoleContext createRole() {
		CreateRoleContext _localctx = new CreateRoleContext(Context, State);
		EnterRule(_localctx, 172, RULE_createRole);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2404;
			Match(ROLE_SYMBOL);
			State = 2406;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,186,Context) ) {
			case 1:
				{
				State = 2405;
				ifNotExists();
				}
				break;
			}
			State = 2408;
			roleList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateSpatialReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_SYMBOL() { return GetToken(MySqlParser.OR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySqlParser.REPLACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPATIAL_SYMBOL() { return GetToken(MySqlParser.SPATIAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCE_SYMBOL() { return GetToken(MySqlParser.REFERENCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_SYMBOL() { return GetToken(MySqlParser.SYSTEM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulonglong_numberContext real_ulonglong_number() {
			return GetRuleContext<Real_ulonglong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SrsAttributeContext[] srsAttribute() {
			return GetRuleContexts<SrsAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SrsAttributeContext srsAttribute(int i) {
			return GetRuleContext<SrsAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public CreateSpatialReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createSpatialReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateSpatialReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateSpatialReference(this);
		}
	}

	[RuleVersion(0)]
	public CreateSpatialReferenceContext createSpatialReference() {
		CreateSpatialReferenceContext _localctx = new CreateSpatialReferenceContext(Context, State);
		EnterRule(_localctx, 174, RULE_createSpatialReference);
		int _la;
		try {
			State = 2435;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2410;
				Match(OR_SYMBOL);
				State = 2411;
				Match(REPLACE_SYMBOL);
				State = 2412;
				Match(SPATIAL_SYMBOL);
				State = 2413;
				Match(REFERENCE_SYMBOL);
				State = 2414;
				Match(SYSTEM_SYMBOL);
				State = 2415;
				real_ulonglong_number();
				State = 2419;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NAME_SYMBOL || ((((_la - 715)) & ~0x3f) == 0 && ((1L << (_la - 715)) & ((1L << (DEFINITION_SYMBOL - 715)) | (1L << (DESCRIPTION_SYMBOL - 715)) | (1L << (ORGANIZATION_SYMBOL - 715)))) != 0)) {
					{
					{
					State = 2416;
					srsAttribute();
					}
					}
					State = 2421;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case SPATIAL_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2422;
				Match(SPATIAL_SYMBOL);
				State = 2423;
				Match(REFERENCE_SYMBOL);
				State = 2424;
				Match(SYSTEM_SYMBOL);
				State = 2426;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,188,Context) ) {
				case 1:
					{
					State = 2425;
					ifNotExists();
					}
					break;
				}
				State = 2428;
				real_ulonglong_number();
				State = 2432;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NAME_SYMBOL || ((((_la - 715)) & ~0x3f) == 0 && ((1L << (_la - 715)) & ((1L << (DEFINITION_SYMBOL - 715)) | (1L << (DESCRIPTION_SYMBOL - 715)) | (1L << (ORGANIZATION_SYMBOL - 715)))) != 0)) {
					{
					{
					State = 2429;
					srsAttribute();
					}
					}
					State = 2434;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SrsAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME_SYMBOL() { return GetToken(MySqlParser.NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_SYMBOL() { return GetToken(MySqlParser.TEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringNoLinebreakContext textStringNoLinebreak() {
			return GetRuleContext<TextStringNoLinebreakContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINITION_SYMBOL() { return GetToken(MySqlParser.DEFINITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORGANIZATION_SYMBOL() { return GetToken(MySqlParser.ORGANIZATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySqlParser.IDENTIFIED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySqlParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulonglong_numberContext real_ulonglong_number() {
			return GetRuleContext<Real_ulonglong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIPTION_SYMBOL() { return GetToken(MySqlParser.DESCRIPTION_SYMBOL, 0); }
		public SrsAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_srsAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSrsAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSrsAttribute(this);
		}
	}

	[RuleVersion(0)]
	public SrsAttributeContext srsAttribute() {
		SrsAttributeContext _localctx = new SrsAttributeContext(Context, State);
		EnterRule(_localctx, 176, RULE_srsAttribute);
		try {
			State = 2452;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2437;
				Match(NAME_SYMBOL);
				State = 2438;
				Match(TEXT_SYMBOL);
				State = 2439;
				textStringNoLinebreak();
				}
				break;
			case DEFINITION_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2440;
				Match(DEFINITION_SYMBOL);
				State = 2441;
				Match(TEXT_SYMBOL);
				State = 2442;
				textStringNoLinebreak();
				}
				break;
			case ORGANIZATION_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2443;
				Match(ORGANIZATION_SYMBOL);
				State = 2444;
				textStringNoLinebreak();
				State = 2445;
				Match(IDENTIFIED_SYMBOL);
				State = 2446;
				Match(BY_SYMBOL);
				State = 2447;
				real_ulonglong_number();
				}
				break;
			case DESCRIPTION_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2449;
				Match(DESCRIPTION_SYMBOL);
				State = 2450;
				Match(TEXT_SYMBOL);
				State = 2451;
				textStringNoLinebreak();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP_SYMBOL() { return GetToken(MySqlParser.DROP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DropDatabaseContext dropDatabase() {
			return GetRuleContext<DropDatabaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropEventContext dropEvent() {
			return GetRuleContext<DropEventContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropFunctionContext dropFunction() {
			return GetRuleContext<DropFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropProcedureContext dropProcedure() {
			return GetRuleContext<DropProcedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropIndexContext dropIndex() {
			return GetRuleContext<DropIndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropLogfileGroupContext dropLogfileGroup() {
			return GetRuleContext<DropLogfileGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropServerContext dropServer() {
			return GetRuleContext<DropServerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropTableContext dropTable() {
			return GetRuleContext<DropTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropTableSpaceContext dropTableSpace() {
			return GetRuleContext<DropTableSpaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropTriggerContext dropTrigger() {
			return GetRuleContext<DropTriggerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropViewContext dropView() {
			return GetRuleContext<DropViewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropRoleContext dropRole() {
			return GetRuleContext<DropRoleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropSpatialReferenceContext dropSpatialReference() {
			return GetRuleContext<DropSpatialReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropUndoTablespaceContext dropUndoTablespace() {
			return GetRuleContext<DropUndoTablespaceContext>(0);
		}
		public DropStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropStatement(this);
		}
	}

	[RuleVersion(0)]
	public DropStatementContext dropStatement() {
		DropStatementContext _localctx = new DropStatementContext(Context, State);
		EnterRule(_localctx, 178, RULE_dropStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2454;
			Match(DROP_SYMBOL);
			State = 2472;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,192,Context) ) {
			case 1:
				{
				State = 2455;
				dropDatabase();
				}
				break;
			case 2:
				{
				State = 2456;
				dropEvent();
				}
				break;
			case 3:
				{
				State = 2457;
				dropFunction();
				}
				break;
			case 4:
				{
				State = 2458;
				dropProcedure();
				}
				break;
			case 5:
				{
				State = 2459;
				dropIndex();
				}
				break;
			case 6:
				{
				State = 2460;
				dropLogfileGroup();
				}
				break;
			case 7:
				{
				State = 2461;
				dropServer();
				}
				break;
			case 8:
				{
				State = 2462;
				dropTable();
				}
				break;
			case 9:
				{
				State = 2463;
				dropTableSpace();
				}
				break;
			case 10:
				{
				State = 2464;
				dropTrigger();
				}
				break;
			case 11:
				{
				State = 2465;
				dropView();
				}
				break;
			case 12:
				{
				State = 2466;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 2467;
				dropRole();
				}
				break;
			case 13:
				{
				State = 2468;
				if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
				State = 2469;
				dropSpatialReference();
				}
				break;
			case 14:
				{
				State = 2470;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 2471;
				dropUndoTablespace();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropDatabaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE_SYMBOL() { return GetToken(MySqlParser.DATABASE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SchemaRefContext schemaRef() {
			return GetRuleContext<SchemaRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropDatabaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropDatabase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropDatabase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropDatabase(this);
		}
	}

	[RuleVersion(0)]
	public DropDatabaseContext dropDatabase() {
		DropDatabaseContext _localctx = new DropDatabaseContext(Context, State);
		EnterRule(_localctx, 180, RULE_dropDatabase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2474;
			Match(DATABASE_SYMBOL);
			State = 2476;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,193,Context) ) {
			case 1:
				{
				State = 2475;
				ifExists();
				}
				break;
			}
			State = 2478;
			schemaRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropEventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT_SYMBOL() { return GetToken(MySqlParser.EVENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EventRefContext eventRef() {
			return GetRuleContext<EventRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropEvent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropEvent(this);
		}
	}

	[RuleVersion(0)]
	public DropEventContext dropEvent() {
		DropEventContext _localctx = new DropEventContext(Context, State);
		EnterRule(_localctx, 182, RULE_dropEvent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2480;
			Match(EVENT_SYMBOL);
			State = 2482;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,194,Context) ) {
			case 1:
				{
				State = 2481;
				ifExists();
				}
				break;
			}
			State = 2484;
			eventRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION_SYMBOL() { return GetToken(MySqlParser.FUNCTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionRefContext functionRef() {
			return GetRuleContext<FunctionRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropFunction(this);
		}
	}

	[RuleVersion(0)]
	public DropFunctionContext dropFunction() {
		DropFunctionContext _localctx = new DropFunctionContext(Context, State);
		EnterRule(_localctx, 184, RULE_dropFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2486;
			Match(FUNCTION_SYMBOL);
			State = 2488;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,195,Context) ) {
			case 1:
				{
				State = 2487;
				ifExists();
				}
				break;
			}
			State = 2490;
			functionRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropProcedureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE_SYMBOL() { return GetToken(MySqlParser.PROCEDURE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureRefContext procedureRef() {
			return GetRuleContext<ProcedureRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropProcedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropProcedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropProcedure(this);
		}
	}

	[RuleVersion(0)]
	public DropProcedureContext dropProcedure() {
		DropProcedureContext _localctx = new DropProcedureContext(Context, State);
		EnterRule(_localctx, 186, RULE_dropProcedure);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2492;
			Match(PROCEDURE_SYMBOL);
			State = 2494;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,196,Context) ) {
			case 1:
				{
				State = 2493;
				ifExists();
				}
				break;
			}
			State = 2496;
			procedureRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropIndexContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public IndexRefContext indexRef() {
			return GetRuleContext<IndexRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySqlParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_SYMBOL() { return GetToken(MySqlParser.INDEX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OnlineOptionContext onlineOption() {
			return GetRuleContext<OnlineOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexLockAndAlgorithmContext indexLockAndAlgorithm() {
			return GetRuleContext<IndexLockAndAlgorithmContext>(0);
		}
		public DropIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropIndex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropIndex(this);
		}
	}

	[RuleVersion(0)]
	public DropIndexContext dropIndex() {
		DropIndexContext _localctx = new DropIndexContext(Context, State);
		EnterRule(_localctx, 188, RULE_dropIndex);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2499;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OFFLINE_SYMBOL || _la==ONLINE_SYMBOL) {
				{
				State = 2498;
				onlineOption();
				}
			}

			State = 2501;
			_localctx.type = Match(INDEX_SYMBOL);
			State = 2502;
			indexRef();
			State = 2503;
			Match(ON_SYMBOL);
			State = 2504;
			tableRef();
			State = 2506;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALGORITHM_SYMBOL || _la==LOCK_SYMBOL) {
				{
				State = 2505;
				indexLockAndAlgorithm();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropLogfileGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE_SYMBOL() { return GetToken(MySqlParser.LOGFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_SYMBOL() { return GetToken(MySqlParser.GROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogfileGroupRefContext logfileGroupRef() {
			return GetRuleContext<LogfileGroupRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropLogfileGroupOptionContext[] dropLogfileGroupOption() {
			return GetRuleContexts<DropLogfileGroupOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropLogfileGroupOptionContext dropLogfileGroupOption(int i) {
			return GetRuleContext<DropLogfileGroupOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public DropLogfileGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropLogfileGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropLogfileGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropLogfileGroup(this);
		}
	}

	[RuleVersion(0)]
	public DropLogfileGroupContext dropLogfileGroup() {
		DropLogfileGroupContext _localctx = new DropLogfileGroupContext(Context, State);
		EnterRule(_localctx, 190, RULE_dropLogfileGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2508;
			Match(LOGFILE_SYMBOL);
			State = 2509;
			Match(GROUP_SYMBOL);
			State = 2510;
			logfileGroupRef();
			State = 2521;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
				{
				State = 2511;
				dropLogfileGroupOption();
				State = 2518;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ENGINE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL || _la==COMMA_SYMBOL) {
					{
					{
					State = 2513;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA_SYMBOL) {
						{
						State = 2512;
						Match(COMMA_SYMBOL);
						}
					}

					State = 2515;
					dropLogfileGroupOption();
					}
					}
					State = 2520;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropLogfileGroupOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionWaitContext tsOptionWait() {
			return GetRuleContext<TsOptionWaitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionEngineContext tsOptionEngine() {
			return GetRuleContext<TsOptionEngineContext>(0);
		}
		public DropLogfileGroupOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropLogfileGroupOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropLogfileGroupOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropLogfileGroupOption(this);
		}
	}

	[RuleVersion(0)]
	public DropLogfileGroupOptionContext dropLogfileGroupOption() {
		DropLogfileGroupOptionContext _localctx = new DropLogfileGroupOptionContext(Context, State);
		EnterRule(_localctx, 192, RULE_dropLogfileGroupOption);
		try {
			State = 2525;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NO_WAIT_SYMBOL:
			case WAIT_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2523;
				tsOptionWait();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2524;
				tsOptionEngine();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropServerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER_SYMBOL() { return GetToken(MySqlParser.SERVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ServerRefContext serverRef() {
			return GetRuleContext<ServerRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropServerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropServer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropServer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropServer(this);
		}
	}

	[RuleVersion(0)]
	public DropServerContext dropServer() {
		DropServerContext _localctx = new DropServerContext(Context, State);
		EnterRule(_localctx, 194, RULE_dropServer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2527;
			Match(SERVER_SYMBOL);
			State = 2529;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,203,Context) ) {
			case 1:
				{
				State = 2528;
				ifExists();
				}
				break;
			}
			State = 2531;
			serverRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropTableContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public TableRefListContext tableRefList() {
			return GetRuleContext<TableRefListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySqlParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES_SYMBOL() { return GetToken(MySqlParser.TABLES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY_SYMBOL() { return GetToken(MySqlParser.TEMPORARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT_SYMBOL() { return GetToken(MySqlParser.RESTRICT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE_SYMBOL() { return GetToken(MySqlParser.CASCADE_SYMBOL, 0); }
		public DropTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropTable(this);
		}
	}

	[RuleVersion(0)]
	public DropTableContext dropTable() {
		DropTableContext _localctx = new DropTableContext(Context, State);
		EnterRule(_localctx, 196, RULE_dropTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2534;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMPORARY_SYMBOL) {
				{
				State = 2533;
				Match(TEMPORARY_SYMBOL);
				}
			}

			State = 2536;
			_localctx.type = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
				_localctx.type = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2538;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,205,Context) ) {
			case 1:
				{
				State = 2537;
				ifExists();
				}
				break;
			}
			State = 2540;
			tableRefList();
			State = 2542;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) {
				{
				State = 2541;
				_la = TokenStream.LA(1);
				if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropTableSpaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySqlParser.TABLESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablespaceRefContext tablespaceRef() {
			return GetRuleContext<TablespaceRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropLogfileGroupOptionContext[] dropLogfileGroupOption() {
			return GetRuleContexts<DropLogfileGroupOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropLogfileGroupOptionContext dropLogfileGroupOption(int i) {
			return GetRuleContext<DropLogfileGroupOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public DropTableSpaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropTableSpace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropTableSpace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropTableSpace(this);
		}
	}

	[RuleVersion(0)]
	public DropTableSpaceContext dropTableSpace() {
		DropTableSpaceContext _localctx = new DropTableSpaceContext(Context, State);
		EnterRule(_localctx, 198, RULE_dropTableSpace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2544;
			Match(TABLESPACE_SYMBOL);
			State = 2545;
			tablespaceRef();
			State = 2556;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
				{
				State = 2546;
				dropLogfileGroupOption();
				State = 2553;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ENGINE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL || _la==COMMA_SYMBOL) {
					{
					{
					State = 2548;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA_SYMBOL) {
						{
						State = 2547;
						Match(COMMA_SYMBOL);
						}
					}

					State = 2550;
					dropLogfileGroupOption();
					}
					}
					State = 2555;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropTriggerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER_SYMBOL() { return GetToken(MySqlParser.TRIGGER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TriggerRefContext triggerRef() {
			return GetRuleContext<TriggerRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropTriggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropTrigger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropTrigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropTrigger(this);
		}
	}

	[RuleVersion(0)]
	public DropTriggerContext dropTrigger() {
		DropTriggerContext _localctx = new DropTriggerContext(Context, State);
		EnterRule(_localctx, 200, RULE_dropTrigger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2558;
			Match(TRIGGER_SYMBOL);
			State = 2560;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,210,Context) ) {
			case 1:
				{
				State = 2559;
				ifExists();
				}
				break;
			}
			State = 2562;
			triggerRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropViewContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW_SYMBOL() { return GetToken(MySqlParser.VIEW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ViewRefListContext viewRefList() {
			return GetRuleContext<ViewRefListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT_SYMBOL() { return GetToken(MySqlParser.RESTRICT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE_SYMBOL() { return GetToken(MySqlParser.CASCADE_SYMBOL, 0); }
		public DropViewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropView; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropView(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropView(this);
		}
	}

	[RuleVersion(0)]
	public DropViewContext dropView() {
		DropViewContext _localctx = new DropViewContext(Context, State);
		EnterRule(_localctx, 202, RULE_dropView);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2564;
			Match(VIEW_SYMBOL);
			State = 2566;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,211,Context) ) {
			case 1:
				{
				State = 2565;
				ifExists();
				}
				break;
			}
			State = 2568;
			viewRefList();
			State = 2570;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) {
				{
				State = 2569;
				_la = TokenStream.LA(1);
				if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropRoleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE_SYMBOL() { return GetToken(MySqlParser.ROLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleListContext roleList() {
			return GetRuleContext<RoleListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropRoleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropRole; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropRole(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropRole(this);
		}
	}

	[RuleVersion(0)]
	public DropRoleContext dropRole() {
		DropRoleContext _localctx = new DropRoleContext(Context, State);
		EnterRule(_localctx, 204, RULE_dropRole);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2572;
			Match(ROLE_SYMBOL);
			State = 2574;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,213,Context) ) {
			case 1:
				{
				State = 2573;
				ifExists();
				}
				break;
			}
			State = 2576;
			roleList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropSpatialReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPATIAL_SYMBOL() { return GetToken(MySqlParser.SPATIAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCE_SYMBOL() { return GetToken(MySqlParser.REFERENCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_SYMBOL() { return GetToken(MySqlParser.SYSTEM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulonglong_numberContext real_ulonglong_number() {
			return GetRuleContext<Real_ulonglong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropSpatialReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropSpatialReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropSpatialReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropSpatialReference(this);
		}
	}

	[RuleVersion(0)]
	public DropSpatialReferenceContext dropSpatialReference() {
		DropSpatialReferenceContext _localctx = new DropSpatialReferenceContext(Context, State);
		EnterRule(_localctx, 206, RULE_dropSpatialReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2578;
			Match(SPATIAL_SYMBOL);
			State = 2579;
			Match(REFERENCE_SYMBOL);
			State = 2580;
			Match(SYSTEM_SYMBOL);
			State = 2582;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,214,Context) ) {
			case 1:
				{
				State = 2581;
				ifExists();
				}
				break;
			}
			State = 2584;
			real_ulonglong_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropUndoTablespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDO_SYMBOL() { return GetToken(MySqlParser.UNDO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySqlParser.TABLESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablespaceRefContext tablespaceRef() {
			return GetRuleContext<TablespaceRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UndoTableSpaceOptionsContext undoTableSpaceOptions() {
			return GetRuleContext<UndoTableSpaceOptionsContext>(0);
		}
		public DropUndoTablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropUndoTablespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropUndoTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropUndoTablespace(this);
		}
	}

	[RuleVersion(0)]
	public DropUndoTablespaceContext dropUndoTablespace() {
		DropUndoTablespaceContext _localctx = new DropUndoTablespaceContext(Context, State);
		EnterRule(_localctx, 208, RULE_dropUndoTablespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2586;
			Match(UNDO_SYMBOL);
			State = 2587;
			Match(TABLESPACE_SYMBOL);
			State = 2588;
			tablespaceRef();
			State = 2590;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE_SYMBOL || _la==STORAGE_SYMBOL) {
				{
				State = 2589;
				undoTableSpaceOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenameTableStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME_SYMBOL() { return GetToken(MySqlParser.RENAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RenamePairContext[] renamePair() {
			return GetRuleContexts<RenamePairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RenamePairContext renamePair(int i) {
			return GetRuleContext<RenamePairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySqlParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES_SYMBOL() { return GetToken(MySqlParser.TABLES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public RenameTableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renameTableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRenameTableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRenameTableStatement(this);
		}
	}

	[RuleVersion(0)]
	public RenameTableStatementContext renameTableStatement() {
		RenameTableStatementContext _localctx = new RenameTableStatementContext(Context, State);
		EnterRule(_localctx, 210, RULE_renameTableStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2592;
			Match(RENAME_SYMBOL);
			State = 2593;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2594;
			renamePair();
			State = 2599;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 2595;
				Match(COMMA_SYMBOL);
				State = 2596;
				renamePair();
				}
				}
				State = 2601;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenamePairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SYMBOL() { return GetToken(MySqlParser.TO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public RenamePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renamePair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRenamePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRenamePair(this);
		}
	}

	[RuleVersion(0)]
	public RenamePairContext renamePair() {
		RenamePairContext _localctx = new RenamePairContext(Context, State);
		EnterRule(_localctx, 212, RULE_renamePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2602;
			tableRef();
			State = 2603;
			Match(TO_SYMBOL);
			State = 2604;
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TruncateTableStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE_SYMBOL() { return GetToken(MySqlParser.TRUNCATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySqlParser.TABLE_SYMBOL, 0); }
		public TruncateTableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truncateTableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTruncateTableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTruncateTableStatement(this);
		}
	}

	[RuleVersion(0)]
	public TruncateTableStatementContext truncateTableStatement() {
		TruncateTableStatementContext _localctx = new TruncateTableStatementContext(Context, State);
		EnterRule(_localctx, 214, RULE_truncateTableStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2606;
			Match(TRUNCATE_SYMBOL);
			State = 2608;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,217,Context) ) {
			case 1:
				{
				State = 2607;
				Match(TABLE_SYMBOL);
				}
				break;
			}
			State = 2610;
			tableRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT_SYMBOL() { return GetToken(MySqlParser.IMPORT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySqlParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySqlParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralListContext textStringLiteralList() {
			return GetRuleContext<TextStringLiteralListContext>(0);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 216, RULE_importStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2612;
			Match(IMPORT_SYMBOL);
			State = 2613;
			Match(TABLE_SYMBOL);
			State = 2614;
			Match(FROM_SYMBOL);
			State = 2615;
			textStringLiteralList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL_SYMBOL() { return GetToken(MySqlParser.CALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureRefContext procedureRef() {
			return GetRuleContext<ProcedureRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCallStatement(this);
		}
	}

	[RuleVersion(0)]
	public CallStatementContext callStatement() {
		CallStatementContext _localctx = new CallStatementContext(Context, State);
		EnterRule(_localctx, 218, RULE_callStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2617;
			Match(CALL_SYMBOL);
			State = 2618;
			procedureRef();
			State = 2624;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 2619;
				Match(OPEN_PAR_SYMBOL);
				State = 2621;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,218,Context) ) {
				case 1:
					{
					State = 2620;
					exprList();
					}
					break;
				}
				State = 2623;
				Match(CLOSE_PAR_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_SYMBOL() { return GetToken(MySqlParser.DELETE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySqlParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableAliasRefListContext tableAliasRefList() {
			return GetRuleContext<TableAliasRefListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableReferenceListContext tableReferenceList() {
			return GetRuleContext<TableReferenceListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithClauseContext withClause() {
			return GetRuleContext<WithClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatementOptionContext[] deleteStatementOption() {
			return GetRuleContexts<DeleteStatementOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatementOptionContext deleteStatementOption(int i) {
			return GetRuleContext<DeleteStatementOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING_SYMBOL() { return GetToken(MySqlParser.USING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDeleteContext partitionDelete() {
			return GetRuleContext<PartitionDeleteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderClauseContext orderClause() {
			return GetRuleContext<OrderClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleLimitClauseContext simpleLimitClause() {
			return GetRuleContext<SimpleLimitClauseContext>(0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDeleteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDeleteStatement(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatementContext deleteStatement() {
		DeleteStatementContext _localctx = new DeleteStatementContext(Context, State);
		EnterRule(_localctx, 220, RULE_deleteStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2628;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,220,Context) ) {
			case 1:
				{
				State = 2626;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 2627;
				withClause();
				}
				break;
			}
			State = 2630;
			Match(DELETE_SYMBOL);
			State = 2634;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,221,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2631;
					deleteStatementOption();
					}
					} 
				}
				State = 2636;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,221,Context);
			}
			State = 2669;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,230,Context) ) {
			case 1:
				{
				State = 2637;
				Match(FROM_SYMBOL);
				State = 2661;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,228,Context) ) {
				case 1:
					{
					State = 2638;
					tableAliasRefList();
					State = 2639;
					Match(USING_SYMBOL);
					State = 2640;
					tableReferenceList();
					State = 2642;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WHERE_SYMBOL) {
						{
						State = 2641;
						whereClause();
						}
					}

					}
					break;
				case 2:
					{
					State = 2644;
					tableRef();
					State = 2647;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,223,Context) ) {
					case 1:
						{
						State = 2645;
						if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
						State = 2646;
						tableAlias();
						}
						break;
					}
					State = 2650;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,224,Context) ) {
					case 1:
						{
						State = 2649;
						partitionDelete();
						}
						break;
					}
					State = 2653;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WHERE_SYMBOL) {
						{
						State = 2652;
						whereClause();
						}
					}

					State = 2656;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ORDER_SYMBOL) {
						{
						State = 2655;
						orderClause();
						}
					}

					State = 2659;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LIMIT_SYMBOL) {
						{
						State = 2658;
						simpleLimitClause();
						}
					}

					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 2663;
				tableAliasRefList();
				State = 2664;
				Match(FROM_SYMBOL);
				State = 2665;
				tableReferenceList();
				State = 2667;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE_SYMBOL) {
					{
					State = 2666;
					whereClause();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionDeleteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySqlParser.PARTITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public PartitionDeleteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionDelete; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionDelete(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionDelete(this);
		}
	}

	[RuleVersion(0)]
	public PartitionDeleteContext partitionDelete() {
		PartitionDeleteContext _localctx = new PartitionDeleteContext(Context, State);
		EnterRule(_localctx, 222, RULE_partitionDelete);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2671;
			if (!(serverVersion >= 50602)) throw new FailedPredicateException(this, "serverVersion >= 50602");
			State = 2672;
			Match(PARTITION_SYMBOL);
			State = 2673;
			Match(OPEN_PAR_SYMBOL);
			State = 2674;
			identifierList();
			State = 2675;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatementOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK_SYMBOL() { return GetToken(MySqlParser.QUICK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY_SYMBOL() { return GetToken(MySqlParser.LOW_PRIORITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySqlParser.IGNORE_SYMBOL, 0); }
		public DeleteStatementOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatementOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDeleteStatementOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDeleteStatementOption(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatementOptionContext deleteStatementOption() {
		DeleteStatementOptionContext _localctx = new DeleteStatementOptionContext(Context, State);
		EnterRule(_localctx, 224, RULE_deleteStatementOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2677;
			_la = TokenStream.LA(1);
			if ( !(_la==IGNORE_SYMBOL || _la==LOW_PRIORITY_SYMBOL || _la==QUICK_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO_SYMBOL() { return GetToken(MySqlParser.DO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectItemListContext selectItemList() {
			return GetRuleContext<SelectItemListContext>(0);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDoStatement(this);
		}
	}

	[RuleVersion(0)]
	public DoStatementContext doStatement() {
		DoStatementContext _localctx = new DoStatementContext(Context, State);
		EnterRule(_localctx, 226, RULE_doStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2679;
			Match(DO_SYMBOL);
			State = 2684;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,231,Context) ) {
			case 1:
				{
				State = 2680;
				if (!(serverVersion < 50709)) throw new FailedPredicateException(this, "serverVersion < 50709");
				State = 2681;
				exprList();
				}
				break;
			case 2:
				{
				State = 2682;
				if (!(serverVersion >= 50709)) throw new FailedPredicateException(this, "serverVersion >= 50709");
				State = 2683;
				selectItemList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER_SYMBOL() { return GetToken(MySqlParser.HANDLER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_SYMBOL() { return GetToken(MySqlParser.OPEN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_SYMBOL() { return GetToken(MySqlParser.CLOSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_SYMBOL() { return GetToken(MySqlParser.READ_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HandlerReadOrScanContext handlerReadOrScan() {
			return GetRuleContext<HandlerReadOrScanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public HandlerStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerStatement(this);
		}
	}

	[RuleVersion(0)]
	public HandlerStatementContext handlerStatement() {
		HandlerStatementContext _localctx = new HandlerStatementContext(Context, State);
		EnterRule(_localctx, 228, RULE_handlerStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2686;
			Match(HANDLER_SYMBOL);
			State = 2704;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,236,Context) ) {
			case 1:
				{
				State = 2687;
				tableRef();
				State = 2688;
				Match(OPEN_SYMBOL);
				State = 2690;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,232,Context) ) {
				case 1:
					{
					State = 2689;
					tableAlias();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 2692;
				identifier();
				State = 2702;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CLOSE_SYMBOL:
					{
					State = 2693;
					Match(CLOSE_SYMBOL);
					}
					break;
				case READ_SYMBOL:
					{
					State = 2694;
					Match(READ_SYMBOL);
					State = 2695;
					handlerReadOrScan();
					State = 2697;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WHERE_SYMBOL) {
						{
						State = 2696;
						whereClause();
						}
					}

					State = 2700;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LIMIT_SYMBOL) {
						{
						State = 2699;
						limitClause();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerReadOrScanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_SYMBOL() { return GetToken(MySqlParser.FIRST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT_SYMBOL() { return GetToken(MySqlParser.NEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValuesContext @values() {
			return GetRuleContext<ValuesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREV_SYMBOL() { return GetToken(MySqlParser.PREV_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_SYMBOL() { return GetToken(MySqlParser.LAST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_THAN_OPERATOR() { return GetToken(MySqlParser.LESS_THAN_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN_OPERATOR() { return GetToken(MySqlParser.GREATER_THAN_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQUAL_OPERATOR() { return GetToken(MySqlParser.LESS_OR_EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQUAL_OPERATOR() { return GetToken(MySqlParser.GREATER_OR_EQUAL_OPERATOR, 0); }
		public HandlerReadOrScanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerReadOrScan; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerReadOrScan(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerReadOrScan(this);
		}
	}

	[RuleVersion(0)]
	public HandlerReadOrScanContext handlerReadOrScan() {
		HandlerReadOrScanContext _localctx = new HandlerReadOrScanContext(Context, State);
		EnterRule(_localctx, 230, RULE_handlerReadOrScan);
		int _la;
		try {
			State = 2716;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,238,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2706;
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST_SYMBOL || _la==NEXT_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2707;
				identifier();
				State = 2714;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FIRST_SYMBOL:
				case LAST_SYMBOL:
				case NEXT_SYMBOL:
				case PREV_SYMBOL:
					{
					State = 2708;
					_la = TokenStream.LA(1);
					if ( !(_la==FIRST_SYMBOL || _la==LAST_SYMBOL || _la==NEXT_SYMBOL || _la==PREV_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case EQUAL_OPERATOR:
				case GREATER_OR_EQUAL_OPERATOR:
				case GREATER_THAN_OPERATOR:
				case LESS_OR_EQUAL_OPERATOR:
				case LESS_THAN_OPERATOR:
					{
					State = 2709;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 750)) & ~0x3f) == 0 && ((1L << (_la - 750)) & ((1L << (EQUAL_OPERATOR - 750)) | (1L << (GREATER_OR_EQUAL_OPERATOR - 750)) | (1L << (GREATER_THAN_OPERATOR - 750)) | (1L << (LESS_OR_EQUAL_OPERATOR - 750)) | (1L << (LESS_THAN_OPERATOR - 750)))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 2710;
					Match(OPEN_PAR_SYMBOL);
					State = 2711;
					@values();
					State = 2712;
					Match(CLOSE_PAR_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT_SYMBOL() { return GetToken(MySqlParser.INSERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertFromConstructorContext insertFromConstructor() {
			return GetRuleContext<InsertFromConstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySqlParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdateListContext updateList() {
			return GetRuleContext<UpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertQueryExpressionContext insertQueryExpression() {
			return GetRuleContext<InsertQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertLockOptionContext insertLockOption() {
			return GetRuleContext<InsertLockOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySqlParser.IGNORE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO_SYMBOL() { return GetToken(MySqlParser.INTO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsePartitionContext usePartition() {
			return GetRuleContext<UsePartitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertUpdateListContext insertUpdateList() {
			return GetRuleContext<InsertUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValuesReferenceContext valuesReference() {
			return GetRuleContext<ValuesReferenceContext>(0);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInsertStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInsertStatement(this);
		}
	}

	[RuleVersion(0)]
	public InsertStatementContext insertStatement() {
		InsertStatementContext _localctx = new InsertStatementContext(Context, State);
		EnterRule(_localctx, 232, RULE_insertStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2718;
			Match(INSERT_SYMBOL);
			State = 2720;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,239,Context) ) {
			case 1:
				{
				State = 2719;
				insertLockOption();
				}
				break;
			}
			State = 2723;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,240,Context) ) {
			case 1:
				{
				State = 2722;
				Match(IGNORE_SYMBOL);
				}
				break;
			}
			State = 2726;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,241,Context) ) {
			case 1:
				{
				State = 2725;
				Match(INTO_SYMBOL);
				}
				break;
			}
			State = 2728;
			tableRef();
			State = 2730;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,242,Context) ) {
			case 1:
				{
				State = 2729;
				usePartition();
				}
				break;
			}
			State = 2744;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,245,Context) ) {
			case 1:
				{
				State = 2732;
				insertFromConstructor();
				State = 2735;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,243,Context) ) {
				case 1:
					{
					State = 2733;
					if (!( serverVersion >= 80018)) throw new FailedPredicateException(this, " serverVersion >= 80018");
					State = 2734;
					valuesReference();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 2737;
				Match(SET_SYMBOL);
				State = 2738;
				updateList();
				State = 2741;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,244,Context) ) {
				case 1:
					{
					State = 2739;
					if (!( serverVersion >= 80018)) throw new FailedPredicateException(this, " serverVersion >= 80018");
					State = 2740;
					valuesReference();
					}
					break;
				}
				}
				break;
			case 3:
				{
				State = 2743;
				insertQueryExpression();
				}
				break;
			}
			State = 2747;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON_SYMBOL) {
				{
				State = 2746;
				insertUpdateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertLockOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY_SYMBOL() { return GetToken(MySqlParser.LOW_PRIORITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAYED_SYMBOL() { return GetToken(MySqlParser.DELAYED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIGH_PRIORITY_SYMBOL() { return GetToken(MySqlParser.HIGH_PRIORITY_SYMBOL, 0); }
		public InsertLockOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertLockOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInsertLockOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInsertLockOption(this);
		}
	}

	[RuleVersion(0)]
	public InsertLockOptionContext insertLockOption() {
		InsertLockOptionContext _localctx = new InsertLockOptionContext(Context, State);
		EnterRule(_localctx, 234, RULE_insertLockOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2749;
			_la = TokenStream.LA(1);
			if ( !(_la==DELAYED_SYMBOL || _la==HIGH_PRIORITY_SYMBOL || _la==LOW_PRIORITY_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertFromConstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InsertValuesContext insertValues() {
			return GetRuleContext<InsertValuesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldsContext fields() {
			return GetRuleContext<FieldsContext>(0);
		}
		public InsertFromConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertFromConstructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInsertFromConstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInsertFromConstructor(this);
		}
	}

	[RuleVersion(0)]
	public InsertFromConstructorContext insertFromConstructor() {
		InsertFromConstructorContext _localctx = new InsertFromConstructorContext(Context, State);
		EnterRule(_localctx, 236, RULE_insertFromConstructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2756;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 2751;
				Match(OPEN_PAR_SYMBOL);
				State = 2753;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,247,Context) ) {
				case 1:
					{
					State = 2752;
					fields();
					}
					break;
				}
				State = 2755;
				Match(CLOSE_PAR_SYMBOL);
				}
			}

			State = 2758;
			insertValues();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InsertIdentifierContext[] insertIdentifier() {
			return GetRuleContexts<InsertIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertIdentifierContext insertIdentifier(int i) {
			return GetRuleContext<InsertIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public FieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fields; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFields(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFields(this);
		}
	}

	[RuleVersion(0)]
	public FieldsContext fields() {
		FieldsContext _localctx = new FieldsContext(Context, State);
		EnterRule(_localctx, 238, RULE_fields);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2760;
			insertIdentifier();
			State = 2765;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 2761;
				Match(COMMA_SYMBOL);
				State = 2762;
				insertIdentifier();
				}
				}
				State = 2767;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertValuesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueListContext valueList() {
			return GetRuleContext<ValueListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES_SYMBOL() { return GetToken(MySqlParser.VALUES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_SYMBOL() { return GetToken(MySqlParser.VALUE_SYMBOL, 0); }
		public InsertValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertValues; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInsertValues(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInsertValues(this);
		}
	}

	[RuleVersion(0)]
	public InsertValuesContext insertValues() {
		InsertValuesContext _localctx = new InsertValuesContext(Context, State);
		EnterRule(_localctx, 240, RULE_insertValues);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2768;
			_la = TokenStream.LA(1);
			if ( !(_la==VALUES_SYMBOL || _la==VALUE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2769;
			valueList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertQueryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionOrParensContext queryExpressionOrParens() {
			return GetRuleContext<QueryExpressionOrParensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldsContext fields() {
			return GetRuleContext<FieldsContext>(0);
		}
		public InsertQueryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertQueryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInsertQueryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInsertQueryExpression(this);
		}
	}

	[RuleVersion(0)]
	public InsertQueryExpressionContext insertQueryExpression() {
		InsertQueryExpressionContext _localctx = new InsertQueryExpressionContext(Context, State);
		EnterRule(_localctx, 242, RULE_insertQueryExpression);
		try {
			State = 2778;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,251,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2771;
				queryExpressionOrParens();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2772;
				Match(OPEN_PAR_SYMBOL);
				State = 2774;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,250,Context) ) {
				case 1:
					{
					State = 2773;
					fields();
					}
					break;
				}
				State = 2776;
				Match(CLOSE_PAR_SYMBOL);
				State = 2777;
				queryExpressionOrParens();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_PAR_SYMBOL() { return GetTokens(MySqlParser.OPEN_PAR_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL(int i) {
			return GetToken(MySqlParser.OPEN_PAR_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_PAR_SYMBOL() { return GetTokens(MySqlParser.CLOSE_PAR_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL(int i) {
			return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValuesContext[] @values() {
			return GetRuleContexts<ValuesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValuesContext @values(int i) {
			return GetRuleContext<ValuesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public ValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterValueList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitValueList(this);
		}
	}

	[RuleVersion(0)]
	public ValueListContext valueList() {
		ValueListContext _localctx = new ValueListContext(Context, State);
		EnterRule(_localctx, 244, RULE_valueList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2780;
			Match(OPEN_PAR_SYMBOL);
			State = 2782;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,252,Context) ) {
			case 1:
				{
				State = 2781;
				@values();
				}
				break;
			}
			State = 2784;
			Match(CLOSE_PAR_SYMBOL);
			State = 2793;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,254,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2785;
					Match(COMMA_SYMBOL);
					State = 2786;
					Match(OPEN_PAR_SYMBOL);
					State = 2788;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,253,Context) ) {
					case 1:
						{
						State = 2787;
						@values();
						}
						break;
					}
					State = 2790;
					Match(CLOSE_PAR_SYMBOL);
					}
					} 
				}
				State = 2795;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,254,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValuesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT_SYMBOL() { return GetTokens(MySqlParser.DEFAULT_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL(int i) {
			return GetToken(MySqlParser.DEFAULT_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public ValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_values; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterValues(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitValues(this);
		}
	}

	[RuleVersion(0)]
	public ValuesContext @values() {
		ValuesContext _localctx = new ValuesContext(Context, State);
		EnterRule(_localctx, 246, RULE_values);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2798;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,255,Context) ) {
			case 1:
				{
				State = 2796;
				expr(0);
				}
				break;
			case 2:
				{
				State = 2797;
				Match(DEFAULT_SYMBOL);
				}
				break;
			}
			State = 2807;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 2800;
				Match(COMMA_SYMBOL);
				State = 2803;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,256,Context) ) {
				case 1:
					{
					State = 2801;
					expr(0);
					}
					break;
				case 2:
					{
					State = 2802;
					Match(DEFAULT_SYMBOL);
					}
					break;
				}
				}
				}
				State = 2809;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValuesReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySqlParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnInternalRefListContext columnInternalRefList() {
			return GetRuleContext<ColumnInternalRefListContext>(0);
		}
		public ValuesReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valuesReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterValuesReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitValuesReference(this);
		}
	}

	[RuleVersion(0)]
	public ValuesReferenceContext valuesReference() {
		ValuesReferenceContext _localctx = new ValuesReferenceContext(Context, State);
		EnterRule(_localctx, 248, RULE_valuesReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2810;
			Match(AS_SYMBOL);
			State = 2811;
			identifier();
			State = 2813;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 2812;
				columnInternalRefList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertUpdateListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySqlParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUPLICATE_SYMBOL() { return GetToken(MySqlParser.DUPLICATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_SYMBOL() { return GetToken(MySqlParser.KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySqlParser.UPDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdateListContext updateList() {
			return GetRuleContext<UpdateListContext>(0);
		}
		public InsertUpdateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertUpdateList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInsertUpdateList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInsertUpdateList(this);
		}
	}

	[RuleVersion(0)]
	public InsertUpdateListContext insertUpdateList() {
		InsertUpdateListContext _localctx = new InsertUpdateListContext(Context, State);
		EnterRule(_localctx, 250, RULE_insertUpdateList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2815;
			Match(ON_SYMBOL);
			State = 2816;
			Match(DUPLICATE_SYMBOL);
			State = 2817;
			Match(KEY_SYMBOL);
			State = 2818;
			Match(UPDATE_SYMBOL);
			State = 2819;
			updateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD_SYMBOL() { return GetToken(MySqlParser.LOAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataOrXmlContext dataOrXml() {
			return GetRuleContext<DataOrXmlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INFILE_SYMBOL() { return GetToken(MySqlParser.INFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO_SYMBOL() { return GetToken(MySqlParser.INTO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySqlParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadDataFileTailContext loadDataFileTail() {
			return GetRuleContext<LoadDataFileTailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySqlParser.LOCAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsePartitionContext usePartition() {
			return GetRuleContext<UsePartitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetClauseContext charsetClause() {
			return GetRuleContext<CharsetClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XmlRowsIdentifiedByContext xmlRowsIdentifiedBy() {
			return GetRuleContext<XmlRowsIdentifiedByContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsClauseContext fieldsClause() {
			return GetRuleContext<FieldsClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinesClauseContext linesClause() {
			return GetRuleContext<LinesClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY_SYMBOL() { return GetToken(MySqlParser.LOW_PRIORITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENT_SYMBOL() { return GetToken(MySqlParser.CONCURRENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySqlParser.REPLACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySqlParser.IGNORE_SYMBOL, 0); }
		public LoadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLoadStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLoadStatement(this);
		}
	}

	[RuleVersion(0)]
	public LoadStatementContext loadStatement() {
		LoadStatementContext _localctx = new LoadStatementContext(Context, State);
		EnterRule(_localctx, 252, RULE_loadStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2821;
			Match(LOAD_SYMBOL);
			State = 2822;
			dataOrXml();
			State = 2824;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONCURRENT_SYMBOL || _la==LOW_PRIORITY_SYMBOL) {
				{
				State = 2823;
				_la = TokenStream.LA(1);
				if ( !(_la==CONCURRENT_SYMBOL || _la==LOW_PRIORITY_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2827;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOCAL_SYMBOL) {
				{
				State = 2826;
				Match(LOCAL_SYMBOL);
				}
			}

			State = 2829;
			Match(INFILE_SYMBOL);
			State = 2830;
			textLiteral();
			State = 2832;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE_SYMBOL || _la==REPLACE_SYMBOL) {
				{
				State = 2831;
				_la = TokenStream.LA(1);
				if ( !(_la==IGNORE_SYMBOL || _la==REPLACE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2834;
			Match(INTO_SYMBOL);
			State = 2835;
			Match(TABLE_SYMBOL);
			State = 2836;
			tableRef();
			State = 2838;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,262,Context) ) {
			case 1:
				{
				State = 2837;
				usePartition();
				}
				break;
			}
			State = 2841;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CHARSET_SYMBOL || _la==CHAR_SYMBOL) {
				{
				State = 2840;
				charsetClause();
				}
			}

			State = 2844;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ROWS_SYMBOL) {
				{
				State = 2843;
				xmlRowsIdentifiedBy();
				}
			}

			State = 2847;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLUMNS_SYMBOL) {
				{
				State = 2846;
				fieldsClause();
				}
			}

			State = 2850;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LINES_SYMBOL) {
				{
				State = 2849;
				linesClause();
				}
			}

			State = 2852;
			loadDataFileTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataOrXmlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_SYMBOL() { return GetToken(MySqlParser.DATA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML_SYMBOL() { return GetToken(MySqlParser.XML_SYMBOL, 0); }
		public DataOrXmlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataOrXml; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDataOrXml(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDataOrXml(this);
		}
	}

	[RuleVersion(0)]
	public DataOrXmlContext dataOrXml() {
		DataOrXmlContext _localctx = new DataOrXmlContext(Context, State);
		EnterRule(_localctx, 254, RULE_dataOrXml);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2854;
			_la = TokenStream.LA(1);
			if ( !(_la==DATA_SYMBOL || _la==XML_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XmlRowsIdentifiedByContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS_SYMBOL() { return GetToken(MySqlParser.ROWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySqlParser.IDENTIFIED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySqlParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public XmlRowsIdentifiedByContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlRowsIdentifiedBy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterXmlRowsIdentifiedBy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitXmlRowsIdentifiedBy(this);
		}
	}

	[RuleVersion(0)]
	public XmlRowsIdentifiedByContext xmlRowsIdentifiedBy() {
		XmlRowsIdentifiedByContext _localctx = new XmlRowsIdentifiedByContext(Context, State);
		EnterRule(_localctx, 256, RULE_xmlRowsIdentifiedBy);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2856;
			Match(ROWS_SYMBOL);
			State = 2857;
			Match(IDENTIFIED_SYMBOL);
			State = 2858;
			Match(BY_SYMBOL);
			State = 2859;
			textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadDataFileTailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySqlParser.IGNORE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySqlParser.INT_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LoadDataFileTargetListContext loadDataFileTargetList() {
			return GetRuleContext<LoadDataFileTargetListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySqlParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdateListContext updateList() {
			return GetRuleContext<UpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINES_SYMBOL() { return GetToken(MySqlParser.LINES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS_SYMBOL() { return GetToken(MySqlParser.ROWS_SYMBOL, 0); }
		public LoadDataFileTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadDataFileTail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLoadDataFileTail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLoadDataFileTail(this);
		}
	}

	[RuleVersion(0)]
	public LoadDataFileTailContext loadDataFileTail() {
		LoadDataFileTailContext _localctx = new LoadDataFileTailContext(Context, State);
		EnterRule(_localctx, 258, RULE_loadDataFileTail);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2864;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE_SYMBOL) {
				{
				State = 2861;
				Match(IGNORE_SYMBOL);
				State = 2862;
				Match(INT_NUMBER);
				State = 2863;
				_la = TokenStream.LA(1);
				if ( !(_la==LINES_SYMBOL || _la==ROWS_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2867;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 2866;
				loadDataFileTargetList();
				}
			}

			State = 2871;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SET_SYMBOL) {
				{
				State = 2869;
				Match(SET_SYMBOL);
				State = 2870;
				updateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadDataFileTargetListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldOrVariableListContext fieldOrVariableList() {
			return GetRuleContext<FieldOrVariableListContext>(0);
		}
		public LoadDataFileTargetListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadDataFileTargetList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLoadDataFileTargetList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLoadDataFileTargetList(this);
		}
	}

	[RuleVersion(0)]
	public LoadDataFileTargetListContext loadDataFileTargetList() {
		LoadDataFileTargetListContext _localctx = new LoadDataFileTargetListContext(Context, State);
		EnterRule(_localctx, 260, RULE_loadDataFileTargetList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2873;
			Match(OPEN_PAR_SYMBOL);
			State = 2875;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,270,Context) ) {
			case 1:
				{
				State = 2874;
				fieldOrVariableList();
				}
				break;
			}
			State = 2877;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldOrVariableListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnRefContext[] columnRef() {
			return GetRuleContexts<ColumnRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnRefContext columnRef(int i) {
			return GetRuleContext<ColumnRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserVariableContext[] userVariable() {
			return GetRuleContexts<UserVariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserVariableContext userVariable(int i) {
			return GetRuleContext<UserVariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public FieldOrVariableListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldOrVariableList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFieldOrVariableList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFieldOrVariableList(this);
		}
	}

	[RuleVersion(0)]
	public FieldOrVariableListContext fieldOrVariableList() {
		FieldOrVariableListContext _localctx = new FieldOrVariableListContext(Context, State);
		EnterRule(_localctx, 262, RULE_fieldOrVariableList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2881;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,271,Context) ) {
			case 1:
				{
				State = 2879;
				columnRef();
				}
				break;
			case 2:
				{
				State = 2880;
				userVariable();
				}
				break;
			}
			State = 2890;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 2883;
				Match(COMMA_SYMBOL);
				State = 2886;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,272,Context) ) {
				case 1:
					{
					State = 2884;
					columnRef();
					}
					break;
				case 2:
					{
					State = 2885;
					userVariable();
					}
					break;
				}
				}
				}
				State = 2892;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplaceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySqlParser.REPLACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertFromConstructorContext insertFromConstructor() {
			return GetRuleContext<InsertFromConstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySqlParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdateListContext updateList() {
			return GetRuleContext<UpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertQueryExpressionContext insertQueryExpression() {
			return GetRuleContext<InsertQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO_SYMBOL() { return GetToken(MySqlParser.INTO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsePartitionContext usePartition() {
			return GetRuleContext<UsePartitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY_SYMBOL() { return GetToken(MySqlParser.LOW_PRIORITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAYED_SYMBOL() { return GetToken(MySqlParser.DELAYED_SYMBOL, 0); }
		public ReplaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReplaceStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReplaceStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReplaceStatementContext replaceStatement() {
		ReplaceStatementContext _localctx = new ReplaceStatementContext(Context, State);
		EnterRule(_localctx, 264, RULE_replaceStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2893;
			Match(REPLACE_SYMBOL);
			State = 2895;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,274,Context) ) {
			case 1:
				{
				State = 2894;
				_la = TokenStream.LA(1);
				if ( !(_la==DELAYED_SYMBOL || _la==LOW_PRIORITY_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 2898;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,275,Context) ) {
			case 1:
				{
				State = 2897;
				Match(INTO_SYMBOL);
				}
				break;
			}
			State = 2900;
			tableRef();
			State = 2902;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,276,Context) ) {
			case 1:
				{
				State = 2901;
				usePartition();
				}
				break;
			}
			State = 2908;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,277,Context) ) {
			case 1:
				{
				State = 2904;
				insertFromConstructor();
				}
				break;
			case 2:
				{
				State = 2905;
				Match(SET_SYMBOL);
				State = 2906;
				updateList();
				}
				break;
			case 3:
				{
				State = 2907;
				insertQueryExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockingClauseListContext lockingClauseList() {
			return GetRuleContext<LockingClauseListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionParensContext queryExpressionParens() {
			return GetRuleContext<QueryExpressionParensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementWithIntoContext selectStatementWithInto() {
			return GetRuleContext<SelectStatementWithIntoContext>(0);
		}
		public SelectStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectStatement(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementContext selectStatement() {
		SelectStatementContext _localctx = new SelectStatementContext(Context, State);
		EnterRule(_localctx, 266, RULE_selectStatement);
		int _la;
		try {
			State = 2916;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,279,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2910;
				queryExpression();
				State = 2912;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL || _la==LOCK_SYMBOL) {
					{
					State = 2911;
					lockingClauseList();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2914;
				queryExpressionParens();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2915;
				selectStatementWithInto();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementWithIntoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementWithIntoContext selectStatementWithInto() {
			return GetRuleContext<SelectStatementWithIntoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntoClauseContext intoClause() {
			return GetRuleContext<IntoClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockingClauseListContext lockingClauseList() {
			return GetRuleContext<LockingClauseListContext>(0);
		}
		public SelectStatementWithIntoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatementWithInto; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectStatementWithInto(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectStatementWithInto(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementWithIntoContext selectStatementWithInto() {
		SelectStatementWithIntoContext _localctx = new SelectStatementWithIntoContext(Context, State);
		EnterRule(_localctx, 268, RULE_selectStatementWithInto);
		int _la;
		try {
			State = 2930;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,281,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2918;
				Match(OPEN_PAR_SYMBOL);
				State = 2919;
				selectStatementWithInto();
				State = 2920;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2922;
				queryExpression();
				State = 2923;
				intoClause();
				State = 2925;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL || _la==LOCK_SYMBOL) {
					{
					State = 2924;
					lockingClauseList();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2927;
				lockingClauseList();
				State = 2928;
				intoClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionBodyContext queryExpressionBody() {
			return GetRuleContext<QueryExpressionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionParensContext queryExpressionParens() {
			return GetRuleContext<QueryExpressionParensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithClauseContext withClause() {
			return GetRuleContext<WithClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureAnalyseClauseContext procedureAnalyseClause() {
			return GetRuleContext<ProcedureAnalyseClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderClauseContext orderClause() {
			return GetRuleContext<OrderClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public QueryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterQueryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitQueryExpression(this);
		}
	}

	[RuleVersion(0)]
	public QueryExpressionContext queryExpression() {
		QueryExpressionContext _localctx = new QueryExpressionContext(Context, State);
		EnterRule(_localctx, 270, RULE_queryExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2934;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,282,Context) ) {
			case 1:
				{
				State = 2932;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 2933;
				withClause();
				}
				break;
			}
			State = 2950;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,287,Context) ) {
			case 1:
				{
				State = 2936;
				queryExpressionBody();
				State = 2938;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,283,Context) ) {
				case 1:
					{
					State = 2937;
					orderClause();
					}
					break;
				}
				State = 2941;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,284,Context) ) {
				case 1:
					{
					State = 2940;
					limitClause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 2943;
				queryExpressionParens();
				State = 2945;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,285,Context) ) {
				case 1:
					{
					State = 2944;
					orderClause();
					}
					break;
				}
				State = 2948;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,286,Context) ) {
				case 1:
					{
					State = 2947;
					limitClause();
					}
					break;
				}
				}
				break;
			}
			State = 2954;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,288,Context) ) {
			case 1:
				{
				State = 2952;
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				State = 2953;
				procedureAnalyseClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryExpressionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryPrimaryContext[] queryPrimary() {
			return GetRuleContexts<QueryPrimaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryPrimaryContext queryPrimary(int i) {
			return GetRuleContext<QueryPrimaryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionParensContext[] queryExpressionParens() {
			return GetRuleContexts<QueryExpressionParensContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionParensContext queryExpressionParens(int i) {
			return GetRuleContext<QueryExpressionParensContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UNION_SYMBOL() { return GetTokens(MySqlParser.UNION_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION_SYMBOL(int i) {
			return GetToken(MySqlParser.UNION_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionOptionContext[] unionOption() {
			return GetRuleContexts<UnionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionOptionContext unionOption(int i) {
			return GetRuleContext<UnionOptionContext>(i);
		}
		public QueryExpressionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryExpressionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterQueryExpressionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitQueryExpressionBody(this);
		}
	}

	[RuleVersion(0)]
	public QueryExpressionBodyContext queryExpressionBody() {
		QueryExpressionBodyContext _localctx = new QueryExpressionBodyContext(Context, State);
		EnterRule(_localctx, 272, RULE_queryExpressionBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2966;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,291,Context) ) {
			case 1:
				{
				State = 2956;
				queryPrimary();
				}
				break;
			case 2:
				{
				State = 2957;
				queryExpressionParens();
				State = 2958;
				Match(UNION_SYMBOL);
				State = 2960;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,289,Context) ) {
				case 1:
					{
					State = 2959;
					unionOption();
					}
					break;
				}
				State = 2964;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,290,Context) ) {
				case 1:
					{
					State = 2962;
					queryPrimary();
					}
					break;
				case 2:
					{
					State = 2963;
					queryExpressionParens();
					}
					break;
				}
				}
				break;
			}
			State = 2978;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,294,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2968;
					Match(UNION_SYMBOL);
					State = 2970;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,292,Context) ) {
					case 1:
						{
						State = 2969;
						unionOption();
						}
						break;
					}
					State = 2974;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,293,Context) ) {
					case 1:
						{
						State = 2972;
						queryPrimary();
						}
						break;
					case 2:
						{
						State = 2973;
						queryExpressionParens();
						}
						break;
					}
					}
					} 
				}
				State = 2980;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,294,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryExpressionParensContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionParensContext queryExpressionParens() {
			return GetRuleContext<QueryExpressionParensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockingClauseListContext lockingClauseList() {
			return GetRuleContext<LockingClauseListContext>(0);
		}
		public QueryExpressionParensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryExpressionParens; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterQueryExpressionParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitQueryExpressionParens(this);
		}
	}

	[RuleVersion(0)]
	public QueryExpressionParensContext queryExpressionParens() {
		QueryExpressionParensContext _localctx = new QueryExpressionParensContext(Context, State);
		EnterRule(_localctx, 274, RULE_queryExpressionParens);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2981;
			Match(OPEN_PAR_SYMBOL);
			State = 2987;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,296,Context) ) {
			case 1:
				{
				State = 2982;
				queryExpressionParens();
				}
				break;
			case 2:
				{
				State = 2983;
				queryExpression();
				State = 2985;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL || _la==LOCK_SYMBOL) {
					{
					State = 2984;
					lockingClauseList();
					}
				}

				}
				break;
			}
			State = 2989;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryPrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationContext querySpecification() {
			return GetRuleContext<QuerySpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableValueConstructorContext tableValueConstructor() {
			return GetRuleContext<TableValueConstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitTableContext explicitTable() {
			return GetRuleContext<ExplicitTableContext>(0);
		}
		public QueryPrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryPrimary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterQueryPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitQueryPrimary(this);
		}
	}

	[RuleVersion(0)]
	public QueryPrimaryContext queryPrimary() {
		QueryPrimaryContext _localctx = new QueryPrimaryContext(Context, State);
		EnterRule(_localctx, 276, RULE_queryPrimary);
		try {
			State = 2996;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,297,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2991;
				querySpecification();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2992;
				if (!(serverVersion >= 80019)) throw new FailedPredicateException(this, "serverVersion >= 80019");
				State = 2993;
				tableValueConstructor();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2994;
				if (!(serverVersion >= 80019)) throw new FailedPredicateException(this, "serverVersion >= 80019");
				State = 2995;
				explicitTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuerySpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT_SYMBOL() { return GetToken(MySqlParser.SELECT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectItemListContext selectItemList() {
			return GetRuleContext<SelectItemListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectOptionContext[] selectOption() {
			return GetRuleContexts<SelectOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectOptionContext selectOption(int i) {
			return GetRuleContext<SelectOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntoClauseContext intoClause() {
			return GetRuleContext<IntoClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupByClauseContext groupByClause() {
			return GetRuleContext<GroupByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HavingClauseContext havingClause() {
			return GetRuleContext<HavingClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowClauseContext windowClause() {
			return GetRuleContext<WindowClauseContext>(0);
		}
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_querySpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterQuerySpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitQuerySpecification(this);
		}
	}

	[RuleVersion(0)]
	public QuerySpecificationContext querySpecification() {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(Context, State);
		EnterRule(_localctx, 278, RULE_querySpecification);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2998;
			Match(SELECT_SYMBOL);
			State = 3002;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,298,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2999;
					selectOption();
					}
					} 
				}
				State = 3004;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,298,Context);
			}
			State = 3005;
			selectItemList();
			State = 3007;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,299,Context) ) {
			case 1:
				{
				State = 3006;
				intoClause();
				}
				break;
			}
			State = 3010;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,300,Context) ) {
			case 1:
				{
				State = 3009;
				fromClause();
				}
				break;
			}
			State = 3013;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,301,Context) ) {
			case 1:
				{
				State = 3012;
				whereClause();
				}
				break;
			}
			State = 3016;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,302,Context) ) {
			case 1:
				{
				State = 3015;
				groupByClause();
				}
				break;
			}
			State = 3019;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,303,Context) ) {
			case 1:
				{
				State = 3018;
				havingClause();
				}
				break;
			}
			State = 3023;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,304,Context) ) {
			case 1:
				{
				State = 3021;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 3022;
				windowClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubqueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionParensContext queryExpressionParens() {
			return GetRuleContext<QueryExpressionParensContext>(0);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subquery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSubquery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSubquery(this);
		}
	}

	[RuleVersion(0)]
	public SubqueryContext subquery() {
		SubqueryContext _localctx = new SubqueryContext(Context, State);
		EnterRule(_localctx, 280, RULE_subquery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3025;
			queryExpressionParens();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuerySpecOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySqlParser.ALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT_SYMBOL() { return GetToken(MySqlParser.DISTINCT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRAIGHT_JOIN_SYMBOL() { return GetToken(MySqlParser.STRAIGHT_JOIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIGH_PRIORITY_SYMBOL() { return GetToken(MySqlParser.HIGH_PRIORITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_SMALL_RESULT_SYMBOL() { return GetToken(MySqlParser.SQL_SMALL_RESULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BIG_RESULT_SYMBOL() { return GetToken(MySqlParser.SQL_BIG_RESULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BUFFER_RESULT_SYMBOL() { return GetToken(MySqlParser.SQL_BUFFER_RESULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_CALC_FOUND_ROWS_SYMBOL() { return GetToken(MySqlParser.SQL_CALC_FOUND_ROWS_SYMBOL, 0); }
		public QuerySpecOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_querySpecOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterQuerySpecOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitQuerySpecOption(this);
		}
	}

	[RuleVersion(0)]
	public QuerySpecOptionContext querySpecOption() {
		QuerySpecOptionContext _localctx = new QuerySpecOptionContext(Context, State);
		EnterRule(_localctx, 282, RULE_querySpecOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3027;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL_SYMBOL || _la==DISTINCT_SYMBOL || _la==HIGH_PRIORITY_SYMBOL || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (SQL_BIG_RESULT_SYMBOL - 531)) | (1L << (SQL_BUFFER_RESULT_SYMBOL - 531)) | (1L << (SQL_CALC_FOUND_ROWS_SYMBOL - 531)) | (1L << (SQL_SMALL_RESULT_SYMBOL - 531)) | (1L << (STRAIGHT_JOIN_SYMBOL - 531)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT_SYMBOL() { return GetToken(MySqlParser.LIMIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LimitOptionsContext limitOptions() {
			return GetRuleContext<LimitOptionsContext>(0);
		}
		public LimitClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limitClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLimitClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLimitClause(this);
		}
	}

	[RuleVersion(0)]
	public LimitClauseContext limitClause() {
		LimitClauseContext _localctx = new LimitClauseContext(Context, State);
		EnterRule(_localctx, 284, RULE_limitClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3029;
			Match(LIMIT_SYMBOL);
			State = 3030;
			limitOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleLimitClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT_SYMBOL() { return GetToken(MySqlParser.LIMIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LimitOptionContext limitOption() {
			return GetRuleContext<LimitOptionContext>(0);
		}
		public SimpleLimitClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleLimitClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleLimitClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleLimitClause(this);
		}
	}

	[RuleVersion(0)]
	public SimpleLimitClauseContext simpleLimitClause() {
		SimpleLimitClauseContext _localctx = new SimpleLimitClauseContext(Context, State);
		EnterRule(_localctx, 286, RULE_simpleLimitClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3032;
			Match(LIMIT_SYMBOL);
			State = 3033;
			limitOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LimitOptionContext[] limitOption() {
			return GetRuleContexts<LimitOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitOptionContext limitOption(int i) {
			return GetRuleContext<LimitOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL() { return GetToken(MySqlParser.COMMA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET_SYMBOL() { return GetToken(MySqlParser.OFFSET_SYMBOL, 0); }
		public LimitOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limitOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLimitOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLimitOptions(this);
		}
	}

	[RuleVersion(0)]
	public LimitOptionsContext limitOptions() {
		LimitOptionsContext _localctx = new LimitOptionsContext(Context, State);
		EnterRule(_localctx, 288, RULE_limitOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3035;
			limitOption();
			State = 3038;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,305,Context) ) {
			case 1:
				{
				State = 3036;
				_la = TokenStream.LA(1);
				if ( !(_la==OFFSET_SYMBOL || _la==COMMA_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3037;
				limitOption();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM_MARKER() { return GetToken(MySqlParser.PARAM_MARKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ULONGLONG_NUMBER() { return GetToken(MySqlParser.ULONGLONG_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG_NUMBER() { return GetToken(MySqlParser.LONG_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySqlParser.INT_NUMBER, 0); }
		public LimitOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limitOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLimitOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLimitOption(this);
		}
	}

	[RuleVersion(0)]
	public LimitOptionContext limitOption() {
		LimitOptionContext _localctx = new LimitOptionContext(Context, State);
		EnterRule(_localctx, 290, RULE_limitOption);
		int _la;
		try {
			State = 3042;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,306,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3040;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3041;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 747)) & ~0x3f) == 0 && ((1L << (_la - 747)) & ((1L << (INT_NUMBER - 747)) | (1L << (LONG_NUMBER - 747)) | (1L << (ULONGLONG_NUMBER - 747)) | (1L << (PARAM_MARKER - 747)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntoClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO_SYMBOL() { return GetToken(MySqlParser.INTO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTFILE_SYMBOL() { return GetToken(MySqlParser.OUTFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUMPFILE_SYMBOL() { return GetToken(MySqlParser.DUMPFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext[] textOrIdentifier() {
			return GetRuleContexts<TextOrIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier(int i) {
			return GetRuleContext<TextOrIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserVariableContext[] userVariable() {
			return GetRuleContexts<UserVariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserVariableContext userVariable(int i) {
			return GetRuleContext<UserVariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetClauseContext charsetClause() {
			return GetRuleContext<CharsetClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsClauseContext fieldsClause() {
			return GetRuleContext<FieldsClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinesClauseContext linesClause() {
			return GetRuleContext<LinesClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public IntoClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intoClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIntoClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIntoClause(this);
		}
	}

	[RuleVersion(0)]
	public IntoClauseContext intoClause() {
		IntoClauseContext _localctx = new IntoClauseContext(Context, State);
		EnterRule(_localctx, 292, RULE_intoClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3044;
			Match(INTO_SYMBOL);
			State = 3072;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,313,Context) ) {
			case 1:
				{
				State = 3045;
				Match(OUTFILE_SYMBOL);
				State = 3046;
				textStringLiteral();
				State = 3048;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,307,Context) ) {
				case 1:
					{
					State = 3047;
					charsetClause();
					}
					break;
				}
				State = 3051;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,308,Context) ) {
				case 1:
					{
					State = 3050;
					fieldsClause();
					}
					break;
				}
				State = 3054;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,309,Context) ) {
				case 1:
					{
					State = 3053;
					linesClause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 3056;
				Match(DUMPFILE_SYMBOL);
				State = 3057;
				textStringLiteral();
				}
				break;
			case 3:
				{
				State = 3060;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,310,Context) ) {
				case 1:
					{
					State = 3058;
					textOrIdentifier();
					}
					break;
				case 2:
					{
					State = 3059;
					userVariable();
					}
					break;
				}
				State = 3069;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,312,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3062;
						Match(COMMA_SYMBOL);
						State = 3065;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,311,Context) ) {
						case 1:
							{
							State = 3063;
							textOrIdentifier();
							}
							break;
						case 2:
							{
							State = 3064;
							userVariable();
							}
							break;
						}
						}
						} 
					}
					State = 3071;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,312,Context);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureAnalyseClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE_SYMBOL() { return GetToken(MySqlParser.PROCEDURE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYSE_SYMBOL() { return GetToken(MySqlParser.ANALYSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT_NUMBER() { return GetTokens(MySqlParser.INT_NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER(int i) {
			return GetToken(MySqlParser.INT_NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL() { return GetToken(MySqlParser.COMMA_SYMBOL, 0); }
		public ProcedureAnalyseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureAnalyseClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterProcedureAnalyseClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitProcedureAnalyseClause(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureAnalyseClauseContext procedureAnalyseClause() {
		ProcedureAnalyseClauseContext _localctx = new ProcedureAnalyseClauseContext(Context, State);
		EnterRule(_localctx, 294, RULE_procedureAnalyseClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3074;
			Match(PROCEDURE_SYMBOL);
			State = 3075;
			Match(ANALYSE_SYMBOL);
			State = 3076;
			Match(OPEN_PAR_SYMBOL);
			State = 3082;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INT_NUMBER) {
				{
				State = 3077;
				Match(INT_NUMBER);
				State = 3080;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 3078;
					Match(COMMA_SYMBOL);
					State = 3079;
					Match(INT_NUMBER);
					}
				}

				}
			}

			State = 3084;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HavingClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING_SYMBOL() { return GetToken(MySqlParser.HAVING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_havingClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHavingClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHavingClause(this);
		}
	}

	[RuleVersion(0)]
	public HavingClauseContext havingClause() {
		HavingClauseContext _localctx = new HavingClauseContext(Context, State);
		EnterRule(_localctx, 296, RULE_havingClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3086;
			Match(HAVING_SYMBOL);
			State = 3087;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW_SYMBOL() { return GetToken(MySqlParser.WINDOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WindowDefinitionContext[] windowDefinition() {
			return GetRuleContexts<WindowDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowDefinitionContext windowDefinition(int i) {
			return GetRuleContext<WindowDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public WindowClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWindowClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWindowClause(this);
		}
	}

	[RuleVersion(0)]
	public WindowClauseContext windowClause() {
		WindowClauseContext _localctx = new WindowClauseContext(Context, State);
		EnterRule(_localctx, 298, RULE_windowClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3089;
			Match(WINDOW_SYMBOL);
			State = 3090;
			windowDefinition();
			State = 3095;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,316,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3091;
					Match(COMMA_SYMBOL);
					State = 3092;
					windowDefinition();
					}
					} 
				}
				State = 3097;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,316,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WindowNameContext windowName() {
			return GetRuleContext<WindowNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySqlParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WindowSpecContext windowSpec() {
			return GetRuleContext<WindowSpecContext>(0);
		}
		public WindowDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWindowDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWindowDefinition(this);
		}
	}

	[RuleVersion(0)]
	public WindowDefinitionContext windowDefinition() {
		WindowDefinitionContext _localctx = new WindowDefinitionContext(Context, State);
		EnterRule(_localctx, 300, RULE_windowDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3098;
			windowName();
			State = 3099;
			Match(AS_SYMBOL);
			State = 3100;
			windowSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WindowSpecDetailsContext windowSpecDetails() {
			return GetRuleContext<WindowSpecDetailsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public WindowSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWindowSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWindowSpec(this);
		}
	}

	[RuleVersion(0)]
	public WindowSpecContext windowSpec() {
		WindowSpecContext _localctx = new WindowSpecContext(Context, State);
		EnterRule(_localctx, 302, RULE_windowSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3102;
			Match(OPEN_PAR_SYMBOL);
			State = 3103;
			windowSpecDetails();
			State = 3104;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowSpecDetailsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WindowNameContext windowName() {
			return GetRuleContext<WindowNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySqlParser.PARTITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySqlParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderListContext orderList() {
			return GetRuleContext<OrderListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderClauseContext orderClause() {
			return GetRuleContext<OrderClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowFrameClauseContext windowFrameClause() {
			return GetRuleContext<WindowFrameClauseContext>(0);
		}
		public WindowSpecDetailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowSpecDetails; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWindowSpecDetails(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWindowSpecDetails(this);
		}
	}

	[RuleVersion(0)]
	public WindowSpecDetailsContext windowSpecDetails() {
		WindowSpecDetailsContext _localctx = new WindowSpecDetailsContext(Context, State);
		EnterRule(_localctx, 304, RULE_windowSpecDetails);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3107;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,317,Context) ) {
			case 1:
				{
				State = 3106;
				windowName();
				}
				break;
			}
			State = 3112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION_SYMBOL) {
				{
				State = 3109;
				Match(PARTITION_SYMBOL);
				State = 3110;
				Match(BY_SYMBOL);
				State = 3111;
				orderList();
				}
			}

			State = 3115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER_SYMBOL) {
				{
				State = 3114;
				orderClause();
				}
			}

			State = 3118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RANGE_SYMBOL || _la==ROWS_SYMBOL || _la==GROUPS_SYMBOL) {
				{
				State = 3117;
				windowFrameClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFrameClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WindowFrameUnitsContext windowFrameUnits() {
			return GetRuleContext<WindowFrameUnitsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowFrameExtentContext windowFrameExtent() {
			return GetRuleContext<WindowFrameExtentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowFrameExclusionContext windowFrameExclusion() {
			return GetRuleContext<WindowFrameExclusionContext>(0);
		}
		public WindowFrameClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFrameClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWindowFrameClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWindowFrameClause(this);
		}
	}

	[RuleVersion(0)]
	public WindowFrameClauseContext windowFrameClause() {
		WindowFrameClauseContext _localctx = new WindowFrameClauseContext(Context, State);
		EnterRule(_localctx, 306, RULE_windowFrameClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3120;
			windowFrameUnits();
			State = 3121;
			windowFrameExtent();
			State = 3123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXCLUDE_SYMBOL) {
				{
				State = 3122;
				windowFrameExclusion();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFrameUnitsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS_SYMBOL() { return GetToken(MySqlParser.ROWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE_SYMBOL() { return GetToken(MySqlParser.RANGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPS_SYMBOL() { return GetToken(MySqlParser.GROUPS_SYMBOL, 0); }
		public WindowFrameUnitsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFrameUnits; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWindowFrameUnits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWindowFrameUnits(this);
		}
	}

	[RuleVersion(0)]
	public WindowFrameUnitsContext windowFrameUnits() {
		WindowFrameUnitsContext _localctx = new WindowFrameUnitsContext(Context, State);
		EnterRule(_localctx, 308, RULE_windowFrameUnits);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3125;
			_la = TokenStream.LA(1);
			if ( !(_la==RANGE_SYMBOL || _la==ROWS_SYMBOL || _la==GROUPS_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFrameExtentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WindowFrameStartContext windowFrameStart() {
			return GetRuleContext<WindowFrameStartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowFrameBetweenContext windowFrameBetween() {
			return GetRuleContext<WindowFrameBetweenContext>(0);
		}
		public WindowFrameExtentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFrameExtent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWindowFrameExtent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWindowFrameExtent(this);
		}
	}

	[RuleVersion(0)]
	public WindowFrameExtentContext windowFrameExtent() {
		WindowFrameExtentContext _localctx = new WindowFrameExtentContext(Context, State);
		EnterRule(_localctx, 310, RULE_windowFrameExtent);
		try {
			State = 3129;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT_SYMBOL:
			case INTERVAL_SYMBOL:
			case UNBOUNDED_SYMBOL:
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case PARAM_MARKER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3127;
				windowFrameStart();
				}
				break;
			case BETWEEN_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3128;
				windowFrameBetween();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFrameStartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED_SYMBOL() { return GetToken(MySqlParser.UNBOUNDED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING_SYMBOL() { return GetToken(MySqlParser.PRECEDING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ulonglong_numberContext ulonglong_number() {
			return GetRuleContext<Ulonglong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM_MARKER() { return GetToken(MySqlParser.PARAM_MARKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL_SYMBOL() { return GetToken(MySqlParser.INTERVAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalContext interval() {
			return GetRuleContext<IntervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_SYMBOL() { return GetToken(MySqlParser.CURRENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_SYMBOL() { return GetToken(MySqlParser.ROW_SYMBOL, 0); }
		public WindowFrameStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFrameStart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWindowFrameStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWindowFrameStart(this);
		}
	}

	[RuleVersion(0)]
	public WindowFrameStartContext windowFrameStart() {
		WindowFrameStartContext _localctx = new WindowFrameStartContext(Context, State);
		EnterRule(_localctx, 312, RULE_windowFrameStart);
		try {
			State = 3145;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNBOUNDED_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3131;
				Match(UNBOUNDED_SYMBOL);
				State = 3132;
				Match(PRECEDING_SYMBOL);
				}
				break;
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3133;
				ulonglong_number();
				State = 3134;
				Match(PRECEDING_SYMBOL);
				}
				break;
			case PARAM_MARKER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3136;
				Match(PARAM_MARKER);
				State = 3137;
				Match(PRECEDING_SYMBOL);
				}
				break;
			case INTERVAL_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3138;
				Match(INTERVAL_SYMBOL);
				State = 3139;
				expr(0);
				State = 3140;
				interval();
				State = 3141;
				Match(PRECEDING_SYMBOL);
				}
				break;
			case CURRENT_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3143;
				Match(CURRENT_SYMBOL);
				State = 3144;
				Match(ROW_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFrameBetweenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN_SYMBOL() { return GetToken(MySqlParser.BETWEEN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WindowFrameBoundContext[] windowFrameBound() {
			return GetRuleContexts<WindowFrameBoundContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowFrameBoundContext windowFrameBound(int i) {
			return GetRuleContext<WindowFrameBoundContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_SYMBOL() { return GetToken(MySqlParser.AND_SYMBOL, 0); }
		public WindowFrameBetweenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFrameBetween; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWindowFrameBetween(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWindowFrameBetween(this);
		}
	}

	[RuleVersion(0)]
	public WindowFrameBetweenContext windowFrameBetween() {
		WindowFrameBetweenContext _localctx = new WindowFrameBetweenContext(Context, State);
		EnterRule(_localctx, 314, RULE_windowFrameBetween);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3147;
			Match(BETWEEN_SYMBOL);
			State = 3148;
			windowFrameBound();
			State = 3149;
			Match(AND_SYMBOL);
			State = 3150;
			windowFrameBound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFrameBoundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WindowFrameStartContext windowFrameStart() {
			return GetRuleContext<WindowFrameStartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED_SYMBOL() { return GetToken(MySqlParser.UNBOUNDED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING_SYMBOL() { return GetToken(MySqlParser.FOLLOWING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ulonglong_numberContext ulonglong_number() {
			return GetRuleContext<Ulonglong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM_MARKER() { return GetToken(MySqlParser.PARAM_MARKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL_SYMBOL() { return GetToken(MySqlParser.INTERVAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalContext interval() {
			return GetRuleContext<IntervalContext>(0);
		}
		public WindowFrameBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFrameBound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWindowFrameBound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWindowFrameBound(this);
		}
	}

	[RuleVersion(0)]
	public WindowFrameBoundContext windowFrameBound() {
		WindowFrameBoundContext _localctx = new WindowFrameBoundContext(Context, State);
		EnterRule(_localctx, 316, RULE_windowFrameBound);
		try {
			State = 3165;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,324,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3152;
				windowFrameStart();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3153;
				Match(UNBOUNDED_SYMBOL);
				State = 3154;
				Match(FOLLOWING_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3155;
				ulonglong_number();
				State = 3156;
				Match(FOLLOWING_SYMBOL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3158;
				Match(PARAM_MARKER);
				State = 3159;
				Match(FOLLOWING_SYMBOL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3160;
				Match(INTERVAL_SYMBOL);
				State = 3161;
				expr(0);
				State = 3162;
				interval();
				State = 3163;
				Match(FOLLOWING_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFrameExclusionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE_SYMBOL() { return GetToken(MySqlParser.EXCLUDE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_SYMBOL() { return GetToken(MySqlParser.CURRENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_SYMBOL() { return GetToken(MySqlParser.ROW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_SYMBOL() { return GetToken(MySqlParser.GROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIES_SYMBOL() { return GetToken(MySqlParser.TIES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_SYMBOL() { return GetToken(MySqlParser.NO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERS_SYMBOL() { return GetToken(MySqlParser.OTHERS_SYMBOL, 0); }
		public WindowFrameExclusionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFrameExclusion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWindowFrameExclusion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWindowFrameExclusion(this);
		}
	}

	[RuleVersion(0)]
	public WindowFrameExclusionContext windowFrameExclusion() {
		WindowFrameExclusionContext _localctx = new WindowFrameExclusionContext(Context, State);
		EnterRule(_localctx, 318, RULE_windowFrameExclusion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3167;
			Match(EXCLUDE_SYMBOL);
			State = 3174;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT_SYMBOL:
				{
				State = 3168;
				Match(CURRENT_SYMBOL);
				State = 3169;
				Match(ROW_SYMBOL);
				}
				break;
			case GROUP_SYMBOL:
				{
				State = 3170;
				Match(GROUP_SYMBOL);
				}
				break;
			case TIES_SYMBOL:
				{
				State = 3171;
				Match(TIES_SYMBOL);
				}
				break;
			case NO_SYMBOL:
				{
				State = 3172;
				Match(NO_SYMBOL);
				State = 3173;
				Match(OTHERS_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySqlParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommonTableExpressionContext[] commonTableExpression() {
			return GetRuleContexts<CommonTableExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommonTableExpressionContext commonTableExpression(int i) {
			return GetRuleContext<CommonTableExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE_SYMBOL() { return GetToken(MySqlParser.RECURSIVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public WithClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWithClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWithClause(this);
		}
	}

	[RuleVersion(0)]
	public WithClauseContext withClause() {
		WithClauseContext _localctx = new WithClauseContext(Context, State);
		EnterRule(_localctx, 320, RULE_withClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3176;
			Match(WITH_SYMBOL);
			State = 3178;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,326,Context) ) {
			case 1:
				{
				State = 3177;
				Match(RECURSIVE_SYMBOL);
				}
				break;
			}
			State = 3180;
			commonTableExpression();
			State = 3185;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,327,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3181;
					Match(COMMA_SYMBOL);
					State = 3182;
					commonTableExpression();
					}
					} 
				}
				State = 3187;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,327,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommonTableExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySqlParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnInternalRefListContext columnInternalRefList() {
			return GetRuleContext<ColumnInternalRefListContext>(0);
		}
		public CommonTableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commonTableExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCommonTableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCommonTableExpression(this);
		}
	}

	[RuleVersion(0)]
	public CommonTableExpressionContext commonTableExpression() {
		CommonTableExpressionContext _localctx = new CommonTableExpressionContext(Context, State);
		EnterRule(_localctx, 322, RULE_commonTableExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3188;
			identifier();
			State = 3190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 3189;
				columnInternalRefList();
				}
			}

			State = 3192;
			Match(AS_SYMBOL);
			State = 3193;
			subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupByClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_SYMBOL() { return GetToken(MySqlParser.GROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySqlParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderListContext orderList() {
			return GetRuleContext<OrderListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OlapOptionContext olapOption() {
			return GetRuleContext<OlapOptionContext>(0);
		}
		public GroupByClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupByClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGroupByClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGroupByClause(this);
		}
	}

	[RuleVersion(0)]
	public GroupByClauseContext groupByClause() {
		GroupByClauseContext _localctx = new GroupByClauseContext(Context, State);
		EnterRule(_localctx, 324, RULE_groupByClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3195;
			Match(GROUP_SYMBOL);
			State = 3196;
			Match(BY_SYMBOL);
			State = 3197;
			orderList();
			State = 3199;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,329,Context) ) {
			case 1:
				{
				State = 3198;
				olapOption();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OlapOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySqlParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP_SYMBOL() { return GetToken(MySqlParser.ROLLUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUBE_SYMBOL() { return GetToken(MySqlParser.CUBE_SYMBOL, 0); }
		public OlapOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_olapOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOlapOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOlapOption(this);
		}
	}

	[RuleVersion(0)]
	public OlapOptionContext olapOption() {
		OlapOptionContext _localctx = new OlapOptionContext(Context, State);
		EnterRule(_localctx, 326, RULE_olapOption);
		try {
			State = 3206;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,330,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3201;
				Match(WITH_SYMBOL);
				State = 3202;
				Match(ROLLUP_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3203;
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				State = 3204;
				Match(WITH_SYMBOL);
				State = 3205;
				Match(CUBE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER_SYMBOL() { return GetToken(MySqlParser.ORDER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySqlParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderListContext orderList() {
			return GetRuleContext<OrderListContext>(0);
		}
		public OrderClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOrderClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOrderClause(this);
		}
	}

	[RuleVersion(0)]
	public OrderClauseContext orderClause() {
		OrderClauseContext _localctx = new OrderClauseContext(Context, State);
		EnterRule(_localctx, 328, RULE_orderClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3208;
			Match(ORDER_SYMBOL);
			State = 3209;
			Match(BY_SYMBOL);
			State = 3210;
			orderList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC_SYMBOL() { return GetToken(MySqlParser.ASC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC_SYMBOL() { return GetToken(MySqlParser.DESC_SYMBOL, 0); }
		public DirectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_direction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDirection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDirection(this);
		}
	}

	[RuleVersion(0)]
	public DirectionContext direction() {
		DirectionContext _localctx = new DirectionContext(Context, State);
		EnterRule(_localctx, 330, RULE_direction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3212;
			_la = TokenStream.LA(1);
			if ( !(_la==ASC_SYMBOL || _la==DESC_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySqlParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUAL_SYMBOL() { return GetToken(MySqlParser.DUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableReferenceListContext tableReferenceList() {
			return GetRuleContext<TableReferenceListContext>(0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFromClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFromClause(this);
		}
	}

	[RuleVersion(0)]
	public FromClauseContext fromClause() {
		FromClauseContext _localctx = new FromClauseContext(Context, State);
		EnterRule(_localctx, 332, RULE_fromClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3214;
			Match(FROM_SYMBOL);
			State = 3217;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,331,Context) ) {
			case 1:
				{
				State = 3215;
				Match(DUAL_SYMBOL);
				}
				break;
			case 2:
				{
				State = 3216;
				tableReferenceList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableReferenceListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableReferenceContext[] tableReference() {
			return GetRuleContexts<TableReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableReferenceContext tableReference(int i) {
			return GetRuleContext<TableReferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public TableReferenceListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableReferenceList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableReferenceList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableReferenceList(this);
		}
	}

	[RuleVersion(0)]
	public TableReferenceListContext tableReferenceList() {
		TableReferenceListContext _localctx = new TableReferenceListContext(Context, State);
		EnterRule(_localctx, 334, RULE_tableReferenceList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3219;
			tableReference();
			State = 3224;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,332,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3220;
					Match(COMMA_SYMBOL);
					State = 3221;
					tableReference();
					}
					} 
				}
				State = 3226;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,332,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableValueConstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES_SYMBOL() { return GetToken(MySqlParser.VALUES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RowValueExplicitContext[] rowValueExplicit() {
			return GetRuleContexts<RowValueExplicitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowValueExplicitContext rowValueExplicit(int i) {
			return GetRuleContext<RowValueExplicitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public TableValueConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableValueConstructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableValueConstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableValueConstructor(this);
		}
	}

	[RuleVersion(0)]
	public TableValueConstructorContext tableValueConstructor() {
		TableValueConstructorContext _localctx = new TableValueConstructorContext(Context, State);
		EnterRule(_localctx, 336, RULE_tableValueConstructor);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3227;
			Match(VALUES_SYMBOL);
			State = 3228;
			rowValueExplicit();
			State = 3233;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,333,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3229;
					Match(COMMA_SYMBOL);
					State = 3230;
					rowValueExplicit();
					}
					} 
				}
				State = 3235;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,333,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySqlParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public ExplicitTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExplicitTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExplicitTable(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitTableContext explicitTable() {
		ExplicitTableContext _localctx = new ExplicitTableContext(Context, State);
		EnterRule(_localctx, 338, RULE_explicitTable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3236;
			Match(TABLE_SYMBOL);
			State = 3237;
			tableRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowValueExplicitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_SYMBOL() { return GetToken(MySqlParser.ROW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValuesContext @values() {
			return GetRuleContext<ValuesContext>(0);
		}
		public RowValueExplicitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowValueExplicit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRowValueExplicit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRowValueExplicit(this);
		}
	}

	[RuleVersion(0)]
	public RowValueExplicitContext rowValueExplicit() {
		RowValueExplicitContext _localctx = new RowValueExplicitContext(Context, State);
		EnterRule(_localctx, 340, RULE_rowValueExplicit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3239;
			Match(ROW_SYMBOL);
			State = 3240;
			Match(OPEN_PAR_SYMBOL);
			State = 3242;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,334,Context) ) {
			case 1:
				{
				State = 3241;
				@values();
				}
				break;
			}
			State = 3244;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecOptionContext querySpecOption() {
			return GetRuleContext<QuerySpecOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_NO_CACHE_SYMBOL() { return GetToken(MySqlParser.SQL_NO_CACHE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_CACHE_SYMBOL() { return GetToken(MySqlParser.SQL_CACHE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_STATEMENT_TIME_SYMBOL() { return GetToken(MySqlParser.MAX_STATEMENT_TIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		public SelectOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectOption(this);
		}
	}

	[RuleVersion(0)]
	public SelectOptionContext selectOption() {
		SelectOptionContext _localctx = new SelectOptionContext(Context, State);
		EnterRule(_localctx, 342, RULE_selectOption);
		try {
			State = 3254;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,335,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3246;
				querySpecOption();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3247;
				Match(SQL_NO_CACHE_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3248;
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				State = 3249;
				Match(SQL_CACHE_SYMBOL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3250;
				if (!(serverVersion >= 50704 && serverVersion < 50708)) throw new FailedPredicateException(this, "serverVersion >= 50704 && serverVersion < 50708");
				State = 3251;
				Match(MAX_STATEMENT_TIME_SYMBOL);
				State = 3252;
				Match(EQUAL_OPERATOR);
				State = 3253;
				real_ulong_number();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockingClauseListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LockingClauseContext[] lockingClause() {
			return GetRuleContexts<LockingClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockingClauseContext lockingClause(int i) {
			return GetRuleContext<LockingClauseContext>(i);
		}
		public LockingClauseListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockingClauseList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLockingClauseList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLockingClauseList(this);
		}
	}

	[RuleVersion(0)]
	public LockingClauseListContext lockingClauseList() {
		LockingClauseListContext _localctx = new LockingClauseListContext(Context, State);
		EnterRule(_localctx, 344, RULE_lockingClauseList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3257;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 3256;
				lockingClause();
				}
				}
				State = 3259;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==FOR_SYMBOL || _la==LOCK_SYMBOL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockingClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySqlParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LockStrenghContext lockStrengh() {
			return GetRuleContext<LockStrenghContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF_SYMBOL() { return GetToken(MySqlParser.OF_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableAliasRefListContext tableAliasRefList() {
			return GetRuleContext<TableAliasRefListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockedRowActionContext lockedRowAction() {
			return GetRuleContext<LockedRowActionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK_SYMBOL() { return GetToken(MySqlParser.LOCK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_SYMBOL() { return GetToken(MySqlParser.IN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE_SYMBOL() { return GetToken(MySqlParser.SHARE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODE_SYMBOL() { return GetToken(MySqlParser.MODE_SYMBOL, 0); }
		public LockingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockingClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLockingClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLockingClause(this);
		}
	}

	[RuleVersion(0)]
	public LockingClauseContext lockingClause() {
		LockingClauseContext _localctx = new LockingClauseContext(Context, State);
		EnterRule(_localctx, 346, RULE_lockingClause);
		try {
			State = 3276;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3261;
				Match(FOR_SYMBOL);
				State = 3262;
				lockStrengh();
				State = 3266;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,337,Context) ) {
				case 1:
					{
					State = 3263;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 3264;
					Match(OF_SYMBOL);
					State = 3265;
					tableAliasRefList();
					}
					break;
				}
				State = 3270;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,338,Context) ) {
				case 1:
					{
					State = 3268;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 3269;
					lockedRowAction();
					}
					break;
				}
				}
				break;
			case LOCK_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3272;
				Match(LOCK_SYMBOL);
				State = 3273;
				Match(IN_SYMBOL);
				State = 3274;
				Match(SHARE_SYMBOL);
				State = 3275;
				Match(MODE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockStrenghContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySqlParser.UPDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE_SYMBOL() { return GetToken(MySqlParser.SHARE_SYMBOL, 0); }
		public LockStrenghContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockStrengh; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLockStrengh(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLockStrengh(this);
		}
	}

	[RuleVersion(0)]
	public LockStrenghContext lockStrengh() {
		LockStrenghContext _localctx = new LockStrenghContext(Context, State);
		EnterRule(_localctx, 348, RULE_lockStrengh);
		try {
			State = 3281;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,340,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3278;
				Match(UPDATE_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3279;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 3280;
				Match(SHARE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockedRowActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIP_SYMBOL() { return GetToken(MySqlParser.SKIP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCKED_SYMBOL() { return GetToken(MySqlParser.LOCKED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOWAIT_SYMBOL() { return GetToken(MySqlParser.NOWAIT_SYMBOL, 0); }
		public LockedRowActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockedRowAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLockedRowAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLockedRowAction(this);
		}
	}

	[RuleVersion(0)]
	public LockedRowActionContext lockedRowAction() {
		LockedRowActionContext _localctx = new LockedRowActionContext(Context, State);
		EnterRule(_localctx, 350, RULE_lockedRowAction);
		try {
			State = 3286;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SKIP_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3283;
				Match(SKIP_SYMBOL);
				State = 3284;
				Match(LOCKED_SYMBOL);
				}
				break;
			case NOWAIT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3285;
				Match(NOWAIT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectItemListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectItemContext[] selectItem() {
			return GetRuleContexts<SelectItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectItemContext selectItem(int i) {
			return GetRuleContext<SelectItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT_OPERATOR() { return GetToken(MySqlParser.MULT_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public SelectItemListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectItemList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectItemList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectItemList(this);
		}
	}

	[RuleVersion(0)]
	public SelectItemListContext selectItemList() {
		SelectItemListContext _localctx = new SelectItemListContext(Context, State);
		EnterRule(_localctx, 352, RULE_selectItemList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3290;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,342,Context) ) {
			case 1:
				{
				State = 3288;
				selectItem();
				}
				break;
			case 2:
				{
				State = 3289;
				Match(MULT_OPERATOR);
				}
				break;
			}
			State = 3296;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,343,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3292;
					Match(COMMA_SYMBOL);
					State = 3293;
					selectItem();
					}
					} 
				}
				State = 3298;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,343,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableWildContext tableWild() {
			return GetRuleContext<TableWildContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public SelectItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectItem(this);
		}
	}

	[RuleVersion(0)]
	public SelectItemContext selectItem() {
		SelectItemContext _localctx = new SelectItemContext(Context, State);
		EnterRule(_localctx, 354, RULE_selectItem);
		try {
			State = 3304;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,345,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3299;
				tableWild();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3300;
				expr(0);
				State = 3302;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,344,Context) ) {
				case 1:
					{
					State = 3301;
					selectAlias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectAliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySqlParser.AS_SYMBOL, 0); }
		public SelectAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectAlias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectAlias(this);
		}
	}

	[RuleVersion(0)]
	public SelectAliasContext selectAlias() {
		SelectAliasContext _localctx = new SelectAliasContext(Context, State);
		EnterRule(_localctx, 356, RULE_selectAlias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3307;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,346,Context) ) {
			case 1:
				{
				State = 3306;
				Match(AS_SYMBOL);
				}
				break;
			}
			State = 3311;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,347,Context) ) {
			case 1:
				{
				State = 3309;
				identifier();
				}
				break;
			case 2:
				{
				State = 3310;
				textStringLiteral();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE_SYMBOL() { return GetToken(MySqlParser.WHERE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
	}

	[RuleVersion(0)]
	public WhereClauseContext whereClause() {
		WhereClauseContext _localctx = new WhereClauseContext(Context, State);
		EnterRule(_localctx, 358, RULE_whereClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3313;
			Match(WHERE_SYMBOL);
			State = 3314;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableFactorContext tableFactor() {
			return GetRuleContext<TableFactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_CURLY_SYMBOL() { return GetToken(MySqlParser.OPEN_CURLY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EscapedTableReferenceContext escapedTableReference() {
			return GetRuleContext<EscapedTableReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_CURLY_SYMBOL() { return GetToken(MySqlParser.CLOSE_CURLY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JoinedTableContext[] joinedTable() {
			return GetRuleContexts<JoinedTableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public JoinedTableContext joinedTable(int i) {
			return GetRuleContext<JoinedTableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OJ_SYMBOL() { return GetToken(MySqlParser.OJ_SYMBOL, 0); }
		public TableReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableReference(this);
		}
	}

	[RuleVersion(0)]
	public TableReferenceContext tableReference() {
		TableReferenceContext _localctx = new TableReferenceContext(Context, State);
		EnterRule(_localctx, 360, RULE_tableReference);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3326;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,349,Context) ) {
			case 1:
				{
				State = 3316;
				tableFactor();
				}
				break;
			case 2:
				{
				State = 3317;
				Match(OPEN_CURLY_SYMBOL);
				State = 3321;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,348,Context) ) {
				case 1:
					{
					State = 3318;
					if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
					State = 3319;
					identifier();
					}
					break;
				case 2:
					{
					State = 3320;
					Match(OJ_SYMBOL);
					}
					break;
				}
				State = 3323;
				escapedTableReference();
				State = 3324;
				Match(CLOSE_CURLY_SYMBOL);
				}
				break;
			}
			State = 3331;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,350,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3328;
					joinedTable();
					}
					} 
				}
				State = 3333;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,350,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EscapedTableReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableFactorContext tableFactor() {
			return GetRuleContext<TableFactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JoinedTableContext[] joinedTable() {
			return GetRuleContexts<JoinedTableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public JoinedTableContext joinedTable(int i) {
			return GetRuleContext<JoinedTableContext>(i);
		}
		public EscapedTableReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_escapedTableReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterEscapedTableReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitEscapedTableReference(this);
		}
	}

	[RuleVersion(0)]
	public EscapedTableReferenceContext escapedTableReference() {
		EscapedTableReferenceContext _localctx = new EscapedTableReferenceContext(Context, State);
		EnterRule(_localctx, 362, RULE_escapedTableReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3334;
			tableFactor();
			State = 3338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CROSS_SYMBOL || ((((_la - 239)) & ~0x3f) == 0 && ((1L << (_la - 239)) & ((1L << (INNER_SYMBOL - 239)) | (1L << (JOIN_SYMBOL - 239)) | (1L << (LEFT_SYMBOL - 239)))) != 0) || _la==NATURAL_SYMBOL || _la==RIGHT_SYMBOL || _la==STRAIGHT_JOIN_SYMBOL) {
				{
				{
				State = 3335;
				joinedTable();
				}
				}
				State = 3340;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinedTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InnerJoinTypeContext innerJoinType() {
			return GetRuleContext<InnerJoinTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableReferenceContext tableReference() {
			return GetRuleContext<TableReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySqlParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING_SYMBOL() { return GetToken(MySqlParser.USING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return GetRuleContext<IdentifierListWithParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterJoinTypeContext outerJoinType() {
			return GetRuleContext<OuterJoinTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NaturalJoinTypeContext naturalJoinType() {
			return GetRuleContext<NaturalJoinTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableFactorContext tableFactor() {
			return GetRuleContext<TableFactorContext>(0);
		}
		public JoinedTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinedTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterJoinedTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitJoinedTable(this);
		}
	}

	[RuleVersion(0)]
	public JoinedTableContext joinedTable() {
		JoinedTableContext _localctx = new JoinedTableContext(Context, State);
		EnterRule(_localctx, 364, RULE_joinedTable);
		try {
			State = 3360;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CROSS_SYMBOL:
			case INNER_SYMBOL:
			case JOIN_SYMBOL:
			case STRAIGHT_JOIN_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3341;
				innerJoinType();
				State = 3342;
				tableReference();
				State = 3347;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,352,Context) ) {
				case 1:
					{
					State = 3343;
					Match(ON_SYMBOL);
					State = 3344;
					expr(0);
					}
					break;
				case 2:
					{
					State = 3345;
					Match(USING_SYMBOL);
					State = 3346;
					identifierListWithParentheses();
					}
					break;
				}
				}
				break;
			case LEFT_SYMBOL:
			case RIGHT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3349;
				outerJoinType();
				State = 3350;
				tableReference();
				State = 3355;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ON_SYMBOL:
					{
					State = 3351;
					Match(ON_SYMBOL);
					State = 3352;
					expr(0);
					}
					break;
				case USING_SYMBOL:
					{
					State = 3353;
					Match(USING_SYMBOL);
					State = 3354;
					identifierListWithParentheses();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NATURAL_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3357;
				naturalJoinType();
				State = 3358;
				tableFactor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NaturalJoinTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATURAL_SYMBOL() { return GetToken(MySqlParser.NATURAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN_SYMBOL() { return GetToken(MySqlParser.JOIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER_SYMBOL() { return GetToken(MySqlParser.INNER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_SYMBOL() { return GetToken(MySqlParser.LEFT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SYMBOL() { return GetToken(MySqlParser.RIGHT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER_SYMBOL() { return GetToken(MySqlParser.OUTER_SYMBOL, 0); }
		public NaturalJoinTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_naturalJoinType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNaturalJoinType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNaturalJoinType(this);
		}
	}

	[RuleVersion(0)]
	public NaturalJoinTypeContext naturalJoinType() {
		NaturalJoinTypeContext _localctx = new NaturalJoinTypeContext(Context, State);
		EnterRule(_localctx, 366, RULE_naturalJoinType);
		int _la;
		try {
			State = 3373;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,357,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3362;
				Match(NATURAL_SYMBOL);
				State = 3364;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INNER_SYMBOL) {
					{
					State = 3363;
					Match(INNER_SYMBOL);
					}
				}

				State = 3366;
				Match(JOIN_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3367;
				Match(NATURAL_SYMBOL);
				State = 3368;
				_la = TokenStream.LA(1);
				if ( !(_la==LEFT_SYMBOL || _la==RIGHT_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER_SYMBOL) {
					{
					State = 3369;
					Match(OUTER_SYMBOL);
					}
				}

				State = 3372;
				Match(JOIN_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InnerJoinTypeContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN_SYMBOL() { return GetToken(MySqlParser.JOIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER_SYMBOL() { return GetToken(MySqlParser.INNER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS_SYMBOL() { return GetToken(MySqlParser.CROSS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRAIGHT_JOIN_SYMBOL() { return GetToken(MySqlParser.STRAIGHT_JOIN_SYMBOL, 0); }
		public InnerJoinTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_innerJoinType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInnerJoinType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInnerJoinType(this);
		}
	}

	[RuleVersion(0)]
	public InnerJoinTypeContext innerJoinType() {
		InnerJoinTypeContext _localctx = new InnerJoinTypeContext(Context, State);
		EnterRule(_localctx, 368, RULE_innerJoinType);
		int _la;
		try {
			State = 3380;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CROSS_SYMBOL:
			case INNER_SYMBOL:
			case JOIN_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3376;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CROSS_SYMBOL || _la==INNER_SYMBOL) {
					{
					State = 3375;
					_localctx.type = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==CROSS_SYMBOL || _la==INNER_SYMBOL) ) {
						_localctx.type = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 3378;
				Match(JOIN_SYMBOL);
				}
				break;
			case STRAIGHT_JOIN_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3379;
				_localctx.type = Match(STRAIGHT_JOIN_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OuterJoinTypeContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN_SYMBOL() { return GetToken(MySqlParser.JOIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_SYMBOL() { return GetToken(MySqlParser.LEFT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SYMBOL() { return GetToken(MySqlParser.RIGHT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER_SYMBOL() { return GetToken(MySqlParser.OUTER_SYMBOL, 0); }
		public OuterJoinTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outerJoinType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOuterJoinType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOuterJoinType(this);
		}
	}

	[RuleVersion(0)]
	public OuterJoinTypeContext outerJoinType() {
		OuterJoinTypeContext _localctx = new OuterJoinTypeContext(Context, State);
		EnterRule(_localctx, 370, RULE_outerJoinType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3382;
			_localctx.type = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==LEFT_SYMBOL || _la==RIGHT_SYMBOL) ) {
				_localctx.type = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3384;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OUTER_SYMBOL) {
				{
				State = 3383;
				Match(OUTER_SYMBOL);
				}
			}

			State = 3386;
			Match(JOIN_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableFactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleTableContext singleTable() {
			return GetRuleContext<SingleTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleTableParensContext singleTableParens() {
			return GetRuleContext<SingleTableParensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DerivedTableContext derivedTable() {
			return GetRuleContext<DerivedTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableReferenceListParensContext tableReferenceListParens() {
			return GetRuleContext<TableReferenceListParensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableFunctionContext tableFunction() {
			return GetRuleContext<TableFunctionContext>(0);
		}
		public TableFactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableFactor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableFactor(this);
		}
	}

	[RuleVersion(0)]
	public TableFactorContext tableFactor() {
		TableFactorContext _localctx = new TableFactorContext(Context, State);
		EnterRule(_localctx, 372, RULE_tableFactor);
		try {
			State = 3394;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,361,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3388;
				singleTable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3389;
				singleTableParens();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3390;
				derivedTable();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3391;
				tableReferenceListParens();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3392;
				if (!(serverVersion >= 80004)) throw new FailedPredicateException(this, "serverVersion >= 80004");
				State = 3393;
				tableFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsePartitionContext usePartition() {
			return GetRuleContext<UsePartitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexHintListContext indexHintList() {
			return GetRuleContext<IndexHintListContext>(0);
		}
		public SingleTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSingleTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSingleTable(this);
		}
	}

	[RuleVersion(0)]
	public SingleTableContext singleTable() {
		SingleTableContext _localctx = new SingleTableContext(Context, State);
		EnterRule(_localctx, 374, RULE_singleTable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3396;
			tableRef();
			State = 3398;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,362,Context) ) {
			case 1:
				{
				State = 3397;
				usePartition();
				}
				break;
			}
			State = 3401;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,363,Context) ) {
			case 1:
				{
				State = 3400;
				tableAlias();
				}
				break;
			}
			State = 3404;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,364,Context) ) {
			case 1:
				{
				State = 3403;
				indexHintList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleTableParensContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleTableContext singleTable() {
			return GetRuleContext<SingleTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleTableParensContext singleTableParens() {
			return GetRuleContext<SingleTableParensContext>(0);
		}
		public SingleTableParensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleTableParens; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSingleTableParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSingleTableParens(this);
		}
	}

	[RuleVersion(0)]
	public SingleTableParensContext singleTableParens() {
		SingleTableParensContext _localctx = new SingleTableParensContext(Context, State);
		EnterRule(_localctx, 376, RULE_singleTableParens);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3406;
			Match(OPEN_PAR_SYMBOL);
			State = 3409;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,365,Context) ) {
			case 1:
				{
				State = 3407;
				singleTable();
				}
				break;
			case 2:
				{
				State = 3408;
				singleTableParens();
				}
				break;
			}
			State = 3411;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DerivedTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnInternalRefListContext columnInternalRefList() {
			return GetRuleContext<ColumnInternalRefListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATERAL_SYMBOL() { return GetToken(MySqlParser.LATERAL_SYMBOL, 0); }
		public DerivedTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derivedTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDerivedTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDerivedTable(this);
		}
	}

	[RuleVersion(0)]
	public DerivedTableContext derivedTable() {
		DerivedTableContext _localctx = new DerivedTableContext(Context, State);
		EnterRule(_localctx, 378, RULE_derivedTable);
		try {
			State = 3430;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,370,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3413;
				subquery();
				State = 3415;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,366,Context) ) {
				case 1:
					{
					State = 3414;
					tableAlias();
					}
					break;
				}
				State = 3419;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,367,Context) ) {
				case 1:
					{
					State = 3417;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 3418;
					columnInternalRefList();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3421;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 3422;
				Match(LATERAL_SYMBOL);
				State = 3423;
				subquery();
				State = 3425;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,368,Context) ) {
				case 1:
					{
					State = 3424;
					tableAlias();
					}
					break;
				}
				State = 3428;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,369,Context) ) {
				case 1:
					{
					State = 3427;
					columnInternalRefList();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableReferenceListParensContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableReferenceListContext tableReferenceList() {
			return GetRuleContext<TableReferenceListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableReferenceListParensContext tableReferenceListParens() {
			return GetRuleContext<TableReferenceListParensContext>(0);
		}
		public TableReferenceListParensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableReferenceListParens; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableReferenceListParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableReferenceListParens(this);
		}
	}

	[RuleVersion(0)]
	public TableReferenceListParensContext tableReferenceListParens() {
		TableReferenceListParensContext _localctx = new TableReferenceListParensContext(Context, State);
		EnterRule(_localctx, 380, RULE_tableReferenceListParens);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3432;
			Match(OPEN_PAR_SYMBOL);
			State = 3435;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,371,Context) ) {
			case 1:
				{
				State = 3433;
				tableReferenceList();
				}
				break;
			case 2:
				{
				State = 3434;
				tableReferenceListParens();
				}
				break;
			}
			State = 3437;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_TABLE_SYMBOL() { return GetToken(MySqlParser.JSON_TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL() { return GetToken(MySqlParser.COMMA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnsClauseContext columnsClause() {
			return GetRuleContext<ColumnsClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		public TableFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableFunction(this);
		}
	}

	[RuleVersion(0)]
	public TableFunctionContext tableFunction() {
		TableFunctionContext _localctx = new TableFunctionContext(Context, State);
		EnterRule(_localctx, 382, RULE_tableFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3439;
			Match(JSON_TABLE_SYMBOL);
			State = 3440;
			Match(OPEN_PAR_SYMBOL);
			State = 3441;
			expr(0);
			State = 3442;
			Match(COMMA_SYMBOL);
			State = 3443;
			textStringLiteral();
			State = 3444;
			columnsClause();
			State = 3445;
			Match(CLOSE_PAR_SYMBOL);
			State = 3447;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,372,Context) ) {
			case 1:
				{
				State = 3446;
				tableAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnsClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS_SYMBOL() { return GetToken(MySqlParser.COLUMNS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JtColumnContext[] jtColumn() {
			return GetRuleContexts<JtColumnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public JtColumnContext jtColumn(int i) {
			return GetRuleContext<JtColumnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public ColumnsClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnsClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterColumnsClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitColumnsClause(this);
		}
	}

	[RuleVersion(0)]
	public ColumnsClauseContext columnsClause() {
		ColumnsClauseContext _localctx = new ColumnsClauseContext(Context, State);
		EnterRule(_localctx, 384, RULE_columnsClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3449;
			Match(COLUMNS_SYMBOL);
			State = 3450;
			Match(OPEN_PAR_SYMBOL);
			State = 3451;
			jtColumn();
			State = 3456;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 3452;
				Match(COMMA_SYMBOL);
				State = 3453;
				jtColumn();
				}
				}
				State = 3458;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3459;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JtColumnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySqlParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDINALITY_SYMBOL() { return GetToken(MySqlParser.ORDINALITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATH_SYMBOL() { return GetToken(MySqlParser.PATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS_SYMBOL() { return GetToken(MySqlParser.EXISTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OnEmptyOrErrorContext onEmptyOrError() {
			return GetRuleContext<OnEmptyOrErrorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NESTED_SYMBOL() { return GetToken(MySqlParser.NESTED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnsClauseContext columnsClause() {
			return GetRuleContext<ColumnsClauseContext>(0);
		}
		public JtColumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jtColumn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterJtColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitJtColumn(this);
		}
	}

	[RuleVersion(0)]
	public JtColumnContext jtColumn() {
		JtColumnContext _localctx = new JtColumnContext(Context, State);
		EnterRule(_localctx, 386, RULE_jtColumn);
		int _la;
		try {
			State = 3484;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,377,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3461;
				identifier();
				State = 3462;
				Match(FOR_SYMBOL);
				State = 3463;
				Match(ORDINALITY_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3465;
				identifier();
				State = 3466;
				dataType();
				State = 3469;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,374,Context) ) {
				case 1:
					{
					State = 3467;
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					State = 3468;
					collate();
					}
					break;
				}
				State = 3472;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXISTS_SYMBOL) {
					{
					State = 3471;
					Match(EXISTS_SYMBOL);
					}
				}

				State = 3474;
				Match(PATH_SYMBOL);
				State = 3475;
				textStringLiteral();
				State = 3477;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT_SYMBOL || _la==ERROR_SYMBOL || _la==NULL_SYMBOL) {
					{
					State = 3476;
					onEmptyOrError();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3479;
				Match(NESTED_SYMBOL);
				State = 3480;
				Match(PATH_SYMBOL);
				State = 3481;
				textStringLiteral();
				State = 3482;
				columnsClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnEmptyOrErrorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OnEmptyContext onEmpty() {
			return GetRuleContext<OnEmptyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OnErrorContext onError() {
			return GetRuleContext<OnErrorContext>(0);
		}
		public OnEmptyOrErrorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onEmptyOrError; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOnEmptyOrError(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOnEmptyOrError(this);
		}
	}

	[RuleVersion(0)]
	public OnEmptyOrErrorContext onEmptyOrError() {
		OnEmptyOrErrorContext _localctx = new OnEmptyOrErrorContext(Context, State);
		EnterRule(_localctx, 388, RULE_onEmptyOrError);
		int _la;
		try {
			State = 3494;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,380,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3486;
				onEmpty();
				State = 3488;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT_SYMBOL || _la==ERROR_SYMBOL || _la==NULL_SYMBOL) {
					{
					State = 3487;
					onError();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3490;
				onError();
				State = 3492;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT_SYMBOL || _la==ERROR_SYMBOL || _la==NULL_SYMBOL) {
					{
					State = 3491;
					onEmpty();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnEmptyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public JtOnResponseContext jtOnResponse() {
			return GetRuleContext<JtOnResponseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySqlParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY_SYMBOL() { return GetToken(MySqlParser.EMPTY_SYMBOL, 0); }
		public OnEmptyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onEmpty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOnEmpty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOnEmpty(this);
		}
	}

	[RuleVersion(0)]
	public OnEmptyContext onEmpty() {
		OnEmptyContext _localctx = new OnEmptyContext(Context, State);
		EnterRule(_localctx, 390, RULE_onEmpty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3496;
			jtOnResponse();
			State = 3497;
			Match(ON_SYMBOL);
			State = 3498;
			Match(EMPTY_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnErrorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public JtOnResponseContext jtOnResponse() {
			return GetRuleContext<JtOnResponseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySqlParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR_SYMBOL() { return GetToken(MySqlParser.ERROR_SYMBOL, 0); }
		public OnErrorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onError; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOnError(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOnError(this);
		}
	}

	[RuleVersion(0)]
	public OnErrorContext onError() {
		OnErrorContext _localctx = new OnErrorContext(Context, State);
		EnterRule(_localctx, 392, RULE_onError);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3500;
			jtOnResponse();
			State = 3501;
			Match(ON_SYMBOL);
			State = 3502;
			Match(ERROR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JtOnResponseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR_SYMBOL() { return GetToken(MySqlParser.ERROR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_SYMBOL() { return GetToken(MySqlParser.NULL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public JtOnResponseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jtOnResponse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterJtOnResponse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitJtOnResponse(this);
		}
	}

	[RuleVersion(0)]
	public JtOnResponseContext jtOnResponse() {
		JtOnResponseContext _localctx = new JtOnResponseContext(Context, State);
		EnterRule(_localctx, 394, RULE_jtOnResponse);
		try {
			State = 3508;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ERROR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3504;
				Match(ERROR_SYMBOL);
				}
				break;
			case NULL_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3505;
				Match(NULL_SYMBOL);
				}
				break;
			case DEFAULT_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3506;
				Match(DEFAULT_SYMBOL);
				State = 3507;
				textStringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT_SYMBOL() { return GetToken(MySqlParser.DISTINCT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySqlParser.ALL_SYMBOL, 0); }
		public UnionOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUnionOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUnionOption(this);
		}
	}

	[RuleVersion(0)]
	public UnionOptionContext unionOption() {
		UnionOptionContext _localctx = new UnionOptionContext(Context, State);
		EnterRule(_localctx, 396, RULE_unionOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3510;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL_SYMBOL || _la==DISTINCT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableAliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySqlParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		public TableAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableAlias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableAlias(this);
		}
	}

	[RuleVersion(0)]
	public TableAliasContext tableAlias() {
		TableAliasContext _localctx = new TableAliasContext(Context, State);
		EnterRule(_localctx, 398, RULE_tableAlias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3515;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,382,Context) ) {
			case 1:
				{
				State = 3512;
				Match(AS_SYMBOL);
				}
				break;
			case 2:
				{
				State = 3513;
				if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
				State = 3514;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 3517;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexHintListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndexHintContext[] indexHint() {
			return GetRuleContexts<IndexHintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexHintContext indexHint(int i) {
			return GetRuleContext<IndexHintContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public IndexHintListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexHintList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexHintList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexHintList(this);
		}
	}

	[RuleVersion(0)]
	public IndexHintListContext indexHintList() {
		IndexHintListContext _localctx = new IndexHintListContext(Context, State);
		EnterRule(_localctx, 400, RULE_indexHintList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3519;
			indexHint();
			State = 3524;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,383,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3520;
					Match(COMMA_SYMBOL);
					State = 3521;
					indexHint();
					}
					} 
				}
				State = 3526;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,383,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexHintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndexHintTypeContext indexHintType() {
			return GetRuleContext<IndexHintTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyOrIndexContext keyOrIndex() {
			return GetRuleContext<KeyOrIndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexListContext indexList() {
			return GetRuleContext<IndexListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexHintClauseContext indexHintClause() {
			return GetRuleContext<IndexHintClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_SYMBOL() { return GetToken(MySqlParser.USE_SYMBOL, 0); }
		public IndexHintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexHint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexHint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexHint(this);
		}
	}

	[RuleVersion(0)]
	public IndexHintContext indexHint() {
		IndexHintContext _localctx = new IndexHintContext(Context, State);
		EnterRule(_localctx, 402, RULE_indexHint);
		int _la;
		try {
			State = 3547;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORCE_SYMBOL:
			case IGNORE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3527;
				indexHintType();
				State = 3528;
				keyOrIndex();
				State = 3530;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					State = 3529;
					indexHintClause();
					}
				}

				State = 3532;
				Match(OPEN_PAR_SYMBOL);
				State = 3533;
				indexList();
				State = 3534;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case USE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3536;
				Match(USE_SYMBOL);
				State = 3537;
				keyOrIndex();
				State = 3539;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					State = 3538;
					indexHintClause();
					}
				}

				State = 3541;
				Match(OPEN_PAR_SYMBOL);
				State = 3543;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,386,Context) ) {
				case 1:
					{
					State = 3542;
					indexList();
					}
					break;
				}
				State = 3545;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexHintTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE_SYMBOL() { return GetToken(MySqlParser.FORCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySqlParser.IGNORE_SYMBOL, 0); }
		public IndexHintTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexHintType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexHintType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexHintType(this);
		}
	}

	[RuleVersion(0)]
	public IndexHintTypeContext indexHintType() {
		IndexHintTypeContext _localctx = new IndexHintTypeContext(Context, State);
		EnterRule(_localctx, 404, RULE_indexHintType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3549;
			_la = TokenStream.LA(1);
			if ( !(_la==FORCE_SYMBOL || _la==IGNORE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyOrIndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_SYMBOL() { return GetToken(MySqlParser.KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_SYMBOL() { return GetToken(MySqlParser.INDEX_SYMBOL, 0); }
		public KeyOrIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyOrIndex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterKeyOrIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitKeyOrIndex(this);
		}
	}

	[RuleVersion(0)]
	public KeyOrIndexContext keyOrIndex() {
		KeyOrIndexContext _localctx = new KeyOrIndexContext(Context, State);
		EnterRule(_localctx, 406, RULE_keyOrIndex);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3551;
			_la = TokenStream.LA(1);
			if ( !(_la==INDEX_SYMBOL || _la==KEY_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintKeyTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY_SYMBOL() { return GetToken(MySqlParser.PRIMARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_SYMBOL() { return GetToken(MySqlParser.KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE_SYMBOL() { return GetToken(MySqlParser.UNIQUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeyOrIndexContext keyOrIndex() {
			return GetRuleContext<KeyOrIndexContext>(0);
		}
		public ConstraintKeyTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraintKeyType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterConstraintKeyType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitConstraintKeyType(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintKeyTypeContext constraintKeyType() {
		ConstraintKeyTypeContext _localctx = new ConstraintKeyTypeContext(Context, State);
		EnterRule(_localctx, 408, RULE_constraintKeyType);
		int _la;
		try {
			State = 3559;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIMARY_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3553;
				Match(PRIMARY_SYMBOL);
				State = 3554;
				Match(KEY_SYMBOL);
				}
				break;
			case UNIQUE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3555;
				Match(UNIQUE_SYMBOL);
				State = 3557;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
					{
					State = 3556;
					keyOrIndex();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexHintClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySqlParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN_SYMBOL() { return GetToken(MySqlParser.JOIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER_SYMBOL() { return GetToken(MySqlParser.ORDER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySqlParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_SYMBOL() { return GetToken(MySqlParser.GROUP_SYMBOL, 0); }
		public IndexHintClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexHintClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexHintClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexHintClause(this);
		}
	}

	[RuleVersion(0)]
	public IndexHintClauseContext indexHintClause() {
		IndexHintClauseContext _localctx = new IndexHintClauseContext(Context, State);
		EnterRule(_localctx, 410, RULE_indexHintClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3561;
			Match(FOR_SYMBOL);
			State = 3567;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JOIN_SYMBOL:
				{
				State = 3562;
				Match(JOIN_SYMBOL);
				}
				break;
			case ORDER_SYMBOL:
				{
				State = 3563;
				Match(ORDER_SYMBOL);
				State = 3564;
				Match(BY_SYMBOL);
				}
				break;
			case GROUP_SYMBOL:
				{
				State = 3565;
				Match(GROUP_SYMBOL);
				State = 3566;
				Match(BY_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndexListElementContext[] indexListElement() {
			return GetRuleContexts<IndexListElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexListElementContext indexListElement(int i) {
			return GetRuleContext<IndexListElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public IndexListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexList(this);
		}
	}

	[RuleVersion(0)]
	public IndexListContext indexList() {
		IndexListContext _localctx = new IndexListContext(Context, State);
		EnterRule(_localctx, 412, RULE_indexList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3569;
			indexListElement();
			State = 3574;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 3570;
				Match(COMMA_SYMBOL);
				State = 3571;
				indexListElement();
				}
				}
				State = 3576;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexListElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY_SYMBOL() { return GetToken(MySqlParser.PRIMARY_SYMBOL, 0); }
		public IndexListElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexListElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexListElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexListElement(this);
		}
	}

	[RuleVersion(0)]
	public IndexListElementContext indexListElement() {
		IndexListElementContext _localctx = new IndexListElementContext(Context, State);
		EnterRule(_localctx, 414, RULE_indexListElement);
		try {
			State = 3579;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,392,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3577;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3578;
				Match(PRIMARY_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySqlParser.UPDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableReferenceListContext tableReferenceList() {
			return GetRuleContext<TableReferenceListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySqlParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdateListContext updateList() {
			return GetRuleContext<UpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithClauseContext withClause() {
			return GetRuleContext<WithClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY_SYMBOL() { return GetToken(MySqlParser.LOW_PRIORITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySqlParser.IGNORE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderClauseContext orderClause() {
			return GetRuleContext<OrderClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleLimitClauseContext simpleLimitClause() {
			return GetRuleContext<SimpleLimitClauseContext>(0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUpdateStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUpdateStatement(this);
		}
	}

	[RuleVersion(0)]
	public UpdateStatementContext updateStatement() {
		UpdateStatementContext _localctx = new UpdateStatementContext(Context, State);
		EnterRule(_localctx, 416, RULE_updateStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3583;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,393,Context) ) {
			case 1:
				{
				State = 3581;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 3582;
				withClause();
				}
				break;
			}
			State = 3585;
			Match(UPDATE_SYMBOL);
			State = 3587;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,394,Context) ) {
			case 1:
				{
				State = 3586;
				Match(LOW_PRIORITY_SYMBOL);
				}
				break;
			}
			State = 3590;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,395,Context) ) {
			case 1:
				{
				State = 3589;
				Match(IGNORE_SYMBOL);
				}
				break;
			}
			State = 3592;
			tableReferenceList();
			State = 3593;
			Match(SET_SYMBOL);
			State = 3594;
			updateList();
			State = 3596;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE_SYMBOL) {
				{
				State = 3595;
				whereClause();
				}
			}

			State = 3599;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER_SYMBOL) {
				{
				State = 3598;
				orderClause();
				}
			}

			State = 3602;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT_SYMBOL) {
				{
				State = 3601;
				simpleLimitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionOrLockingStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TransactionStatementContext transactionStatement() {
			return GetRuleContext<TransactionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SavepointStatementContext savepointStatement() {
			return GetRuleContext<SavepointStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockStatementContext lockStatement() {
			return GetRuleContext<LockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XaStatementContext xaStatement() {
			return GetRuleContext<XaStatementContext>(0);
		}
		public TransactionOrLockingStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionOrLockingStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTransactionOrLockingStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTransactionOrLockingStatement(this);
		}
	}

	[RuleVersion(0)]
	public TransactionOrLockingStatementContext transactionOrLockingStatement() {
		TransactionOrLockingStatementContext _localctx = new TransactionOrLockingStatementContext(Context, State);
		EnterRule(_localctx, 418, RULE_transactionOrLockingStatement);
		try {
			State = 3608;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,399,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3604;
				transactionStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3605;
				savepointStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3606;
				lockStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3607;
				xaStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_SYMBOL() { return GetToken(MySqlParser.START_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION_SYMBOL() { return GetToken(MySqlParser.TRANSACTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TransactionCharacteristicContext[] transactionCharacteristic() {
			return GetRuleContexts<TransactionCharacteristicContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransactionCharacteristicContext transactionCharacteristic(int i) {
			return GetRuleContext<TransactionCharacteristicContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT_SYMBOL() { return GetToken(MySqlParser.COMMIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK_SYMBOL() { return GetToken(MySqlParser.WORK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_SYMBOL() { return GetToken(MySqlParser.AND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN_SYMBOL() { return GetToken(MySqlParser.CHAIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE_SYMBOL() { return GetToken(MySqlParser.RELEASE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NO_SYMBOL() { return GetTokens(MySqlParser.NO_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_SYMBOL(int i) {
			return GetToken(MySqlParser.NO_SYMBOL, i);
		}
		public TransactionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTransactionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTransactionStatement(this);
		}
	}

	[RuleVersion(0)]
	public TransactionStatementContext transactionStatement() {
		TransactionStatementContext _localctx = new TransactionStatementContext(Context, State);
		EnterRule(_localctx, 420, RULE_transactionStatement);
		int _la;
		try {
			int _alt;
			State = 3635;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case START_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3610;
				Match(START_SYMBOL);
				State = 3611;
				Match(TRANSACTION_SYMBOL);
				State = 3615;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,400,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3612;
						transactionCharacteristic();
						}
						} 
					}
					State = 3617;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,400,Context);
				}
				}
				break;
			case COMMIT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3618;
				Match(COMMIT_SYMBOL);
				State = 3620;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WORK_SYMBOL) {
					{
					State = 3619;
					Match(WORK_SYMBOL);
					}
				}

				State = 3627;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AND_SYMBOL) {
					{
					State = 3622;
					Match(AND_SYMBOL);
					State = 3624;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NO_SYMBOL) {
						{
						State = 3623;
						Match(NO_SYMBOL);
						}
					}

					State = 3626;
					Match(CHAIN_SYMBOL);
					}
				}

				State = 3633;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO_SYMBOL || _la==RELEASE_SYMBOL) {
					{
					State = 3630;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NO_SYMBOL) {
						{
						State = 3629;
						Match(NO_SYMBOL);
						}
					}

					State = 3632;
					Match(RELEASE_SYMBOL);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BeginWorkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_SYMBOL() { return GetToken(MySqlParser.BEGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK_SYMBOL() { return GetToken(MySqlParser.WORK_SYMBOL, 0); }
		public BeginWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_beginWork; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterBeginWork(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitBeginWork(this);
		}
	}

	[RuleVersion(0)]
	public BeginWorkContext beginWork() {
		BeginWorkContext _localctx = new BeginWorkContext(Context, State);
		EnterRule(_localctx, 422, RULE_beginWork);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3637;
			Match(BEGIN_SYMBOL);
			State = 3639;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WORK_SYMBOL) {
				{
				State = 3638;
				Match(WORK_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionCharacteristicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySqlParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSISTENT_SYMBOL() { return GetToken(MySqlParser.CONSISTENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT_SYMBOL() { return GetToken(MySqlParser.SNAPSHOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_SYMBOL() { return GetToken(MySqlParser.READ_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE_SYMBOL() { return GetToken(MySqlParser.WRITE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY_SYMBOL() { return GetToken(MySqlParser.ONLY_SYMBOL, 0); }
		public TransactionCharacteristicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionCharacteristic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTransactionCharacteristic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTransactionCharacteristic(this);
		}
	}

	[RuleVersion(0)]
	public TransactionCharacteristicContext transactionCharacteristic() {
		TransactionCharacteristicContext _localctx = new TransactionCharacteristicContext(Context, State);
		EnterRule(_localctx, 424, RULE_transactionCharacteristic);
		int _la;
		try {
			State = 3647;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,408,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3641;
				Match(WITH_SYMBOL);
				State = 3642;
				Match(CONSISTENT_SYMBOL);
				State = 3643;
				Match(SNAPSHOT_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3644;
				if (!(serverVersion >= 50605)) throw new FailedPredicateException(this, "serverVersion >= 50605");
				State = 3645;
				Match(READ_SYMBOL);
				State = 3646;
				_la = TokenStream.LA(1);
				if ( !(_la==ONLY_SYMBOL || _la==WRITE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SavepointStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT_SYMBOL() { return GetToken(MySqlParser.SAVEPOINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK_SYMBOL() { return GetToken(MySqlParser.ROLLBACK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SYMBOL() { return GetToken(MySqlParser.TO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK_SYMBOL() { return GetToken(MySqlParser.WORK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_SYMBOL() { return GetToken(MySqlParser.AND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN_SYMBOL() { return GetToken(MySqlParser.CHAIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE_SYMBOL() { return GetToken(MySqlParser.RELEASE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NO_SYMBOL() { return GetTokens(MySqlParser.NO_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_SYMBOL(int i) {
			return GetToken(MySqlParser.NO_SYMBOL, i);
		}
		public SavepointStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepointStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSavepointStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSavepointStatement(this);
		}
	}

	[RuleVersion(0)]
	public SavepointStatementContext savepointStatement() {
		SavepointStatementContext _localctx = new SavepointStatementContext(Context, State);
		EnterRule(_localctx, 426, RULE_savepointStatement);
		int _la;
		try {
			State = 3678;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SAVEPOINT_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3649;
				Match(SAVEPOINT_SYMBOL);
				State = 3650;
				identifier();
				}
				break;
			case ROLLBACK_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3651;
				Match(ROLLBACK_SYMBOL);
				State = 3653;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WORK_SYMBOL) {
					{
					State = 3652;
					Match(WORK_SYMBOL);
					}
				}

				State = 3673;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TO_SYMBOL:
					{
					State = 3655;
					Match(TO_SYMBOL);
					State = 3657;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,410,Context) ) {
					case 1:
						{
						State = 3656;
						Match(SAVEPOINT_SYMBOL);
						}
						break;
					}
					State = 3659;
					identifier();
					}
					break;
				case Eof:
				case AND_SYMBOL:
				case NO_SYMBOL:
				case RELEASE_SYMBOL:
				case SEMICOLON_SYMBOL:
					{
					State = 3665;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AND_SYMBOL) {
						{
						State = 3660;
						Match(AND_SYMBOL);
						State = 3662;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NO_SYMBOL) {
							{
							State = 3661;
							Match(NO_SYMBOL);
							}
						}

						State = 3664;
						Match(CHAIN_SYMBOL);
						}
					}

					State = 3671;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NO_SYMBOL || _la==RELEASE_SYMBOL) {
						{
						State = 3668;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NO_SYMBOL) {
							{
							State = 3667;
							Match(NO_SYMBOL);
							}
						}

						State = 3670;
						Match(RELEASE_SYMBOL);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case RELEASE_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3675;
				Match(RELEASE_SYMBOL);
				State = 3676;
				Match(SAVEPOINT_SYMBOL);
				State = 3677;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK_SYMBOL() { return GetToken(MySqlParser.LOCK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LockItemContext[] lockItem() {
			return GetRuleContexts<LockItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockItemContext lockItem(int i) {
			return GetRuleContext<LockItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES_SYMBOL() { return GetToken(MySqlParser.TABLES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySqlParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANCE_SYMBOL() { return GetToken(MySqlParser.INSTANCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySqlParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKUP_SYMBOL() { return GetToken(MySqlParser.BACKUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOCK_SYMBOL() { return GetToken(MySqlParser.UNLOCK_SYMBOL, 0); }
		public LockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLockStatement(this);
		}
	}

	[RuleVersion(0)]
	public LockStatementContext lockStatement() {
		LockStatementContext _localctx = new LockStatementContext(Context, State);
		EnterRule(_localctx, 428, RULE_lockStatement);
		int _la;
		try {
			State = 3702;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,419,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3680;
				Match(LOCK_SYMBOL);
				State = 3681;
				_la = TokenStream.LA(1);
				if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3682;
				lockItem();
				State = 3687;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 3683;
					Match(COMMA_SYMBOL);
					State = 3684;
					lockItem();
					}
					}
					State = 3689;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3690;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 3691;
				Match(LOCK_SYMBOL);
				State = 3692;
				Match(INSTANCE_SYMBOL);
				State = 3693;
				Match(FOR_SYMBOL);
				State = 3694;
				Match(BACKUP_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3695;
				Match(UNLOCK_SYMBOL);
				State = 3700;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,418,Context) ) {
				case 1:
					{
					State = 3696;
					Match(TABLES_SYMBOL);
					}
					break;
				case 2:
					{
					State = 3697;
					Match(TABLE_SYMBOL);
					}
					break;
				case 3:
					{
					State = 3698;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 3699;
					Match(INSTANCE_SYMBOL);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockOptionContext lockOption() {
			return GetRuleContext<LockOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		public LockItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLockItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLockItem(this);
		}
	}

	[RuleVersion(0)]
	public LockItemContext lockItem() {
		LockItemContext _localctx = new LockItemContext(Context, State);
		EnterRule(_localctx, 430, RULE_lockItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3704;
			tableRef();
			State = 3706;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,420,Context) ) {
			case 1:
				{
				State = 3705;
				tableAlias();
				}
				break;
			}
			State = 3708;
			lockOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_SYMBOL() { return GetToken(MySqlParser.READ_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySqlParser.LOCAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE_SYMBOL() { return GetToken(MySqlParser.WRITE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY_SYMBOL() { return GetToken(MySqlParser.LOW_PRIORITY_SYMBOL, 0); }
		public LockOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLockOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLockOption(this);
		}
	}

	[RuleVersion(0)]
	public LockOptionContext lockOption() {
		LockOptionContext _localctx = new LockOptionContext(Context, State);
		EnterRule(_localctx, 432, RULE_lockOption);
		int _la;
		try {
			State = 3718;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case READ_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3710;
				Match(READ_SYMBOL);
				State = 3712;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_SYMBOL) {
					{
					State = 3711;
					Match(LOCAL_SYMBOL);
					}
				}

				}
				break;
			case LOW_PRIORITY_SYMBOL:
			case WRITE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3715;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOW_PRIORITY_SYMBOL) {
					{
					State = 3714;
					Match(LOW_PRIORITY_SYMBOL);
					}
				}

				State = 3717;
				Match(WRITE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA_SYMBOL() { return GetToken(MySqlParser.XA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_SYMBOL() { return GetToken(MySqlParser.END_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE_SYMBOL() { return GetToken(MySqlParser.PREPARE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT_SYMBOL() { return GetToken(MySqlParser.COMMIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK_SYMBOL() { return GetToken(MySqlParser.ROLLBACK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECOVER_SYMBOL() { return GetToken(MySqlParser.RECOVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public XaConvertContext xaConvert() {
			return GetRuleContext<XaConvertContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_SYMBOL() { return GetToken(MySqlParser.START_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_SYMBOL() { return GetToken(MySqlParser.BEGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUSPEND_SYMBOL() { return GetToken(MySqlParser.SUSPEND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_SYMBOL() { return GetToken(MySqlParser.ONE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHASE_SYMBOL() { return GetToken(MySqlParser.PHASE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN_SYMBOL() { return GetToken(MySqlParser.JOIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESUME_SYMBOL() { return GetToken(MySqlParser.RESUME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySqlParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIGRATE_SYMBOL() { return GetToken(MySqlParser.MIGRATE_SYMBOL, 0); }
		public XaStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterXaStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitXaStatement(this);
		}
	}

	[RuleVersion(0)]
	public XaStatementContext xaStatement() {
		XaStatementContext _localctx = new XaStatementContext(Context, State);
		EnterRule(_localctx, 434, RULE_xaStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3720;
			Match(XA_SYMBOL);
			State = 3747;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BEGIN_SYMBOL:
			case START_SYMBOL:
				{
				State = 3721;
				_la = TokenStream.LA(1);
				if ( !(_la==BEGIN_SYMBOL || _la==START_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3722;
				xid();
				State = 3724;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==JOIN_SYMBOL || _la==RESUME_SYMBOL) {
					{
					State = 3723;
					_la = TokenStream.LA(1);
					if ( !(_la==JOIN_SYMBOL || _la==RESUME_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			case END_SYMBOL:
				{
				State = 3726;
				Match(END_SYMBOL);
				State = 3727;
				xid();
				State = 3733;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SUSPEND_SYMBOL) {
					{
					State = 3728;
					Match(SUSPEND_SYMBOL);
					State = 3731;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==FOR_SYMBOL) {
						{
						State = 3729;
						Match(FOR_SYMBOL);
						State = 3730;
						Match(MIGRATE_SYMBOL);
						}
					}

					}
				}

				}
				break;
			case PREPARE_SYMBOL:
				{
				State = 3735;
				Match(PREPARE_SYMBOL);
				State = 3736;
				xid();
				}
				break;
			case COMMIT_SYMBOL:
				{
				State = 3737;
				Match(COMMIT_SYMBOL);
				State = 3738;
				xid();
				State = 3741;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ONE_SYMBOL) {
					{
					State = 3739;
					Match(ONE_SYMBOL);
					State = 3740;
					Match(PHASE_SYMBOL);
					}
				}

				}
				break;
			case ROLLBACK_SYMBOL:
				{
				State = 3743;
				Match(ROLLBACK_SYMBOL);
				State = 3744;
				xid();
				}
				break;
			case RECOVER_SYMBOL:
				{
				State = 3745;
				Match(RECOVER_SYMBOL);
				State = 3746;
				xaConvert();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaConvertContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT_SYMBOL() { return GetToken(MySqlParser.CONVERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XID_SYMBOL() { return GetToken(MySqlParser.XID_SYMBOL, 0); }
		public XaConvertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaConvert; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterXaConvert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitXaConvert(this);
		}
	}

	[RuleVersion(0)]
	public XaConvertContext xaConvert() {
		XaConvertContext _localctx = new XaConvertContext(Context, State);
		EnterRule(_localctx, 436, RULE_xaConvert);
		int _la;
		try {
			State = 3755;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,430,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3749;
				if (!(serverVersion >= 50704)) throw new FailedPredicateException(this, "serverVersion >= 50704");
				State = 3752;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONVERT_SYMBOL) {
					{
					State = 3750;
					Match(CONVERT_SYMBOL);
					State = 3751;
					Match(XID_SYMBOL);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext[] textString() {
			return GetRuleContexts<TextStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString(int i) {
			return GetRuleContext<TextStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		public XidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterXid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitXid(this);
		}
	}

	[RuleVersion(0)]
	public XidContext xid() {
		XidContext _localctx = new XidContext(Context, State);
		EnterRule(_localctx, 438, RULE_xid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3757;
			textString();
			State = 3764;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA_SYMBOL) {
				{
				State = 3758;
				Match(COMMA_SYMBOL);
				State = 3759;
				textString();
				State = 3762;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 3760;
					Match(COMMA_SYMBOL);
					State = 3761;
					ulong_number();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplicationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PURGE_SYMBOL() { return GetToken(MySqlParser.PURGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS_SYMBOL() { return GetToken(MySqlParser.LOGS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySqlParser.BINARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SYMBOL() { return GetToken(MySqlParser.MASTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SYMBOL() { return GetToken(MySqlParser.TO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE_SYMBOL() { return GetToken(MySqlParser.BEFORE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeMasterContext changeMaster() {
			return GetRuleContext<ChangeMasterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET_SYMBOL() { return GetToken(MySqlParser.RESET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ResetOptionContext[] resetOption() {
			return GetRuleContexts<ResetOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResetOptionContext resetOption(int i) {
			return GetRuleContext<ResetOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERSIST_SYMBOL() { return GetToken(MySqlParser.PERSIST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SlaveContext slave() {
			return GetRuleContext<SlaveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationContext changeReplication() {
			return GetRuleContext<ChangeReplicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplicationLoadContext replicationLoad() {
			return GetRuleContext<ReplicationLoadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupReplicationContext groupReplication() {
			return GetRuleContext<GroupReplicationContext>(0);
		}
		public ReplicationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replicationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReplicationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReplicationStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReplicationStatementContext replicationStatement() {
		ReplicationStatementContext _localctx = new ReplicationStatementContext(Context, State);
		EnterRule(_localctx, 440, RULE_replicationStatement);
		int _la;
		try {
			State = 3799;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,436,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3766;
				Match(PURGE_SYMBOL);
				State = 3767;
				_la = TokenStream.LA(1);
				if ( !(_la==BINARY_SYMBOL || _la==MASTER_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3768;
				Match(LOGS_SYMBOL);
				State = 3773;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TO_SYMBOL:
					{
					State = 3769;
					Match(TO_SYMBOL);
					State = 3770;
					textLiteral();
					}
					break;
				case BEFORE_SYMBOL:
					{
					State = 3771;
					Match(BEFORE_SYMBOL);
					State = 3772;
					expr(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3775;
				changeMaster();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3776;
				Match(RESET_SYMBOL);
				State = 3777;
				resetOption();
				State = 3782;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 3778;
					Match(COMMA_SYMBOL);
					State = 3779;
					resetOption();
					}
					}
					State = 3784;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3785;
				if (!(serverVersion > 80000)) throw new FailedPredicateException(this, "serverVersion > 80000");
				State = 3786;
				Match(RESET_SYMBOL);
				State = 3787;
				Match(PERSIST_SYMBOL);
				State = 3791;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF_SYMBOL) {
					{
					State = 3788;
					ifExists();
					State = 3789;
					identifier();
					}
				}

				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3793;
				slave();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3794;
				if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
				State = 3795;
				changeReplication();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3796;
				replicationLoad();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3797;
				if (!(serverVersion > 50706)) throw new FailedPredicateException(this, "serverVersion > 50706");
				State = 3798;
				groupReplication();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetOptionContext : ParserRuleContext {
		public IToken option;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SYMBOL() { return GetToken(MySqlParser.MASTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MasterResetOptionsContext masterResetOptions() {
			return GetRuleContext<MasterResetOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE_SYMBOL() { return GetToken(MySqlParser.CACHE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY_SYMBOL() { return GetToken(MySqlParser.QUERY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE_SYMBOL() { return GetToken(MySqlParser.SLAVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySqlParser.ALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChannelContext channel() {
			return GetRuleContext<ChannelContext>(0);
		}
		public ResetOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterResetOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitResetOption(this);
		}
	}

	[RuleVersion(0)]
	public ResetOptionContext resetOption() {
		ResetOptionContext _localctx = new ResetOptionContext(Context, State);
		EnterRule(_localctx, 442, RULE_resetOption);
		try {
			State = 3815;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,440,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3801;
				_localctx.option = Match(MASTER_SYMBOL);
				State = 3803;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,437,Context) ) {
				case 1:
					{
					State = 3802;
					masterResetOptions();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3805;
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				State = 3806;
				_localctx.option = Match(QUERY_SYMBOL);
				State = 3807;
				Match(CACHE_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3808;
				_localctx.option = Match(SLAVE_SYMBOL);
				State = 3810;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,438,Context) ) {
				case 1:
					{
					State = 3809;
					Match(ALL_SYMBOL);
					}
					break;
				}
				State = 3813;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,439,Context) ) {
				case 1:
					{
					State = 3812;
					channel();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MasterResetOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SYMBOL() { return GetToken(MySqlParser.TO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulonglong_numberContext real_ulonglong_number() {
			return GetRuleContext<Real_ulonglong_numberContext>(0);
		}
		public MasterResetOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_masterResetOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMasterResetOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMasterResetOptions(this);
		}
	}

	[RuleVersion(0)]
	public MasterResetOptionsContext masterResetOptions() {
		MasterResetOptionsContext _localctx = new MasterResetOptionsContext(Context, State);
		EnterRule(_localctx, 444, RULE_masterResetOptions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3817;
			if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
			State = 3818;
			Match(TO_SYMBOL);
			State = 3823;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,441,Context) ) {
			case 1:
				{
				State = 3819;
				if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
				State = 3820;
				real_ulong_number();
				}
				break;
			case 2:
				{
				State = 3821;
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				State = 3822;
				real_ulonglong_number();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplicationLoadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD_SYMBOL() { return GetToken(MySqlParser.LOAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySqlParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SYMBOL() { return GetToken(MySqlParser.MASTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_SYMBOL() { return GetToken(MySqlParser.DATA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySqlParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public ReplicationLoadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replicationLoad; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReplicationLoad(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReplicationLoad(this);
		}
	}

	[RuleVersion(0)]
	public ReplicationLoadContext replicationLoad() {
		ReplicationLoadContext _localctx = new ReplicationLoadContext(Context, State);
		EnterRule(_localctx, 446, RULE_replicationLoad);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3825;
			Match(LOAD_SYMBOL);
			State = 3829;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DATA_SYMBOL:
				{
				State = 3826;
				Match(DATA_SYMBOL);
				}
				break;
			case TABLE_SYMBOL:
				{
				State = 3827;
				Match(TABLE_SYMBOL);
				State = 3828;
				tableRef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3831;
			Match(FROM_SYMBOL);
			State = 3832;
			Match(MASTER_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeMasterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGE_SYMBOL() { return GetToken(MySqlParser.CHANGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SYMBOL() { return GetToken(MySqlParser.MASTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SYMBOL() { return GetToken(MySqlParser.TO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChangeMasterOptionsContext changeMasterOptions() {
			return GetRuleContext<ChangeMasterOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChannelContext channel() {
			return GetRuleContext<ChannelContext>(0);
		}
		public ChangeMasterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeMaster; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChangeMaster(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChangeMaster(this);
		}
	}

	[RuleVersion(0)]
	public ChangeMasterContext changeMaster() {
		ChangeMasterContext _localctx = new ChangeMasterContext(Context, State);
		EnterRule(_localctx, 448, RULE_changeMaster);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3834;
			Match(CHANGE_SYMBOL);
			State = 3835;
			Match(MASTER_SYMBOL);
			State = 3836;
			Match(TO_SYMBOL);
			State = 3837;
			changeMasterOptions();
			State = 3839;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,443,Context) ) {
			case 1:
				{
				State = 3838;
				channel();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeMasterOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MasterOptionContext[] masterOption() {
			return GetRuleContexts<MasterOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MasterOptionContext masterOption(int i) {
			return GetRuleContext<MasterOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public ChangeMasterOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeMasterOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChangeMasterOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChangeMasterOptions(this);
		}
	}

	[RuleVersion(0)]
	public ChangeMasterOptionsContext changeMasterOptions() {
		ChangeMasterOptionsContext _localctx = new ChangeMasterOptionsContext(Context, State);
		EnterRule(_localctx, 450, RULE_changeMasterOptions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3841;
			masterOption();
			State = 3846;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,444,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3842;
					Match(COMMA_SYMBOL);
					State = 3843;
					masterOption();
					}
					} 
				}
				State = 3848;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,444,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MasterOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_HOST_SYMBOL() { return GetToken(MySqlParser.MASTER_HOST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringNoLinebreakContext textStringNoLinebreak() {
			return GetRuleContext<TextStringNoLinebreakContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NETWORK_NAMESPACE_SYMBOL() { return GetToken(MySqlParser.NETWORK_NAMESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_BIND_SYMBOL() { return GetToken(MySqlParser.MASTER_BIND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_USER_SYMBOL() { return GetToken(MySqlParser.MASTER_USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PASSWORD_SYMBOL() { return GetToken(MySqlParser.MASTER_PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PORT_SYMBOL() { return GetToken(MySqlParser.MASTER_PORT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_CONNECT_RETRY_SYMBOL() { return GetToken(MySqlParser.MASTER_CONNECT_RETRY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_RETRY_COUNT_SYMBOL() { return GetToken(MySqlParser.MASTER_RETRY_COUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_DELAY_SYMBOL() { return GetToken(MySqlParser.MASTER_DELAY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CA_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_CA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CAPATH_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_CAPATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_TLS_VERSION_SYMBOL() { return GetToken(MySqlParser.MASTER_TLS_VERSION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CERT_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_CERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_TLS_CIPHERSUITES_SYMBOL() { return GetToken(MySqlParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MasterTlsCiphersuitesDefContext masterTlsCiphersuitesDef() {
			return GetRuleContext<MasterTlsCiphersuitesDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CIPHER_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_CIPHER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_KEY_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CRL_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_CRL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CRLPATH_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_CRLPATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PUBLIC_KEY_PATH_SYMBOL() { return GetToken(MySqlParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_MASTER_PUBLIC_KEY_SYMBOL() { return GetToken(MySqlParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_HEARTBEAT_PERIOD_SYMBOL() { return GetToken(MySqlParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SERVER_IDS_SYMBOL() { return GetToken(MySqlParser.IGNORE_SERVER_IDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ServerIdListContext serverIdList() {
			return GetRuleContext<ServerIdListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_COMPRESSION_ALGORITHM_SYMBOL() { return GetToken(MySqlParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL() { return GetToken(MySqlParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_AUTO_POSITION_SYMBOL() { return GetToken(MySqlParser.MASTER_AUTO_POSITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGE_CHECKS_USER_SYMBOL() { return GetToken(MySqlParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeCheckDefContext privilegeCheckDef() {
			return GetRuleContext<PrivilegeCheckDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE_ROW_FORMAT_SYMBOL() { return GetToken(MySqlParser.REQUIRE_ROW_FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL() { return GetToken(MySqlParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablePrimaryKeyCheckDefContext tablePrimaryKeyCheckDef() {
			return GetRuleContext<TablePrimaryKeyCheckDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MasterFileDefContext masterFileDef() {
			return GetRuleContext<MasterFileDefContext>(0);
		}
		public MasterOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_masterOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMasterOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMasterOption(this);
		}
	}

	[RuleVersion(0)]
	public MasterOptionContext masterOption() {
		MasterOptionContext _localctx = new MasterOptionContext(Context, State);
		EnterRule(_localctx, 452, RULE_masterOption);
		try {
			State = 3940;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MASTER_HOST_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3849;
				Match(MASTER_HOST_SYMBOL);
				State = 3850;
				Match(EQUAL_OPERATOR);
				State = 3851;
				textStringNoLinebreak();
				}
				break;
			case NETWORK_NAMESPACE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3852;
				Match(NETWORK_NAMESPACE_SYMBOL);
				State = 3853;
				Match(EQUAL_OPERATOR);
				State = 3854;
				textStringNoLinebreak();
				}
				break;
			case MASTER_BIND_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3855;
				Match(MASTER_BIND_SYMBOL);
				State = 3856;
				Match(EQUAL_OPERATOR);
				State = 3857;
				textStringNoLinebreak();
				}
				break;
			case MASTER_USER_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3858;
				Match(MASTER_USER_SYMBOL);
				State = 3859;
				Match(EQUAL_OPERATOR);
				State = 3860;
				textStringNoLinebreak();
				}
				break;
			case MASTER_PASSWORD_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3861;
				Match(MASTER_PASSWORD_SYMBOL);
				State = 3862;
				Match(EQUAL_OPERATOR);
				State = 3863;
				textStringNoLinebreak();
				}
				break;
			case MASTER_PORT_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3864;
				Match(MASTER_PORT_SYMBOL);
				State = 3865;
				Match(EQUAL_OPERATOR);
				State = 3866;
				ulong_number();
				}
				break;
			case MASTER_CONNECT_RETRY_SYMBOL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3867;
				Match(MASTER_CONNECT_RETRY_SYMBOL);
				State = 3868;
				Match(EQUAL_OPERATOR);
				State = 3869;
				ulong_number();
				}
				break;
			case MASTER_RETRY_COUNT_SYMBOL:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3870;
				Match(MASTER_RETRY_COUNT_SYMBOL);
				State = 3871;
				Match(EQUAL_OPERATOR);
				State = 3872;
				ulong_number();
				}
				break;
			case MASTER_DELAY_SYMBOL:
				EnterOuterAlt(_localctx, 9);
				{
				State = 3873;
				Match(MASTER_DELAY_SYMBOL);
				State = 3874;
				Match(EQUAL_OPERATOR);
				State = 3875;
				ulong_number();
				}
				break;
			case MASTER_SSL_SYMBOL:
				EnterOuterAlt(_localctx, 10);
				{
				State = 3876;
				Match(MASTER_SSL_SYMBOL);
				State = 3877;
				Match(EQUAL_OPERATOR);
				State = 3878;
				ulong_number();
				}
				break;
			case MASTER_SSL_CA_SYMBOL:
				EnterOuterAlt(_localctx, 11);
				{
				State = 3879;
				Match(MASTER_SSL_CA_SYMBOL);
				State = 3880;
				Match(EQUAL_OPERATOR);
				State = 3881;
				textStringNoLinebreak();
				}
				break;
			case MASTER_SSL_CAPATH_SYMBOL:
				EnterOuterAlt(_localctx, 12);
				{
				State = 3882;
				Match(MASTER_SSL_CAPATH_SYMBOL);
				State = 3883;
				Match(EQUAL_OPERATOR);
				State = 3884;
				textStringNoLinebreak();
				}
				break;
			case MASTER_TLS_VERSION_SYMBOL:
				EnterOuterAlt(_localctx, 13);
				{
				State = 3885;
				Match(MASTER_TLS_VERSION_SYMBOL);
				State = 3886;
				Match(EQUAL_OPERATOR);
				State = 3887;
				textStringNoLinebreak();
				}
				break;
			case MASTER_SSL_CERT_SYMBOL:
				EnterOuterAlt(_localctx, 14);
				{
				State = 3888;
				Match(MASTER_SSL_CERT_SYMBOL);
				State = 3889;
				Match(EQUAL_OPERATOR);
				State = 3890;
				textStringNoLinebreak();
				}
				break;
			case MASTER_TLS_CIPHERSUITES_SYMBOL:
				EnterOuterAlt(_localctx, 15);
				{
				State = 3891;
				Match(MASTER_TLS_CIPHERSUITES_SYMBOL);
				State = 3892;
				Match(EQUAL_OPERATOR);
				State = 3893;
				masterTlsCiphersuitesDef();
				}
				break;
			case MASTER_SSL_CIPHER_SYMBOL:
				EnterOuterAlt(_localctx, 16);
				{
				State = 3894;
				Match(MASTER_SSL_CIPHER_SYMBOL);
				State = 3895;
				Match(EQUAL_OPERATOR);
				State = 3896;
				textStringNoLinebreak();
				}
				break;
			case MASTER_SSL_KEY_SYMBOL:
				EnterOuterAlt(_localctx, 17);
				{
				State = 3897;
				Match(MASTER_SSL_KEY_SYMBOL);
				State = 3898;
				Match(EQUAL_OPERATOR);
				State = 3899;
				textStringNoLinebreak();
				}
				break;
			case MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL:
				EnterOuterAlt(_localctx, 18);
				{
				State = 3900;
				Match(MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL);
				State = 3901;
				Match(EQUAL_OPERATOR);
				State = 3902;
				ulong_number();
				}
				break;
			case MASTER_SSL_CRL_SYMBOL:
				EnterOuterAlt(_localctx, 19);
				{
				State = 3903;
				Match(MASTER_SSL_CRL_SYMBOL);
				State = 3904;
				Match(EQUAL_OPERATOR);
				State = 3905;
				textLiteral();
				}
				break;
			case MASTER_SSL_CRLPATH_SYMBOL:
				EnterOuterAlt(_localctx, 20);
				{
				State = 3906;
				Match(MASTER_SSL_CRLPATH_SYMBOL);
				State = 3907;
				Match(EQUAL_OPERATOR);
				State = 3908;
				textStringNoLinebreak();
				}
				break;
			case MASTER_PUBLIC_KEY_PATH_SYMBOL:
				EnterOuterAlt(_localctx, 21);
				{
				State = 3909;
				Match(MASTER_PUBLIC_KEY_PATH_SYMBOL);
				State = 3910;
				Match(EQUAL_OPERATOR);
				State = 3911;
				textStringNoLinebreak();
				}
				break;
			case GET_MASTER_PUBLIC_KEY_SYMBOL:
				EnterOuterAlt(_localctx, 22);
				{
				State = 3912;
				Match(GET_MASTER_PUBLIC_KEY_SYMBOL);
				State = 3913;
				Match(EQUAL_OPERATOR);
				State = 3914;
				ulong_number();
				}
				break;
			case MASTER_HEARTBEAT_PERIOD_SYMBOL:
				EnterOuterAlt(_localctx, 23);
				{
				State = 3915;
				Match(MASTER_HEARTBEAT_PERIOD_SYMBOL);
				State = 3916;
				Match(EQUAL_OPERATOR);
				State = 3917;
				ulong_number();
				}
				break;
			case IGNORE_SERVER_IDS_SYMBOL:
				EnterOuterAlt(_localctx, 24);
				{
				State = 3918;
				Match(IGNORE_SERVER_IDS_SYMBOL);
				State = 3919;
				Match(EQUAL_OPERATOR);
				State = 3920;
				serverIdList();
				}
				break;
			case MASTER_COMPRESSION_ALGORITHM_SYMBOL:
				EnterOuterAlt(_localctx, 25);
				{
				State = 3921;
				Match(MASTER_COMPRESSION_ALGORITHM_SYMBOL);
				State = 3922;
				Match(EQUAL_OPERATOR);
				State = 3923;
				textStringLiteral();
				}
				break;
			case MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL:
				EnterOuterAlt(_localctx, 26);
				{
				State = 3924;
				Match(MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL);
				State = 3925;
				Match(EQUAL_OPERATOR);
				State = 3926;
				ulong_number();
				}
				break;
			case MASTER_AUTO_POSITION_SYMBOL:
				EnterOuterAlt(_localctx, 27);
				{
				State = 3927;
				Match(MASTER_AUTO_POSITION_SYMBOL);
				State = 3928;
				Match(EQUAL_OPERATOR);
				State = 3929;
				ulong_number();
				}
				break;
			case PRIVILEGE_CHECKS_USER_SYMBOL:
				EnterOuterAlt(_localctx, 28);
				{
				State = 3930;
				Match(PRIVILEGE_CHECKS_USER_SYMBOL);
				State = 3931;
				Match(EQUAL_OPERATOR);
				State = 3932;
				privilegeCheckDef();
				}
				break;
			case REQUIRE_ROW_FORMAT_SYMBOL:
				EnterOuterAlt(_localctx, 29);
				{
				State = 3933;
				Match(REQUIRE_ROW_FORMAT_SYMBOL);
				State = 3934;
				Match(EQUAL_OPERATOR);
				State = 3935;
				ulong_number();
				}
				break;
			case REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL:
				EnterOuterAlt(_localctx, 30);
				{
				State = 3936;
				Match(REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL);
				State = 3937;
				Match(EQUAL_OPERATOR);
				State = 3938;
				tablePrimaryKeyCheckDef();
				}
				break;
			case MASTER_LOG_FILE_SYMBOL:
			case MASTER_LOG_POS_SYMBOL:
			case RELAY_LOG_FILE_SYMBOL:
			case RELAY_LOG_POS_SYMBOL:
				EnterOuterAlt(_localctx, 31);
				{
				State = 3939;
				masterFileDef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivilegeCheckDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserIdentifierOrTextContext userIdentifierOrText() {
			return GetRuleContext<UserIdentifierOrTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_SYMBOL() { return GetToken(MySqlParser.NULL_SYMBOL, 0); }
		public PrivilegeCheckDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilegeCheckDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPrivilegeCheckDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPrivilegeCheckDef(this);
		}
	}

	[RuleVersion(0)]
	public PrivilegeCheckDefContext privilegeCheckDef() {
		PrivilegeCheckDefContext _localctx = new PrivilegeCheckDefContext(Context, State);
		EnterRule(_localctx, 454, RULE_privilegeCheckDef);
		try {
			State = 3944;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,446,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3942;
				userIdentifierOrText();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3943;
				Match(NULL_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablePrimaryKeyCheckDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STREAM_SYMBOL() { return GetToken(MySqlParser.STREAM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySqlParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF_SYMBOL() { return GetToken(MySqlParser.OFF_SYMBOL, 0); }
		public TablePrimaryKeyCheckDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablePrimaryKeyCheckDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTablePrimaryKeyCheckDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTablePrimaryKeyCheckDef(this);
		}
	}

	[RuleVersion(0)]
	public TablePrimaryKeyCheckDefContext tablePrimaryKeyCheckDef() {
		TablePrimaryKeyCheckDefContext _localctx = new TablePrimaryKeyCheckDefContext(Context, State);
		EnterRule(_localctx, 456, RULE_tablePrimaryKeyCheckDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3946;
			_la = TokenStream.LA(1);
			if ( !(_la==ON_SYMBOL || _la==STREAM_SYMBOL || _la==OFF_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MasterTlsCiphersuitesDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextStringNoLinebreakContext textStringNoLinebreak() {
			return GetRuleContext<TextStringNoLinebreakContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_SYMBOL() { return GetToken(MySqlParser.NULL_SYMBOL, 0); }
		public MasterTlsCiphersuitesDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_masterTlsCiphersuitesDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMasterTlsCiphersuitesDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMasterTlsCiphersuitesDef(this);
		}
	}

	[RuleVersion(0)]
	public MasterTlsCiphersuitesDefContext masterTlsCiphersuitesDef() {
		MasterTlsCiphersuitesDefContext _localctx = new MasterTlsCiphersuitesDefContext(Context, State);
		EnterRule(_localctx, 458, RULE_masterTlsCiphersuitesDef);
		try {
			State = 3950;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,447,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3948;
				textStringNoLinebreak();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3949;
				Match(NULL_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MasterFileDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_FILE_SYMBOL() { return GetToken(MySqlParser.MASTER_LOG_FILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringNoLinebreakContext textStringNoLinebreak() {
			return GetRuleContext<TextStringNoLinebreakContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_POS_SYMBOL() { return GetToken(MySqlParser.MASTER_LOG_POS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ulonglong_numberContext ulonglong_number() {
			return GetRuleContext<Ulonglong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_FILE_SYMBOL() { return GetToken(MySqlParser.RELAY_LOG_FILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_POS_SYMBOL() { return GetToken(MySqlParser.RELAY_LOG_POS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		public MasterFileDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_masterFileDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMasterFileDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMasterFileDef(this);
		}
	}

	[RuleVersion(0)]
	public MasterFileDefContext masterFileDef() {
		MasterFileDefContext _localctx = new MasterFileDefContext(Context, State);
		EnterRule(_localctx, 460, RULE_masterFileDef);
		try {
			State = 3964;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MASTER_LOG_FILE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3952;
				Match(MASTER_LOG_FILE_SYMBOL);
				State = 3953;
				Match(EQUAL_OPERATOR);
				State = 3954;
				textStringNoLinebreak();
				}
				break;
			case MASTER_LOG_POS_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3955;
				Match(MASTER_LOG_POS_SYMBOL);
				State = 3956;
				Match(EQUAL_OPERATOR);
				State = 3957;
				ulonglong_number();
				}
				break;
			case RELAY_LOG_FILE_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3958;
				Match(RELAY_LOG_FILE_SYMBOL);
				State = 3959;
				Match(EQUAL_OPERATOR);
				State = 3960;
				textStringNoLinebreak();
				}
				break;
			case RELAY_LOG_POS_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3961;
				Match(RELAY_LOG_POS_SYMBOL);
				State = 3962;
				Match(EQUAL_OPERATOR);
				State = 3963;
				ulong_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServerIdListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext[] ulong_number() {
			return GetRuleContexts<Ulong_numberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number(int i) {
			return GetRuleContext<Ulong_numberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public ServerIdListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serverIdList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterServerIdList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitServerIdList(this);
		}
	}

	[RuleVersion(0)]
	public ServerIdListContext serverIdList() {
		ServerIdListContext _localctx = new ServerIdListContext(Context, State);
		EnterRule(_localctx, 462, RULE_serverIdList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3966;
			Match(OPEN_PAR_SYMBOL);
			State = 3975;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 747)) & ~0x3f) == 0 && ((1L << (_la - 747)) & ((1L << (INT_NUMBER - 747)) | (1L << (LONG_NUMBER - 747)) | (1L << (ULONGLONG_NUMBER - 747)) | (1L << (HEX_NUMBER - 747)) | (1L << (DECIMAL_NUMBER - 747)) | (1L << (FLOAT_NUMBER - 747)))) != 0)) {
				{
				State = 3967;
				ulong_number();
				State = 3972;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 3968;
					Match(COMMA_SYMBOL);
					State = 3969;
					ulong_number();
					}
					}
					State = 3974;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 3977;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGE_SYMBOL() { return GetToken(MySqlParser.CHANGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_SYMBOL() { return GetToken(MySqlParser.REPLICATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER_SYMBOL() { return GetToken(MySqlParser.FILTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FilterDefinitionContext[] filterDefinition() {
			return GetRuleContexts<FilterDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterDefinitionContext filterDefinition(int i) {
			return GetRuleContext<FilterDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChannelContext channel() {
			return GetRuleContext<ChannelContext>(0);
		}
		public ChangeReplicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplication; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChangeReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChangeReplication(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationContext changeReplication() {
		ChangeReplicationContext _localctx = new ChangeReplicationContext(Context, State);
		EnterRule(_localctx, 464, RULE_changeReplication);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3979;
			Match(CHANGE_SYMBOL);
			State = 3980;
			Match(REPLICATION_SYMBOL);
			State = 3981;
			Match(FILTER_SYMBOL);
			State = 3982;
			filterDefinition();
			State = 3987;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,451,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3983;
					Match(COMMA_SYMBOL);
					State = 3984;
					filterDefinition();
					}
					} 
				}
				State = 3989;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,451,Context);
			}
			State = 3992;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,452,Context) ) {
			case 1:
				{
				State = 3990;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 3991;
				channel();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_DO_DB_SYMBOL() { return GetToken(MySqlParser.REPLICATE_DO_DB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FilterDbListContext filterDbList() {
			return GetRuleContext<FilterDbListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_IGNORE_DB_SYMBOL() { return GetToken(MySqlParser.REPLICATE_IGNORE_DB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_DO_TABLE_SYMBOL() { return GetToken(MySqlParser.REPLICATE_DO_TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FilterTableListContext filterTableList() {
			return GetRuleContext<FilterTableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_IGNORE_TABLE_SYMBOL() { return GetToken(MySqlParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_WILD_DO_TABLE_SYMBOL() { return GetToken(MySqlParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FilterStringListContext filterStringList() {
			return GetRuleContext<FilterStringListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_WILD_IGNORE_TABLE_SYMBOL() { return GetToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_REWRITE_DB_SYMBOL() { return GetToken(MySqlParser.REPLICATE_REWRITE_DB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FilterDbPairListContext filterDbPairList() {
			return GetRuleContext<FilterDbPairListContext>(0);
		}
		public FilterDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFilterDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFilterDefinition(this);
		}
	}

	[RuleVersion(0)]
	public FilterDefinitionContext filterDefinition() {
		FilterDefinitionContext _localctx = new FilterDefinitionContext(Context, State);
		EnterRule(_localctx, 466, RULE_filterDefinition);
		int _la;
		try {
			State = 4043;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REPLICATE_DO_DB_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3994;
				Match(REPLICATE_DO_DB_SYMBOL);
				State = 3995;
				Match(EQUAL_OPERATOR);
				State = 3996;
				Match(OPEN_PAR_SYMBOL);
				State = 3998;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,453,Context) ) {
				case 1:
					{
					State = 3997;
					filterDbList();
					}
					break;
				}
				State = 4000;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_IGNORE_DB_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4001;
				Match(REPLICATE_IGNORE_DB_SYMBOL);
				State = 4002;
				Match(EQUAL_OPERATOR);
				State = 4003;
				Match(OPEN_PAR_SYMBOL);
				State = 4005;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,454,Context) ) {
				case 1:
					{
					State = 4004;
					filterDbList();
					}
					break;
				}
				State = 4007;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_DO_TABLE_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4008;
				Match(REPLICATE_DO_TABLE_SYMBOL);
				State = 4009;
				Match(EQUAL_OPERATOR);
				State = 4010;
				Match(OPEN_PAR_SYMBOL);
				State = 4012;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,455,Context) ) {
				case 1:
					{
					State = 4011;
					filterTableList();
					}
					break;
				}
				State = 4014;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_IGNORE_TABLE_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4015;
				Match(REPLICATE_IGNORE_TABLE_SYMBOL);
				State = 4016;
				Match(EQUAL_OPERATOR);
				State = 4017;
				Match(OPEN_PAR_SYMBOL);
				State = 4019;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,456,Context) ) {
				case 1:
					{
					State = 4018;
					filterTableList();
					}
					break;
				}
				State = 4021;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_WILD_DO_TABLE_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4022;
				Match(REPLICATE_WILD_DO_TABLE_SYMBOL);
				State = 4023;
				Match(EQUAL_OPERATOR);
				State = 4024;
				Match(OPEN_PAR_SYMBOL);
				State = 4026;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,457,Context) ) {
				case 1:
					{
					State = 4025;
					filterStringList();
					}
					break;
				}
				State = 4028;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4029;
				Match(REPLICATE_WILD_IGNORE_TABLE_SYMBOL);
				State = 4030;
				Match(EQUAL_OPERATOR);
				State = 4031;
				Match(OPEN_PAR_SYMBOL);
				State = 4033;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,458,Context) ) {
				case 1:
					{
					State = 4032;
					filterStringList();
					}
					break;
				}
				State = 4035;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_REWRITE_DB_SYMBOL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4036;
				Match(REPLICATE_REWRITE_DB_SYMBOL);
				State = 4037;
				Match(EQUAL_OPERATOR);
				State = 4038;
				Match(OPEN_PAR_SYMBOL);
				State = 4040;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PAR_SYMBOL) {
					{
					State = 4039;
					filterDbPairList();
					}
				}

				State = 4042;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterDbListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SchemaRefContext[] schemaRef() {
			return GetRuleContexts<SchemaRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SchemaRefContext schemaRef(int i) {
			return GetRuleContext<SchemaRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public FilterDbListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterDbList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFilterDbList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFilterDbList(this);
		}
	}

	[RuleVersion(0)]
	public FilterDbListContext filterDbList() {
		FilterDbListContext _localctx = new FilterDbListContext(Context, State);
		EnterRule(_localctx, 468, RULE_filterDbList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4045;
			schemaRef();
			State = 4050;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 4046;
				Match(COMMA_SYMBOL);
				State = 4047;
				schemaRef();
				}
				}
				State = 4052;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterTableListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FilterTableRefContext[] filterTableRef() {
			return GetRuleContexts<FilterTableRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterTableRefContext filterTableRef(int i) {
			return GetRuleContext<FilterTableRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public FilterTableListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterTableList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFilterTableList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFilterTableList(this);
		}
	}

	[RuleVersion(0)]
	public FilterTableListContext filterTableList() {
		FilterTableListContext _localctx = new FilterTableListContext(Context, State);
		EnterRule(_localctx, 470, RULE_filterTableList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4053;
			filterTableRef();
			State = 4058;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 4054;
				Match(COMMA_SYMBOL);
				State = 4055;
				filterTableRef();
				}
				}
				State = 4060;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterStringListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FilterWildDbTableStringContext[] filterWildDbTableString() {
			return GetRuleContexts<FilterWildDbTableStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterWildDbTableStringContext filterWildDbTableString(int i) {
			return GetRuleContext<FilterWildDbTableStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public FilterStringListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterStringList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFilterStringList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFilterStringList(this);
		}
	}

	[RuleVersion(0)]
	public FilterStringListContext filterStringList() {
		FilterStringListContext _localctx = new FilterStringListContext(Context, State);
		EnterRule(_localctx, 472, RULE_filterStringList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4061;
			filterWildDbTableString();
			State = 4066;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 4062;
				Match(COMMA_SYMBOL);
				State = 4063;
				filterWildDbTableString();
				}
				}
				State = 4068;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterWildDbTableStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextStringNoLinebreakContext textStringNoLinebreak() {
			return GetRuleContext<TextStringNoLinebreakContext>(0);
		}
		public FilterWildDbTableStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterWildDbTableString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFilterWildDbTableString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFilterWildDbTableString(this);
		}
	}

	[RuleVersion(0)]
	public FilterWildDbTableStringContext filterWildDbTableString() {
		FilterWildDbTableStringContext _localctx = new FilterWildDbTableStringContext(Context, State);
		EnterRule(_localctx, 474, RULE_filterWildDbTableString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4069;
			textStringNoLinebreak();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterDbPairListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SchemaIdentifierPairContext[] schemaIdentifierPair() {
			return GetRuleContexts<SchemaIdentifierPairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SchemaIdentifierPairContext schemaIdentifierPair(int i) {
			return GetRuleContext<SchemaIdentifierPairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public FilterDbPairListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterDbPairList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFilterDbPairList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFilterDbPairList(this);
		}
	}

	[RuleVersion(0)]
	public FilterDbPairListContext filterDbPairList() {
		FilterDbPairListContext _localctx = new FilterDbPairListContext(Context, State);
		EnterRule(_localctx, 476, RULE_filterDbPairList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4071;
			schemaIdentifierPair();
			State = 4076;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 4072;
				Match(COMMA_SYMBOL);
				State = 4073;
				schemaIdentifierPair();
				}
				}
				State = 4078;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SlaveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_SYMBOL() { return GetToken(MySqlParser.START_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE_SYMBOL() { return GetToken(MySqlParser.SLAVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SlaveConnectionOptionsContext slaveConnectionOptions() {
			return GetRuleContext<SlaveConnectionOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SlaveThreadOptionsContext slaveThreadOptions() {
			return GetRuleContext<SlaveThreadOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL_SYMBOL() { return GetToken(MySqlParser.UNTIL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SlaveUntilOptionsContext slaveUntilOptions() {
			return GetRuleContext<SlaveUntilOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChannelContext channel() {
			return GetRuleContext<ChannelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP_SYMBOL() { return GetToken(MySqlParser.STOP_SYMBOL, 0); }
		public SlaveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slave; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSlave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSlave(this);
		}
	}

	[RuleVersion(0)]
	public SlaveContext slave() {
		SlaveContext _localctx = new SlaveContext(Context, State);
		EnterRule(_localctx, 478, RULE_slave);
		try {
			State = 4100;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case START_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4079;
				Match(START_SYMBOL);
				State = 4080;
				Match(SLAVE_SYMBOL);
				State = 4082;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,465,Context) ) {
				case 1:
					{
					State = 4081;
					slaveThreadOptions();
					}
					break;
				}
				State = 4086;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,466,Context) ) {
				case 1:
					{
					State = 4084;
					Match(UNTIL_SYMBOL);
					State = 4085;
					slaveUntilOptions();
					}
					break;
				}
				State = 4088;
				slaveConnectionOptions();
				State = 4090;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,467,Context) ) {
				case 1:
					{
					State = 4089;
					channel();
					}
					break;
				}
				}
				break;
			case STOP_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4092;
				Match(STOP_SYMBOL);
				State = 4093;
				Match(SLAVE_SYMBOL);
				State = 4095;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,468,Context) ) {
				case 1:
					{
					State = 4094;
					slaveThreadOptions();
					}
					break;
				}
				State = 4098;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,469,Context) ) {
				case 1:
					{
					State = 4097;
					channel();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SlaveUntilOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MasterFileDefContext[] masterFileDef() {
			return GetRuleContexts<MasterFileDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MasterFileDefContext masterFileDef(int i) {
			return GetRuleContext<MasterFileDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_AFTER_MTS_GAPS_SYMBOL() { return GetToken(MySqlParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BEFORE_GTIDS_SYMBOL() { return GetToken(MySqlParser.SQL_BEFORE_GTIDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_AFTER_GTIDS_SYMBOL() { return GetToken(MySqlParser.SQL_AFTER_GTIDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public SlaveUntilOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slaveUntilOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSlaveUntilOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSlaveUntilOptions(this);
		}
	}

	[RuleVersion(0)]
	public SlaveUntilOptionsContext slaveUntilOptions() {
		SlaveUntilOptionsContext _localctx = new SlaveUntilOptionsContext(Context, State);
		EnterRule(_localctx, 480, RULE_slaveUntilOptions);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4109;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,471,Context) ) {
			case 1:
				{
				State = 4102;
				masterFileDef();
				}
				break;
			case 2:
				{
				State = 4103;
				if (!(serverVersion >= 50606)) throw new FailedPredicateException(this, "serverVersion >= 50606");
				State = 4104;
				_la = TokenStream.LA(1);
				if ( !(_la==SQL_AFTER_GTIDS_SYMBOL || _la==SQL_BEFORE_GTIDS_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4105;
				Match(EQUAL_OPERATOR);
				State = 4106;
				textString();
				}
				break;
			case 3:
				{
				State = 4107;
				if (!(serverVersion >= 50606)) throw new FailedPredicateException(this, "serverVersion >= 50606");
				State = 4108;
				Match(SQL_AFTER_MTS_GAPS_SYMBOL);
				}
				break;
			}
			State = 4115;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,472,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 4111;
					Match(COMMA_SYMBOL);
					State = 4112;
					masterFileDef();
					}
					} 
				}
				State = 4117;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,472,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SlaveConnectionOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySqlParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_OPERATOR() { return GetTokens(MySqlParser.EQUAL_OPERATOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR(int i) {
			return GetToken(MySqlParser.EQUAL_OPERATOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext[] textString() {
			return GetRuleContexts<TextStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString(int i) {
			return GetRuleContext<TextStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySqlParser.PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_AUTH_SYMBOL() { return GetToken(MySqlParser.DEFAULT_AUTH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN_DIR_SYMBOL() { return GetToken(MySqlParser.PLUGIN_DIR_SYMBOL, 0); }
		public SlaveConnectionOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slaveConnectionOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSlaveConnectionOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSlaveConnectionOptions(this);
		}
	}

	[RuleVersion(0)]
	public SlaveConnectionOptionsContext slaveConnectionOptions() {
		SlaveConnectionOptionsContext _localctx = new SlaveConnectionOptionsContext(Context, State);
		EnterRule(_localctx, 482, RULE_slaveConnectionOptions);
		try {
			State = 4140;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,477,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4118;
				if (!(serverVersion >= 50604)) throw new FailedPredicateException(this, "serverVersion >= 50604");
				State = 4122;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,473,Context) ) {
				case 1:
					{
					State = 4119;
					Match(USER_SYMBOL);
					State = 4120;
					Match(EQUAL_OPERATOR);
					State = 4121;
					textString();
					}
					break;
				}
				State = 4127;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,474,Context) ) {
				case 1:
					{
					State = 4124;
					Match(PASSWORD_SYMBOL);
					State = 4125;
					Match(EQUAL_OPERATOR);
					State = 4126;
					textString();
					}
					break;
				}
				State = 4132;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,475,Context) ) {
				case 1:
					{
					State = 4129;
					Match(DEFAULT_AUTH_SYMBOL);
					State = 4130;
					Match(EQUAL_OPERATOR);
					State = 4131;
					textString();
					}
					break;
				}
				State = 4137;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,476,Context) ) {
				case 1:
					{
					State = 4134;
					Match(PLUGIN_DIR_SYMBOL);
					State = 4135;
					Match(EQUAL_OPERATOR);
					State = 4136;
					textString();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SlaveThreadOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SlaveThreadOptionContext[] slaveThreadOption() {
			return GetRuleContexts<SlaveThreadOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SlaveThreadOptionContext slaveThreadOption(int i) {
			return GetRuleContext<SlaveThreadOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public SlaveThreadOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slaveThreadOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSlaveThreadOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSlaveThreadOptions(this);
		}
	}

	[RuleVersion(0)]
	public SlaveThreadOptionsContext slaveThreadOptions() {
		SlaveThreadOptionsContext _localctx = new SlaveThreadOptionsContext(Context, State);
		EnterRule(_localctx, 484, RULE_slaveThreadOptions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4142;
			slaveThreadOption();
			State = 4147;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,478,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 4143;
					Match(COMMA_SYMBOL);
					State = 4144;
					slaveThreadOption();
					}
					} 
				}
				State = 4149;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,478,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SlaveThreadOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_THREAD_SYMBOL() { return GetToken(MySqlParser.RELAY_THREAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_THREAD_SYMBOL() { return GetToken(MySqlParser.SQL_THREAD_SYMBOL, 0); }
		public SlaveThreadOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slaveThreadOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSlaveThreadOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSlaveThreadOption(this);
		}
	}

	[RuleVersion(0)]
	public SlaveThreadOptionContext slaveThreadOption() {
		SlaveThreadOptionContext _localctx = new SlaveThreadOptionContext(Context, State);
		EnterRule(_localctx, 486, RULE_slaveThreadOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4150;
			_la = TokenStream.LA(1);
			if ( !(_la==RELAY_THREAD_SYMBOL || _la==SQL_THREAD_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupReplicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_REPLICATION_SYMBOL() { return GetToken(MySqlParser.GROUP_REPLICATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_SYMBOL() { return GetToken(MySqlParser.START_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP_SYMBOL() { return GetToken(MySqlParser.STOP_SYMBOL, 0); }
		public GroupReplicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupReplication; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGroupReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGroupReplication(this);
		}
	}

	[RuleVersion(0)]
	public GroupReplicationContext groupReplication() {
		GroupReplicationContext _localctx = new GroupReplicationContext(Context, State);
		EnterRule(_localctx, 488, RULE_groupReplication);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4152;
			_la = TokenStream.LA(1);
			if ( !(_la==START_SYMBOL || _la==STOP_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4153;
			Match(GROUP_REPLICATION_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreparedStatementContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySqlParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE_SYMBOL() { return GetToken(MySqlParser.PREPARE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserVariableContext userVariable() {
			return GetRuleContext<UserVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExecuteStatementContext executeStatement() {
			return GetRuleContext<ExecuteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEALLOCATE_SYMBOL() { return GetToken(MySqlParser.DEALLOCATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP_SYMBOL() { return GetToken(MySqlParser.DROP_SYMBOL, 0); }
		public PreparedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preparedStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPreparedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPreparedStatement(this);
		}
	}

	[RuleVersion(0)]
	public PreparedStatementContext preparedStatement() {
		PreparedStatementContext _localctx = new PreparedStatementContext(Context, State);
		EnterRule(_localctx, 490, RULE_preparedStatement);
		int _la;
		try {
			State = 4166;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PREPARE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4155;
				_localctx.type = Match(PREPARE_SYMBOL);
				State = 4156;
				identifier();
				State = 4157;
				Match(FROM_SYMBOL);
				State = 4160;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,479,Context) ) {
				case 1:
					{
					State = 4158;
					textLiteral();
					}
					break;
				case 2:
					{
					State = 4159;
					userVariable();
					}
					break;
				}
				}
				break;
			case EXECUTE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4162;
				executeStatement();
				}
				break;
			case DEALLOCATE_SYMBOL:
			case DROP_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4163;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEALLOCATE_SYMBOL || _la==DROP_SYMBOL) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4164;
				Match(PREPARE_SYMBOL);
				State = 4165;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecuteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE_SYMBOL() { return GetToken(MySqlParser.EXECUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING_SYMBOL() { return GetToken(MySqlParser.USING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExecuteVarListContext executeVarList() {
			return GetRuleContext<ExecuteVarListContext>(0);
		}
		public ExecuteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExecuteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExecuteStatement(this);
		}
	}

	[RuleVersion(0)]
	public ExecuteStatementContext executeStatement() {
		ExecuteStatementContext _localctx = new ExecuteStatementContext(Context, State);
		EnterRule(_localctx, 492, RULE_executeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4168;
			Match(EXECUTE_SYMBOL);
			State = 4169;
			identifier();
			State = 4172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING_SYMBOL) {
				{
				State = 4170;
				Match(USING_SYMBOL);
				State = 4171;
				executeVarList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecuteVarListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserVariableContext[] userVariable() {
			return GetRuleContexts<UserVariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserVariableContext userVariable(int i) {
			return GetRuleContext<UserVariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public ExecuteVarListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executeVarList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExecuteVarList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExecuteVarList(this);
		}
	}

	[RuleVersion(0)]
	public ExecuteVarListContext executeVarList() {
		ExecuteVarListContext _localctx = new ExecuteVarListContext(Context, State);
		EnterRule(_localctx, 494, RULE_executeVarList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4174;
			userVariable();
			State = 4179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 4175;
				Match(COMMA_SYMBOL);
				State = 4176;
				userVariable();
				}
				}
				State = 4181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloneStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLONE_SYMBOL() { return GetToken(MySqlParser.CLONE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySqlParser.LOCAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_SYMBOL() { return GetToken(MySqlParser.DATA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY_SYMBOL() { return GetToken(MySqlParser.DIRECTORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOTE_SYMBOL() { return GetToken(MySqlParser.REMOTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANCE_SYMBOL() { return GetToken(MySqlParser.INSTANCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySqlParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_SYMBOL() { return GetToken(MySqlParser.COLON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySqlParser.IDENTIFIED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySqlParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySqlParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_SYMBOL() { return GetToken(MySqlParser.REPLICATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataDirSSLContext dataDirSSL() {
			return GetRuleContext<DataDirSSLContext>(0);
		}
		public CloneStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cloneStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCloneStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCloneStatement(this);
		}
	}

	[RuleVersion(0)]
	public CloneStatementContext cloneStatement() {
		CloneStatementContext _localctx = new CloneStatementContext(Context, State);
		EnterRule(_localctx, 496, RULE_cloneStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4182;
			Match(CLONE_SYMBOL);
			State = 4207;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,486,Context) ) {
			case 1:
				{
				State = 4183;
				Match(LOCAL_SYMBOL);
				State = 4184;
				Match(DATA_SYMBOL);
				State = 4185;
				Match(DIRECTORY_SYMBOL);
				State = 4187;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,483,Context) ) {
				case 1:
					{
					State = 4186;
					equal();
					}
					break;
				}
				State = 4189;
				textStringLiteral();
				}
				break;
			case 2:
				{
				State = 4190;
				Match(REMOTE_SYMBOL);
				State = 4193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					State = 4191;
					Match(FOR_SYMBOL);
					State = 4192;
					Match(REPLICATION_SYMBOL);
					}
				}

				}
				break;
			case 3:
				{
				State = 4195;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 4196;
				Match(INSTANCE_SYMBOL);
				State = 4197;
				Match(FROM_SYMBOL);
				State = 4198;
				user();
				State = 4199;
				Match(COLON_SYMBOL);
				State = 4200;
				ulong_number();
				State = 4201;
				Match(IDENTIFIED_SYMBOL);
				State = 4202;
				Match(BY_SYMBOL);
				State = 4203;
				textStringLiteral();
				State = 4205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DATA_SYMBOL || _la==REQUIRE_SYMBOL) {
					{
					State = 4204;
					dataDirSSL();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataDirSSLContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SslContext ssl() {
			return GetRuleContext<SslContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_SYMBOL() { return GetToken(MySqlParser.DATA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY_SYMBOL() { return GetToken(MySqlParser.DIRECTORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		public DataDirSSLContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataDirSSL; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDataDirSSL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDataDirSSL(this);
		}
	}

	[RuleVersion(0)]
	public DataDirSSLContext dataDirSSL() {
		DataDirSSLContext _localctx = new DataDirSSLContext(Context, State);
		EnterRule(_localctx, 498, RULE_dataDirSSL);
		int _la;
		try {
			State = 4219;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REQUIRE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4209;
				ssl();
				}
				break;
			case DATA_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4210;
				Match(DATA_SYMBOL);
				State = 4211;
				Match(DIRECTORY_SYMBOL);
				State = 4213;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,487,Context) ) {
				case 1:
					{
					State = 4212;
					equal();
					}
					break;
				}
				State = 4215;
				textStringLiteral();
				State = 4217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REQUIRE_SYMBOL) {
					{
					State = 4216;
					ssl();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SslContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE_SYMBOL() { return GetToken(MySqlParser.REQUIRE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SSL_SYMBOL() { return GetToken(MySqlParser.SSL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_SYMBOL() { return GetToken(MySqlParser.NO_SYMBOL, 0); }
		public SslContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ssl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSsl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSsl(this);
		}
	}

	[RuleVersion(0)]
	public SslContext ssl() {
		SslContext _localctx = new SslContext(Context, State);
		EnterRule(_localctx, 500, RULE_ssl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4221;
			Match(REQUIRE_SYMBOL);
			State = 4223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NO_SYMBOL) {
				{
				State = 4222;
				Match(NO_SYMBOL);
				}
			}

			State = 4225;
			Match(SSL_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccountManagementStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterUserContext alterUser() {
			return GetRuleContext<AlterUserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateUserContext createUser() {
			return GetRuleContext<CreateUserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropUserContext dropUser() {
			return GetRuleContext<DropUserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrantContext grant() {
			return GetRuleContext<GrantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RenameUserContext renameUser() {
			return GetRuleContext<RenameUserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RevokeContext revoke() {
			return GetRuleContext<RevokeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetRoleContext setRole() {
			return GetRuleContext<SetRoleContext>(0);
		}
		public AccountManagementStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accountManagementStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAccountManagementStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAccountManagementStatement(this);
		}
	}

	[RuleVersion(0)]
	public AccountManagementStatementContext accountManagementStatement() {
		AccountManagementStatementContext _localctx = new AccountManagementStatementContext(Context, State);
		EnterRule(_localctx, 502, RULE_accountManagementStatement);
		try {
			State = 4236;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,491,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4227;
				if (!(serverVersion >= 50606)) throw new FailedPredicateException(this, "serverVersion >= 50606");
				State = 4228;
				alterUser();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4229;
				createUser();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4230;
				dropUser();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4231;
				grant();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4232;
				renameUser();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4233;
				revoke();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4234;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 4235;
				setRole();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterUserContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER_SYMBOL() { return GetToken(MySqlParser.ALTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySqlParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AlterUserTailContext alterUserTail() {
			return GetRuleContext<AlterUserTailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public AlterUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterUser; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterUser(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterUser(this);
		}
	}

	[RuleVersion(0)]
	public AlterUserContext alterUser() {
		AlterUserContext _localctx = new AlterUserContext(Context, State);
		EnterRule(_localctx, 504, RULE_alterUser);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4238;
			Match(ALTER_SYMBOL);
			State = 4239;
			Match(USER_SYMBOL);
			State = 4242;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,492,Context) ) {
			case 1:
				{
				State = 4240;
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				State = 4241;
				ifExists();
				}
				break;
			}
			State = 4244;
			alterUserTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterUserTailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateUserTailContext createUserTail() {
			return GetRuleContext<CreateUserTailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateUserListContext createUserList() {
			return GetRuleContext<CreateUserListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterUserListContext alterUserList() {
			return GetRuleContext<AlterUserListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySqlParser.IDENTIFIED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySqlParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplacePasswordContext replacePassword() {
			return GetRuleContext<ReplacePasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RetainCurrentPasswordContext retainCurrentPassword() {
			return GetRuleContext<RetainCurrentPasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DiscardOldPasswordContext discardOldPassword() {
			return GetRuleContext<DiscardOldPasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE_SYMBOL() { return GetToken(MySqlParser.ROLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySqlParser.ALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE_SYMBOL() { return GetToken(MySqlParser.NONE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleListContext roleList() {
			return GetRuleContext<RoleListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANDOM_SYMBOL() { return GetToken(MySqlParser.RANDOM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySqlParser.PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySqlParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAILED_LOGIN_ATTEMPTS_SYMBOL() { return GetToken(MySqlParser.FAILED_LOGIN_ATTEMPTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_LOCK_TIME_SYMBOL() { return GetToken(MySqlParser.PASSWORD_LOCK_TIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED_SYMBOL() { return GetToken(MySqlParser.UNBOUNDED_SYMBOL, 0); }
		public AlterUserTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterUserTail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterUserTail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterUserTail(this);
		}
	}

	[RuleVersion(0)]
	public AlterUserTailContext alterUserTail() {
		AlterUserTailContext _localctx = new AlterUserTailContext(Context, State);
		EnterRule(_localctx, 506, RULE_alterUserTail);
		int _la;
		try {
			State = 4300;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,500,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4250;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,493,Context) ) {
				case 1:
					{
					State = 4246;
					if (!(serverVersion < 80014)) throw new FailedPredicateException(this, "serverVersion < 80014");
					State = 4247;
					createUserList();
					}
					break;
				case 2:
					{
					State = 4248;
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					State = 4249;
					alterUserList();
					}
					break;
				}
				State = 4252;
				createUserTail();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4254;
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				State = 4255;
				user();
				State = 4256;
				Match(IDENTIFIED_SYMBOL);
				State = 4257;
				Match(BY_SYMBOL);
				State = 4258;
				textString();
				State = 4261;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,494,Context) ) {
				case 1:
					{
					State = 4259;
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					State = 4260;
					replacePassword();
					}
					break;
				}
				State = 4265;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,495,Context) ) {
				case 1:
					{
					State = 4263;
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					State = 4264;
					retainCurrentPassword();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4267;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 4268;
				user();
				State = 4269;
				discardOldPassword();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4271;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 4272;
				user();
				State = 4273;
				Match(DEFAULT_SYMBOL);
				State = 4274;
				Match(ROLE_SYMBOL);
				State = 4278;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,496,Context) ) {
				case 1:
					{
					State = 4275;
					Match(ALL_SYMBOL);
					}
					break;
				case 2:
					{
					State = 4276;
					Match(NONE_SYMBOL);
					}
					break;
				case 3:
					{
					State = 4277;
					roleList();
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4280;
				if (!(serverVersion >= 80018)) throw new FailedPredicateException(this, "serverVersion >= 80018");
				State = 4281;
				user();
				State = 4282;
				Match(IDENTIFIED_SYMBOL);
				State = 4285;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					State = 4283;
					Match(WITH_SYMBOL);
					State = 4284;
					textOrIdentifier();
					}
				}

				State = 4287;
				Match(BY_SYMBOL);
				State = 4288;
				Match(RANDOM_SYMBOL);
				State = 4289;
				Match(PASSWORD_SYMBOL);
				State = 4291;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RETAIN_SYMBOL) {
					{
					State = 4290;
					retainCurrentPassword();
					}
				}

				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4293;
				Match(FAILED_LOGIN_ATTEMPTS_SYMBOL);
				State = 4294;
				real_ulong_number();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4295;
				Match(PASSWORD_LOCK_TIME_SYMBOL);
				State = 4298;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INT_NUMBER:
				case LONG_NUMBER:
				case ULONGLONG_NUMBER:
				case HEX_NUMBER:
					{
					State = 4296;
					real_ulong_number();
					}
					break;
				case UNBOUNDED_SYMBOL:
					{
					State = 4297;
					Match(UNBOUNDED_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySqlParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesesContext parentheses() {
			return GetRuleContext<ParenthesesContext>(0);
		}
		public UserFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUserFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUserFunction(this);
		}
	}

	[RuleVersion(0)]
	public UserFunctionContext userFunction() {
		UserFunctionContext _localctx = new UserFunctionContext(Context, State);
		EnterRule(_localctx, 508, RULE_userFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4302;
			Match(USER_SYMBOL);
			State = 4303;
			parentheses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUserContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySqlParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySqlParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CreateUserListContext createUserList() {
			return GetRuleContext<CreateUserListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultRoleClauseContext defaultRoleClause() {
			return GetRuleContext<DefaultRoleClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateUserTailContext createUserTail() {
			return GetRuleContext<CreateUserTailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public CreateUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUser; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateUser(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateUser(this);
		}
	}

	[RuleVersion(0)]
	public CreateUserContext createUser() {
		CreateUserContext _localctx = new CreateUserContext(Context, State);
		EnterRule(_localctx, 510, RULE_createUser);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4305;
			Match(CREATE_SYMBOL);
			State = 4306;
			Match(USER_SYMBOL);
			State = 4310;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,501,Context) ) {
			case 1:
				{
				State = 4307;
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				State = 4308;
				ifNotExists();
				}
				break;
			case 2:
				{
				}
				break;
			}
			State = 4312;
			createUserList();
			State = 4313;
			defaultRoleClause();
			State = 4314;
			createUserTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUserTailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RequireClauseContext requireClause() {
			return GetRuleContext<RequireClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConnectOptionsContext connectOptions() {
			return GetRuleContext<ConnectOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccountLockPasswordExpireOptionsContext[] accountLockPasswordExpireOptions() {
			return GetRuleContexts<AccountLockPasswordExpireOptionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccountLockPasswordExpireOptionsContext accountLockPasswordExpireOptions(int i) {
			return GetRuleContext<AccountLockPasswordExpireOptionsContext>(i);
		}
		public CreateUserTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUserTail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateUserTail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateUserTail(this);
		}
	}

	[RuleVersion(0)]
	public CreateUserTailContext createUserTail() {
		CreateUserTailContext _localctx = new CreateUserTailContext(Context, State);
		EnterRule(_localctx, 512, RULE_createUserTail);
		int _la;
		try {
			State = 4330;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,505,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4316;
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				State = 4318;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REQUIRE_SYMBOL) {
					{
					State = 4317;
					requireClause();
					}
				}

				State = 4321;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					State = 4320;
					connectOptions();
					}
				}

				State = 4326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ACCOUNT_SYMBOL || _la==PASSWORD_SYMBOL) {
					{
					{
					State = 4323;
					accountLockPasswordExpireOptions();
					}
					}
					State = 4328;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultRoleClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE_SYMBOL() { return GetToken(MySqlParser.ROLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleListContext roleList() {
			return GetRuleContext<RoleListContext>(0);
		}
		public DefaultRoleClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultRoleClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDefaultRoleClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDefaultRoleClause(this);
		}
	}

	[RuleVersion(0)]
	public DefaultRoleClauseContext defaultRoleClause() {
		DefaultRoleClauseContext _localctx = new DefaultRoleClauseContext(Context, State);
		EnterRule(_localctx, 514, RULE_defaultRoleClause);
		try {
			State = 4339;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,507,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4332;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 4336;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,506,Context) ) {
				case 1:
					{
					State = 4333;
					Match(DEFAULT_SYMBOL);
					State = 4334;
					Match(ROLE_SYMBOL);
					State = 4335;
					roleList();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequireClauseContext : ParserRuleContext {
		public IToken option;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE_SYMBOL() { return GetToken(MySqlParser.REQUIRE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequireListContext requireList() {
			return GetRuleContext<RequireListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SSL_SYMBOL() { return GetToken(MySqlParser.SSL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode X509_SYMBOL() { return GetToken(MySqlParser.X509_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE_SYMBOL() { return GetToken(MySqlParser.NONE_SYMBOL, 0); }
		public RequireClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requireClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRequireClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRequireClause(this);
		}
	}

	[RuleVersion(0)]
	public RequireClauseContext requireClause() {
		RequireClauseContext _localctx = new RequireClauseContext(Context, State);
		EnterRule(_localctx, 516, RULE_requireClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4341;
			Match(REQUIRE_SYMBOL);
			State = 4344;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CIPHER_SYMBOL:
			case ISSUER_SYMBOL:
			case SUBJECT_SYMBOL:
				{
				State = 4342;
				requireList();
				}
				break;
			case NONE_SYMBOL:
			case SSL_SYMBOL:
			case X509_SYMBOL:
				{
				State = 4343;
				_localctx.option = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NONE_SYMBOL || _la==SSL_SYMBOL || _la==X509_SYMBOL) ) {
					_localctx.option = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConnectOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySqlParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAX_QUERIES_PER_HOUR_SYMBOL() { return GetTokens(MySqlParser.MAX_QUERIES_PER_HOUR_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_QUERIES_PER_HOUR_SYMBOL(int i) {
			return GetToken(MySqlParser.MAX_QUERIES_PER_HOUR_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext[] ulong_number() {
			return GetRuleContexts<Ulong_numberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number(int i) {
			return GetRuleContext<Ulong_numberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAX_UPDATES_PER_HOUR_SYMBOL() { return GetTokens(MySqlParser.MAX_UPDATES_PER_HOUR_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_UPDATES_PER_HOUR_SYMBOL(int i) {
			return GetToken(MySqlParser.MAX_UPDATES_PER_HOUR_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return GetTokens(MySqlParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_CONNECTIONS_PER_HOUR_SYMBOL(int i) {
			return GetToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAX_USER_CONNECTIONS_SYMBOL() { return GetTokens(MySqlParser.MAX_USER_CONNECTIONS_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_USER_CONNECTIONS_SYMBOL(int i) {
			return GetToken(MySqlParser.MAX_USER_CONNECTIONS_SYMBOL, i);
		}
		public ConnectOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_connectOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterConnectOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitConnectOptions(this);
		}
	}

	[RuleVersion(0)]
	public ConnectOptionsContext connectOptions() {
		ConnectOptionsContext _localctx = new ConnectOptionsContext(Context, State);
		EnterRule(_localctx, 518, RULE_connectOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4346;
			Match(WITH_SYMBOL);
			State = 4355;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 4355;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case MAX_QUERIES_PER_HOUR_SYMBOL:
					{
					State = 4347;
					Match(MAX_QUERIES_PER_HOUR_SYMBOL);
					State = 4348;
					ulong_number();
					}
					break;
				case MAX_UPDATES_PER_HOUR_SYMBOL:
					{
					State = 4349;
					Match(MAX_UPDATES_PER_HOUR_SYMBOL);
					State = 4350;
					ulong_number();
					}
					break;
				case MAX_CONNECTIONS_PER_HOUR_SYMBOL:
					{
					State = 4351;
					Match(MAX_CONNECTIONS_PER_HOUR_SYMBOL);
					State = 4352;
					ulong_number();
					}
					break;
				case MAX_USER_CONNECTIONS_SYMBOL:
					{
					State = 4353;
					Match(MAX_USER_CONNECTIONS_SYMBOL);
					State = 4354;
					ulong_number();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 4357;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (MAX_CONNECTIONS_PER_HOUR_SYMBOL - 321)) | (1L << (MAX_QUERIES_PER_HOUR_SYMBOL - 321)) | (1L << (MAX_UPDATES_PER_HOUR_SYMBOL - 321)) | (1L << (MAX_USER_CONNECTIONS_SYMBOL - 321)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccountLockPasswordExpireOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCOUNT_SYMBOL() { return GetToken(MySqlParser.ACCOUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK_SYMBOL() { return GetToken(MySqlParser.LOCK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOCK_SYMBOL() { return GetToken(MySqlParser.UNLOCK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySqlParser.PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPIRE_SYMBOL() { return GetToken(MySqlParser.EXPIRE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HISTORY_SYMBOL() { return GetToken(MySqlParser.HISTORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REUSE_SYMBOL() { return GetToken(MySqlParser.REUSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL_SYMBOL() { return GetToken(MySqlParser.INTERVAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE_SYMBOL() { return GetToken(MySqlParser.REQUIRE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_SYMBOL() { return GetToken(MySqlParser.CURRENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_SYMBOL() { return GetToken(MySqlParser.DAY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEVER_SYMBOL() { return GetToken(MySqlParser.NEVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL_SYMBOL() { return GetToken(MySqlParser.OPTIONAL_SYMBOL, 0); }
		public AccountLockPasswordExpireOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accountLockPasswordExpireOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAccountLockPasswordExpireOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAccountLockPasswordExpireOptions(this);
		}
	}

	[RuleVersion(0)]
	public AccountLockPasswordExpireOptionsContext accountLockPasswordExpireOptions() {
		AccountLockPasswordExpireOptionsContext _localctx = new AccountLockPasswordExpireOptionsContext(Context, State);
		EnterRule(_localctx, 520, RULE_accountLockPasswordExpireOptions);
		int _la;
		try {
			State = 4392;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACCOUNT_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4359;
				Match(ACCOUNT_SYMBOL);
				State = 4360;
				_la = TokenStream.LA(1);
				if ( !(_la==LOCK_SYMBOL || _la==UNLOCK_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case PASSWORD_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4361;
				Match(PASSWORD_SYMBOL);
				State = 4390;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,515,Context) ) {
				case 1:
					{
					State = 4362;
					Match(EXPIRE_SYMBOL);
					State = 4369;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case INTERVAL_SYMBOL:
						{
						State = 4363;
						Match(INTERVAL_SYMBOL);
						State = 4364;
						real_ulong_number();
						State = 4365;
						Match(DAY_SYMBOL);
						}
						break;
					case NEVER_SYMBOL:
						{
						State = 4367;
						Match(NEVER_SYMBOL);
						}
						break;
					case DEFAULT_SYMBOL:
						{
						State = 4368;
						Match(DEFAULT_SYMBOL);
						}
						break;
					case Eof:
					case ACCOUNT_SYMBOL:
					case PASSWORD_SYMBOL:
					case SEMICOLON_SYMBOL:
						break;
					default:
						break;
					}
					}
					break;
				case 2:
					{
					State = 4371;
					Match(HISTORY_SYMBOL);
					State = 4374;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case INT_NUMBER:
					case LONG_NUMBER:
					case ULONGLONG_NUMBER:
					case HEX_NUMBER:
						{
						State = 4372;
						real_ulong_number();
						}
						break;
					case DEFAULT_SYMBOL:
						{
						State = 4373;
						Match(DEFAULT_SYMBOL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case 3:
					{
					State = 4376;
					Match(REUSE_SYMBOL);
					State = 4377;
					Match(INTERVAL_SYMBOL);
					State = 4382;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case INT_NUMBER:
					case LONG_NUMBER:
					case ULONGLONG_NUMBER:
					case HEX_NUMBER:
						{
						State = 4378;
						real_ulong_number();
						State = 4379;
						Match(DAY_SYMBOL);
						}
						break;
					case DEFAULT_SYMBOL:
						{
						State = 4381;
						Match(DEFAULT_SYMBOL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case 4:
					{
					State = 4384;
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					State = 4385;
					Match(REQUIRE_SYMBOL);
					State = 4386;
					Match(CURRENT_SYMBOL);
					State = 4388;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DEFAULT_SYMBOL || _la==OPTIONAL_SYMBOL) {
						{
						State = 4387;
						_la = TokenStream.LA(1);
						if ( !(_la==DEFAULT_SYMBOL || _la==OPTIONAL_SYMBOL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropUserContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP_SYMBOL() { return GetToken(MySqlParser.DROP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySqlParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserListContext userList() {
			return GetRuleContext<UserListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropUser; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropUser(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropUser(this);
		}
	}

	[RuleVersion(0)]
	public DropUserContext dropUser() {
		DropUserContext _localctx = new DropUserContext(Context, State);
		EnterRule(_localctx, 522, RULE_dropUser);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4394;
			Match(DROP_SYMBOL);
			State = 4395;
			Match(USER_SYMBOL);
			State = 4398;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,517,Context) ) {
			case 1:
				{
				State = 4396;
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				State = 4397;
				ifExists();
				}
				break;
			}
			State = 4400;
			userList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GRANT_SYMBOL() { return GetTokens(MySqlParser.GRANT_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT_SYMBOL(int i) {
			return GetToken(MySqlParser.GRANT_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoleOrPrivilegesListContext roleOrPrivilegesList() {
			return GetRuleContext<RoleOrPrivilegesListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SYMBOL() { return GetToken(MySqlParser.TO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserListContext userList() {
			return GetRuleContext<UserListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySqlParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GrantIdentifierContext grantIdentifier() {
			return GetRuleContext<GrantIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrantTargetListContext grantTargetList() {
			return GetRuleContext<GrantTargetListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROXY_SYMBOL() { return GetToken(MySqlParser.PROXY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySqlParser.ALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySqlParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN_SYMBOL() { return GetToken(MySqlParser.ADMIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION_SYMBOL() { return GetToken(MySqlParser.OPTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AclTypeContext aclType() {
			return GetRuleContext<AclTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VersionedRequireClauseContext versionedRequireClause() {
			return GetRuleContext<VersionedRequireClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrantOptionsContext grantOptions() {
			return GetRuleContext<GrantOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrantAsContext grantAs() {
			return GetRuleContext<GrantAsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES_SYMBOL() { return GetToken(MySqlParser.PRIVILEGES_SYMBOL, 0); }
		public GrantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGrant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGrant(this);
		}
	}

	[RuleVersion(0)]
	public GrantContext grant() {
		GrantContext _localctx = new GrantContext(Context, State);
		EnterRule(_localctx, 524, RULE_grant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4402;
			Match(GRANT_SYMBOL);
			State = 4445;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,526,Context) ) {
			case 1:
				{
				State = 4403;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 4404;
				roleOrPrivilegesList();
				State = 4405;
				Match(TO_SYMBOL);
				State = 4406;
				userList();
				State = 4410;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					State = 4407;
					Match(WITH_SYMBOL);
					State = 4408;
					Match(ADMIN_SYMBOL);
					State = 4409;
					Match(OPTION_SYMBOL);
					}
				}

				}
				break;
			case 2:
				{
				State = 4417;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,520,Context) ) {
				case 1:
					{
					State = 4412;
					roleOrPrivilegesList();
					}
					break;
				case 2:
					{
					State = 4413;
					Match(ALL_SYMBOL);
					State = 4415;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==PRIVILEGES_SYMBOL) {
						{
						State = 4414;
						Match(PRIVILEGES_SYMBOL);
						}
					}

					}
					break;
				}
				State = 4419;
				Match(ON_SYMBOL);
				State = 4421;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,521,Context) ) {
				case 1:
					{
					State = 4420;
					aclType();
					}
					break;
				}
				State = 4423;
				grantIdentifier();
				State = 4424;
				Match(TO_SYMBOL);
				State = 4425;
				grantTargetList();
				State = 4427;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,522,Context) ) {
				case 1:
					{
					State = 4426;
					versionedRequireClause();
					}
					break;
				}
				State = 4430;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,523,Context) ) {
				case 1:
					{
					State = 4429;
					grantOptions();
					}
					break;
				}
				State = 4433;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS_SYMBOL) {
					{
					State = 4432;
					grantAs();
					}
				}

				}
				break;
			case 3:
				{
				State = 4435;
				Match(PROXY_SYMBOL);
				State = 4436;
				Match(ON_SYMBOL);
				State = 4437;
				user();
				State = 4438;
				Match(TO_SYMBOL);
				State = 4439;
				grantTargetList();
				State = 4443;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					State = 4440;
					Match(WITH_SYMBOL);
					State = 4441;
					Match(GRANT_SYMBOL);
					State = 4442;
					Match(OPTION_SYMBOL);
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantTargetListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateUserListContext createUserList() {
			return GetRuleContext<CreateUserListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserListContext userList() {
			return GetRuleContext<UserListContext>(0);
		}
		public GrantTargetListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantTargetList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGrantTargetList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGrantTargetList(this);
		}
	}

	[RuleVersion(0)]
	public GrantTargetListContext grantTargetList() {
		GrantTargetListContext _localctx = new GrantTargetListContext(Context, State);
		EnterRule(_localctx, 526, RULE_grantTargetList);
		try {
			State = 4451;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,527,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4447;
				if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
				State = 4448;
				createUserList();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4449;
				if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
				State = 4450;
				userList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySqlParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GrantOptionContext[] grantOption() {
			return GetRuleContexts<GrantOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrantOptionContext grantOption(int i) {
			return GetRuleContext<GrantOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT_SYMBOL() { return GetToken(MySqlParser.GRANT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION_SYMBOL() { return GetToken(MySqlParser.OPTION_SYMBOL, 0); }
		public GrantOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGrantOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGrantOptions(this);
		}
	}

	[RuleVersion(0)]
	public GrantOptionsContext grantOptions() {
		GrantOptionsContext _localctx = new GrantOptionsContext(Context, State);
		EnterRule(_localctx, 528, RULE_grantOptions);
		int _la;
		try {
			State = 4464;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,529,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4453;
				if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
				State = 4454;
				Match(WITH_SYMBOL);
				State = 4456;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 4455;
					grantOption();
					}
					}
					State = 4458;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==GRANT_SYMBOL || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (MAX_CONNECTIONS_PER_HOUR_SYMBOL - 321)) | (1L << (MAX_QUERIES_PER_HOUR_SYMBOL - 321)) | (1L << (MAX_UPDATES_PER_HOUR_SYMBOL - 321)) | (1L << (MAX_USER_CONNECTIONS_SYMBOL - 321)))) != 0) );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4460;
				if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
				State = 4461;
				Match(WITH_SYMBOL);
				State = 4462;
				Match(GRANT_SYMBOL);
				State = 4463;
				Match(OPTION_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptRoleListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT_SYMBOL() { return GetToken(MySqlParser.EXCEPT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleListContext roleList() {
			return GetRuleContext<RoleListContext>(0);
		}
		public ExceptRoleListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptRoleList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExceptRoleList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExceptRoleList(this);
		}
	}

	[RuleVersion(0)]
	public ExceptRoleListContext exceptRoleList() {
		ExceptRoleListContext _localctx = new ExceptRoleListContext(Context, State);
		EnterRule(_localctx, 530, RULE_exceptRoleList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4466;
			Match(EXCEPT_SYMBOL);
			State = 4467;
			roleList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithRolesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySqlParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE_SYMBOL() { return GetToken(MySqlParser.ROLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleListContext roleList() {
			return GetRuleContext<RoleListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySqlParser.ALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE_SYMBOL() { return GetToken(MySqlParser.NONE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExceptRoleListContext exceptRoleList() {
			return GetRuleContext<ExceptRoleListContext>(0);
		}
		public WithRolesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withRoles; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWithRoles(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWithRoles(this);
		}
	}

	[RuleVersion(0)]
	public WithRolesContext withRoles() {
		WithRolesContext _localctx = new WithRolesContext(Context, State);
		EnterRule(_localctx, 532, RULE_withRoles);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4469;
			Match(WITH_SYMBOL);
			State = 4470;
			Match(ROLE_SYMBOL);
			State = 4478;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,531,Context) ) {
			case 1:
				{
				State = 4471;
				roleList();
				}
				break;
			case 2:
				{
				State = 4472;
				Match(ALL_SYMBOL);
				State = 4474;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXCEPT_SYMBOL) {
					{
					State = 4473;
					exceptRoleList();
					}
				}

				}
				break;
			case 3:
				{
				State = 4476;
				Match(NONE_SYMBOL);
				}
				break;
			case 4:
				{
				State = 4477;
				Match(DEFAULT_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantAsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySqlParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySqlParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WithRolesContext withRoles() {
			return GetRuleContext<WithRolesContext>(0);
		}
		public GrantAsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantAs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGrantAs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGrantAs(this);
		}
	}

	[RuleVersion(0)]
	public GrantAsContext grantAs() {
		GrantAsContext _localctx = new GrantAsContext(Context, State);
		EnterRule(_localctx, 534, RULE_grantAs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4480;
			Match(AS_SYMBOL);
			State = 4481;
			Match(USER_SYMBOL);
			State = 4483;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH_SYMBOL) {
				{
				State = 4482;
				withRoles();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VersionedRequireClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RequireClauseContext requireClause() {
			return GetRuleContext<RequireClauseContext>(0);
		}
		public VersionedRequireClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_versionedRequireClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterVersionedRequireClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitVersionedRequireClause(this);
		}
	}

	[RuleVersion(0)]
	public VersionedRequireClauseContext versionedRequireClause() {
		VersionedRequireClauseContext _localctx = new VersionedRequireClauseContext(Context, State);
		EnterRule(_localctx, 536, RULE_versionedRequireClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4485;
			if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
			State = 4486;
			requireClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenameUserContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME_SYMBOL() { return GetToken(MySqlParser.RENAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySqlParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserContext[] user() {
			return GetRuleContexts<UserContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserContext user(int i) {
			return GetRuleContext<UserContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TO_SYMBOL() { return GetTokens(MySqlParser.TO_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SYMBOL(int i) {
			return GetToken(MySqlParser.TO_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public RenameUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renameUser; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRenameUser(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRenameUser(this);
		}
	}

	[RuleVersion(0)]
	public RenameUserContext renameUser() {
		RenameUserContext _localctx = new RenameUserContext(Context, State);
		EnterRule(_localctx, 538, RULE_renameUser);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4488;
			Match(RENAME_SYMBOL);
			State = 4489;
			Match(USER_SYMBOL);
			State = 4490;
			user();
			State = 4491;
			Match(TO_SYMBOL);
			State = 4492;
			user();
			State = 4500;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 4493;
				Match(COMMA_SYMBOL);
				State = 4494;
				user();
				State = 4495;
				Match(TO_SYMBOL);
				State = 4496;
				user();
				}
				}
				State = 4502;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RevokeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE_SYMBOL() { return GetToken(MySqlParser.REVOKE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleOrPrivilegesListContext roleOrPrivilegesList() {
			return GetRuleContext<RoleOrPrivilegesListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySqlParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserListContext userList() {
			return GetRuleContext<UserListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OnTypeToContext onTypeTo() {
			return GetRuleContext<OnTypeToContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySqlParser.ALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROXY_SYMBOL() { return GetToken(MySqlParser.PROXY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySqlParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrantIdentifierContext grantIdentifier() {
			return GetRuleContext<GrantIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL() { return GetToken(MySqlParser.COMMA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT_SYMBOL() { return GetToken(MySqlParser.GRANT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION_SYMBOL() { return GetToken(MySqlParser.OPTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES_SYMBOL() { return GetToken(MySqlParser.PRIVILEGES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AclTypeContext aclType() {
			return GetRuleContext<AclTypeContext>(0);
		}
		public RevokeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revoke; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRevoke(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRevoke(this);
		}
	}

	[RuleVersion(0)]
	public RevokeContext revoke() {
		RevokeContext _localctx = new RevokeContext(Context, State);
		EnterRule(_localctx, 540, RULE_revoke);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4503;
			Match(REVOKE_SYMBOL);
			State = 4537;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,537,Context) ) {
			case 1:
				{
				State = 4504;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 4505;
				roleOrPrivilegesList();
				State = 4506;
				Match(FROM_SYMBOL);
				State = 4507;
				userList();
				}
				break;
			case 2:
				{
				State = 4509;
				roleOrPrivilegesList();
				State = 4510;
				onTypeTo();
				State = 4511;
				Match(FROM_SYMBOL);
				State = 4512;
				userList();
				}
				break;
			case 3:
				{
				State = 4514;
				Match(ALL_SYMBOL);
				State = 4516;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,534,Context) ) {
				case 1:
					{
					State = 4515;
					Match(PRIVILEGES_SYMBOL);
					}
					break;
				}
				State = 4529;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,536,Context) ) {
				case 1:
					{
					State = 4518;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 4519;
					Match(ON_SYMBOL);
					State = 4521;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,535,Context) ) {
					case 1:
						{
						State = 4520;
						aclType();
						}
						break;
					}
					State = 4523;
					grantIdentifier();
					}
					break;
				case 2:
					{
					State = 4524;
					Match(COMMA_SYMBOL);
					State = 4525;
					Match(GRANT_SYMBOL);
					State = 4526;
					Match(OPTION_SYMBOL);
					State = 4527;
					Match(FROM_SYMBOL);
					State = 4528;
					userList();
					}
					break;
				}
				}
				break;
			case 4:
				{
				State = 4531;
				Match(PROXY_SYMBOL);
				State = 4532;
				Match(ON_SYMBOL);
				State = 4533;
				user();
				State = 4534;
				Match(FROM_SYMBOL);
				State = 4535;
				userList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnTypeToContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySqlParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GrantIdentifierContext grantIdentifier() {
			return GetRuleContext<GrantIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AclTypeContext aclType() {
			return GetRuleContext<AclTypeContext>(0);
		}
		public OnTypeToContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onTypeTo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOnTypeTo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOnTypeTo(this);
		}
	}

	[RuleVersion(0)]
	public OnTypeToContext onTypeTo() {
		OnTypeToContext _localctx = new OnTypeToContext(Context, State);
		EnterRule(_localctx, 542, RULE_onTypeTo);
		int _la;
		try {
			State = 4553;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,541,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4539;
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				State = 4540;
				Match(ON_SYMBOL);
				State = 4542;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,538,Context) ) {
				case 1:
					{
					State = 4541;
					aclType();
					}
					break;
				}
				State = 4544;
				grantIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4545;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 4551;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON_SYMBOL) {
					{
					State = 4546;
					Match(ON_SYMBOL);
					State = 4548;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,539,Context) ) {
					case 1:
						{
						State = 4547;
						aclType();
						}
						break;
					}
					State = 4550;
					grantIdentifier();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AclTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySqlParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION_SYMBOL() { return GetToken(MySqlParser.FUNCTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE_SYMBOL() { return GetToken(MySqlParser.PROCEDURE_SYMBOL, 0); }
		public AclTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aclType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAclType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAclType(this);
		}
	}

	[RuleVersion(0)]
	public AclTypeContext aclType() {
		AclTypeContext _localctx = new AclTypeContext(Context, State);
		EnterRule(_localctx, 544, RULE_aclType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4555;
			_la = TokenStream.LA(1);
			if ( !(_la==FUNCTION_SYMBOL || _la==PROCEDURE_SYMBOL || _la==TABLE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleOrPrivilegesListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RoleOrPrivilegeContext[] roleOrPrivilege() {
			return GetRuleContexts<RoleOrPrivilegeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoleOrPrivilegeContext roleOrPrivilege(int i) {
			return GetRuleContext<RoleOrPrivilegeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public RoleOrPrivilegesListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleOrPrivilegesList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoleOrPrivilegesList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoleOrPrivilegesList(this);
		}
	}

	[RuleVersion(0)]
	public RoleOrPrivilegesListContext roleOrPrivilegesList() {
		RoleOrPrivilegesListContext _localctx = new RoleOrPrivilegesListContext(Context, State);
		EnterRule(_localctx, 546, RULE_roleOrPrivilegesList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4557;
			roleOrPrivilege();
			State = 4562;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,542,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 4558;
					Match(COMMA_SYMBOL);
					State = 4559;
					roleOrPrivilege();
					}
					} 
				}
				State = 4564;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,542,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleOrPrivilegeContext : ParserRuleContext {
		public IToken @object;
		[System.Diagnostics.DebuggerNonUserCode] public RoleIdentifierOrTextContext roleIdentifierOrText() {
			return GetRuleContext<RoleIdentifierOrTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_TEXT_SUFFIX() { return GetToken(MySqlParser.AT_TEXT_SUFFIX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SIGN_SYMBOL() { return GetToken(MySqlParser.AT_SIGN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnInternalRefListContext columnInternalRefList() {
			return GetRuleContext<ColumnInternalRefListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT_SYMBOL() { return GetToken(MySqlParser.SELECT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT_SYMBOL() { return GetToken(MySqlParser.INSERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySqlParser.UPDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES_SYMBOL() { return GetToken(MySqlParser.REFERENCES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_SYMBOL() { return GetToken(MySqlParser.DELETE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USAGE_SYMBOL() { return GetToken(MySqlParser.USAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_SYMBOL() { return GetToken(MySqlParser.INDEX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP_SYMBOL() { return GetToken(MySqlParser.DROP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE_SYMBOL() { return GetToken(MySqlParser.EXECUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELOAD_SYMBOL() { return GetToken(MySqlParser.RELOAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHUTDOWN_SYMBOL() { return GetToken(MySqlParser.SHUTDOWN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESS_SYMBOL() { return GetToken(MySqlParser.PROCESS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE_SYMBOL() { return GetToken(MySqlParser.FILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROXY_SYMBOL() { return GetToken(MySqlParser.PROXY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER_SYMBOL() { return GetToken(MySqlParser.SUPER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT_SYMBOL() { return GetToken(MySqlParser.EVENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER_SYMBOL() { return GetToken(MySqlParser.TRIGGER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT_SYMBOL() { return GetToken(MySqlParser.GRANT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION_SYMBOL() { return GetToken(MySqlParser.OPTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASES_SYMBOL() { return GetToken(MySqlParser.DATABASES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySqlParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY_SYMBOL() { return GetToken(MySqlParser.TEMPORARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES_SYMBOL() { return GetToken(MySqlParser.TABLES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE_SYMBOL() { return GetToken(MySqlParser.ROUTINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySqlParser.TABLESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySqlParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW_SYMBOL() { return GetToken(MySqlParser.VIEW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK_SYMBOL() { return GetToken(MySqlParser.LOCK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_SYMBOL() { return GetToken(MySqlParser.REPLICATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLIENT_SYMBOL() { return GetToken(MySqlParser.CLIENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE_SYMBOL() { return GetToken(MySqlParser.SLAVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER_SYMBOL() { return GetToken(MySqlParser.ALTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE_SYMBOL() { return GetToken(MySqlParser.ROLE_SYMBOL, 0); }
		public RoleOrPrivilegeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleOrPrivilege; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoleOrPrivilege(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoleOrPrivilege(this);
		}
	}

	[RuleVersion(0)]
	public RoleOrPrivilegeContext roleOrPrivilege() {
		RoleOrPrivilegeContext _localctx = new RoleOrPrivilegeContext(Context, State);
		EnterRule(_localctx, 548, RULE_roleOrPrivilege);
		int _la;
		try {
			State = 4606;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,549,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4565;
				if (!(serverVersion > 80000)) throw new FailedPredicateException(this, "serverVersion > 80000");
				State = 4576;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,545,Context) ) {
				case 1:
					{
					State = 4566;
					roleIdentifierOrText();
					State = 4568;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,543,Context) ) {
					case 1:
						{
						State = 4567;
						columnInternalRefList();
						}
						break;
					}
					}
					break;
				case 2:
					{
					State = 4570;
					roleIdentifierOrText();
					State = 4574;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case AT_TEXT_SUFFIX:
						{
						State = 4571;
						Match(AT_TEXT_SUFFIX);
						}
						break;
					case AT_SIGN_SYMBOL:
						{
						State = 4572;
						Match(AT_SIGN_SYMBOL);
						State = 4573;
						textOrIdentifier();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4578;
				_la = TokenStream.LA(1);
				if ( !(_la==INSERT_SYMBOL || _la==REFERENCES_SYMBOL || _la==SELECT_SYMBOL || _la==UPDATE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4580;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,546,Context) ) {
				case 1:
					{
					State = 4579;
					columnInternalRefList();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4582;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (DELETE_SYMBOL - 133)) | (1L << (DROP_SYMBOL - 133)) | (1L << (EVENT_SYMBOL - 133)) | (1L << (EXECUTE_SYMBOL - 133)) | (1L << (FILE_SYMBOL - 133)))) != 0) || _la==INDEX_SYMBOL || ((((_la - 423)) & ~0x3f) == 0 && ((1L << (_la - 423)) & ((1L << (PROCESS_SYMBOL - 423)) | (1L << (PROXY_SYMBOL - 423)) | (1L << (RELOAD_SYMBOL - 423)))) != 0) || _la==SHUTDOWN_SYMBOL || _la==SUPER_SYMBOL || _la==TRIGGER_SYMBOL || _la==USAGE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4583;
				Match(GRANT_SYMBOL);
				State = 4584;
				Match(OPTION_SYMBOL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4585;
				Match(SHOW_SYMBOL);
				State = 4586;
				Match(DATABASES_SYMBOL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4587;
				Match(CREATE_SYMBOL);
				State = 4591;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,547,Context) ) {
				case 1:
					{
					State = 4588;
					Match(TEMPORARY_SYMBOL);
					State = 4589;
					_localctx.@object = Match(TABLES_SYMBOL);
					}
					break;
				case 2:
					{
					State = 4590;
					_localctx.@object = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==ROUTINE_SYMBOL || _la==TABLESPACE_SYMBOL || _la==USER_SYMBOL || _la==VIEW_SYMBOL) ) {
						_localctx.@object = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4593;
				Match(LOCK_SYMBOL);
				State = 4594;
				Match(TABLES_SYMBOL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4595;
				Match(REPLICATION_SYMBOL);
				State = 4596;
				_localctx.@object = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CLIENT_SYMBOL || _la==SLAVE_SYMBOL) ) {
					_localctx.@object = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 4597;
				Match(SHOW_SYMBOL);
				State = 4598;
				Match(VIEW_SYMBOL);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 4599;
				Match(ALTER_SYMBOL);
				State = 4601;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,548,Context) ) {
				case 1:
					{
					State = 4600;
					Match(ROUTINE_SYMBOL);
					}
					break;
				}
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 4603;
				if (!(serverVersion > 80000)) throw new FailedPredicateException(this, "serverVersion > 80000");
				State = 4604;
				_la = TokenStream.LA(1);
				if ( !(_la==CREATE_SYMBOL || _la==DROP_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4605;
				Match(ROLE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULT_OPERATOR() { return GetTokens(MySqlParser.MULT_OPERATOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT_OPERATOR(int i) {
			return GetToken(MySqlParser.MULT_OPERATOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT_SYMBOL() { return GetToken(MySqlParser.DOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SchemaRefContext schemaRef() {
			return GetRuleContext<SchemaRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public GrantIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGrantIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGrantIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public GrantIdentifierContext grantIdentifier() {
		GrantIdentifierContext _localctx = new GrantIdentifierContext(Context, State);
		EnterRule(_localctx, 550, RULE_grantIdentifier);
		int _la;
		try {
			State = 4624;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,552,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4608;
				Match(MULT_OPERATOR);
				State = 4611;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT_SYMBOL) {
					{
					State = 4609;
					Match(DOT_SYMBOL);
					State = 4610;
					Match(MULT_OPERATOR);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4613;
				schemaRef();
				State = 4616;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT_SYMBOL) {
					{
					State = 4614;
					Match(DOT_SYMBOL);
					State = 4615;
					Match(MULT_OPERATOR);
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4618;
				tableRef();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4619;
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				State = 4620;
				schemaRef();
				State = 4621;
				Match(DOT_SYMBOL);
				State = 4622;
				tableRef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequireListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RequireListElementContext[] requireListElement() {
			return GetRuleContexts<RequireListElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RequireListElementContext requireListElement(int i) {
			return GetRuleContext<RequireListElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND_SYMBOL() { return GetTokens(MySqlParser.AND_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_SYMBOL(int i) {
			return GetToken(MySqlParser.AND_SYMBOL, i);
		}
		public RequireListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requireList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRequireList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRequireList(this);
		}
	}

	[RuleVersion(0)]
	public RequireListContext requireList() {
		RequireListContext _localctx = new RequireListContext(Context, State);
		EnterRule(_localctx, 552, RULE_requireList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4626;
			requireListElement();
			State = 4633;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,554,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 4628;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AND_SYMBOL) {
						{
						State = 4627;
						Match(AND_SYMBOL);
						}
					}

					State = 4630;
					requireListElement();
					}
					} 
				}
				State = 4635;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,554,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequireListElementContext : ParserRuleContext {
		public IToken element;
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CIPHER_SYMBOL() { return GetToken(MySqlParser.CIPHER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISSUER_SYMBOL() { return GetToken(MySqlParser.ISSUER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBJECT_SYMBOL() { return GetToken(MySqlParser.SUBJECT_SYMBOL, 0); }
		public RequireListElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requireListElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRequireListElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRequireListElement(this);
		}
	}

	[RuleVersion(0)]
	public RequireListElementContext requireListElement() {
		RequireListElementContext _localctx = new RequireListElementContext(Context, State);
		EnterRule(_localctx, 554, RULE_requireListElement);
		try {
			State = 4642;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CIPHER_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4636;
				_localctx.element = Match(CIPHER_SYMBOL);
				State = 4637;
				textString();
				}
				break;
			case ISSUER_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4638;
				_localctx.element = Match(ISSUER_SYMBOL);
				State = 4639;
				textString();
				}
				break;
			case SUBJECT_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4640;
				_localctx.element = Match(SUBJECT_SYMBOL);
				State = 4641;
				textString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantOptionContext : ParserRuleContext {
		public IToken option;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION_SYMBOL() { return GetToken(MySqlParser.OPTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT_SYMBOL() { return GetToken(MySqlParser.GRANT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_QUERIES_PER_HOUR_SYMBOL() { return GetToken(MySqlParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_UPDATES_PER_HOUR_SYMBOL() { return GetToken(MySqlParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return GetToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_USER_CONNECTIONS_SYMBOL() { return GetToken(MySqlParser.MAX_USER_CONNECTIONS_SYMBOL, 0); }
		public GrantOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGrantOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGrantOption(this);
		}
	}

	[RuleVersion(0)]
	public GrantOptionContext grantOption() {
		GrantOptionContext _localctx = new GrantOptionContext(Context, State);
		EnterRule(_localctx, 556, RULE_grantOption);
		try {
			State = 4654;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GRANT_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4644;
				_localctx.option = Match(GRANT_SYMBOL);
				State = 4645;
				Match(OPTION_SYMBOL);
				}
				break;
			case MAX_QUERIES_PER_HOUR_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4646;
				_localctx.option = Match(MAX_QUERIES_PER_HOUR_SYMBOL);
				State = 4647;
				ulong_number();
				}
				break;
			case MAX_UPDATES_PER_HOUR_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4648;
				_localctx.option = Match(MAX_UPDATES_PER_HOUR_SYMBOL);
				State = 4649;
				ulong_number();
				}
				break;
			case MAX_CONNECTIONS_PER_HOUR_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4650;
				_localctx.option = Match(MAX_CONNECTIONS_PER_HOUR_SYMBOL);
				State = 4651;
				ulong_number();
				}
				break;
			case MAX_USER_CONNECTIONS_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4652;
				_localctx.option = Match(MAX_USER_CONNECTIONS_SYMBOL);
				State = 4653;
				ulong_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetRoleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySqlParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE_SYMBOL() { return GetToken(MySqlParser.ROLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleListContext[] roleList() {
			return GetRuleContexts<RoleListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoleListContext roleList(int i) {
			return GetRuleContext<RoleListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE_SYMBOL() { return GetToken(MySqlParser.NONE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SYMBOL() { return GetToken(MySqlParser.TO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySqlParser.ALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT_SYMBOL() { return GetToken(MySqlParser.EXCEPT_SYMBOL, 0); }
		public SetRoleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setRole; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetRole(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetRole(this);
		}
	}

	[RuleVersion(0)]
	public SetRoleContext setRole() {
		SetRoleContext _localctx = new SetRoleContext(Context, State);
		EnterRule(_localctx, 558, RULE_setRole);
		int _la;
		try {
			State = 4679;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,559,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4656;
				Match(SET_SYMBOL);
				State = 4657;
				Match(ROLE_SYMBOL);
				State = 4658;
				roleList();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4659;
				Match(SET_SYMBOL);
				State = 4660;
				Match(ROLE_SYMBOL);
				State = 4661;
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT_SYMBOL || _la==NONE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4662;
				Match(SET_SYMBOL);
				State = 4663;
				Match(DEFAULT_SYMBOL);
				State = 4664;
				Match(ROLE_SYMBOL);
				State = 4668;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,557,Context) ) {
				case 1:
					{
					State = 4665;
					roleList();
					}
					break;
				case 2:
					{
					State = 4666;
					Match(NONE_SYMBOL);
					}
					break;
				case 3:
					{
					State = 4667;
					Match(ALL_SYMBOL);
					}
					break;
				}
				State = 4670;
				Match(TO_SYMBOL);
				State = 4671;
				roleList();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4672;
				Match(SET_SYMBOL);
				State = 4673;
				Match(ROLE_SYMBOL);
				State = 4674;
				Match(ALL_SYMBOL);
				State = 4677;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXCEPT_SYMBOL) {
					{
					State = 4675;
					Match(EXCEPT_SYMBOL);
					State = 4676;
					roleList();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RoleContext[] role() {
			return GetRuleContexts<RoleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoleContext role(int i) {
			return GetRuleContext<RoleContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public RoleListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoleList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoleList(this);
		}
	}

	[RuleVersion(0)]
	public RoleListContext roleList() {
		RoleListContext _localctx = new RoleListContext(Context, State);
		EnterRule(_localctx, 560, RULE_roleList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4681;
			role();
			State = 4686;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,560,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 4682;
					Match(COMMA_SYMBOL);
					State = 4683;
					role();
					}
					} 
				}
				State = 4688;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,560,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RoleIdentifierOrTextContext roleIdentifierOrText() {
			return GetRuleContext<RoleIdentifierOrTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SIGN_SYMBOL() { return GetToken(MySqlParser.AT_SIGN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_TEXT_SUFFIX() { return GetToken(MySqlParser.AT_TEXT_SUFFIX, 0); }
		public RoleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_role; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRole(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRole(this);
		}
	}

	[RuleVersion(0)]
	public RoleContext role() {
		RoleContext _localctx = new RoleContext(Context, State);
		EnterRule(_localctx, 562, RULE_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4689;
			roleIdentifierOrText();
			State = 4693;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,561,Context) ) {
			case 1:
				{
				State = 4690;
				Match(AT_SIGN_SYMBOL);
				State = 4691;
				textOrIdentifier();
				}
				break;
			case 2:
				{
				State = 4692;
				Match(AT_TEXT_SUFFIX);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableAdministrationStatementContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySqlParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefListContext tableRefList() {
			return GetRuleContext<TableRefListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE_SYMBOL() { return GetToken(MySqlParser.ANALYZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NoWriteToBinLogContext noWriteToBinLog() {
			return GetRuleContext<NoWriteToBinLogContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HistogramContext histogram() {
			return GetRuleContext<HistogramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK_SYMBOL() { return GetToken(MySqlParser.CHECK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CheckOptionContext[] checkOption() {
			return GetRuleContexts<CheckOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckOptionContext checkOption(int i) {
			return GetRuleContext<CheckOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM_SYMBOL() { return GetToken(MySqlParser.CHECKSUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK_SYMBOL() { return GetToken(MySqlParser.QUICK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySqlParser.EXTENDED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIMIZE_SYMBOL() { return GetToken(MySqlParser.OPTIMIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPAIR_SYMBOL() { return GetToken(MySqlParser.REPAIR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RepairTypeContext[] repairType() {
			return GetRuleContexts<RepairTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepairTypeContext repairType(int i) {
			return GetRuleContext<RepairTypeContext>(i);
		}
		public TableAdministrationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableAdministrationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableAdministrationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableAdministrationStatement(this);
		}
	}

	[RuleVersion(0)]
	public TableAdministrationStatementContext tableAdministrationStatement() {
		TableAdministrationStatementContext _localctx = new TableAdministrationStatementContext(Context, State);
		EnterRule(_localctx, 564, RULE_tableAdministrationStatement);
		int _la;
		try {
			State = 4738;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ANALYZE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4695;
				_localctx.type = Match(ANALYZE_SYMBOL);
				State = 4697;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					State = 4696;
					noWriteToBinLog();
					}
				}

				State = 4699;
				Match(TABLE_SYMBOL);
				State = 4700;
				tableRefList();
				State = 4703;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,563,Context) ) {
				case 1:
					{
					State = 4701;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 4702;
					histogram();
					}
					break;
				}
				}
				break;
			case CHECK_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4705;
				_localctx.type = Match(CHECK_SYMBOL);
				State = 4706;
				Match(TABLE_SYMBOL);
				State = 4707;
				tableRefList();
				State = 4711;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CHANGED_SYMBOL || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (EXTENDED_SYMBOL - 180)) | (1L << (FAST_SYMBOL - 180)) | (1L << (FOR_SYMBOL - 180)))) != 0) || _la==MEDIUM_SYMBOL || _la==QUICK_SYMBOL) {
					{
					{
					State = 4708;
					checkOption();
					}
					}
					State = 4713;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case CHECKSUM_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4714;
				_localctx.type = Match(CHECKSUM_SYMBOL);
				State = 4715;
				Match(TABLE_SYMBOL);
				State = 4716;
				tableRefList();
				State = 4718;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL) {
					{
					State = 4717;
					_la = TokenStream.LA(1);
					if ( !(_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			case OPTIMIZE_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4720;
				_localctx.type = Match(OPTIMIZE_SYMBOL);
				State = 4722;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					State = 4721;
					noWriteToBinLog();
					}
				}

				State = 4724;
				Match(TABLE_SYMBOL);
				State = 4725;
				tableRefList();
				}
				break;
			case REPAIR_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4726;
				_localctx.type = Match(REPAIR_SYMBOL);
				State = 4728;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					State = 4727;
					noWriteToBinLog();
					}
				}

				State = 4730;
				Match(TABLE_SYMBOL);
				State = 4731;
				tableRefList();
				State = 4735;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL || _la==USE_FRM_SYMBOL) {
					{
					{
					State = 4732;
					repairType();
					}
					}
					State = 4737;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HistogramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySqlParser.UPDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HISTOGRAM_SYMBOL() { return GetToken(MySqlParser.HISTOGRAM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySqlParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySqlParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySqlParser.INT_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUCKETS_SYMBOL() { return GetToken(MySqlParser.BUCKETS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP_SYMBOL() { return GetToken(MySqlParser.DROP_SYMBOL, 0); }
		public HistogramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_histogram; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHistogram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHistogram(this);
		}
	}

	[RuleVersion(0)]
	public HistogramContext histogram() {
		HistogramContext _localctx = new HistogramContext(Context, State);
		EnterRule(_localctx, 566, RULE_histogram);
		int _la;
		try {
			State = 4753;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UPDATE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4740;
				Match(UPDATE_SYMBOL);
				State = 4741;
				Match(HISTOGRAM_SYMBOL);
				State = 4742;
				Match(ON_SYMBOL);
				State = 4743;
				identifierList();
				State = 4747;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					State = 4744;
					Match(WITH_SYMBOL);
					State = 4745;
					Match(INT_NUMBER);
					State = 4746;
					Match(BUCKETS_SYMBOL);
					}
				}

				}
				break;
			case DROP_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4749;
				Match(DROP_SYMBOL);
				State = 4750;
				Match(HISTOGRAM_SYMBOL);
				State = 4751;
				Match(ON_SYMBOL);
				State = 4752;
				identifierList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySqlParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPGRADE_SYMBOL() { return GetToken(MySqlParser.UPGRADE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK_SYMBOL() { return GetToken(MySqlParser.QUICK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAST_SYMBOL() { return GetToken(MySqlParser.FAST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUM_SYMBOL() { return GetToken(MySqlParser.MEDIUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySqlParser.EXTENDED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGED_SYMBOL() { return GetToken(MySqlParser.CHANGED_SYMBOL, 0); }
		public CheckOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCheckOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCheckOption(this);
		}
	}

	[RuleVersion(0)]
	public CheckOptionContext checkOption() {
		CheckOptionContext _localctx = new CheckOptionContext(Context, State);
		EnterRule(_localctx, 568, RULE_checkOption);
		int _la;
		try {
			State = 4758;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4755;
				Match(FOR_SYMBOL);
				State = 4756;
				Match(UPGRADE_SYMBOL);
				}
				break;
			case CHANGED_SYMBOL:
			case EXTENDED_SYMBOL:
			case FAST_SYMBOL:
			case MEDIUM_SYMBOL:
			case QUICK_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4757;
				_la = TokenStream.LA(1);
				if ( !(_la==CHANGED_SYMBOL || _la==EXTENDED_SYMBOL || _la==FAST_SYMBOL || _la==MEDIUM_SYMBOL || _la==QUICK_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepairTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK_SYMBOL() { return GetToken(MySqlParser.QUICK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySqlParser.EXTENDED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_FRM_SYMBOL() { return GetToken(MySqlParser.USE_FRM_SYMBOL, 0); }
		public RepairTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repairType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRepairType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRepairType(this);
		}
	}

	[RuleVersion(0)]
	public RepairTypeContext repairType() {
		RepairTypeContext _localctx = new RepairTypeContext(Context, State);
		EnterRule(_localctx, 570, RULE_repairType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4760;
			_la = TokenStream.LA(1);
			if ( !(_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL || _la==USE_FRM_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstallUninstallStatmentContext : ParserRuleContext {
		public IToken action;
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SONAME_SYMBOL() { return GetToken(MySqlParser.SONAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTALL_SYMBOL() { return GetToken(MySqlParser.INSTALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN_SYMBOL() { return GetToken(MySqlParser.PLUGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralListContext textStringLiteralList() {
			return GetRuleContext<TextStringLiteralListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPONENT_SYMBOL() { return GetToken(MySqlParser.COMPONENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PluginRefContext pluginRef() {
			return GetRuleContext<PluginRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNINSTALL_SYMBOL() { return GetToken(MySqlParser.UNINSTALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComponentRefContext[] componentRef() {
			return GetRuleContexts<ComponentRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComponentRefContext componentRef(int i) {
			return GetRuleContext<ComponentRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public InstallUninstallStatmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_installUninstallStatment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInstallUninstallStatment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInstallUninstallStatment(this);
		}
	}

	[RuleVersion(0)]
	public InstallUninstallStatmentContext installUninstallStatment() {
		InstallUninstallStatmentContext _localctx = new InstallUninstallStatmentContext(Context, State);
		EnterRule(_localctx, 572, RULE_installUninstallStatment);
		int _la;
		try {
			State = 4784;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,574,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4762;
				_localctx.action = Match(INSTALL_SYMBOL);
				State = 4763;
				_localctx.type = Match(PLUGIN_SYMBOL);
				State = 4764;
				identifier();
				State = 4765;
				Match(SONAME_SYMBOL);
				State = 4766;
				textStringLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4768;
				_localctx.action = Match(INSTALL_SYMBOL);
				State = 4769;
				_localctx.type = Match(COMPONENT_SYMBOL);
				State = 4770;
				textStringLiteralList();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4771;
				_localctx.action = Match(UNINSTALL_SYMBOL);
				State = 4772;
				_localctx.type = Match(PLUGIN_SYMBOL);
				State = 4773;
				pluginRef();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4774;
				_localctx.action = Match(UNINSTALL_SYMBOL);
				State = 4775;
				_localctx.type = Match(COMPONENT_SYMBOL);
				State = 4776;
				componentRef();
				State = 4781;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 4777;
					Match(COMMA_SYMBOL);
					State = 4778;
					componentRef();
					}
					}
					State = 4783;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySqlParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StartOptionValueListContext startOptionValueList() {
			return GetRuleContext<StartOptionValueListContext>(0);
		}
		public SetStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetStatement(this);
		}
	}

	[RuleVersion(0)]
	public SetStatementContext setStatement() {
		SetStatementContext _localctx = new SetStatementContext(Context, State);
		EnterRule(_localctx, 574, RULE_setStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4786;
			Match(SET_SYMBOL);
			State = 4787;
			startOptionValueList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartOptionValueListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OptionValueNoOptionTypeContext optionValueNoOptionType() {
			return GetRuleContext<OptionValueNoOptionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionValueListContinuedContext optionValueListContinued() {
			return GetRuleContext<OptionValueListContinuedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION_SYMBOL() { return GetToken(MySqlParser.TRANSACTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TransactionCharacteristicsContext transactionCharacteristics() {
			return GetRuleContext<TransactionCharacteristicsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionTypeContext optionType() {
			return GetRuleContext<OptionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StartOptionValueListFollowingOptionTypeContext startOptionValueListFollowingOptionType() {
			return GetRuleContext<StartOptionValueListFollowingOptionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PASSWORD_SYMBOL() { return GetTokens(MySqlParser.PASSWORD_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL(int i) {
			return GetToken(MySqlParser.PASSWORD_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD_PASSWORD_SYMBOL() { return GetToken(MySqlParser.OLD_PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySqlParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplacePasswordContext replacePassword() {
			return GetRuleContext<ReplacePasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RetainCurrentPasswordContext retainCurrentPassword() {
			return GetRuleContext<RetainCurrentPasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SYMBOL() { return GetToken(MySqlParser.TO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANDOM_SYMBOL() { return GetToken(MySqlParser.RANDOM_SYMBOL, 0); }
		public StartOptionValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startOptionValueList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStartOptionValueList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStartOptionValueList(this);
		}
	}

	[RuleVersion(0)]
	public StartOptionValueListContext startOptionValueList() {
		StartOptionValueListContext _localctx = new StartOptionValueListContext(Context, State);
		EnterRule(_localctx, 576, RULE_startOptionValueList);
		int _la;
		try {
			State = 4845;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,584,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4789;
				optionValueNoOptionType();
				State = 4790;
				optionValueListContinued();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4792;
				Match(TRANSACTION_SYMBOL);
				State = 4793;
				transactionCharacteristics();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4794;
				optionType();
				State = 4795;
				startOptionValueListFollowingOptionType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4797;
				Match(PASSWORD_SYMBOL);
				State = 4800;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					State = 4798;
					Match(FOR_SYMBOL);
					State = 4799;
					user();
					}
				}

				State = 4802;
				equal();
				State = 4829;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,580,Context) ) {
				case 1:
					{
					State = 4803;
					textString();
					State = 4805;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==REPLACE_SYMBOL) {
						{
						State = 4804;
						replacePassword();
						}
					}

					State = 4808;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==RETAIN_SYMBOL) {
						{
						State = 4807;
						retainCurrentPassword();
						}
					}

					}
					break;
				case 2:
					{
					State = 4810;
					textString();
					State = 4812;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==REPLACE_SYMBOL) {
						{
						State = 4811;
						replacePassword();
						}
					}

					State = 4815;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==RETAIN_SYMBOL) {
						{
						State = 4814;
						retainCurrentPassword();
						}
					}

					}
					break;
				case 3:
					{
					State = 4817;
					if (!(serverVersion < 50706)) throw new FailedPredicateException(this, "serverVersion < 50706");
					State = 4818;
					Match(OLD_PASSWORD_SYMBOL);
					State = 4819;
					Match(OPEN_PAR_SYMBOL);
					State = 4820;
					textString();
					State = 4821;
					Match(CLOSE_PAR_SYMBOL);
					}
					break;
				case 4:
					{
					State = 4823;
					if (!(serverVersion < 80014)) throw new FailedPredicateException(this, "serverVersion < 80014");
					State = 4824;
					Match(PASSWORD_SYMBOL);
					State = 4825;
					Match(OPEN_PAR_SYMBOL);
					State = 4826;
					textString();
					State = 4827;
					Match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4831;
				if (!(serverVersion >= 80018)) throw new FailedPredicateException(this, "serverVersion >= 80018");
				State = 4832;
				Match(PASSWORD_SYMBOL);
				State = 4835;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					State = 4833;
					Match(FOR_SYMBOL);
					State = 4834;
					user();
					}
				}

				State = 4837;
				Match(TO_SYMBOL);
				State = 4838;
				Match(RANDOM_SYMBOL);
				State = 4840;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REPLACE_SYMBOL) {
					{
					State = 4839;
					replacePassword();
					}
				}

				State = 4843;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RETAIN_SYMBOL) {
					{
					State = 4842;
					retainCurrentPassword();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionCharacteristicsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TransactionAccessModeContext transactionAccessMode() {
			return GetRuleContext<TransactionAccessModeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IsolationLevelContext isolationLevel() {
			return GetRuleContext<IsolationLevelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL() { return GetToken(MySqlParser.COMMA_SYMBOL, 0); }
		public TransactionCharacteristicsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionCharacteristics; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTransactionCharacteristics(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTransactionCharacteristics(this);
		}
	}

	[RuleVersion(0)]
	public TransactionCharacteristicsContext transactionCharacteristics() {
		TransactionCharacteristicsContext _localctx = new TransactionCharacteristicsContext(Context, State);
		EnterRule(_localctx, 578, RULE_transactionCharacteristics);
		int _la;
		try {
			State = 4856;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case READ_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4847;
				transactionAccessMode();
				State = 4849;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ISOLATION_SYMBOL) {
					{
					State = 4848;
					isolationLevel();
					}
				}

				}
				break;
			case ISOLATION_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4851;
				isolationLevel();
				State = 4854;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 4852;
					Match(COMMA_SYMBOL);
					State = 4853;
					transactionAccessMode();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionAccessModeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_SYMBOL() { return GetToken(MySqlParser.READ_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE_SYMBOL() { return GetToken(MySqlParser.WRITE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY_SYMBOL() { return GetToken(MySqlParser.ONLY_SYMBOL, 0); }
		public TransactionAccessModeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionAccessMode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTransactionAccessMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTransactionAccessMode(this);
		}
	}

	[RuleVersion(0)]
	public TransactionAccessModeContext transactionAccessMode() {
		TransactionAccessModeContext _localctx = new TransactionAccessModeContext(Context, State);
		EnterRule(_localctx, 580, RULE_transactionAccessMode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4858;
			Match(READ_SYMBOL);
			State = 4859;
			_la = TokenStream.LA(1);
			if ( !(_la==ONLY_SYMBOL || _la==WRITE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsolationLevelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION_SYMBOL() { return GetToken(MySqlParser.ISOLATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL_SYMBOL() { return GetToken(MySqlParser.LEVEL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE_SYMBOL() { return GetToken(MySqlParser.REPEATABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_SYMBOL() { return GetToken(MySqlParser.READ_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIALIZABLE_SYMBOL() { return GetToken(MySqlParser.SERIALIZABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMITTED_SYMBOL() { return GetToken(MySqlParser.COMMITTED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMMITTED_SYMBOL() { return GetToken(MySqlParser.UNCOMMITTED_SYMBOL, 0); }
		public IsolationLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isolationLevel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIsolationLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIsolationLevel(this);
		}
	}

	[RuleVersion(0)]
	public IsolationLevelContext isolationLevel() {
		IsolationLevelContext _localctx = new IsolationLevelContext(Context, State);
		EnterRule(_localctx, 582, RULE_isolationLevel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4861;
			Match(ISOLATION_SYMBOL);
			State = 4862;
			Match(LEVEL_SYMBOL);
			State = 4868;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REPEATABLE_SYMBOL:
				{
				State = 4863;
				Match(REPEATABLE_SYMBOL);
				State = 4864;
				Match(READ_SYMBOL);
				}
				break;
			case READ_SYMBOL:
				{
				State = 4865;
				Match(READ_SYMBOL);
				State = 4866;
				_la = TokenStream.LA(1);
				if ( !(_la==COMMITTED_SYMBOL || _la==UNCOMMITTED_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case SERIALIZABLE_SYMBOL:
				{
				State = 4867;
				Match(SERIALIZABLE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionValueListContinuedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionValueContext[] optionValue() {
			return GetRuleContexts<OptionValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionValueContext optionValue(int i) {
			return GetRuleContext<OptionValueContext>(i);
		}
		public OptionValueListContinuedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionValueListContinued; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOptionValueListContinued(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOptionValueListContinued(this);
		}
	}

	[RuleVersion(0)]
	public OptionValueListContinuedContext optionValueListContinued() {
		OptionValueListContinuedContext _localctx = new OptionValueListContinuedContext(Context, State);
		EnterRule(_localctx, 584, RULE_optionValueListContinued);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4874;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 4870;
				Match(COMMA_SYMBOL);
				State = 4871;
				optionValue();
				}
				}
				State = 4876;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionValueNoOptionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InternalVariableNameContext internalVariableName() {
			return GetRuleContext<InternalVariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetExprOrDefaultContext setExprOrDefault() {
			return GetRuleContext<SetExprOrDefaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetClauseContext charsetClause() {
			return GetRuleContext<CharsetClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserVariableContext userVariable() {
			return GetRuleContext<UserVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetSystemVariableContext setSystemVariable() {
			return GetRuleContext<SetSystemVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMES_SYMBOL() { return GetToken(MySqlParser.NAMES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		public OptionValueNoOptionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionValueNoOptionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOptionValueNoOptionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOptionValueNoOptionType(this);
		}
	}

	[RuleVersion(0)]
	public OptionValueNoOptionTypeContext optionValueNoOptionType() {
		OptionValueNoOptionTypeContext _localctx = new OptionValueNoOptionTypeContext(Context, State);
		EnterRule(_localctx, 586, RULE_optionValueNoOptionType);
		int _la;
		try {
			State = 4902;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,592,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4877;
				internalVariableName();
				State = 4878;
				equal();
				State = 4879;
				setExprOrDefault();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4881;
				charsetClause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4882;
				userVariable();
				State = 4883;
				equal();
				State = 4884;
				expr(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4886;
				setSystemVariable();
				State = 4887;
				equal();
				State = 4888;
				setExprOrDefault();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4890;
				Match(NAMES_SYMBOL);
				State = 4900;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,591,Context) ) {
				case 1:
					{
					State = 4891;
					equal();
					State = 4892;
					expr(0);
					}
					break;
				case 2:
					{
					State = 4894;
					charsetName();
					State = 4896;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COLLATE_SYMBOL) {
						{
						State = 4895;
						collate();
						}
					}

					}
					break;
				case 3:
					{
					State = 4898;
					if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
					State = 4899;
					Match(DEFAULT_SYMBOL);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OptionTypeContext optionType() {
			return GetRuleContext<OptionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InternalVariableNameContext internalVariableName() {
			return GetRuleContext<InternalVariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetExprOrDefaultContext setExprOrDefault() {
			return GetRuleContext<SetExprOrDefaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionValueNoOptionTypeContext optionValueNoOptionType() {
			return GetRuleContext<OptionValueNoOptionTypeContext>(0);
		}
		public OptionValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOptionValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOptionValue(this);
		}
	}

	[RuleVersion(0)]
	public OptionValueContext optionValue() {
		OptionValueContext _localctx = new OptionValueContext(Context, State);
		EnterRule(_localctx, 588, RULE_optionValue);
		try {
			State = 4910;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,593,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4904;
				optionType();
				State = 4905;
				internalVariableName();
				State = 4906;
				equal();
				State = 4907;
				setExprOrDefault();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4909;
				optionValueNoOptionType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetSystemVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_AT_SIGN_SYMBOL() { return GetToken(MySqlParser.AT_AT_SIGN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InternalVariableNameContext internalVariableName() {
			return GetRuleContext<InternalVariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetVarIdentTypeContext setVarIdentType() {
			return GetRuleContext<SetVarIdentTypeContext>(0);
		}
		public SetSystemVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setSystemVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetSystemVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetSystemVariable(this);
		}
	}

	[RuleVersion(0)]
	public SetSystemVariableContext setSystemVariable() {
		SetSystemVariableContext _localctx = new SetSystemVariableContext(Context, State);
		EnterRule(_localctx, 590, RULE_setSystemVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4912;
			Match(AT_AT_SIGN_SYMBOL);
			State = 4914;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,594,Context) ) {
			case 1:
				{
				State = 4913;
				setVarIdentType();
				}
				break;
			}
			State = 4916;
			internalVariableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartOptionValueListFollowingOptionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OptionValueFollowingOptionTypeContext optionValueFollowingOptionType() {
			return GetRuleContext<OptionValueFollowingOptionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionValueListContinuedContext optionValueListContinued() {
			return GetRuleContext<OptionValueListContinuedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION_SYMBOL() { return GetToken(MySqlParser.TRANSACTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TransactionCharacteristicsContext transactionCharacteristics() {
			return GetRuleContext<TransactionCharacteristicsContext>(0);
		}
		public StartOptionValueListFollowingOptionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startOptionValueListFollowingOptionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStartOptionValueListFollowingOptionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStartOptionValueListFollowingOptionType(this);
		}
	}

	[RuleVersion(0)]
	public StartOptionValueListFollowingOptionTypeContext startOptionValueListFollowingOptionType() {
		StartOptionValueListFollowingOptionTypeContext _localctx = new StartOptionValueListFollowingOptionTypeContext(Context, State);
		EnterRule(_localctx, 592, RULE_startOptionValueListFollowingOptionType);
		try {
			State = 4923;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,595,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4918;
				optionValueFollowingOptionType();
				State = 4919;
				optionValueListContinued();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4921;
				Match(TRANSACTION_SYMBOL);
				State = 4922;
				transactionCharacteristics();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionValueFollowingOptionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InternalVariableNameContext internalVariableName() {
			return GetRuleContext<InternalVariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetExprOrDefaultContext setExprOrDefault() {
			return GetRuleContext<SetExprOrDefaultContext>(0);
		}
		public OptionValueFollowingOptionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionValueFollowingOptionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOptionValueFollowingOptionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOptionValueFollowingOptionType(this);
		}
	}

	[RuleVersion(0)]
	public OptionValueFollowingOptionTypeContext optionValueFollowingOptionType() {
		OptionValueFollowingOptionTypeContext _localctx = new OptionValueFollowingOptionTypeContext(Context, State);
		EnterRule(_localctx, 594, RULE_optionValueFollowingOptionType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4925;
			internalVariableName();
			State = 4926;
			equal();
			State = 4927;
			setExprOrDefault();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetExprOrDefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySqlParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySqlParser.ALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySqlParser.BINARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_SYMBOL() { return GetToken(MySqlParser.ROW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_SYMBOL() { return GetToken(MySqlParser.SYSTEM_SYMBOL, 0); }
		public SetExprOrDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setExprOrDefault; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetExprOrDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetExprOrDefault(this);
		}
	}

	[RuleVersion(0)]
	public SetExprOrDefaultContext setExprOrDefault() {
		SetExprOrDefaultContext _localctx = new SetExprOrDefaultContext(Context, State);
		EnterRule(_localctx, 596, RULE_setExprOrDefault);
		int _la;
		try {
			State = 4933;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,596,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4929;
				expr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4930;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL_SYMBOL || _la==BINARY_SYMBOL || _la==DEFAULT_SYMBOL || _la==ON_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4931;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 4932;
				_la = TokenStream.LA(1);
				if ( !(_la==ROW_SYMBOL || _la==SYSTEM_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowStatementContext : ParserRuleContext {
		public IToken value;
		public IToken @object;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS_SYMBOL() { return GetToken(MySqlParser.STATUS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES_SYMBOL() { return GetToken(MySqlParser.TABLES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENTS_SYMBOL() { return GetToken(MySqlParser.EVENTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FromOrInContext fromOrIn() {
			return GetRuleContext<FromOrInContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT_SYMBOL() { return GetToken(MySqlParser.COUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT_OPERATOR() { return GetToken(MySqlParser.MULT_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetContext charset() {
			return GetRuleContext<CharsetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySqlParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING_SYMBOL() { return GetToken(MySqlParser.USING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserListContext userList() {
			return GetRuleContext<UserListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODE_SYMBOL() { return GetToken(MySqlParser.CODE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureRefContext procedureRef() {
			return GetRuleContext<ProcedureRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionRefContext functionRef() {
			return GetRuleContext<FunctionRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORS_SYMBOL() { return GetToken(MySqlParser.AUTHORS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASES_SYMBOL() { return GetToken(MySqlParser.DATABASES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGERS_SYMBOL() { return GetToken(MySqlParser.TRIGGERS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySqlParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_SYMBOL() { return GetToken(MySqlParser.OPEN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGINS_SYMBOL() { return GetToken(MySqlParser.PLUGINS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySqlParser.ENGINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUTEX_SYMBOL() { return GetToken(MySqlParser.MUTEX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS_SYMBOL() { return GetToken(MySqlParser.LOGS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS_SYMBOL() { return GetToken(MySqlParser.COLUMNS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySqlParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_SYMBOL() { return GetToken(MySqlParser.IN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySqlParser.BINARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SYMBOL() { return GetToken(MySqlParser.MASTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE_SYMBOL() { return GetToken(MySqlParser.SLAVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINES_SYMBOL() { return GetToken(MySqlParser.ENGINES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WARNINGS_SYMBOL() { return GetToken(MySqlParser.WARNINGS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERRORS_SYMBOL() { return GetToken(MySqlParser.ERRORS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILES_SYMBOL() { return GetToken(MySqlParser.PROFILES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILE_SYMBOL() { return GetToken(MySqlParser.PROFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESSLIST_SYMBOL() { return GetToken(MySqlParser.PROCESSLIST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION_SYMBOL() { return GetToken(MySqlParser.COLLATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTRIBUTORS_SYMBOL() { return GetToken(MySqlParser.CONTRIBUTORS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES_SYMBOL() { return GetToken(MySqlParser.PRIVILEGES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTS_SYMBOL() { return GetToken(MySqlParser.GRANTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySqlParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE_SYMBOL() { return GetToken(MySqlParser.PROCEDURE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION_SYMBOL() { return GetToken(MySqlParser.FUNCTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineRefContext engineRef() {
			return GetRuleContext<EngineRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySqlParser.ALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOSTS_SYMBOL() { return GetToken(MySqlParser.HOSTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NonBlockingContext nonBlocking() {
			return GetRuleContext<NonBlockingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_SYMBOL() { return GetToken(MySqlParser.BINLOG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAYLOG_SYMBOL() { return GetToken(MySqlParser.RELAYLOG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_SYMBOL() { return GetToken(MySqlParser.INDEX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXES_SYMBOL() { return GetToken(MySqlParser.INDEXES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYS_SYMBOL() { return GetToken(MySqlParser.KEYS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLES_SYMBOL() { return GetToken(MySqlParser.VARIABLES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SchemaRefContext schemaRef() {
			return GetRuleContext<SchemaRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EventRefContext eventRef() {
			return GetRuleContext<EventRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggerRefContext triggerRef() {
			return GetRuleContext<TriggerRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewRefContext viewRef() {
			return GetRuleContext<ViewRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LikeOrWhereContext likeOrWhere() {
			return GetRuleContext<LikeOrWhereContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowCommandTypeContext showCommandType() {
			return GetRuleContext<ShowCommandTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InDbContext inDb() {
			return GetRuleContext<InDbContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL_SYMBOL() { return GetToken(MySqlParser.FULL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ulonglong_numberContext ulonglong_number() {
			return GetRuleContext<Ulonglong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChannelContext channel() {
			return GetRuleContext<ChannelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySqlParser.EXTENDED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE_SYMBOL() { return GetToken(MySqlParser.STORAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProfileTypeContext[] profileType() {
			return GetRuleContexts<ProfileTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProfileTypeContext profileType(int i) {
			return GetRuleContext<ProfileTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY_SYMBOL() { return GetToken(MySqlParser.QUERY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySqlParser.INT_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionTypeContext optionType() {
			return GetRuleContext<OptionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE_SYMBOL() { return GetToken(MySqlParser.DATABASE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT_SYMBOL() { return GetToken(MySqlParser.EVENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER_SYMBOL() { return GetToken(MySqlParser.TRIGGER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW_SYMBOL() { return GetToken(MySqlParser.VIEW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySqlParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public ShowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowStatementContext showStatement() {
		ShowStatementContext _localctx = new ShowStatementContext(Context, State);
		EnterRule(_localctx, 598, RULE_showStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4935;
			Match(SHOW_SYMBOL);
			State = 5155;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,640,Context) ) {
			case 1:
				{
				State = 4936;
				if (!(serverVersion < 50700)) throw new FailedPredicateException(this, "serverVersion < 50700");
				State = 4937;
				_localctx.value = Match(AUTHORS_SYMBOL);
				}
				break;
			case 2:
				{
				State = 4938;
				_localctx.value = Match(DATABASES_SYMBOL);
				State = 4940;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					State = 4939;
					likeOrWhere();
					}
				}

				}
				break;
			case 3:
				{
				State = 4943;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,598,Context) ) {
				case 1:
					{
					State = 4942;
					showCommandType();
					}
					break;
				}
				State = 4945;
				_localctx.value = Match(TABLES_SYMBOL);
				State = 4947;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					State = 4946;
					inDb();
					}
				}

				State = 4950;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					State = 4949;
					likeOrWhere();
					}
				}

				}
				break;
			case 4:
				{
				State = 4953;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FULL_SYMBOL) {
					{
					State = 4952;
					Match(FULL_SYMBOL);
					}
				}

				State = 4955;
				_localctx.value = Match(TRIGGERS_SYMBOL);
				State = 4957;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					State = 4956;
					inDb();
					}
				}

				State = 4960;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					State = 4959;
					likeOrWhere();
					}
				}

				}
				break;
			case 5:
				{
				State = 4962;
				_localctx.value = Match(EVENTS_SYMBOL);
				State = 4964;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					State = 4963;
					inDb();
					}
				}

				State = 4967;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					State = 4966;
					likeOrWhere();
					}
				}

				}
				break;
			case 6:
				{
				State = 4969;
				_localctx.value = Match(TABLE_SYMBOL);
				State = 4970;
				Match(STATUS_SYMBOL);
				State = 4972;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					State = 4971;
					inDb();
					}
				}

				State = 4975;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					State = 4974;
					likeOrWhere();
					}
				}

				}
				break;
			case 7:
				{
				State = 4977;
				_localctx.value = Match(OPEN_SYMBOL);
				State = 4978;
				Match(TABLES_SYMBOL);
				State = 4980;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					State = 4979;
					inDb();
					}
				}

				State = 4983;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					State = 4982;
					likeOrWhere();
					}
				}

				}
				break;
			case 8:
				{
				State = 4985;
				_localctx.value = Match(PLUGINS_SYMBOL);
				}
				break;
			case 9:
				{
				State = 4986;
				_localctx.value = Match(ENGINE_SYMBOL);
				State = 4989;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,610,Context) ) {
				case 1:
					{
					State = 4987;
					engineRef();
					}
					break;
				case 2:
					{
					State = 4988;
					Match(ALL_SYMBOL);
					}
					break;
				}
				State = 4991;
				_la = TokenStream.LA(1);
				if ( !(_la==LOGS_SYMBOL || _la==MUTEX_SYMBOL || _la==STATUS_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 10:
				{
				State = 4993;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,611,Context) ) {
				case 1:
					{
					State = 4992;
					showCommandType();
					}
					break;
				}
				State = 4995;
				_localctx.value = Match(COLUMNS_SYMBOL);
				State = 4996;
				_la = TokenStream.LA(1);
				if ( !(_la==FROM_SYMBOL || _la==IN_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4997;
				tableRef();
				State = 4999;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					State = 4998;
					inDb();
					}
				}

				State = 5002;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					State = 5001;
					likeOrWhere();
					}
				}

				}
				break;
			case 11:
				{
				State = 5004;
				_la = TokenStream.LA(1);
				if ( !(_la==BINARY_SYMBOL || _la==MASTER_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5005;
				_localctx.value = Match(LOGS_SYMBOL);
				}
				break;
			case 12:
				{
				State = 5006;
				_localctx.value = Match(SLAVE_SYMBOL);
				State = 5013;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case HOSTS_SYMBOL:
					{
					State = 5007;
					Match(HOSTS_SYMBOL);
					}
					break;
				case STATUS_SYMBOL:
					{
					State = 5008;
					Match(STATUS_SYMBOL);
					State = 5009;
					nonBlocking();
					State = 5011;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,614,Context) ) {
					case 1:
						{
						State = 5010;
						channel();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 13:
				{
				State = 5015;
				_localctx.value = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BINLOG_SYMBOL || _la==RELAYLOG_SYMBOL) ) {
					_localctx.value = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5016;
				Match(EVENTS_SYMBOL);
				State = 5019;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,616,Context) ) {
				case 1:
					{
					State = 5017;
					Match(IN_SYMBOL);
					State = 5018;
					textString();
					}
					break;
				}
				State = 5023;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,617,Context) ) {
				case 1:
					{
					State = 5021;
					Match(FROM_SYMBOL);
					State = 5022;
					ulonglong_number();
					}
					break;
				}
				State = 5026;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,618,Context) ) {
				case 1:
					{
					State = 5025;
					limitClause();
					}
					break;
				}
				State = 5029;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,619,Context) ) {
				case 1:
					{
					State = 5028;
					channel();
					}
					break;
				}
				}
				break;
			case 14:
				{
				State = 5033;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,620,Context) ) {
				case 1:
					{
					State = 5031;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 5032;
					Match(EXTENDED_SYMBOL);
					}
					break;
				}
				State = 5035;
				_localctx.value = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 235)) & ~0x3f) == 0 && ((1L << (_la - 235)) & ((1L << (INDEXES_SYMBOL - 235)) | (1L << (INDEX_SYMBOL - 235)) | (1L << (KEYS_SYMBOL - 235)))) != 0)) ) {
					_localctx.value = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5036;
				fromOrIn();
				State = 5037;
				tableRef();
				State = 5039;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					State = 5038;
					inDb();
					}
				}

				State = 5042;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE_SYMBOL) {
					{
					State = 5041;
					whereClause();
					}
				}

				}
				break;
			case 15:
				{
				State = 5045;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STORAGE_SYMBOL) {
					{
					State = 5044;
					Match(STORAGE_SYMBOL);
					}
				}

				State = 5047;
				_localctx.value = Match(ENGINES_SYMBOL);
				}
				break;
			case 16:
				{
				State = 5048;
				Match(COUNT_SYMBOL);
				State = 5049;
				Match(OPEN_PAR_SYMBOL);
				State = 5050;
				Match(MULT_OPERATOR);
				State = 5051;
				Match(CLOSE_PAR_SYMBOL);
				State = 5052;
				_localctx.value = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ERRORS_SYMBOL || _la==WARNINGS_SYMBOL) ) {
					_localctx.value = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 17:
				{
				State = 5053;
				_localctx.value = Match(WARNINGS_SYMBOL);
				State = 5055;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIMIT_SYMBOL) {
					{
					State = 5054;
					limitClause();
					}
				}

				}
				break;
			case 18:
				{
				State = 5057;
				_localctx.value = Match(ERRORS_SYMBOL);
				State = 5059;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIMIT_SYMBOL) {
					{
					State = 5058;
					limitClause();
					}
				}

				}
				break;
			case 19:
				{
				State = 5061;
				_localctx.value = Match(PROFILES_SYMBOL);
				}
				break;
			case 20:
				{
				State = 5062;
				_localctx.value = Match(PROFILE_SYMBOL);
				State = 5071;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL_SYMBOL || _la==BLOCK_SYMBOL || _la==CONTEXT_SYMBOL || _la==CPU_SYMBOL || _la==IPC_SYMBOL || _la==MEMORY_SYMBOL || _la==PAGE_SYMBOL || _la==SOURCE_SYMBOL || _la==SWAPS_SYMBOL) {
					{
					State = 5063;
					profileType();
					State = 5068;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA_SYMBOL) {
						{
						{
						State = 5064;
						Match(COMMA_SYMBOL);
						State = 5065;
						profileType();
						}
						}
						State = 5070;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 5076;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					State = 5073;
					Match(FOR_SYMBOL);
					State = 5074;
					Match(QUERY_SYMBOL);
					State = 5075;
					Match(INT_NUMBER);
					}
				}

				State = 5079;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIMIT_SYMBOL) {
					{
					State = 5078;
					limitClause();
					}
				}

				}
				break;
			case 21:
				{
				State = 5082;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GLOBAL_SYMBOL || _la==LOCAL_SYMBOL || _la==SESSION_SYMBOL || _la==PERSIST_SYMBOL || _la==PERSIST_ONLY_SYMBOL) {
					{
					State = 5081;
					optionType();
					}
				}

				State = 5084;
				_localctx.value = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==STATUS_SYMBOL || _la==VARIABLES_SYMBOL) ) {
					_localctx.value = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5086;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					State = 5085;
					likeOrWhere();
					}
				}

				}
				break;
			case 22:
				{
				State = 5089;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FULL_SYMBOL) {
					{
					State = 5088;
					Match(FULL_SYMBOL);
					}
				}

				State = 5091;
				_localctx.value = Match(PROCESSLIST_SYMBOL);
				}
				break;
			case 23:
				{
				State = 5092;
				charset();
				State = 5094;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					State = 5093;
					likeOrWhere();
					}
				}

				}
				break;
			case 24:
				{
				State = 5096;
				_localctx.value = Match(COLLATION_SYMBOL);
				State = 5098;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					State = 5097;
					likeOrWhere();
					}
				}

				}
				break;
			case 25:
				{
				State = 5100;
				if (!(serverVersion < 50700)) throw new FailedPredicateException(this, "serverVersion < 50700");
				State = 5101;
				_localctx.value = Match(CONTRIBUTORS_SYMBOL);
				}
				break;
			case 26:
				{
				State = 5102;
				_localctx.value = Match(PRIVILEGES_SYMBOL);
				}
				break;
			case 27:
				{
				State = 5103;
				_localctx.value = Match(GRANTS_SYMBOL);
				State = 5106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					State = 5104;
					Match(FOR_SYMBOL);
					State = 5105;
					user();
					}
				}

				}
				break;
			case 28:
				{
				State = 5108;
				_localctx.value = Match(GRANTS_SYMBOL);
				State = 5109;
				Match(FOR_SYMBOL);
				State = 5110;
				user();
				State = 5111;
				Match(USING_SYMBOL);
				State = 5112;
				userList();
				}
				break;
			case 29:
				{
				State = 5114;
				_localctx.value = Match(MASTER_SYMBOL);
				State = 5115;
				Match(STATUS_SYMBOL);
				}
				break;
			case 30:
				{
				State = 5116;
				_localctx.value = Match(CREATE_SYMBOL);
				State = 5137;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,637,Context) ) {
				case 1:
					{
					State = 5117;
					_localctx.@object = Match(DATABASE_SYMBOL);
					State = 5119;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,636,Context) ) {
					case 1:
						{
						State = 5118;
						ifNotExists();
						}
						break;
					}
					State = 5121;
					schemaRef();
					}
					break;
				case 2:
					{
					State = 5122;
					_localctx.@object = Match(EVENT_SYMBOL);
					State = 5123;
					eventRef();
					}
					break;
				case 3:
					{
					State = 5124;
					_localctx.@object = Match(FUNCTION_SYMBOL);
					State = 5125;
					functionRef();
					}
					break;
				case 4:
					{
					State = 5126;
					_localctx.@object = Match(PROCEDURE_SYMBOL);
					State = 5127;
					procedureRef();
					}
					break;
				case 5:
					{
					State = 5128;
					_localctx.@object = Match(TABLE_SYMBOL);
					State = 5129;
					tableRef();
					}
					break;
				case 6:
					{
					State = 5130;
					_localctx.@object = Match(TRIGGER_SYMBOL);
					State = 5131;
					triggerRef();
					}
					break;
				case 7:
					{
					State = 5132;
					_localctx.@object = Match(VIEW_SYMBOL);
					State = 5133;
					viewRef();
					}
					break;
				case 8:
					{
					State = 5134;
					if (!(serverVersion >= 50704)) throw new FailedPredicateException(this, "serverVersion >= 50704");
					State = 5135;
					_localctx.@object = Match(USER_SYMBOL);
					State = 5136;
					user();
					}
					break;
				}
				}
				break;
			case 31:
				{
				State = 5139;
				_localctx.value = Match(PROCEDURE_SYMBOL);
				State = 5140;
				Match(STATUS_SYMBOL);
				State = 5142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					State = 5141;
					likeOrWhere();
					}
				}

				}
				break;
			case 32:
				{
				State = 5144;
				_localctx.value = Match(FUNCTION_SYMBOL);
				State = 5145;
				Match(STATUS_SYMBOL);
				State = 5147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					State = 5146;
					likeOrWhere();
					}
				}

				}
				break;
			case 33:
				{
				State = 5149;
				_localctx.value = Match(PROCEDURE_SYMBOL);
				State = 5150;
				Match(CODE_SYMBOL);
				State = 5151;
				procedureRef();
				}
				break;
			case 34:
				{
				State = 5152;
				_localctx.value = Match(FUNCTION_SYMBOL);
				State = 5153;
				Match(CODE_SYMBOL);
				State = 5154;
				functionRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCommandTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL_SYMBOL() { return GetToken(MySqlParser.FULL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySqlParser.EXTENDED_SYMBOL, 0); }
		public ShowCommandTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCommandType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowCommandType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowCommandType(this);
		}
	}

	[RuleVersion(0)]
	public ShowCommandTypeContext showCommandType() {
		ShowCommandTypeContext _localctx = new ShowCommandTypeContext(Context, State);
		EnterRule(_localctx, 600, RULE_showCommandType);
		int _la;
		try {
			State = 5163;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,642,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5157;
				Match(FULL_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5158;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 5159;
				Match(EXTENDED_SYMBOL);
				State = 5161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FULL_SYMBOL) {
					{
					State = 5160;
					Match(FULL_SYMBOL);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonBlockingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONBLOCKING_SYMBOL() { return GetToken(MySqlParser.NONBLOCKING_SYMBOL, 0); }
		public NonBlockingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonBlocking; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNonBlocking(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNonBlocking(this);
		}
	}

	[RuleVersion(0)]
	public NonBlockingContext nonBlocking() {
		NonBlockingContext _localctx = new NonBlockingContext(Context, State);
		EnterRule(_localctx, 602, RULE_nonBlocking);
		try {
			State = 5170;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,644,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5165;
				if (!(serverVersion >= 50700 && serverVersion < 50706)) throw new FailedPredicateException(this, "serverVersion >= 50700 && serverVersion < 50706");
				State = 5167;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,643,Context) ) {
				case 1:
					{
					State = 5166;
					Match(NONBLOCKING_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromOrInContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySqlParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_SYMBOL() { return GetToken(MySqlParser.IN_SYMBOL, 0); }
		public FromOrInContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromOrIn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFromOrIn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFromOrIn(this);
		}
	}

	[RuleVersion(0)]
	public FromOrInContext fromOrIn() {
		FromOrInContext _localctx = new FromOrInContext(Context, State);
		EnterRule(_localctx, 604, RULE_fromOrIn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5172;
			_la = TokenStream.LA(1);
			if ( !(_la==FROM_SYMBOL || _la==IN_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InDbContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FromOrInContext fromOrIn() {
			return GetRuleContext<FromOrInContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public InDbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inDb; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInDb(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInDb(this);
		}
	}

	[RuleVersion(0)]
	public InDbContext inDb() {
		InDbContext _localctx = new InDbContext(Context, State);
		EnterRule(_localctx, 606, RULE_inDb);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5174;
			fromOrIn();
			State = 5175;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProfileTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK_SYMBOL() { return GetToken(MySqlParser.BLOCK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IO_SYMBOL() { return GetToken(MySqlParser.IO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTEXT_SYMBOL() { return GetToken(MySqlParser.CONTEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCHES_SYMBOL() { return GetToken(MySqlParser.SWITCHES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAGE_SYMBOL() { return GetToken(MySqlParser.PAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAULTS_SYMBOL() { return GetToken(MySqlParser.FAULTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySqlParser.ALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPU_SYMBOL() { return GetToken(MySqlParser.CPU_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IPC_SYMBOL() { return GetToken(MySqlParser.IPC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY_SYMBOL() { return GetToken(MySqlParser.MEMORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SYMBOL() { return GetToken(MySqlParser.SOURCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWAPS_SYMBOL() { return GetToken(MySqlParser.SWAPS_SYMBOL, 0); }
		public ProfileTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_profileType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterProfileType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitProfileType(this);
		}
	}

	[RuleVersion(0)]
	public ProfileTypeContext profileType() {
		ProfileTypeContext _localctx = new ProfileTypeContext(Context, State);
		EnterRule(_localctx, 608, RULE_profileType);
		int _la;
		try {
			State = 5184;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BLOCK_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5177;
				Match(BLOCK_SYMBOL);
				State = 5178;
				Match(IO_SYMBOL);
				}
				break;
			case CONTEXT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5179;
				Match(CONTEXT_SYMBOL);
				State = 5180;
				Match(SWITCHES_SYMBOL);
				}
				break;
			case PAGE_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5181;
				Match(PAGE_SYMBOL);
				State = 5182;
				Match(FAULTS_SYMBOL);
				}
				break;
			case ALL_SYMBOL:
			case CPU_SYMBOL:
			case IPC_SYMBOL:
			case MEMORY_SYMBOL:
			case SOURCE_SYMBOL:
			case SWAPS_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5183;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL_SYMBOL || _la==CPU_SYMBOL || _la==IPC_SYMBOL || _la==MEMORY_SYMBOL || _la==SOURCE_SYMBOL || _la==SWAPS_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherAdministrativeStatementContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_SYMBOL() { return GetToken(MySqlParser.BINLOG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_SYMBOL() { return GetToken(MySqlParser.INDEX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeyCacheListOrPartsContext keyCacheListOrParts() {
			return GetRuleContext<KeyCacheListOrPartsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_SYMBOL() { return GetToken(MySqlParser.IN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE_SYMBOL() { return GetToken(MySqlParser.CACHE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH_SYMBOL() { return GetToken(MySqlParser.FLUSH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FlushTablesContext flushTables() {
			return GetRuleContext<FlushTablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlushOptionContext[] flushOption() {
			return GetRuleContexts<FlushOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlushOptionContext flushOption(int i) {
			return GetRuleContext<FlushOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoWriteToBinLogContext noWriteToBinLog() {
			return GetRuleContext<NoWriteToBinLogContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KILL_SYMBOL() { return GetToken(MySqlParser.KILL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION_SYMBOL() { return GetToken(MySqlParser.CONNECTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY_SYMBOL() { return GetToken(MySqlParser.QUERY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO_SYMBOL() { return GetToken(MySqlParser.INTO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PreloadTailContext preloadTail() {
			return GetRuleContext<PreloadTailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD_SYMBOL() { return GetToken(MySqlParser.LOAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHUTDOWN_SYMBOL() { return GetToken(MySqlParser.SHUTDOWN_SYMBOL, 0); }
		public OtherAdministrativeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherAdministrativeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOtherAdministrativeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOtherAdministrativeStatement(this);
		}
	}

	[RuleVersion(0)]
	public OtherAdministrativeStatementContext otherAdministrativeStatement() {
		OtherAdministrativeStatementContext _localctx = new OtherAdministrativeStatementContext(Context, State);
		EnterRule(_localctx, 610, RULE_otherAdministrativeStatement);
		int _la;
		try {
			State = 5223;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,651,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5186;
				_localctx.type = Match(BINLOG_SYMBOL);
				State = 5187;
				textLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5188;
				_localctx.type = Match(CACHE_SYMBOL);
				State = 5189;
				Match(INDEX_SYMBOL);
				State = 5190;
				keyCacheListOrParts();
				State = 5191;
				Match(IN_SYMBOL);
				State = 5194;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,646,Context) ) {
				case 1:
					{
					State = 5192;
					identifier();
					}
					break;
				case 2:
					{
					State = 5193;
					Match(DEFAULT_SYMBOL);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5196;
				_localctx.type = Match(FLUSH_SYMBOL);
				State = 5198;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,647,Context) ) {
				case 1:
					{
					State = 5197;
					noWriteToBinLog();
					}
					break;
				}
				State = 5209;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,649,Context) ) {
				case 1:
					{
					State = 5200;
					flushTables();
					}
					break;
				case 2:
					{
					State = 5201;
					flushOption();
					State = 5206;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA_SYMBOL) {
						{
						{
						State = 5202;
						Match(COMMA_SYMBOL);
						State = 5203;
						flushOption();
						}
						}
						State = 5208;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5211;
				_localctx.type = Match(KILL_SYMBOL);
				State = 5213;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,650,Context) ) {
				case 1:
					{
					State = 5212;
					_la = TokenStream.LA(1);
					if ( !(_la==CONNECTION_SYMBOL || _la==QUERY_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 5215;
				expr(0);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5216;
				_localctx.type = Match(LOAD_SYMBOL);
				State = 5217;
				Match(INDEX_SYMBOL);
				State = 5218;
				Match(INTO_SYMBOL);
				State = 5219;
				Match(CACHE_SYMBOL);
				State = 5220;
				preloadTail();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5221;
				if (!(serverVersion >= 50709)) throw new FailedPredicateException(this, "serverVersion >= 50709");
				State = 5222;
				_localctx.type = Match(SHUTDOWN_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyCacheListOrPartsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeyCacheListContext keyCacheList() {
			return GetRuleContext<KeyCacheListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignToKeycachePartitionContext assignToKeycachePartition() {
			return GetRuleContext<AssignToKeycachePartitionContext>(0);
		}
		public KeyCacheListOrPartsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyCacheListOrParts; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterKeyCacheListOrParts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitKeyCacheListOrParts(this);
		}
	}

	[RuleVersion(0)]
	public KeyCacheListOrPartsContext keyCacheListOrParts() {
		KeyCacheListOrPartsContext _localctx = new KeyCacheListOrPartsContext(Context, State);
		EnterRule(_localctx, 612, RULE_keyCacheListOrParts);
		try {
			State = 5227;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,652,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5225;
				keyCacheList();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5226;
				assignToKeycachePartition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyCacheListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignToKeycacheContext[] assignToKeycache() {
			return GetRuleContexts<AssignToKeycacheContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignToKeycacheContext assignToKeycache(int i) {
			return GetRuleContext<AssignToKeycacheContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public KeyCacheListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyCacheList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterKeyCacheList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitKeyCacheList(this);
		}
	}

	[RuleVersion(0)]
	public KeyCacheListContext keyCacheList() {
		KeyCacheListContext _localctx = new KeyCacheListContext(Context, State);
		EnterRule(_localctx, 614, RULE_keyCacheList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5229;
			assignToKeycache();
			State = 5234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 5230;
				Match(COMMA_SYMBOL);
				State = 5231;
				assignToKeycache();
				}
				}
				State = 5236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignToKeycacheContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CacheKeyListContext cacheKeyList() {
			return GetRuleContext<CacheKeyListContext>(0);
		}
		public AssignToKeycacheContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignToKeycache; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAssignToKeycache(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAssignToKeycache(this);
		}
	}

	[RuleVersion(0)]
	public AssignToKeycacheContext assignToKeycache() {
		AssignToKeycacheContext _localctx = new AssignToKeycacheContext(Context, State);
		EnterRule(_localctx, 616, RULE_assignToKeycache);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5237;
			tableRef();
			State = 5239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
				{
				State = 5238;
				cacheKeyList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignToKeycachePartitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySqlParser.PARTITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AllOrPartitionNameListContext allOrPartitionNameList() {
			return GetRuleContext<AllOrPartitionNameListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CacheKeyListContext cacheKeyList() {
			return GetRuleContext<CacheKeyListContext>(0);
		}
		public AssignToKeycachePartitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignToKeycachePartition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAssignToKeycachePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAssignToKeycachePartition(this);
		}
	}

	[RuleVersion(0)]
	public AssignToKeycachePartitionContext assignToKeycachePartition() {
		AssignToKeycachePartitionContext _localctx = new AssignToKeycachePartitionContext(Context, State);
		EnterRule(_localctx, 618, RULE_assignToKeycachePartition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5241;
			tableRef();
			State = 5242;
			Match(PARTITION_SYMBOL);
			State = 5243;
			Match(OPEN_PAR_SYMBOL);
			State = 5244;
			allOrPartitionNameList();
			State = 5245;
			Match(CLOSE_PAR_SYMBOL);
			State = 5247;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
				{
				State = 5246;
				cacheKeyList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CacheKeyListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeyOrIndexContext keyOrIndex() {
			return GetRuleContext<KeyOrIndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeyUsageListContext keyUsageList() {
			return GetRuleContext<KeyUsageListContext>(0);
		}
		public CacheKeyListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cacheKeyList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCacheKeyList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCacheKeyList(this);
		}
	}

	[RuleVersion(0)]
	public CacheKeyListContext cacheKeyList() {
		CacheKeyListContext _localctx = new CacheKeyListContext(Context, State);
		EnterRule(_localctx, 620, RULE_cacheKeyList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5249;
			keyOrIndex();
			State = 5250;
			Match(OPEN_PAR_SYMBOL);
			State = 5252;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,656,Context) ) {
			case 1:
				{
				State = 5251;
				keyUsageList();
				}
				break;
			}
			State = 5254;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyUsageElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY_SYMBOL() { return GetToken(MySqlParser.PRIMARY_SYMBOL, 0); }
		public KeyUsageElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyUsageElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterKeyUsageElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitKeyUsageElement(this);
		}
	}

	[RuleVersion(0)]
	public KeyUsageElementContext keyUsageElement() {
		KeyUsageElementContext _localctx = new KeyUsageElementContext(Context, State);
		EnterRule(_localctx, 622, RULE_keyUsageElement);
		try {
			State = 5258;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,657,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5256;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5257;
				Match(PRIMARY_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyUsageListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeyUsageElementContext[] keyUsageElement() {
			return GetRuleContexts<KeyUsageElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyUsageElementContext keyUsageElement(int i) {
			return GetRuleContext<KeyUsageElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public KeyUsageListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyUsageList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterKeyUsageList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitKeyUsageList(this);
		}
	}

	[RuleVersion(0)]
	public KeyUsageListContext keyUsageList() {
		KeyUsageListContext _localctx = new KeyUsageListContext(Context, State);
		EnterRule(_localctx, 624, RULE_keyUsageList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5260;
			keyUsageElement();
			State = 5265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 5261;
				Match(COMMA_SYMBOL);
				State = 5262;
				keyUsageElement();
				}
				}
				State = 5267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlushOptionContext : ParserRuleContext {
		public IToken option;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DES_KEY_FILE_SYMBOL() { return GetToken(MySqlParser.DES_KEY_FILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOSTS_SYMBOL() { return GetToken(MySqlParser.HOSTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES_SYMBOL() { return GetToken(MySqlParser.PRIVILEGES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS_SYMBOL() { return GetToken(MySqlParser.STATUS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_RESOURCES_SYMBOL() { return GetToken(MySqlParser.USER_RESOURCES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS_SYMBOL() { return GetToken(MySqlParser.LOGS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogTypeContext logType() {
			return GetRuleContext<LogTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_SYMBOL() { return GetToken(MySqlParser.RELAY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChannelContext channel() {
			return GetRuleContext<ChannelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE_SYMBOL() { return GetToken(MySqlParser.CACHE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY_SYMBOL() { return GetToken(MySqlParser.QUERY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIMIZER_COSTS_SYMBOL() { return GetToken(MySqlParser.OPTIMIZER_COSTS_SYMBOL, 0); }
		public FlushOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flushOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFlushOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFlushOption(this);
		}
	}

	[RuleVersion(0)]
	public FlushOptionContext flushOption() {
		FlushOptionContext _localctx = new FlushOptionContext(Context, State);
		EnterRule(_localctx, 626, RULE_flushOption);
		int _la;
		try {
			State = 5283;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,661,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5268;
				_localctx.option = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DES_KEY_FILE_SYMBOL || _la==HOSTS_SYMBOL || _la==PRIVILEGES_SYMBOL || _la==STATUS_SYMBOL || _la==USER_RESOURCES_SYMBOL) ) {
					_localctx.option = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BINARY_SYMBOL || ((((_la - 163)) & ~0x3f) == 0 && ((1L << (_la - 163)) & ((1L << (ENGINE_SYMBOL - 163)) | (1L << (ERROR_SYMBOL - 163)) | (1L << (GENERAL_SYMBOL - 163)))) != 0) || _la==SLOW_SYMBOL) {
					{
					State = 5269;
					logType();
					}
				}

				State = 5272;
				_localctx.option = Match(LOGS_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5273;
				_localctx.option = Match(RELAY_SYMBOL);
				State = 5274;
				Match(LOGS_SYMBOL);
				State = 5276;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,660,Context) ) {
				case 1:
					{
					State = 5275;
					channel();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5278;
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				State = 5279;
				_localctx.option = Match(QUERY_SYMBOL);
				State = 5280;
				Match(CACHE_SYMBOL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5281;
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				State = 5282;
				_localctx.option = Match(OPTIMIZER_COSTS_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySqlParser.BINARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySqlParser.ENGINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR_SYMBOL() { return GetToken(MySqlParser.ERROR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERAL_SYMBOL() { return GetToken(MySqlParser.GENERAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLOW_SYMBOL() { return GetToken(MySqlParser.SLOW_SYMBOL, 0); }
		public LogTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLogType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLogType(this);
		}
	}

	[RuleVersion(0)]
	public LogTypeContext logType() {
		LogTypeContext _localctx = new LogTypeContext(Context, State);
		EnterRule(_localctx, 628, RULE_logType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5285;
			_la = TokenStream.LA(1);
			if ( !(_la==BINARY_SYMBOL || ((((_la - 163)) & ~0x3f) == 0 && ((1L << (_la - 163)) & ((1L << (ENGINE_SYMBOL - 163)) | (1L << (ERROR_SYMBOL - 163)) | (1L << (GENERAL_SYMBOL - 163)))) != 0) || _la==SLOW_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlushTablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES_SYMBOL() { return GetToken(MySqlParser.TABLES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySqlParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySqlParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_SYMBOL() { return GetToken(MySqlParser.READ_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK_SYMBOL() { return GetToken(MySqlParser.LOCK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlushTablesOptionsContext flushTablesOptions() {
			return GetRuleContext<FlushTablesOptionsContext>(0);
		}
		public FlushTablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flushTables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFlushTables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFlushTables(this);
		}
	}

	[RuleVersion(0)]
	public FlushTablesContext flushTables() {
		FlushTablesContext _localctx = new FlushTablesContext(Context, State);
		EnterRule(_localctx, 630, RULE_flushTables);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5287;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5295;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,663,Context) ) {
			case 1:
				{
				State = 5288;
				Match(WITH_SYMBOL);
				State = 5289;
				Match(READ_SYMBOL);
				State = 5290;
				Match(LOCK_SYMBOL);
				}
				break;
			case 2:
				{
				State = 5291;
				identifierList();
				State = 5293;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,662,Context) ) {
				case 1:
					{
					State = 5292;
					flushTablesOptions();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlushTablesOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySqlParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT_SYMBOL() { return GetToken(MySqlParser.EXPORT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySqlParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_SYMBOL() { return GetToken(MySqlParser.READ_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK_SYMBOL() { return GetToken(MySqlParser.LOCK_SYMBOL, 0); }
		public FlushTablesOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flushTablesOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFlushTablesOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFlushTablesOptions(this);
		}
	}

	[RuleVersion(0)]
	public FlushTablesOptionsContext flushTablesOptions() {
		FlushTablesOptionsContext _localctx = new FlushTablesOptionsContext(Context, State);
		EnterRule(_localctx, 632, RULE_flushTablesOptions);
		try {
			State = 5303;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,664,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5297;
				if (!(serverVersion >= 50606)) throw new FailedPredicateException(this, "serverVersion >= 50606");
				State = 5298;
				Match(FOR_SYMBOL);
				State = 5299;
				Match(EXPORT_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5300;
				Match(WITH_SYMBOL);
				State = 5301;
				Match(READ_SYMBOL);
				State = 5302;
				Match(LOCK_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreloadTailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdminPartitionContext adminPartition() {
			return GetRuleContext<AdminPartitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CacheKeyListContext cacheKeyList() {
			return GetRuleContext<CacheKeyListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySqlParser.IGNORE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAVES_SYMBOL() { return GetToken(MySqlParser.LEAVES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PreloadListContext preloadList() {
			return GetRuleContext<PreloadListContext>(0);
		}
		public PreloadTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preloadTail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPreloadTail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPreloadTail(this);
		}
	}

	[RuleVersion(0)]
	public PreloadTailContext preloadTail() {
		PreloadTailContext _localctx = new PreloadTailContext(Context, State);
		EnterRule(_localctx, 634, RULE_preloadTail);
		int _la;
		try {
			State = 5315;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,667,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5305;
				tableRef();
				State = 5306;
				adminPartition();
				State = 5308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
					{
					State = 5307;
					cacheKeyList();
					}
				}

				State = 5312;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IGNORE_SYMBOL) {
					{
					State = 5310;
					Match(IGNORE_SYMBOL);
					State = 5311;
					Match(LEAVES_SYMBOL);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5314;
				preloadList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreloadListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PreloadKeysContext[] preloadKeys() {
			return GetRuleContexts<PreloadKeysContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreloadKeysContext preloadKeys(int i) {
			return GetRuleContext<PreloadKeysContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public PreloadListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preloadList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPreloadList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPreloadList(this);
		}
	}

	[RuleVersion(0)]
	public PreloadListContext preloadList() {
		PreloadListContext _localctx = new PreloadListContext(Context, State);
		EnterRule(_localctx, 636, RULE_preloadList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5317;
			preloadKeys();
			State = 5322;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 5318;
				Match(COMMA_SYMBOL);
				State = 5319;
				preloadKeys();
				}
				}
				State = 5324;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreloadKeysContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CacheKeyListContext cacheKeyList() {
			return GetRuleContext<CacheKeyListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySqlParser.IGNORE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAVES_SYMBOL() { return GetToken(MySqlParser.LEAVES_SYMBOL, 0); }
		public PreloadKeysContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preloadKeys; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPreloadKeys(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPreloadKeys(this);
		}
	}

	[RuleVersion(0)]
	public PreloadKeysContext preloadKeys() {
		PreloadKeysContext _localctx = new PreloadKeysContext(Context, State);
		EnterRule(_localctx, 638, RULE_preloadKeys);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5325;
			tableRef();
			State = 5327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
				{
				State = 5326;
				cacheKeyList();
				}
			}

			State = 5331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE_SYMBOL) {
				{
				State = 5329;
				Match(IGNORE_SYMBOL);
				State = 5330;
				Match(LEAVES_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdminPartitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySqlParser.PARTITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AllOrPartitionNameListContext allOrPartitionNameList() {
			return GetRuleContext<AllOrPartitionNameListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public AdminPartitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_adminPartition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAdminPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAdminPartition(this);
		}
	}

	[RuleVersion(0)]
	public AdminPartitionContext adminPartition() {
		AdminPartitionContext _localctx = new AdminPartitionContext(Context, State);
		EnterRule(_localctx, 640, RULE_adminPartition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5333;
			Match(PARTITION_SYMBOL);
			State = 5334;
			Match(OPEN_PAR_SYMBOL);
			State = 5335;
			allOrPartitionNameList();
			State = 5336;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceGroupManagementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateResourceGroupContext createResourceGroup() {
			return GetRuleContext<CreateResourceGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterResourceGroupContext alterResourceGroup() {
			return GetRuleContext<AlterResourceGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetResourceGroupContext setResourceGroup() {
			return GetRuleContext<SetResourceGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropResourceGroupContext dropResourceGroup() {
			return GetRuleContext<DropResourceGroupContext>(0);
		}
		public ResourceGroupManagementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceGroupManagement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterResourceGroupManagement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitResourceGroupManagement(this);
		}
	}

	[RuleVersion(0)]
	public ResourceGroupManagementContext resourceGroupManagement() {
		ResourceGroupManagementContext _localctx = new ResourceGroupManagementContext(Context, State);
		EnterRule(_localctx, 642, RULE_resourceGroupManagement);
		try {
			State = 5342;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CREATE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5338;
				createResourceGroup();
				}
				break;
			case ALTER_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5339;
				alterResourceGroup();
				}
				break;
			case SET_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5340;
				setResourceGroup();
				}
				break;
			case DROP_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5341;
				dropResourceGroup();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateResourceGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySqlParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_SYMBOL() { return GetToken(MySqlParser.RESOURCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_SYMBOL() { return GetToken(MySqlParser.GROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_SYMBOL() { return GetToken(MySqlParser.TYPE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySqlParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_SYMBOL() { return GetToken(MySqlParser.SYSTEM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResourceGroupVcpuListContext resourceGroupVcpuList() {
			return GetRuleContext<ResourceGroupVcpuListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResourceGroupPriorityContext resourceGroupPriority() {
			return GetRuleContext<ResourceGroupPriorityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResourceGroupEnableDisableContext resourceGroupEnableDisable() {
			return GetRuleContext<ResourceGroupEnableDisableContext>(0);
		}
		public CreateResourceGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createResourceGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateResourceGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateResourceGroup(this);
		}
	}

	[RuleVersion(0)]
	public CreateResourceGroupContext createResourceGroup() {
		CreateResourceGroupContext _localctx = new CreateResourceGroupContext(Context, State);
		EnterRule(_localctx, 644, RULE_createResourceGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5344;
			Match(CREATE_SYMBOL);
			State = 5345;
			Match(RESOURCE_SYMBOL);
			State = 5346;
			Match(GROUP_SYMBOL);
			State = 5347;
			identifier();
			State = 5348;
			Match(TYPE_SYMBOL);
			State = 5350;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) {
				{
				State = 5349;
				equal();
				}
			}

			State = 5352;
			_la = TokenStream.LA(1);
			if ( !(_la==USER_SYMBOL || _la==SYSTEM_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5354;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VCPU_SYMBOL) {
				{
				State = 5353;
				resourceGroupVcpuList();
				}
			}

			State = 5357;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THREAD_PRIORITY_SYMBOL) {
				{
				State = 5356;
				resourceGroupPriority();
				}
			}

			State = 5360;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DISABLE_SYMBOL || _la==ENABLE_SYMBOL) {
				{
				State = 5359;
				resourceGroupEnableDisable();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceGroupVcpuListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VCPU_SYMBOL() { return GetToken(MySqlParser.VCPU_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VcpuNumOrRangeContext[] vcpuNumOrRange() {
			return GetRuleContexts<VcpuNumOrRangeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VcpuNumOrRangeContext vcpuNumOrRange(int i) {
			return GetRuleContext<VcpuNumOrRangeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public ResourceGroupVcpuListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceGroupVcpuList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterResourceGroupVcpuList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitResourceGroupVcpuList(this);
		}
	}

	[RuleVersion(0)]
	public ResourceGroupVcpuListContext resourceGroupVcpuList() {
		ResourceGroupVcpuListContext _localctx = new ResourceGroupVcpuListContext(Context, State);
		EnterRule(_localctx, 646, RULE_resourceGroupVcpuList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5362;
			Match(VCPU_SYMBOL);
			State = 5364;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) {
				{
				State = 5363;
				equal();
				}
			}

			State = 5366;
			vcpuNumOrRange();
			State = 5373;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INT_NUMBER || _la==COMMA_SYMBOL) {
				{
				{
				State = 5368;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 5367;
					Match(COMMA_SYMBOL);
					}
				}

				State = 5370;
				vcpuNumOrRange();
				}
				}
				State = 5375;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VcpuNumOrRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT_NUMBER() { return GetTokens(MySqlParser.INT_NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER(int i) {
			return GetToken(MySqlParser.INT_NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_OPERATOR() { return GetToken(MySqlParser.MINUS_OPERATOR, 0); }
		public VcpuNumOrRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vcpuNumOrRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterVcpuNumOrRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitVcpuNumOrRange(this);
		}
	}

	[RuleVersion(0)]
	public VcpuNumOrRangeContext vcpuNumOrRange() {
		VcpuNumOrRangeContext _localctx = new VcpuNumOrRangeContext(Context, State);
		EnterRule(_localctx, 648, RULE_vcpuNumOrRange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5376;
			Match(INT_NUMBER);
			State = 5379;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS_OPERATOR) {
				{
				State = 5377;
				Match(MINUS_OPERATOR);
				State = 5378;
				Match(INT_NUMBER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceGroupPriorityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THREAD_PRIORITY_SYMBOL() { return GetToken(MySqlParser.THREAD_PRIORITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySqlParser.INT_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		public ResourceGroupPriorityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceGroupPriority; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterResourceGroupPriority(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitResourceGroupPriority(this);
		}
	}

	[RuleVersion(0)]
	public ResourceGroupPriorityContext resourceGroupPriority() {
		ResourceGroupPriorityContext _localctx = new ResourceGroupPriorityContext(Context, State);
		EnterRule(_localctx, 650, RULE_resourceGroupPriority);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5381;
			Match(THREAD_PRIORITY_SYMBOL);
			State = 5383;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) {
				{
				State = 5382;
				equal();
				}
			}

			State = 5385;
			Match(INT_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceGroupEnableDisableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_SYMBOL() { return GetToken(MySqlParser.ENABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_SYMBOL() { return GetToken(MySqlParser.DISABLE_SYMBOL, 0); }
		public ResourceGroupEnableDisableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceGroupEnableDisable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterResourceGroupEnableDisable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitResourceGroupEnableDisable(this);
		}
	}

	[RuleVersion(0)]
	public ResourceGroupEnableDisableContext resourceGroupEnableDisable() {
		ResourceGroupEnableDisableContext _localctx = new ResourceGroupEnableDisableContext(Context, State);
		EnterRule(_localctx, 652, RULE_resourceGroupEnableDisable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5387;
			_la = TokenStream.LA(1);
			if ( !(_la==DISABLE_SYMBOL || _la==ENABLE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterResourceGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER_SYMBOL() { return GetToken(MySqlParser.ALTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_SYMBOL() { return GetToken(MySqlParser.RESOURCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_SYMBOL() { return GetToken(MySqlParser.GROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ResourceGroupRefContext resourceGroupRef() {
			return GetRuleContext<ResourceGroupRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResourceGroupVcpuListContext resourceGroupVcpuList() {
			return GetRuleContext<ResourceGroupVcpuListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResourceGroupPriorityContext resourceGroupPriority() {
			return GetRuleContext<ResourceGroupPriorityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResourceGroupEnableDisableContext resourceGroupEnableDisable() {
			return GetRuleContext<ResourceGroupEnableDisableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE_SYMBOL() { return GetToken(MySqlParser.FORCE_SYMBOL, 0); }
		public AlterResourceGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterResourceGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterResourceGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterResourceGroup(this);
		}
	}

	[RuleVersion(0)]
	public AlterResourceGroupContext alterResourceGroup() {
		AlterResourceGroupContext _localctx = new AlterResourceGroupContext(Context, State);
		EnterRule(_localctx, 654, RULE_alterResourceGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5389;
			Match(ALTER_SYMBOL);
			State = 5390;
			Match(RESOURCE_SYMBOL);
			State = 5391;
			Match(GROUP_SYMBOL);
			State = 5392;
			resourceGroupRef();
			State = 5394;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VCPU_SYMBOL) {
				{
				State = 5393;
				resourceGroupVcpuList();
				}
			}

			State = 5397;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THREAD_PRIORITY_SYMBOL) {
				{
				State = 5396;
				resourceGroupPriority();
				}
			}

			State = 5400;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DISABLE_SYMBOL || _la==ENABLE_SYMBOL) {
				{
				State = 5399;
				resourceGroupEnableDisable();
				}
			}

			State = 5403;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FORCE_SYMBOL) {
				{
				State = 5402;
				Match(FORCE_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetResourceGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySqlParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_SYMBOL() { return GetToken(MySqlParser.RESOURCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_SYMBOL() { return GetToken(MySqlParser.GROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySqlParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ThreadIdListContext threadIdList() {
			return GetRuleContext<ThreadIdListContext>(0);
		}
		public SetResourceGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setResourceGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetResourceGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetResourceGroup(this);
		}
	}

	[RuleVersion(0)]
	public SetResourceGroupContext setResourceGroup() {
		SetResourceGroupContext _localctx = new SetResourceGroupContext(Context, State);
		EnterRule(_localctx, 656, RULE_setResourceGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5405;
			Match(SET_SYMBOL);
			State = 5406;
			Match(RESOURCE_SYMBOL);
			State = 5407;
			Match(GROUP_SYMBOL);
			State = 5408;
			identifier();
			State = 5411;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR_SYMBOL) {
				{
				State = 5409;
				Match(FOR_SYMBOL);
				State = 5410;
				threadIdList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThreadIdListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext[] real_ulong_number() {
			return GetRuleContexts<Real_ulong_numberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number(int i) {
			return GetRuleContext<Real_ulong_numberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public ThreadIdListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_threadIdList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterThreadIdList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitThreadIdList(this);
		}
	}

	[RuleVersion(0)]
	public ThreadIdListContext threadIdList() {
		ThreadIdListContext _localctx = new ThreadIdListContext(Context, State);
		EnterRule(_localctx, 658, RULE_threadIdList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5413;
			real_ulong_number();
			State = 5420;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 747)) & ~0x3f) == 0 && ((1L << (_la - 747)) & ((1L << (INT_NUMBER - 747)) | (1L << (LONG_NUMBER - 747)) | (1L << (ULONGLONG_NUMBER - 747)) | (1L << (COMMA_SYMBOL - 747)) | (1L << (HEX_NUMBER - 747)))) != 0)) {
				{
				{
				State = 5415;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 5414;
					Match(COMMA_SYMBOL);
					}
				}

				State = 5417;
				real_ulong_number();
				}
				}
				State = 5422;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropResourceGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP_SYMBOL() { return GetToken(MySqlParser.DROP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_SYMBOL() { return GetToken(MySqlParser.RESOURCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_SYMBOL() { return GetToken(MySqlParser.GROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ResourceGroupRefContext resourceGroupRef() {
			return GetRuleContext<ResourceGroupRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE_SYMBOL() { return GetToken(MySqlParser.FORCE_SYMBOL, 0); }
		public DropResourceGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropResourceGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropResourceGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropResourceGroup(this);
		}
	}

	[RuleVersion(0)]
	public DropResourceGroupContext dropResourceGroup() {
		DropResourceGroupContext _localctx = new DropResourceGroupContext(Context, State);
		EnterRule(_localctx, 660, RULE_dropResourceGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5423;
			Match(DROP_SYMBOL);
			State = 5424;
			Match(RESOURCE_SYMBOL);
			State = 5425;
			Match(GROUP_SYMBOL);
			State = 5426;
			resourceGroupRef();
			State = 5428;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FORCE_SYMBOL) {
				{
				State = 5427;
				Match(FORCE_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UtilityStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DescribeStatementContext describeStatement() {
			return GetRuleContext<DescribeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplainStatementContext explainStatement() {
			return GetRuleContext<ExplainStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HelpCommandContext helpCommand() {
			return GetRuleContext<HelpCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseCommandContext useCommand() {
			return GetRuleContext<UseCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RestartServerContext restartServer() {
			return GetRuleContext<RestartServerContext>(0);
		}
		public UtilityStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_utilityStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUtilityStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUtilityStatement(this);
		}
	}

	[RuleVersion(0)]
	public UtilityStatementContext utilityStatement() {
		UtilityStatementContext _localctx = new UtilityStatementContext(Context, State);
		EnterRule(_localctx, 662, RULE_utilityStatement);
		try {
			State = 5436;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,689,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5430;
				describeStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5431;
				explainStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5432;
				helpCommand();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5433;
				useCommand();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5434;
				if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
				State = 5435;
				restartServer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescribeStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN_SYMBOL() { return GetToken(MySqlParser.EXPLAIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIBE_SYMBOL() { return GetToken(MySqlParser.DESCRIBE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC_SYMBOL() { return GetToken(MySqlParser.DESC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnRefContext columnRef() {
			return GetRuleContext<ColumnRefContext>(0);
		}
		public DescribeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_describeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDescribeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDescribeStatement(this);
		}
	}

	[RuleVersion(0)]
	public DescribeStatementContext describeStatement() {
		DescribeStatementContext _localctx = new DescribeStatementContext(Context, State);
		EnterRule(_localctx, 664, RULE_describeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5438;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (DESC_SYMBOL - 134)) | (1L << (DESCRIBE_SYMBOL - 134)) | (1L << (EXPLAIN_SYMBOL - 134)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5439;
			tableRef();
			State = 5442;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,690,Context) ) {
			case 1:
				{
				State = 5440;
				textString();
				}
				break;
			case 2:
				{
				State = 5441;
				columnRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplainStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExplainableStatementContext explainableStatement() {
			return GetRuleContext<ExplainableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN_SYMBOL() { return GetToken(MySqlParser.EXPLAIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIBE_SYMBOL() { return GetToken(MySqlParser.DESCRIBE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC_SYMBOL() { return GetToken(MySqlParser.DESC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySqlParser.EXTENDED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONS_SYMBOL() { return GetToken(MySqlParser.PARTITIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT_SYMBOL() { return GetToken(MySqlParser.FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE_SYMBOL() { return GetToken(MySqlParser.ANALYZE_SYMBOL, 0); }
		public ExplainStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explainStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExplainStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExplainStatement(this);
		}
	}

	[RuleVersion(0)]
	public ExplainStatementContext explainStatement() {
		ExplainStatementContext _localctx = new ExplainStatementContext(Context, State);
		EnterRule(_localctx, 666, RULE_explainStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5444;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (DESC_SYMBOL - 134)) | (1L << (DESCRIBE_SYMBOL - 134)) | (1L << (EXPLAIN_SYMBOL - 134)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5460;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,691,Context) ) {
			case 1:
				{
				State = 5445;
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				State = 5446;
				Match(EXTENDED_SYMBOL);
				}
				break;
			case 2:
				{
				State = 5447;
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				State = 5448;
				Match(PARTITIONS_SYMBOL);
				}
				break;
			case 3:
				{
				State = 5449;
				if (!(serverVersion >= 50605)) throw new FailedPredicateException(this, "serverVersion >= 50605");
				State = 5450;
				Match(FORMAT_SYMBOL);
				State = 5451;
				Match(EQUAL_OPERATOR);
				State = 5452;
				textOrIdentifier();
				}
				break;
			case 4:
				{
				State = 5453;
				if (!(serverVersion >= 80018)) throw new FailedPredicateException(this, "serverVersion >= 80018");
				State = 5454;
				Match(ANALYZE_SYMBOL);
				}
				break;
			case 5:
				{
				State = 5455;
				if (!(serverVersion >= 80019)) throw new FailedPredicateException(this, "serverVersion >= 80019");
				State = 5456;
				Match(ANALYZE_SYMBOL);
				State = 5457;
				Match(FORMAT_SYMBOL);
				State = 5458;
				Match(EQUAL_OPERATOR);
				State = 5459;
				textOrIdentifier();
				}
				break;
			}
			State = 5462;
			explainableStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplainableStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertStatementContext insertStatement() {
			return GetRuleContext<InsertStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplaceStatementContext replaceStatement() {
			return GetRuleContext<ReplaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateStatementContext updateStatement() {
			return GetRuleContext<UpdateStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySqlParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION_SYMBOL() { return GetToken(MySqlParser.CONNECTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		public ExplainableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explainableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExplainableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExplainableStatement(this);
		}
	}

	[RuleVersion(0)]
	public ExplainableStatementContext explainableStatement() {
		ExplainableStatementContext _localctx = new ExplainableStatementContext(Context, State);
		EnterRule(_localctx, 668, RULE_explainableStatement);
		try {
			State = 5476;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,693,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5464;
				selectStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5465;
				if (!(serverVersion >= 50603)) throw new FailedPredicateException(this, "serverVersion >= 50603");
				State = 5470;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,692,Context) ) {
				case 1:
					{
					State = 5466;
					deleteStatement();
					}
					break;
				case 2:
					{
					State = 5467;
					insertStatement();
					}
					break;
				case 3:
					{
					State = 5468;
					replaceStatement();
					}
					break;
				case 4:
					{
					State = 5469;
					updateStatement();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5472;
				if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
				State = 5473;
				Match(FOR_SYMBOL);
				State = 5474;
				Match(CONNECTION_SYMBOL);
				State = 5475;
				real_ulong_number();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HelpCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HELP_SYMBOL() { return GetToken(MySqlParser.HELP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public HelpCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_helpCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHelpCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHelpCommand(this);
		}
	}

	[RuleVersion(0)]
	public HelpCommandContext helpCommand() {
		HelpCommandContext _localctx = new HelpCommandContext(Context, State);
		EnterRule(_localctx, 670, RULE_helpCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5478;
			Match(HELP_SYMBOL);
			State = 5479;
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_SYMBOL() { return GetToken(MySqlParser.USE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public UseCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUseCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUseCommand(this);
		}
	}

	[RuleVersion(0)]
	public UseCommandContext useCommand() {
		UseCommandContext _localctx = new UseCommandContext(Context, State);
		EnterRule(_localctx, 672, RULE_useCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5481;
			Match(USE_SYMBOL);
			State = 5482;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RestartServerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART_SYMBOL() { return GetToken(MySqlParser.RESTART_SYMBOL, 0); }
		public RestartServerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_restartServer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRestartServer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRestartServer(this);
		}
	}

	[RuleVersion(0)]
	public RestartServerContext restartServer() {
		RestartServerContext _localctx = new RestartServerContext(Context, State);
		EnterRule(_localctx, 674, RULE_restartServer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5484;
			Match(RESTART_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprOrContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_SYMBOL() { return GetToken(MySqlParser.OR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_OR_OPERATOR() { return GetToken(MySqlParser.LOGICAL_OR_OPERATOR, 0); }
		public ExprOrContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExprOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExprOr(this);
		}
	}
	public partial class ExprNotContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_SYMBOL() { return GetToken(MySqlParser.NOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprNotContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExprNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExprNot(this);
		}
	}
	public partial class ExprIsContext : ExprContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public BoolPriContext boolPri() {
			return GetRuleContext<BoolPriContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_SYMBOL() { return GetToken(MySqlParser.IS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE_SYMBOL() { return GetToken(MySqlParser.TRUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE_SYMBOL() { return GetToken(MySqlParser.FALSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN_SYMBOL() { return GetToken(MySqlParser.UNKNOWN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NotRuleContext notRule() {
			return GetRuleContext<NotRuleContext>(0);
		}
		public ExprIsContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExprIs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExprIs(this);
		}
	}
	public partial class ExprAndContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_SYMBOL() { return GetToken(MySqlParser.AND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_AND_OPERATOR() { return GetToken(MySqlParser.LOGICAL_AND_OPERATOR, 0); }
		public ExprAndContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExprAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExprAnd(this);
		}
	}
	public partial class ExprXorContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR_SYMBOL() { return GetToken(MySqlParser.XOR_SYMBOL, 0); }
		public ExprXorContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExprXor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExprXor(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 676;
		EnterRecursionRule(_localctx, 676, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5497;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,696,Context) ) {
			case 1:
				{
				_localctx = new ExprIsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 5487;
				boolPri(0);
				State = 5493;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,695,Context) ) {
				case 1:
					{
					State = 5488;
					Match(IS_SYMBOL);
					State = 5490;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NOT_SYMBOL || _la==NOT2_SYMBOL) {
						{
						State = 5489;
						notRule();
						}
					}

					State = 5492;
					((ExprIsContext)_localctx).type = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==FALSE_SYMBOL || _la==TRUE_SYMBOL || _la==UNKNOWN_SYMBOL) ) {
						((ExprIsContext)_localctx).type = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				_localctx = new ExprNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5495;
				Match(NOT_SYMBOL);
				State = 5496;
				expr(4);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 5510;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,698,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 5508;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,697,Context) ) {
					case 1:
						{
						_localctx = new ExprAndContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 5499;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 5500;
						((ExprAndContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==AND_SYMBOL || _la==LOGICAL_AND_OPERATOR) ) {
							((ExprAndContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 5501;
						expr(4);
						}
						break;
					case 2:
						{
						_localctx = new ExprXorContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 5502;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 5503;
						Match(XOR_SYMBOL);
						State = 5504;
						expr(3);
						}
						break;
					case 3:
						{
						_localctx = new ExprOrContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 5505;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 5506;
						((ExprOrContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==OR_SYMBOL || _la==LOGICAL_OR_OPERATOR) ) {
							((ExprOrContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 5507;
						expr(2);
						}
						break;
					}
					} 
				}
				State = 5512;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,698,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BoolPriContext : ParserRuleContext {
		public BoolPriContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolPri; } }
	 
		public BoolPriContext() { }
		public virtual void CopyFrom(BoolPriContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrimaryExprPredicateContext : BoolPriContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public PrimaryExprPredicateContext(BoolPriContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExprPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExprPredicate(this);
		}
	}
	public partial class PrimaryExprCompareContext : BoolPriContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolPriContext boolPri() {
			return GetRuleContext<BoolPriContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompOpContext compOp() {
			return GetRuleContext<CompOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public PrimaryExprCompareContext(BoolPriContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExprCompare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExprCompare(this);
		}
	}
	public partial class PrimaryExprAllAnyContext : BoolPriContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolPriContext boolPri() {
			return GetRuleContext<BoolPriContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompOpContext compOp() {
			return GetRuleContext<CompOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySqlParser.ALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY_SYMBOL() { return GetToken(MySqlParser.ANY_SYMBOL, 0); }
		public PrimaryExprAllAnyContext(BoolPriContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExprAllAny(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExprAllAny(this);
		}
	}
	public partial class PrimaryExprIsNullContext : BoolPriContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolPriContext boolPri() {
			return GetRuleContext<BoolPriContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_SYMBOL() { return GetToken(MySqlParser.IS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_SYMBOL() { return GetToken(MySqlParser.NULL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NotRuleContext notRule() {
			return GetRuleContext<NotRuleContext>(0);
		}
		public PrimaryExprIsNullContext(BoolPriContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExprIsNull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExprIsNull(this);
		}
	}

	[RuleVersion(0)]
	public BoolPriContext boolPri() {
		return boolPri(0);
	}

	private BoolPriContext boolPri(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BoolPriContext _localctx = new BoolPriContext(Context, _parentState);
		BoolPriContext _prevctx = _localctx;
		int _startState = 678;
		EnterRecursionRule(_localctx, 678, RULE_boolPri, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PrimaryExprPredicateContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 5514;
			predicate();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 5533;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,701,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 5531;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,700,Context) ) {
					case 1:
						{
						_localctx = new PrimaryExprIsNullContext(new BoolPriContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_boolPri);
						State = 5516;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 5517;
						Match(IS_SYMBOL);
						State = 5519;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT_SYMBOL || _la==NOT2_SYMBOL) {
							{
							State = 5518;
							notRule();
							}
						}

						State = 5521;
						Match(NULL_SYMBOL);
						}
						break;
					case 2:
						{
						_localctx = new PrimaryExprCompareContext(new BoolPriContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_boolPri);
						State = 5522;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 5523;
						compOp();
						State = 5524;
						predicate();
						}
						break;
					case 3:
						{
						_localctx = new PrimaryExprAllAnyContext(new BoolPriContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_boolPri);
						State = 5526;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 5527;
						compOp();
						State = 5528;
						_la = TokenStream.LA(1);
						if ( !(_la==ALL_SYMBOL || _la==ANY_SYMBOL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 5529;
						subquery();
						}
						break;
					}
					} 
				}
				State = 5535;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,701,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CompOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_SAFE_EQUAL_OPERATOR() { return GetToken(MySqlParser.NULL_SAFE_EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQUAL_OPERATOR() { return GetToken(MySqlParser.GREATER_OR_EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN_OPERATOR() { return GetToken(MySqlParser.GREATER_THAN_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQUAL_OPERATOR() { return GetToken(MySqlParser.LESS_OR_EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_THAN_OPERATOR() { return GetToken(MySqlParser.LESS_THAN_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUAL_OPERATOR() { return GetToken(MySqlParser.NOT_EQUAL_OPERATOR, 0); }
		public CompOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCompOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCompOp(this);
		}
	}

	[RuleVersion(0)]
	public CompOpContext compOp() {
		CompOpContext _localctx = new CompOpContext(Context, State);
		EnterRule(_localctx, 680, RULE_compOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5536;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 750)) & ~0x3f) == 0 && ((1L << (_la - 750)) & ((1L << (EQUAL_OPERATOR - 750)) | (1L << (NULL_SAFE_EQUAL_OPERATOR - 750)) | (1L << (GREATER_OR_EQUAL_OPERATOR - 750)) | (1L << (GREATER_THAN_OPERATOR - 750)) | (1L << (LESS_OR_EQUAL_OPERATOR - 750)) | (1L << (LESS_THAN_OPERATOR - 750)) | (1L << (NOT_EQUAL_OPERATOR - 750)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BitExprContext[] bitExpr() {
			return GetRuleContexts<BitExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitExprContext bitExpr(int i) {
			return GetRuleContext<BitExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateOperationsContext predicateOperations() {
			return GetRuleContext<PredicateOperationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMBER_SYMBOL() { return GetToken(MySqlParser.MEMBER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprWithParenthesesContext simpleExprWithParentheses() {
			return GetRuleContext<SimpleExprWithParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOUNDS_SYMBOL() { return GetToken(MySqlParser.SOUNDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE_SYMBOL() { return GetToken(MySqlParser.LIKE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NotRuleContext notRule() {
			return GetRuleContext<NotRuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF_SYMBOL() { return GetToken(MySqlParser.OF_SYMBOL, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(Context, State);
		EnterRule(_localctx, 682, RULE_predicate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5538;
			bitExpr(0);
			State = 5552;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,704,Context) ) {
			case 1:
				{
				State = 5540;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT_SYMBOL || _la==NOT2_SYMBOL) {
					{
					State = 5539;
					notRule();
					}
				}

				State = 5542;
				predicateOperations();
				}
				break;
			case 2:
				{
				State = 5543;
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				State = 5544;
				Match(MEMBER_SYMBOL);
				State = 5546;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OF_SYMBOL) {
					{
					State = 5545;
					Match(OF_SYMBOL);
					}
				}

				State = 5548;
				simpleExprWithParentheses();
				}
				break;
			case 3:
				{
				State = 5549;
				Match(SOUNDS_SYMBOL);
				State = 5550;
				Match(LIKE_SYMBOL);
				State = 5551;
				bitExpr(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateOperationsContext : ParserRuleContext {
		public PredicateOperationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicateOperations; } }
	 
		public PredicateOperationsContext() { }
		public virtual void CopyFrom(PredicateOperationsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PredicateExprRegexContext : PredicateOperationsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP_SYMBOL() { return GetToken(MySqlParser.REGEXP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		public PredicateExprRegexContext(PredicateOperationsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPredicateExprRegex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPredicateExprRegex(this);
		}
	}
	public partial class PredicateExprBetweenContext : PredicateOperationsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN_SYMBOL() { return GetToken(MySqlParser.BETWEEN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_SYMBOL() { return GetToken(MySqlParser.AND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public PredicateExprBetweenContext(PredicateOperationsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPredicateExprBetween(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPredicateExprBetween(this);
		}
	}
	public partial class PredicateExprInContext : PredicateOperationsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_SYMBOL() { return GetToken(MySqlParser.IN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public PredicateExprInContext(PredicateOperationsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPredicateExprIn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPredicateExprIn(this);
		}
	}
	public partial class PredicateExprLikeContext : PredicateOperationsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE_SYMBOL() { return GetToken(MySqlParser.LIKE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext[] simpleExpr() {
			return GetRuleContexts<SimpleExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext simpleExpr(int i) {
			return GetRuleContext<SimpleExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_SYMBOL() { return GetToken(MySqlParser.ESCAPE_SYMBOL, 0); }
		public PredicateExprLikeContext(PredicateOperationsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPredicateExprLike(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPredicateExprLike(this);
		}
	}

	[RuleVersion(0)]
	public PredicateOperationsContext predicateOperations() {
		PredicateOperationsContext _localctx = new PredicateOperationsContext(Context, State);
		EnterRule(_localctx, 684, RULE_predicateOperations);
		try {
			State = 5575;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IN_SYMBOL:
				_localctx = new PredicateExprInContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5554;
				Match(IN_SYMBOL);
				State = 5560;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,705,Context) ) {
				case 1:
					{
					State = 5555;
					subquery();
					}
					break;
				case 2:
					{
					State = 5556;
					Match(OPEN_PAR_SYMBOL);
					State = 5557;
					exprList();
					State = 5558;
					Match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				}
				break;
			case BETWEEN_SYMBOL:
				_localctx = new PredicateExprBetweenContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5562;
				Match(BETWEEN_SYMBOL);
				State = 5563;
				bitExpr(0);
				State = 5564;
				Match(AND_SYMBOL);
				State = 5565;
				predicate();
				}
				break;
			case LIKE_SYMBOL:
				_localctx = new PredicateExprLikeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 5567;
				Match(LIKE_SYMBOL);
				State = 5568;
				simpleExpr(0);
				State = 5571;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,706,Context) ) {
				case 1:
					{
					State = 5569;
					Match(ESCAPE_SYMBOL);
					State = 5570;
					simpleExpr(0);
					}
					break;
				}
				}
				break;
			case REGEXP_SYMBOL:
				_localctx = new PredicateExprRegexContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 5573;
				Match(REGEXP_SYMBOL);
				State = 5574;
				bitExpr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitExprContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitExprContext[] bitExpr() {
			return GetRuleContexts<BitExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitExprContext bitExpr(int i) {
			return GetRuleContext<BitExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_XOR_OPERATOR() { return GetToken(MySqlParser.BITWISE_XOR_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT_OPERATOR() { return GetToken(MySqlParser.MULT_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_OPERATOR() { return GetToken(MySqlParser.DIV_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD_OPERATOR() { return GetToken(MySqlParser.MOD_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_SYMBOL() { return GetToken(MySqlParser.DIV_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD_SYMBOL() { return GetToken(MySqlParser.MOD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_OPERATOR() { return GetToken(MySqlParser.PLUS_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_OPERATOR() { return GetToken(MySqlParser.MINUS_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHIFT_LEFT_OPERATOR() { return GetToken(MySqlParser.SHIFT_LEFT_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHIFT_RIGHT_OPERATOR() { return GetToken(MySqlParser.SHIFT_RIGHT_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_AND_OPERATOR() { return GetToken(MySqlParser.BITWISE_AND_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_OR_OPERATOR() { return GetToken(MySqlParser.BITWISE_OR_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL_SYMBOL() { return GetToken(MySqlParser.INTERVAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalContext interval() {
			return GetRuleContext<IntervalContext>(0);
		}
		public BitExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterBitExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitBitExpr(this);
		}
	}

	[RuleVersion(0)]
	public BitExprContext bitExpr() {
		return bitExpr(0);
	}

	private BitExprContext bitExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BitExprContext _localctx = new BitExprContext(Context, _parentState);
		BitExprContext _prevctx = _localctx;
		int _startState = 686;
		EnterRecursionRule(_localctx, 686, RULE_bitExpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 5578;
			simpleExpr(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 5606;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,709,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 5604;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,708,Context) ) {
					case 1:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						State = 5580;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 5581;
						_localctx.op = Match(BITWISE_XOR_OPERATOR);
						State = 5582;
						bitExpr(8);
						}
						break;
					case 2:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						State = 5583;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 5584;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==DIV_SYMBOL || _la==MOD_SYMBOL || ((((_la - 760)) & ~0x3f) == 0 && ((1L << (_la - 760)) & ((1L << (MULT_OPERATOR - 760)) | (1L << (DIV_OPERATOR - 760)) | (1L << (MOD_OPERATOR - 760)))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 5585;
						bitExpr(7);
						}
						break;
					case 3:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						State = 5586;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 5587;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS_OPERATOR || _la==MINUS_OPERATOR) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 5588;
						bitExpr(6);
						}
						break;
					case 4:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						State = 5589;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 5590;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==SHIFT_LEFT_OPERATOR || _la==SHIFT_RIGHT_OPERATOR) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 5591;
						bitExpr(4);
						}
						break;
					case 5:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						State = 5592;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 5593;
						_localctx.op = Match(BITWISE_AND_OPERATOR);
						State = 5594;
						bitExpr(3);
						}
						break;
					case 6:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						State = 5595;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 5596;
						_localctx.op = Match(BITWISE_OR_OPERATOR);
						State = 5597;
						bitExpr(2);
						}
						break;
					case 7:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						State = 5598;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 5599;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS_OPERATOR || _la==MINUS_OPERATOR) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 5600;
						Match(INTERVAL_SYMBOL);
						State = 5601;
						expr(0);
						State = 5602;
						interval();
						}
						break;
					}
					} 
				}
				State = 5608;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,709,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SimpleExprContext : ParserRuleContext {
		public SimpleExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExpr; } }
	 
		public SimpleExprContext() { }
		public virtual void CopyFrom(SimpleExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimpleExprConvertContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT_SYMBOL() { return GetToken(MySqlParser.CONVERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL() { return GetToken(MySqlParser.COMMA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CastTypeContext castType() {
			return GetRuleContext<CastTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprConvertContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprConvert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprConvert(this);
		}
	}
	public partial class SimpleExprVariableContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SimpleExprVariableContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprVariable(this);
		}
	}
	public partial class SimpleExprCastContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST_SYMBOL() { return GetToken(MySqlParser.CAST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySqlParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CastTypeContext castType() {
			return GetRuleContext<CastTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayCastContext arrayCast() {
			return GetRuleContext<ArrayCastContext>(0);
		}
		public SimpleExprCastContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprCast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprCast(this);
		}
	}
	public partial class SimpleExprUnaryContext : SimpleExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_OPERATOR() { return GetToken(MySqlParser.PLUS_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_OPERATOR() { return GetToken(MySqlParser.MINUS_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_NOT_OPERATOR() { return GetToken(MySqlParser.BITWISE_NOT_OPERATOR, 0); }
		public SimpleExprUnaryContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprUnary(this);
		}
	}
	public partial class SimpleExprOdbcContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_CURLY_SYMBOL() { return GetToken(MySqlParser.OPEN_CURLY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_CURLY_SYMBOL() { return GetToken(MySqlParser.CLOSE_CURLY_SYMBOL, 0); }
		public SimpleExprOdbcContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprOdbc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprOdbc(this);
		}
	}
	public partial class SimpleExprRuntimeFunctionContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeFunctionCallContext runtimeFunctionCall() {
			return GetRuleContext<RuntimeFunctionCallContext>(0);
		}
		public SimpleExprRuntimeFunctionContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprRuntimeFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprRuntimeFunction(this);
		}
	}
	public partial class SimpleExprFunctionContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public SimpleExprFunctionContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprFunction(this);
		}
	}
	public partial class SimpleExprCollateContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE_SYMBOL() { return GetToken(MySqlParser.COLLATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public SimpleExprCollateContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprCollate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprCollate(this);
		}
	}
	public partial class SimpleExprMatchContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH_SYMBOL() { return GetToken(MySqlParser.MATCH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentListArgContext identListArg() {
			return GetRuleContext<IdentListArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGAINST_SYMBOL() { return GetToken(MySqlParser.AGAINST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FulltextOptionsContext fulltextOptions() {
			return GetRuleContext<FulltextOptionsContext>(0);
		}
		public SimpleExprMatchContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprMatch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprMatch(this);
		}
	}
	public partial class SimpleExprWindowingFunctionContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public WindowFunctionCallContext windowFunctionCall() {
			return GetRuleContext<WindowFunctionCallContext>(0);
		}
		public SimpleExprWindowingFunctionContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprWindowingFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprWindowingFunction(this);
		}
	}
	public partial class SimpleExprBinaryContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySqlParser.BINARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		public SimpleExprBinaryContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprBinary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprBinary(this);
		}
	}
	public partial class SimpleExprColumnRefContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnRefContext columnRef() {
			return GetRuleContext<ColumnRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonOperatorContext jsonOperator() {
			return GetRuleContext<JsonOperatorContext>(0);
		}
		public SimpleExprColumnRefContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprColumnRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprColumnRef(this);
		}
	}
	public partial class SimpleExprParamMarkerContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM_MARKER() { return GetToken(MySqlParser.PARAM_MARKER, 0); }
		public SimpleExprParamMarkerContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprParamMarker(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprParamMarker(this);
		}
	}
	public partial class SimpleExprSumContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public SumExprContext sumExpr() {
			return GetRuleContext<SumExprContext>(0);
		}
		public SimpleExprSumContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprSum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprSum(this);
		}
	}
	public partial class SimpleExprConvertUsingContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT_SYMBOL() { return GetToken(MySqlParser.CONVERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING_SYMBOL() { return GetToken(MySqlParser.USING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprConvertUsingContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprConvertUsing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprConvertUsing(this);
		}
	}
	public partial class SimpleExprSubQueryContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS_SYMBOL() { return GetToken(MySqlParser.EXISTS_SYMBOL, 0); }
		public SimpleExprSubQueryContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprSubQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprSubQuery(this);
		}
	}
	public partial class SimpleExprGroupingOperationContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroupingOperationContext groupingOperation() {
			return GetRuleContext<GroupingOperationContext>(0);
		}
		public SimpleExprGroupingOperationContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprGroupingOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprGroupingOperation(this);
		}
	}
	public partial class SimpleExprNotContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Not2RuleContext not2Rule() {
			return GetRuleContext<Not2RuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		public SimpleExprNotContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprNot(this);
		}
	}
	public partial class SimpleExprValuesContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES_SYMBOL() { return GetToken(MySqlParser.VALUES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprValuesContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprValues(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprValues(this);
		}
	}
	public partial class SimpleExprDefaultContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprDefaultContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprDefault(this);
		}
	}
	public partial class SimpleExprListContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_SYMBOL() { return GetToken(MySqlParser.ROW_SYMBOL, 0); }
		public SimpleExprListContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprList(this);
		}
	}
	public partial class SimpleExprIntervalContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL_SYMBOL() { return GetToken(MySqlParser.INTERVAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalContext interval() {
			return GetRuleContext<IntervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_OPERATOR() { return GetToken(MySqlParser.PLUS_OPERATOR, 0); }
		public SimpleExprIntervalContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprInterval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprInterval(this);
		}
	}
	public partial class SimpleExprCaseContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE_SYMBOL() { return GetToken(MySqlParser.CASE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_SYMBOL() { return GetToken(MySqlParser.END_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenExpressionContext[] whenExpression() {
			return GetRuleContexts<WhenExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenExpressionContext whenExpression(int i) {
			return GetRuleContext<WhenExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThenExpressionContext[] thenExpression() {
			return GetRuleContexts<ThenExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThenExpressionContext thenExpression(int i) {
			return GetRuleContext<ThenExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseExpressionContext elseExpression() {
			return GetRuleContext<ElseExpressionContext>(0);
		}
		public SimpleExprCaseContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprCase(this);
		}
	}
	public partial class SimpleExprConcatContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext[] simpleExpr() {
			return GetRuleContexts<SimpleExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext simpleExpr(int i) {
			return GetRuleContext<SimpleExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT_PIPES_SYMBOL() { return GetToken(MySqlParser.CONCAT_PIPES_SYMBOL, 0); }
		public SimpleExprConcatContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprConcat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprConcat(this);
		}
	}
	public partial class SimpleExprLiteralContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public SimpleExprLiteralContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprLiteral(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExprContext simpleExpr() {
		return simpleExpr(0);
	}

	private SimpleExprContext simpleExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SimpleExprContext _localctx = new SimpleExprContext(Context, _parentState);
		SimpleExprContext _prevctx = _localctx;
		int _startState = 688;
		EnterRecursionRule(_localctx, 688, RULE_simpleExpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5718;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,719,Context) ) {
			case 1:
				{
				_localctx = new SimpleExprVariableContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 5610;
				variable();
				State = 5614;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,710,Context) ) {
				case 1:
					{
					State = 5611;
					equal();
					State = 5612;
					expr(0);
					}
					break;
				}
				}
				break;
			case 2:
				{
				_localctx = new SimpleExprColumnRefContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5616;
				columnRef();
				State = 5618;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,711,Context) ) {
				case 1:
					{
					State = 5617;
					jsonOperator();
					}
					break;
				}
				}
				break;
			case 3:
				{
				_localctx = new SimpleExprRuntimeFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5620;
				runtimeFunctionCall();
				}
				break;
			case 4:
				{
				_localctx = new SimpleExprFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5621;
				functionCall();
				}
				break;
			case 5:
				{
				_localctx = new SimpleExprLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5622;
				literal();
				}
				break;
			case 6:
				{
				_localctx = new SimpleExprParamMarkerContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5623;
				Match(PARAM_MARKER);
				}
				break;
			case 7:
				{
				_localctx = new SimpleExprSumContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5624;
				sumExpr();
				}
				break;
			case 8:
				{
				_localctx = new SimpleExprGroupingOperationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5625;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 5626;
				groupingOperation();
				}
				break;
			case 9:
				{
				_localctx = new SimpleExprWindowingFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5627;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 5628;
				windowFunctionCall();
				}
				break;
			case 10:
				{
				_localctx = new SimpleExprUnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5629;
				((SimpleExprUnaryContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 758)) & ~0x3f) == 0 && ((1L << (_la - 758)) & ((1L << (PLUS_OPERATOR - 758)) | (1L << (MINUS_OPERATOR - 758)) | (1L << (BITWISE_NOT_OPERATOR - 758)))) != 0)) ) {
					((SimpleExprUnaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5630;
				simpleExpr(14);
				}
				break;
			case 11:
				{
				_localctx = new SimpleExprNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5631;
				not2Rule();
				State = 5632;
				simpleExpr(13);
				}
				break;
			case 12:
				{
				_localctx = new SimpleExprListContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5635;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ROW_SYMBOL) {
					{
					State = 5634;
					Match(ROW_SYMBOL);
					}
				}

				State = 5637;
				Match(OPEN_PAR_SYMBOL);
				State = 5638;
				exprList();
				State = 5639;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 13:
				{
				_localctx = new SimpleExprSubQueryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5642;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXISTS_SYMBOL) {
					{
					State = 5641;
					Match(EXISTS_SYMBOL);
					}
				}

				State = 5644;
				subquery();
				}
				break;
			case 14:
				{
				_localctx = new SimpleExprOdbcContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5645;
				Match(OPEN_CURLY_SYMBOL);
				State = 5646;
				identifier();
				State = 5647;
				expr(0);
				State = 5648;
				Match(CLOSE_CURLY_SYMBOL);
				}
				break;
			case 15:
				{
				_localctx = new SimpleExprMatchContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5650;
				Match(MATCH_SYMBOL);
				State = 5651;
				identListArg();
				State = 5652;
				Match(AGAINST_SYMBOL);
				State = 5653;
				Match(OPEN_PAR_SYMBOL);
				State = 5654;
				bitExpr(0);
				State = 5656;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IN_SYMBOL || _la==WITH_SYMBOL) {
					{
					State = 5655;
					fulltextOptions();
					}
				}

				State = 5658;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 16:
				{
				_localctx = new SimpleExprBinaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5660;
				Match(BINARY_SYMBOL);
				State = 5661;
				simpleExpr(8);
				}
				break;
			case 17:
				{
				_localctx = new SimpleExprCastContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5662;
				Match(CAST_SYMBOL);
				State = 5663;
				Match(OPEN_PAR_SYMBOL);
				State = 5664;
				expr(0);
				State = 5665;
				Match(AS_SYMBOL);
				State = 5666;
				castType();
				State = 5668;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,715,Context) ) {
				case 1:
					{
					State = 5667;
					arrayCast();
					}
					break;
				}
				State = 5670;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 18:
				{
				_localctx = new SimpleExprCaseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5672;
				Match(CASE_SYMBOL);
				State = 5674;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,716,Context) ) {
				case 1:
					{
					State = 5673;
					expr(0);
					}
					break;
				}
				State = 5679;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 5676;
					whenExpression();
					State = 5677;
					thenExpression();
					}
					}
					State = 5681;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN_SYMBOL );
				State = 5684;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE_SYMBOL) {
					{
					State = 5683;
					elseExpression();
					}
				}

				State = 5686;
				Match(END_SYMBOL);
				}
				break;
			case 19:
				{
				_localctx = new SimpleExprConvertContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5688;
				Match(CONVERT_SYMBOL);
				State = 5689;
				Match(OPEN_PAR_SYMBOL);
				State = 5690;
				expr(0);
				State = 5691;
				Match(COMMA_SYMBOL);
				State = 5692;
				castType();
				State = 5693;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 20:
				{
				_localctx = new SimpleExprConvertUsingContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5695;
				Match(CONVERT_SYMBOL);
				State = 5696;
				Match(OPEN_PAR_SYMBOL);
				State = 5697;
				expr(0);
				State = 5698;
				Match(USING_SYMBOL);
				State = 5699;
				charsetName();
				State = 5700;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 21:
				{
				_localctx = new SimpleExprDefaultContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5702;
				Match(DEFAULT_SYMBOL);
				State = 5703;
				Match(OPEN_PAR_SYMBOL);
				State = 5704;
				simpleIdentifier();
				State = 5705;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 22:
				{
				_localctx = new SimpleExprValuesContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5707;
				Match(VALUES_SYMBOL);
				State = 5708;
				Match(OPEN_PAR_SYMBOL);
				State = 5709;
				simpleIdentifier();
				State = 5710;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 23:
				{
				_localctx = new SimpleExprIntervalContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5712;
				Match(INTERVAL_SYMBOL);
				State = 5713;
				expr(0);
				State = 5714;
				interval();
				State = 5715;
				Match(PLUS_OPERATOR);
				State = 5716;
				expr(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 5728;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,721,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 5726;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,720,Context) ) {
					case 1:
						{
						_localctx = new SimpleExprConcatContext(new SimpleExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpr);
						State = 5720;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 5721;
						Match(CONCAT_PIPES_SYMBOL);
						State = 5722;
						simpleExpr(16);
						}
						break;
					case 2:
						{
						_localctx = new SimpleExprCollateContext(new SimpleExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpr);
						State = 5723;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 5724;
						Match(COLLATE_SYMBOL);
						State = 5725;
						textOrIdentifier();
						}
						break;
					}
					} 
				}
				State = 5730;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,721,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArrayCastContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY_SYMBOL() { return GetToken(MySqlParser.ARRAY_SYMBOL, 0); }
		public ArrayCastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayCast; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterArrayCast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitArrayCast(this);
		}
	}

	[RuleVersion(0)]
	public ArrayCastContext arrayCast() {
		ArrayCastContext _localctx = new ArrayCastContext(Context, State);
		EnterRule(_localctx, 690, RULE_arrayCast);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5731;
			if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
			State = 5732;
			Match(ARRAY_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SEPARATOR_SYMBOL() { return GetToken(MySqlParser.JSON_SEPARATOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_UNQUOTED_SEPARATOR_SYMBOL() { return GetToken(MySqlParser.JSON_UNQUOTED_SEPARATOR_SYMBOL, 0); }
		public JsonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterJsonOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitJsonOperator(this);
		}
	}

	[RuleVersion(0)]
	public JsonOperatorContext jsonOperator() {
		JsonOperatorContext _localctx = new JsonOperatorContext(Context, State);
		EnterRule(_localctx, 692, RULE_jsonOperator);
		try {
			State = 5740;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,722,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5734;
				if (!(serverVersion >= 50708)) throw new FailedPredicateException(this, "serverVersion >= 50708");
				State = 5735;
				Match(JSON_SEPARATOR_SYMBOL);
				State = 5736;
				textStringLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5737;
				if (!(serverVersion >= 50713)) throw new FailedPredicateException(this, "serverVersion >= 50713");
				State = 5738;
				Match(JSON_UNQUOTED_SEPARATOR_SYMBOL);
				State = 5739;
				textStringLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumExprContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InSumExprContext inSumExpr() {
			return GetRuleContext<InSumExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG_SYMBOL() { return GetToken(MySqlParser.AVG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT_SYMBOL() { return GetToken(MySqlParser.DISTINCT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WindowingClauseContext windowingClause() {
			return GetRuleContext<WindowingClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND_SYMBOL() { return GetToken(MySqlParser.BIT_AND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR_SYMBOL() { return GetToken(MySqlParser.BIT_OR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_XOR_SYMBOL() { return GetToken(MySqlParser.BIT_XOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonFunctionContext jsonFunction() {
			return GetRuleContext<JsonFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT_OPERATOR() { return GetToken(MySqlParser.MULT_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT_SYMBOL() { return GetToken(MySqlParser.COUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySqlParser.ALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_SYMBOL() { return GetToken(MySqlParser.MIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_SYMBOL() { return GetToken(MySqlParser.MAX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STD_SYMBOL() { return GetToken(MySqlParser.STD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIANCE_SYMBOL() { return GetToken(MySqlParser.VARIANCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDDEV_SAMP_SYMBOL() { return GetToken(MySqlParser.STDDEV_SAMP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_SAMP_SYMBOL() { return GetToken(MySqlParser.VAR_SAMP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM_SYMBOL() { return GetToken(MySqlParser.SUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_CONCAT_SYMBOL() { return GetToken(MySqlParser.GROUP_CONCAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderClauseContext orderClause() {
			return GetRuleContext<OrderClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEPARATOR_SYMBOL() { return GetToken(MySqlParser.SEPARATOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public SumExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sumExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSumExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSumExpr(this);
		}
	}

	[RuleVersion(0)]
	public SumExprContext sumExpr() {
		SumExprContext _localctx = new SumExprContext(Context, State);
		EnterRule(_localctx, 694, RULE_sumExpr);
		int _la;
		try {
			State = 5873;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,745,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5742;
				_localctx.name = Match(AVG_SYMBOL);
				State = 5743;
				Match(OPEN_PAR_SYMBOL);
				State = 5745;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,723,Context) ) {
				case 1:
					{
					State = 5744;
					Match(DISTINCT_SYMBOL);
					}
					break;
				}
				State = 5747;
				inSumExpr();
				State = 5748;
				Match(CLOSE_PAR_SYMBOL);
				State = 5751;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,724,Context) ) {
				case 1:
					{
					State = 5749;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 5750;
					windowingClause();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5753;
				_localctx.name = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BIT_AND_SYMBOL) | (1L << BIT_OR_SYMBOL) | (1L << BIT_XOR_SYMBOL))) != 0)) ) {
					_localctx.name = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5754;
				Match(OPEN_PAR_SYMBOL);
				State = 5755;
				inSumExpr();
				State = 5756;
				Match(CLOSE_PAR_SYMBOL);
				State = 5759;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,725,Context) ) {
				case 1:
					{
					State = 5757;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 5758;
					windowingClause();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5761;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 5762;
				jsonFunction();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5763;
				_localctx.name = Match(COUNT_SYMBOL);
				State = 5764;
				Match(OPEN_PAR_SYMBOL);
				State = 5766;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL_SYMBOL) {
					{
					State = 5765;
					Match(ALL_SYMBOL);
					}
				}

				State = 5768;
				Match(MULT_OPERATOR);
				State = 5769;
				Match(CLOSE_PAR_SYMBOL);
				State = 5772;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,727,Context) ) {
				case 1:
					{
					State = 5770;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 5771;
					windowingClause();
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5774;
				_localctx.name = Match(COUNT_SYMBOL);
				State = 5775;
				Match(OPEN_PAR_SYMBOL);
				State = 5783;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,729,Context) ) {
				case 1:
					{
					State = 5777;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ALL_SYMBOL) {
						{
						State = 5776;
						Match(ALL_SYMBOL);
						}
					}

					State = 5779;
					Match(MULT_OPERATOR);
					}
					break;
				case 2:
					{
					State = 5780;
					inSumExpr();
					}
					break;
				case 3:
					{
					State = 5781;
					Match(DISTINCT_SYMBOL);
					State = 5782;
					exprList();
					}
					break;
				}
				State = 5785;
				Match(CLOSE_PAR_SYMBOL);
				State = 5788;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,730,Context) ) {
				case 1:
					{
					State = 5786;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 5787;
					windowingClause();
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5790;
				_localctx.name = Match(MIN_SYMBOL);
				State = 5791;
				Match(OPEN_PAR_SYMBOL);
				State = 5793;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,731,Context) ) {
				case 1:
					{
					State = 5792;
					Match(DISTINCT_SYMBOL);
					}
					break;
				}
				State = 5795;
				inSumExpr();
				State = 5796;
				Match(CLOSE_PAR_SYMBOL);
				State = 5799;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,732,Context) ) {
				case 1:
					{
					State = 5797;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 5798;
					windowingClause();
					}
					break;
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5801;
				_localctx.name = Match(MAX_SYMBOL);
				State = 5802;
				Match(OPEN_PAR_SYMBOL);
				State = 5804;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,733,Context) ) {
				case 1:
					{
					State = 5803;
					Match(DISTINCT_SYMBOL);
					}
					break;
				}
				State = 5806;
				inSumExpr();
				State = 5807;
				Match(CLOSE_PAR_SYMBOL);
				State = 5810;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,734,Context) ) {
				case 1:
					{
					State = 5808;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 5809;
					windowingClause();
					}
					break;
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5812;
				_localctx.name = Match(STD_SYMBOL);
				State = 5813;
				Match(OPEN_PAR_SYMBOL);
				State = 5814;
				inSumExpr();
				State = 5815;
				Match(CLOSE_PAR_SYMBOL);
				State = 5818;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,735,Context) ) {
				case 1:
					{
					State = 5816;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 5817;
					windowingClause();
					}
					break;
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5820;
				_localctx.name = Match(VARIANCE_SYMBOL);
				State = 5821;
				Match(OPEN_PAR_SYMBOL);
				State = 5822;
				inSumExpr();
				State = 5823;
				Match(CLOSE_PAR_SYMBOL);
				State = 5826;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,736,Context) ) {
				case 1:
					{
					State = 5824;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 5825;
					windowingClause();
					}
					break;
				}
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 5828;
				_localctx.name = Match(STDDEV_SAMP_SYMBOL);
				State = 5829;
				Match(OPEN_PAR_SYMBOL);
				State = 5830;
				inSumExpr();
				State = 5831;
				Match(CLOSE_PAR_SYMBOL);
				State = 5834;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,737,Context) ) {
				case 1:
					{
					State = 5832;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 5833;
					windowingClause();
					}
					break;
				}
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 5836;
				_localctx.name = Match(VAR_SAMP_SYMBOL);
				State = 5837;
				Match(OPEN_PAR_SYMBOL);
				State = 5838;
				inSumExpr();
				State = 5839;
				Match(CLOSE_PAR_SYMBOL);
				State = 5842;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,738,Context) ) {
				case 1:
					{
					State = 5840;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 5841;
					windowingClause();
					}
					break;
				}
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 5844;
				_localctx.name = Match(SUM_SYMBOL);
				State = 5845;
				Match(OPEN_PAR_SYMBOL);
				State = 5847;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,739,Context) ) {
				case 1:
					{
					State = 5846;
					Match(DISTINCT_SYMBOL);
					}
					break;
				}
				State = 5849;
				inSumExpr();
				State = 5850;
				Match(CLOSE_PAR_SYMBOL);
				State = 5853;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,740,Context) ) {
				case 1:
					{
					State = 5851;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 5852;
					windowingClause();
					}
					break;
				}
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 5855;
				_localctx.name = Match(GROUP_CONCAT_SYMBOL);
				State = 5856;
				Match(OPEN_PAR_SYMBOL);
				State = 5858;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,741,Context) ) {
				case 1:
					{
					State = 5857;
					Match(DISTINCT_SYMBOL);
					}
					break;
				}
				State = 5860;
				exprList();
				State = 5862;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER_SYMBOL) {
					{
					State = 5861;
					orderClause();
					}
				}

				State = 5866;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEPARATOR_SYMBOL) {
					{
					State = 5864;
					Match(SEPARATOR_SYMBOL);
					State = 5865;
					textString();
					}
				}

				State = 5868;
				Match(CLOSE_PAR_SYMBOL);
				State = 5871;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,744,Context) ) {
				case 1:
					{
					State = 5869;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 5870;
					windowingClause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupingOperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING_SYMBOL() { return GetToken(MySqlParser.GROUPING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public GroupingOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupingOperation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGroupingOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGroupingOperation(this);
		}
	}

	[RuleVersion(0)]
	public GroupingOperationContext groupingOperation() {
		GroupingOperationContext _localctx = new GroupingOperationContext(Context, State);
		EnterRule(_localctx, 696, RULE_groupingOperation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5875;
			Match(GROUPING_SYMBOL);
			State = 5876;
			Match(OPEN_PAR_SYMBOL);
			State = 5877;
			exprList();
			State = 5878;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesesContext parentheses() {
			return GetRuleContext<ParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowingClauseContext windowingClause() {
			return GetRuleContext<WindowingClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_NUMBER_SYMBOL() { return GetToken(MySqlParser.ROW_NUMBER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANK_SYMBOL() { return GetToken(MySqlParser.RANK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DENSE_RANK_SYMBOL() { return GetToken(MySqlParser.DENSE_RANK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUME_DIST_SYMBOL() { return GetToken(MySqlParser.CUME_DIST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_RANK_SYMBOL() { return GetToken(MySqlParser.PERCENT_RANK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTILE_SYMBOL() { return GetToken(MySqlParser.NTILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprWithParenthesesContext simpleExprWithParentheses() {
			return GetRuleContext<SimpleExprWithParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAD_SYMBOL() { return GetToken(MySqlParser.LEAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAG_SYMBOL() { return GetToken(MySqlParser.LAG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LeadLagInfoContext leadLagInfo() {
			return GetRuleContext<LeadLagInfoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NullTreatmentContext nullTreatment() {
			return GetRuleContext<NullTreatmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprWithParenthesesContext exprWithParentheses() {
			return GetRuleContext<ExprWithParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_VALUE_SYMBOL() { return GetToken(MySqlParser.FIRST_VALUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_VALUE_SYMBOL() { return GetToken(MySqlParser.LAST_VALUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTH_VALUE_SYMBOL() { return GetToken(MySqlParser.NTH_VALUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL() { return GetToken(MySqlParser.COMMA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySqlParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_SYMBOL() { return GetToken(MySqlParser.FIRST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_SYMBOL() { return GetToken(MySqlParser.LAST_SYMBOL, 0); }
		public WindowFunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFunctionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWindowFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWindowFunctionCall(this);
		}
	}

	[RuleVersion(0)]
	public WindowFunctionCallContext windowFunctionCall() {
		WindowFunctionCallContext _localctx = new WindowFunctionCallContext(Context, State);
		EnterRule(_localctx, 698, RULE_windowFunctionCall);
		int _la;
		try {
			State = 5922;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CUME_DIST_SYMBOL:
			case DENSE_RANK_SYMBOL:
			case PERCENT_RANK_SYMBOL:
			case RANK_SYMBOL:
			case ROW_NUMBER_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5880;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 678)) & ~0x3f) == 0 && ((1L << (_la - 678)) & ((1L << (CUME_DIST_SYMBOL - 678)) | (1L << (DENSE_RANK_SYMBOL - 678)) | (1L << (PERCENT_RANK_SYMBOL - 678)) | (1L << (RANK_SYMBOL - 678)) | (1L << (ROW_NUMBER_SYMBOL - 678)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5881;
				parentheses();
				State = 5882;
				windowingClause();
				}
				break;
			case NTILE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5884;
				Match(NTILE_SYMBOL);
				State = 5885;
				simpleExprWithParentheses();
				State = 5886;
				windowingClause();
				}
				break;
			case LAG_SYMBOL:
			case LEAD_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5888;
				_la = TokenStream.LA(1);
				if ( !(_la==LAG_SYMBOL || _la==LEAD_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5889;
				Match(OPEN_PAR_SYMBOL);
				State = 5890;
				expr(0);
				State = 5892;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 5891;
					leadLagInfo();
					}
				}

				State = 5894;
				Match(CLOSE_PAR_SYMBOL);
				State = 5896;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) {
					{
					State = 5895;
					nullTreatment();
					}
				}

				State = 5898;
				windowingClause();
				}
				break;
			case FIRST_VALUE_SYMBOL:
			case LAST_VALUE_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5900;
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST_VALUE_SYMBOL || _la==LAST_VALUE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5901;
				exprWithParentheses();
				State = 5903;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) {
					{
					State = 5902;
					nullTreatment();
					}
				}

				State = 5905;
				windowingClause();
				}
				break;
			case NTH_VALUE_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5907;
				Match(NTH_VALUE_SYMBOL);
				State = 5908;
				Match(OPEN_PAR_SYMBOL);
				State = 5909;
				expr(0);
				State = 5910;
				Match(COMMA_SYMBOL);
				State = 5911;
				simpleExpr(0);
				State = 5912;
				Match(CLOSE_PAR_SYMBOL);
				State = 5915;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM_SYMBOL) {
					{
					State = 5913;
					Match(FROM_SYMBOL);
					State = 5914;
					_la = TokenStream.LA(1);
					if ( !(_la==FIRST_SYMBOL || _la==LAST_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 5918;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) {
					{
					State = 5917;
					nullTreatment();
					}
				}

				State = 5920;
				windowingClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowingClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER_SYMBOL() { return GetToken(MySqlParser.OVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WindowNameContext windowName() {
			return GetRuleContext<WindowNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowSpecContext windowSpec() {
			return GetRuleContext<WindowSpecContext>(0);
		}
		public WindowingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowingClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWindowingClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWindowingClause(this);
		}
	}

	[RuleVersion(0)]
	public WindowingClauseContext windowingClause() {
		WindowingClauseContext _localctx = new WindowingClauseContext(Context, State);
		EnterRule(_localctx, 700, RULE_windowingClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5924;
			Match(OVER_SYMBOL);
			State = 5927;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,752,Context) ) {
			case 1:
				{
				State = 5925;
				windowName();
				}
				break;
			case 2:
				{
				State = 5926;
				windowSpec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeadLagInfoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ulonglong_numberContext ulonglong_number() {
			return GetRuleContext<Ulonglong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM_MARKER() { return GetToken(MySqlParser.PARAM_MARKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LeadLagInfoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leadLagInfo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLeadLagInfo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLeadLagInfo(this);
		}
	}

	[RuleVersion(0)]
	public LeadLagInfoContext leadLagInfo() {
		LeadLagInfoContext _localctx = new LeadLagInfoContext(Context, State);
		EnterRule(_localctx, 702, RULE_leadLagInfo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5929;
			Match(COMMA_SYMBOL);
			State = 5932;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				{
				State = 5930;
				ulonglong_number();
				}
				break;
			case PARAM_MARKER:
				{
				State = 5931;
				Match(PARAM_MARKER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 5936;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA_SYMBOL) {
				{
				State = 5934;
				Match(COMMA_SYMBOL);
				State = 5935;
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullTreatmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS_SYMBOL() { return GetToken(MySqlParser.NULLS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESPECT_SYMBOL() { return GetToken(MySqlParser.RESPECT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySqlParser.IGNORE_SYMBOL, 0); }
		public NullTreatmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullTreatment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNullTreatment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNullTreatment(this);
		}
	}

	[RuleVersion(0)]
	public NullTreatmentContext nullTreatment() {
		NullTreatmentContext _localctx = new NullTreatmentContext(Context, State);
		EnterRule(_localctx, 704, RULE_nullTreatment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5938;
			_la = TokenStream.LA(1);
			if ( !(_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5939;
			Match(NULLS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_ARRAYAGG_SYMBOL() { return GetToken(MySqlParser.JSON_ARRAYAGG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InSumExprContext[] inSumExpr() {
			return GetRuleContexts<InSumExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InSumExprContext inSumExpr(int i) {
			return GetRuleContext<InSumExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WindowingClauseContext windowingClause() {
			return GetRuleContext<WindowingClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_OBJECTAGG_SYMBOL() { return GetToken(MySqlParser.JSON_OBJECTAGG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL() { return GetToken(MySqlParser.COMMA_SYMBOL, 0); }
		public JsonFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterJsonFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitJsonFunction(this);
		}
	}

	[RuleVersion(0)]
	public JsonFunctionContext jsonFunction() {
		JsonFunctionContext _localctx = new JsonFunctionContext(Context, State);
		EnterRule(_localctx, 706, RULE_jsonFunction);
		try {
			State = 5957;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JSON_ARRAYAGG_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5941;
				Match(JSON_ARRAYAGG_SYMBOL);
				State = 5942;
				Match(OPEN_PAR_SYMBOL);
				State = 5943;
				inSumExpr();
				State = 5944;
				Match(CLOSE_PAR_SYMBOL);
				State = 5946;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,755,Context) ) {
				case 1:
					{
					State = 5945;
					windowingClause();
					}
					break;
				}
				}
				break;
			case JSON_OBJECTAGG_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5948;
				Match(JSON_OBJECTAGG_SYMBOL);
				State = 5949;
				Match(OPEN_PAR_SYMBOL);
				State = 5950;
				inSumExpr();
				State = 5951;
				Match(COMMA_SYMBOL);
				State = 5952;
				inSumExpr();
				State = 5953;
				Match(CLOSE_PAR_SYMBOL);
				State = 5955;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,756,Context) ) {
				case 1:
					{
					State = 5954;
					windowingClause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InSumExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySqlParser.ALL_SYMBOL, 0); }
		public InSumExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inSumExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInSumExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInSumExpr(this);
		}
	}

	[RuleVersion(0)]
	public InSumExprContext inSumExpr() {
		InSumExprContext _localctx = new InSumExprContext(Context, State);
		EnterRule(_localctx, 708, RULE_inSumExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5960;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,758,Context) ) {
			case 1:
				{
				State = 5959;
				Match(ALL_SYMBOL);
				}
				break;
			}
			State = 5962;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentListArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentListContext identList() {
			return GetRuleContext<IdentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public IdentListArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identListArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIdentListArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIdentListArg(this);
		}
	}

	[RuleVersion(0)]
	public IdentListArgContext identListArg() {
		IdentListArgContext _localctx = new IdentListArgContext(Context, State);
		EnterRule(_localctx, 710, RULE_identListArg);
		try {
			State = 5969;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,759,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5964;
				identList();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5965;
				Match(OPEN_PAR_SYMBOL);
				State = 5966;
				identList();
				State = 5967;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext[] simpleIdentifier() {
			return GetRuleContexts<SimpleIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier(int i) {
			return GetRuleContext<SimpleIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public IdentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIdentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIdentList(this);
		}
	}

	[RuleVersion(0)]
	public IdentListContext identList() {
		IdentListContext _localctx = new IdentListContext(Context, State);
		EnterRule(_localctx, 712, RULE_identList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5971;
			simpleIdentifier();
			State = 5976;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 5972;
				Match(COMMA_SYMBOL);
				State = 5973;
				simpleIdentifier();
				}
				}
				State = 5978;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FulltextOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_SYMBOL() { return GetToken(MySqlParser.IN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_SYMBOL() { return GetToken(MySqlParser.BOOLEAN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODE_SYMBOL() { return GetToken(MySqlParser.MODE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATURAL_SYMBOL() { return GetToken(MySqlParser.NATURAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE_SYMBOL() { return GetToken(MySqlParser.LANGUAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySqlParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY_SYMBOL() { return GetToken(MySqlParser.QUERY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPANSION_SYMBOL() { return GetToken(MySqlParser.EXPANSION_SYMBOL, 0); }
		public FulltextOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fulltextOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFulltextOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFulltextOptions(this);
		}
	}

	[RuleVersion(0)]
	public FulltextOptionsContext fulltextOptions() {
		FulltextOptionsContext _localctx = new FulltextOptionsContext(Context, State);
		EnterRule(_localctx, 714, RULE_fulltextOptions);
		int _la;
		try {
			State = 5994;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,762,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5979;
				Match(IN_SYMBOL);
				State = 5980;
				Match(BOOLEAN_SYMBOL);
				State = 5981;
				Match(MODE_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5982;
				Match(IN_SYMBOL);
				State = 5983;
				Match(NATURAL_SYMBOL);
				State = 5984;
				Match(LANGUAGE_SYMBOL);
				State = 5985;
				Match(MODE_SYMBOL);
				State = 5989;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					State = 5986;
					Match(WITH_SYMBOL);
					State = 5987;
					Match(QUERY_SYMBOL);
					State = 5988;
					Match(EXPANSION_SYMBOL);
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5991;
				Match(WITH_SYMBOL);
				State = 5992;
				Match(QUERY_SYMBOL);
				State = 5993;
				Match(EXPANSION_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeFunctionCallContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_SYMBOL() { return GetToken(MySqlParser.CHAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING_SYMBOL() { return GetToken(MySqlParser.USING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_USER_SYMBOL() { return GetToken(MySqlParser.CURRENT_USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesesContext parentheses() {
			return GetRuleContext<ParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprWithParenthesesContext exprWithParentheses() {
			return GetRuleContext<ExprWithParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_SYMBOL() { return GetToken(MySqlParser.DATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_SYMBOL() { return GetToken(MySqlParser.DAY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_SYMBOL() { return GetToken(MySqlParser.HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT_SYMBOL() { return GetToken(MySqlParser.INSERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL_SYMBOL() { return GetToken(MySqlParser.INTERVAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_SYMBOL() { return GetToken(MySqlParser.LEFT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_SYMBOL() { return GetToken(MySqlParser.MINUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH_SYMBOL() { return GetToken(MySqlParser.MONTH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SYMBOL() { return GetToken(MySqlParser.RIGHT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND_SYMBOL() { return GetToken(MySqlParser.SECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_SYMBOL() { return GetToken(MySqlParser.TIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP_SYMBOL() { return GetToken(MySqlParser.TIMESTAMP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TrimFunctionContext trimFunction() {
			return GetRuleContext<TrimFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySqlParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES_SYMBOL() { return GetToken(MySqlParser.VALUES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR_SYMBOL() { return GetToken(MySqlParser.YEAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDDATE_SYMBOL() { return GetToken(MySqlParser.ADDDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBDATE_SYMBOL() { return GetToken(MySqlParser.SUBDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntervalContext interval() {
			return GetRuleContext<IntervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURDATE_SYMBOL() { return GetToken(MySqlParser.CURDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURTIME_SYMBOL() { return GetToken(MySqlParser.CURTIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TimeFunctionParametersContext timeFunctionParameters() {
			return GetRuleContext<TimeFunctionParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_ADD_SYMBOL() { return GetToken(MySqlParser.DATE_ADD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_SUB_SYMBOL() { return GetToken(MySqlParser.DATE_SUB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySqlParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTRACT_SYMBOL() { return GetToken(MySqlParser.EXTRACT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DateTimeTtypeContext dateTimeTtype() {
			return GetRuleContext<DateTimeTtypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_FORMAT_SYMBOL() { return GetToken(MySqlParser.GET_FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOW_SYMBOL() { return GetToken(MySqlParser.NOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_SYMBOL() { return GetToken(MySqlParser.IN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITION_SYMBOL() { return GetToken(MySqlParser.POSITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubstringFunctionContext substringFunction() {
			return GetRuleContext<SubstringFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSDATE_SYMBOL() { return GetToken(MySqlParser.SYSDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntervalTimeStampContext intervalTimeStamp() {
			return GetRuleContext<IntervalTimeStampContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP_ADD_SYMBOL() { return GetToken(MySqlParser.TIMESTAMP_ADD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP_DIFF_SYMBOL() { return GetToken(MySqlParser.TIMESTAMP_DIFF_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTC_DATE_SYMBOL() { return GetToken(MySqlParser.UTC_DATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTC_TIME_SYMBOL() { return GetToken(MySqlParser.UTC_TIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTC_TIMESTAMP_SYMBOL() { return GetToken(MySqlParser.UTC_TIMESTAMP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASCII_SYMBOL() { return GetToken(MySqlParser.ASCII_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSET_SYMBOL() { return GetToken(MySqlParser.CHARSET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListWithParenthesesContext exprListWithParentheses() {
			return GetRuleContext<ExprListWithParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE_SYMBOL() { return GetToken(MySqlParser.COALESCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION_SYMBOL() { return GetToken(MySqlParser.COLLATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE_SYMBOL() { return GetToken(MySqlParser.DATABASE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_SYMBOL() { return GetToken(MySqlParser.IF_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT_SYMBOL() { return GetToken(MySqlParser.FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROSECOND_SYMBOL() { return GetToken(MySqlParser.MICROSECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD_SYMBOL() { return GetToken(MySqlParser.MOD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD_PASSWORD_SYMBOL() { return GetToken(MySqlParser.OLD_PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySqlParser.PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUARTER_SYMBOL() { return GetToken(MySqlParser.QUARTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT_SYMBOL() { return GetToken(MySqlParser.REPEAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySqlParser.REPLACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE_SYMBOL() { return GetToken(MySqlParser.REVERSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_COUNT_SYMBOL() { return GetToken(MySqlParser.ROW_COUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE_SYMBOL() { return GetToken(MySqlParser.TRUNCATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEK_SYMBOL() { return GetToken(MySqlParser.WEEK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEIGHT_STRING_SYMBOL() { return GetToken(MySqlParser.WEIGHT_STRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySqlParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySqlParser.BINARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsNumCodepointsContext wsNumCodepoints() {
			return GetRuleContext<WsNumCodepointsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext[] ulong_number() {
			return GetRuleContexts<Ulong_numberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number(int i) {
			return GetRuleContext<Ulong_numberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WeightStringLevelsContext weightStringLevels() {
			return GetRuleContext<WeightStringLevelsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeometryFunctionContext geometryFunction() {
			return GetRuleContext<GeometryFunctionContext>(0);
		}
		public RuntimeFunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeFunctionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRuntimeFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRuntimeFunctionCall(this);
		}
	}

	[RuleVersion(0)]
	public RuntimeFunctionCallContext runtimeFunctionCall() {
		RuntimeFunctionCallContext _localctx = new RuntimeFunctionCallContext(Context, State);
		EnterRule(_localctx, 716, RULE_runtimeFunctionCall);
		int _la;
		try {
			State = 6269;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,780,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5996;
				_localctx.name = Match(CHAR_SYMBOL);
				State = 5997;
				Match(OPEN_PAR_SYMBOL);
				State = 5998;
				exprList();
				State = 6001;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING_SYMBOL) {
					{
					State = 5999;
					Match(USING_SYMBOL);
					State = 6000;
					charsetName();
					}
				}

				State = 6003;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6005;
				_localctx.name = Match(CURRENT_USER_SYMBOL);
				State = 6007;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,764,Context) ) {
				case 1:
					{
					State = 6006;
					parentheses();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6009;
				_localctx.name = Match(DATE_SYMBOL);
				State = 6010;
				exprWithParentheses();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6011;
				_localctx.name = Match(DAY_SYMBOL);
				State = 6012;
				exprWithParentheses();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6013;
				_localctx.name = Match(HOUR_SYMBOL);
				State = 6014;
				exprWithParentheses();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6015;
				_localctx.name = Match(INSERT_SYMBOL);
				State = 6016;
				Match(OPEN_PAR_SYMBOL);
				State = 6017;
				expr(0);
				State = 6018;
				Match(COMMA_SYMBOL);
				State = 6019;
				expr(0);
				State = 6020;
				Match(COMMA_SYMBOL);
				State = 6021;
				expr(0);
				State = 6022;
				Match(COMMA_SYMBOL);
				State = 6023;
				expr(0);
				State = 6024;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6026;
				_localctx.name = Match(INTERVAL_SYMBOL);
				State = 6027;
				Match(OPEN_PAR_SYMBOL);
				State = 6028;
				expr(0);
				State = 6031;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 6029;
					Match(COMMA_SYMBOL);
					State = 6030;
					expr(0);
					}
					}
					State = 6033;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMMA_SYMBOL );
				State = 6035;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6037;
				_localctx.name = Match(LEFT_SYMBOL);
				State = 6038;
				Match(OPEN_PAR_SYMBOL);
				State = 6039;
				expr(0);
				State = 6040;
				Match(COMMA_SYMBOL);
				State = 6041;
				expr(0);
				State = 6042;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6044;
				_localctx.name = Match(MINUTE_SYMBOL);
				State = 6045;
				exprWithParentheses();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 6046;
				_localctx.name = Match(MONTH_SYMBOL);
				State = 6047;
				exprWithParentheses();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 6048;
				_localctx.name = Match(RIGHT_SYMBOL);
				State = 6049;
				Match(OPEN_PAR_SYMBOL);
				State = 6050;
				expr(0);
				State = 6051;
				Match(COMMA_SYMBOL);
				State = 6052;
				expr(0);
				State = 6053;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 6055;
				_localctx.name = Match(SECOND_SYMBOL);
				State = 6056;
				exprWithParentheses();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 6057;
				_localctx.name = Match(TIME_SYMBOL);
				State = 6058;
				exprWithParentheses();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 6059;
				_localctx.name = Match(TIMESTAMP_SYMBOL);
				State = 6060;
				Match(OPEN_PAR_SYMBOL);
				State = 6061;
				expr(0);
				State = 6064;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 6062;
					Match(COMMA_SYMBOL);
					State = 6063;
					expr(0);
					}
				}

				State = 6066;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 6068;
				trimFunction();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 6069;
				_localctx.name = Match(USER_SYMBOL);
				State = 6070;
				parentheses();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 6071;
				_localctx.name = Match(VALUES_SYMBOL);
				State = 6072;
				exprWithParentheses();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 6073;
				_localctx.name = Match(YEAR_SYMBOL);
				State = 6074;
				exprWithParentheses();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 6075;
				_localctx.name = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ADDDATE_SYMBOL || _la==SUBDATE_SYMBOL) ) {
					_localctx.name = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6076;
				Match(OPEN_PAR_SYMBOL);
				State = 6077;
				expr(0);
				State = 6078;
				Match(COMMA_SYMBOL);
				State = 6084;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,767,Context) ) {
				case 1:
					{
					State = 6079;
					expr(0);
					}
					break;
				case 2:
					{
					State = 6080;
					Match(INTERVAL_SYMBOL);
					State = 6081;
					expr(0);
					State = 6082;
					interval();
					}
					break;
				}
				State = 6086;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 6088;
				_localctx.name = Match(CURDATE_SYMBOL);
				State = 6090;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,768,Context) ) {
				case 1:
					{
					State = 6089;
					parentheses();
					}
					break;
				}
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 6092;
				_localctx.name = Match(CURTIME_SYMBOL);
				State = 6094;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,769,Context) ) {
				case 1:
					{
					State = 6093;
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 6096;
				_localctx.name = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DATE_ADD_SYMBOL || _la==DATE_SUB_SYMBOL) ) {
					_localctx.name = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6097;
				Match(OPEN_PAR_SYMBOL);
				State = 6098;
				expr(0);
				State = 6099;
				Match(COMMA_SYMBOL);
				State = 6100;
				Match(INTERVAL_SYMBOL);
				State = 6101;
				expr(0);
				State = 6102;
				interval();
				State = 6103;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 6105;
				_localctx.name = Match(EXTRACT_SYMBOL);
				State = 6106;
				Match(OPEN_PAR_SYMBOL);
				State = 6107;
				interval();
				State = 6108;
				Match(FROM_SYMBOL);
				State = 6109;
				expr(0);
				State = 6110;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 6112;
				_localctx.name = Match(GET_FORMAT_SYMBOL);
				State = 6113;
				Match(OPEN_PAR_SYMBOL);
				State = 6114;
				dateTimeTtype();
				State = 6115;
				Match(COMMA_SYMBOL);
				State = 6116;
				expr(0);
				State = 6117;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 6119;
				_localctx.name = Match(NOW_SYMBOL);
				State = 6121;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,770,Context) ) {
				case 1:
					{
					State = 6120;
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 6123;
				_localctx.name = Match(POSITION_SYMBOL);
				State = 6124;
				Match(OPEN_PAR_SYMBOL);
				State = 6125;
				bitExpr(0);
				State = 6126;
				Match(IN_SYMBOL);
				State = 6127;
				expr(0);
				State = 6128;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 6130;
				substringFunction();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 6131;
				_localctx.name = Match(SYSDATE_SYMBOL);
				State = 6133;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,771,Context) ) {
				case 1:
					{
					State = 6132;
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 6135;
				_localctx.name = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==TIMESTAMP_ADD_SYMBOL || _la==TIMESTAMP_DIFF_SYMBOL) ) {
					_localctx.name = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6136;
				Match(OPEN_PAR_SYMBOL);
				State = 6137;
				intervalTimeStamp();
				State = 6138;
				Match(COMMA_SYMBOL);
				State = 6139;
				expr(0);
				State = 6140;
				Match(COMMA_SYMBOL);
				State = 6141;
				expr(0);
				State = 6142;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 6144;
				_localctx.name = Match(UTC_DATE_SYMBOL);
				State = 6146;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,772,Context) ) {
				case 1:
					{
					State = 6145;
					parentheses();
					}
					break;
				}
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 6148;
				_localctx.name = Match(UTC_TIME_SYMBOL);
				State = 6150;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,773,Context) ) {
				case 1:
					{
					State = 6149;
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 6152;
				_localctx.name = Match(UTC_TIMESTAMP_SYMBOL);
				State = 6154;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,774,Context) ) {
				case 1:
					{
					State = 6153;
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 6156;
				_localctx.name = Match(ASCII_SYMBOL);
				State = 6157;
				exprWithParentheses();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 6158;
				_localctx.name = Match(CHARSET_SYMBOL);
				State = 6159;
				exprWithParentheses();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 6160;
				_localctx.name = Match(COALESCE_SYMBOL);
				State = 6161;
				exprListWithParentheses();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 6162;
				_localctx.name = Match(COLLATION_SYMBOL);
				State = 6163;
				exprWithParentheses();
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 6164;
				_localctx.name = Match(DATABASE_SYMBOL);
				State = 6165;
				parentheses();
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 6166;
				_localctx.name = Match(IF_SYMBOL);
				State = 6167;
				Match(OPEN_PAR_SYMBOL);
				State = 6168;
				expr(0);
				State = 6169;
				Match(COMMA_SYMBOL);
				State = 6170;
				expr(0);
				State = 6171;
				Match(COMMA_SYMBOL);
				State = 6172;
				expr(0);
				State = 6173;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 6175;
				_localctx.name = Match(FORMAT_SYMBOL);
				State = 6176;
				Match(OPEN_PAR_SYMBOL);
				State = 6177;
				expr(0);
				State = 6178;
				Match(COMMA_SYMBOL);
				State = 6179;
				expr(0);
				State = 6182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 6180;
					Match(COMMA_SYMBOL);
					State = 6181;
					expr(0);
					}
				}

				State = 6184;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 6186;
				_localctx.name = Match(MICROSECOND_SYMBOL);
				State = 6187;
				exprWithParentheses();
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 6188;
				_localctx.name = Match(MOD_SYMBOL);
				State = 6189;
				Match(OPEN_PAR_SYMBOL);
				State = 6190;
				expr(0);
				State = 6191;
				Match(COMMA_SYMBOL);
				State = 6192;
				expr(0);
				State = 6193;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 6195;
				if (!(serverVersion < 50607)) throw new FailedPredicateException(this, "serverVersion < 50607");
				State = 6196;
				_localctx.name = Match(OLD_PASSWORD_SYMBOL);
				State = 6197;
				Match(OPEN_PAR_SYMBOL);
				State = 6198;
				textLiteral();
				State = 6199;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 6201;
				if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
				State = 6202;
				_localctx.name = Match(PASSWORD_SYMBOL);
				State = 6203;
				exprWithParentheses();
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 6204;
				_localctx.name = Match(QUARTER_SYMBOL);
				State = 6205;
				exprWithParentheses();
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 6206;
				_localctx.name = Match(REPEAT_SYMBOL);
				State = 6207;
				Match(OPEN_PAR_SYMBOL);
				State = 6208;
				expr(0);
				State = 6209;
				Match(COMMA_SYMBOL);
				State = 6210;
				expr(0);
				State = 6211;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 6213;
				_localctx.name = Match(REPLACE_SYMBOL);
				State = 6214;
				Match(OPEN_PAR_SYMBOL);
				State = 6215;
				expr(0);
				State = 6216;
				Match(COMMA_SYMBOL);
				State = 6217;
				expr(0);
				State = 6218;
				Match(COMMA_SYMBOL);
				State = 6219;
				expr(0);
				State = 6220;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 6222;
				_localctx.name = Match(REVERSE_SYMBOL);
				State = 6223;
				exprWithParentheses();
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 6224;
				_localctx.name = Match(ROW_COUNT_SYMBOL);
				State = 6225;
				parentheses();
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 6226;
				_localctx.name = Match(TRUNCATE_SYMBOL);
				State = 6227;
				Match(OPEN_PAR_SYMBOL);
				State = 6228;
				expr(0);
				State = 6229;
				Match(COMMA_SYMBOL);
				State = 6230;
				expr(0);
				State = 6231;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 6233;
				_localctx.name = Match(WEEK_SYMBOL);
				State = 6234;
				Match(OPEN_PAR_SYMBOL);
				State = 6235;
				expr(0);
				State = 6238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 6236;
					Match(COMMA_SYMBOL);
					State = 6237;
					expr(0);
					}
				}

				State = 6240;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 6242;
				_localctx.name = Match(WEIGHT_STRING_SYMBOL);
				State = 6243;
				Match(OPEN_PAR_SYMBOL);
				State = 6244;
				expr(0);
				State = 6264;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,779,Context) ) {
				case 1:
					{
					State = 6248;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,777,Context) ) {
					case 1:
						{
						State = 6245;
						Match(AS_SYMBOL);
						State = 6246;
						Match(CHAR_SYMBOL);
						State = 6247;
						wsNumCodepoints();
						}
						break;
					}
					State = 6252;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,778,Context) ) {
					case 1:
						{
						State = 6250;
						if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
						State = 6251;
						weightStringLevels();
						}
						break;
					}
					}
					break;
				case 2:
					{
					State = 6254;
					Match(AS_SYMBOL);
					State = 6255;
					Match(BINARY_SYMBOL);
					State = 6256;
					wsNumCodepoints();
					}
					break;
				case 3:
					{
					State = 6257;
					Match(COMMA_SYMBOL);
					State = 6258;
					ulong_number();
					State = 6259;
					Match(COMMA_SYMBOL);
					State = 6260;
					ulong_number();
					State = 6261;
					Match(COMMA_SYMBOL);
					State = 6262;
					ulong_number();
					}
					break;
				}
				State = 6266;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 6268;
				geometryFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeometryFunctionContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL() { return GetToken(MySqlParser.COMMA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS_SYMBOL() { return GetToken(MySqlParser.CONTAINS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYCOLLECTION_SYMBOL() { return GetToken(MySqlParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprListWithParenthesesContext exprListWithParentheses() {
			return GetRuleContext<ExprListWithParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINESTRING_SYMBOL() { return GetToken(MySqlParser.LINESTRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTILINESTRING_SYMBOL() { return GetToken(MySqlParser.MULTILINESTRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOINT_SYMBOL() { return GetToken(MySqlParser.MULTIPOINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOLYGON_SYMBOL() { return GetToken(MySqlParser.MULTIPOLYGON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINT_SYMBOL() { return GetToken(MySqlParser.POINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGON_SYMBOL() { return GetToken(MySqlParser.POLYGON_SYMBOL, 0); }
		public GeometryFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_geometryFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGeometryFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGeometryFunction(this);
		}
	}

	[RuleVersion(0)]
	public GeometryFunctionContext geometryFunction() {
		GeometryFunctionContext _localctx = new GeometryFunctionContext(Context, State);
		EnterRule(_localctx, 718, RULE_geometryFunction);
		try {
			State = 6302;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,782,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6271;
				if (!(serverVersion < 50706)) throw new FailedPredicateException(this, "serverVersion < 50706");
				State = 6272;
				_localctx.name = Match(CONTAINS_SYMBOL);
				State = 6273;
				Match(OPEN_PAR_SYMBOL);
				State = 6274;
				expr(0);
				State = 6275;
				Match(COMMA_SYMBOL);
				State = 6276;
				expr(0);
				State = 6277;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6279;
				_localctx.name = Match(GEOMETRYCOLLECTION_SYMBOL);
				State = 6280;
				Match(OPEN_PAR_SYMBOL);
				State = 6282;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,781,Context) ) {
				case 1:
					{
					State = 6281;
					exprList();
					}
					break;
				}
				State = 6284;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6285;
				_localctx.name = Match(LINESTRING_SYMBOL);
				State = 6286;
				exprListWithParentheses();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6287;
				_localctx.name = Match(MULTILINESTRING_SYMBOL);
				State = 6288;
				exprListWithParentheses();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6289;
				_localctx.name = Match(MULTIPOINT_SYMBOL);
				State = 6290;
				exprListWithParentheses();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6291;
				_localctx.name = Match(MULTIPOLYGON_SYMBOL);
				State = 6292;
				exprListWithParentheses();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6293;
				_localctx.name = Match(POINT_SYMBOL);
				State = 6294;
				Match(OPEN_PAR_SYMBOL);
				State = 6295;
				expr(0);
				State = 6296;
				Match(COMMA_SYMBOL);
				State = 6297;
				expr(0);
				State = 6298;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6300;
				_localctx.name = Match(POLYGON_SYMBOL);
				State = 6301;
				exprListWithParentheses();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeFunctionParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FractionalPrecisionContext fractionalPrecision() {
			return GetRuleContext<FractionalPrecisionContext>(0);
		}
		public TimeFunctionParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeFunctionParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTimeFunctionParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTimeFunctionParameters(this);
		}
	}

	[RuleVersion(0)]
	public TimeFunctionParametersContext timeFunctionParameters() {
		TimeFunctionParametersContext _localctx = new TimeFunctionParametersContext(Context, State);
		EnterRule(_localctx, 720, RULE_timeFunctionParameters);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6304;
			Match(OPEN_PAR_SYMBOL);
			State = 6306;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,783,Context) ) {
			case 1:
				{
				State = 6305;
				fractionalPrecision();
				}
				break;
			}
			State = 6308;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FractionalPrecisionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySqlParser.INT_NUMBER, 0); }
		public FractionalPrecisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fractionalPrecision; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFractionalPrecision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFractionalPrecision(this);
		}
	}

	[RuleVersion(0)]
	public FractionalPrecisionContext fractionalPrecision() {
		FractionalPrecisionContext _localctx = new FractionalPrecisionContext(Context, State);
		EnterRule(_localctx, 722, RULE_fractionalPrecision);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6310;
			if (!(serverVersion >= 50604)) throw new FailedPredicateException(this, "serverVersion >= 50604");
			State = 6311;
			Match(INT_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WeightStringLevelsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL_SYMBOL() { return GetToken(MySqlParser.LEVEL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext[] real_ulong_number() {
			return GetRuleContexts<Real_ulong_numberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number(int i) {
			return GetRuleContext<Real_ulong_numberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_OPERATOR() { return GetToken(MySqlParser.MINUS_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WeightStringLevelListItemContext[] weightStringLevelListItem() {
			return GetRuleContexts<WeightStringLevelListItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WeightStringLevelListItemContext weightStringLevelListItem(int i) {
			return GetRuleContext<WeightStringLevelListItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public WeightStringLevelsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_weightStringLevels; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWeightStringLevels(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWeightStringLevels(this);
		}
	}

	[RuleVersion(0)]
	public WeightStringLevelsContext weightStringLevels() {
		WeightStringLevelsContext _localctx = new WeightStringLevelsContext(Context, State);
		EnterRule(_localctx, 724, RULE_weightStringLevels);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6313;
			Match(LEVEL_SYMBOL);
			State = 6326;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,785,Context) ) {
			case 1:
				{
				State = 6314;
				real_ulong_number();
				State = 6315;
				Match(MINUS_OPERATOR);
				State = 6316;
				real_ulong_number();
				}
				break;
			case 2:
				{
				State = 6318;
				weightStringLevelListItem();
				State = 6323;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 6319;
					Match(COMMA_SYMBOL);
					State = 6320;
					weightStringLevelListItem();
					}
					}
					State = 6325;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WeightStringLevelListItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE_SYMBOL() { return GetToken(MySqlParser.REVERSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC_SYMBOL() { return GetToken(MySqlParser.ASC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC_SYMBOL() { return GetToken(MySqlParser.DESC_SYMBOL, 0); }
		public WeightStringLevelListItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_weightStringLevelListItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWeightStringLevelListItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWeightStringLevelListItem(this);
		}
	}

	[RuleVersion(0)]
	public WeightStringLevelListItemContext weightStringLevelListItem() {
		WeightStringLevelListItemContext _localctx = new WeightStringLevelListItemContext(Context, State);
		EnterRule(_localctx, 726, RULE_weightStringLevelListItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6328;
			real_ulong_number();
			State = 6334;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASC_SYMBOL:
			case DESC_SYMBOL:
				{
				State = 6329;
				_la = TokenStream.LA(1);
				if ( !(_la==ASC_SYMBOL || _la==DESC_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6331;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REVERSE_SYMBOL) {
					{
					State = 6330;
					Match(REVERSE_SYMBOL);
					}
				}

				}
				break;
			case REVERSE_SYMBOL:
				{
				State = 6333;
				Match(REVERSE_SYMBOL);
				}
				break;
			case COMMA_SYMBOL:
			case CLOSE_PAR_SYMBOL:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateTimeTtypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_SYMBOL() { return GetToken(MySqlParser.DATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_SYMBOL() { return GetToken(MySqlParser.TIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME_SYMBOL() { return GetToken(MySqlParser.DATETIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP_SYMBOL() { return GetToken(MySqlParser.TIMESTAMP_SYMBOL, 0); }
		public DateTimeTtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateTimeTtype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDateTimeTtype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDateTimeTtype(this);
		}
	}

	[RuleVersion(0)]
	public DateTimeTtypeContext dateTimeTtype() {
		DateTimeTtypeContext _localctx = new DateTimeTtypeContext(Context, State);
		EnterRule(_localctx, 728, RULE_dateTimeTtype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6336;
			_la = TokenStream.LA(1);
			if ( !(_la==DATETIME_SYMBOL || _la==DATE_SYMBOL || _la==TIMESTAMP_SYMBOL || _la==TIME_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrimFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIM_SYMBOL() { return GetToken(MySqlParser.TRIM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEADING_SYMBOL() { return GetToken(MySqlParser.LEADING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySqlParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRAILING_SYMBOL() { return GetToken(MySqlParser.TRAILING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOTH_SYMBOL() { return GetToken(MySqlParser.BOTH_SYMBOL, 0); }
		public TrimFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trimFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTrimFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTrimFunction(this);
		}
	}

	[RuleVersion(0)]
	public TrimFunctionContext trimFunction() {
		TrimFunctionContext _localctx = new TrimFunctionContext(Context, State);
		EnterRule(_localctx, 730, RULE_trimFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6338;
			Match(TRIM_SYMBOL);
			State = 6339;
			Match(OPEN_PAR_SYMBOL);
			State = 6363;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,792,Context) ) {
			case 1:
				{
				State = 6340;
				expr(0);
				State = 6343;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM_SYMBOL) {
					{
					State = 6341;
					Match(FROM_SYMBOL);
					State = 6342;
					expr(0);
					}
				}

				}
				break;
			case 2:
				{
				State = 6345;
				Match(LEADING_SYMBOL);
				State = 6347;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,789,Context) ) {
				case 1:
					{
					State = 6346;
					expr(0);
					}
					break;
				}
				State = 6349;
				Match(FROM_SYMBOL);
				State = 6350;
				expr(0);
				}
				break;
			case 3:
				{
				State = 6351;
				Match(TRAILING_SYMBOL);
				State = 6353;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,790,Context) ) {
				case 1:
					{
					State = 6352;
					expr(0);
					}
					break;
				}
				State = 6355;
				Match(FROM_SYMBOL);
				State = 6356;
				expr(0);
				}
				break;
			case 4:
				{
				State = 6357;
				Match(BOTH_SYMBOL);
				State = 6359;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,791,Context) ) {
				case 1:
					{
					State = 6358;
					expr(0);
					}
					break;
				}
				State = 6361;
				Match(FROM_SYMBOL);
				State = 6362;
				expr(0);
				}
				break;
			}
			State = 6365;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubstringFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTRING_SYMBOL() { return GetToken(MySqlParser.SUBSTRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySqlParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySqlParser.FOR_SYMBOL, 0); }
		public SubstringFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_substringFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSubstringFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSubstringFunction(this);
		}
	}

	[RuleVersion(0)]
	public SubstringFunctionContext substringFunction() {
		SubstringFunctionContext _localctx = new SubstringFunctionContext(Context, State);
		EnterRule(_localctx, 732, RULE_substringFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6367;
			Match(SUBSTRING_SYMBOL);
			State = 6368;
			Match(OPEN_PAR_SYMBOL);
			State = 6369;
			expr(0);
			State = 6382;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMA_SYMBOL:
				{
				State = 6370;
				Match(COMMA_SYMBOL);
				State = 6371;
				expr(0);
				State = 6374;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 6372;
					Match(COMMA_SYMBOL);
					State = 6373;
					expr(0);
					}
				}

				}
				break;
			case FROM_SYMBOL:
				{
				State = 6376;
				Match(FROM_SYMBOL);
				State = 6377;
				expr(0);
				State = 6380;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					State = 6378;
					Match(FOR_SYMBOL);
					State = 6379;
					expr(0);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6384;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PureIdentifierContext pureIdentifier() {
			return GetRuleContext<PureIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UdfExprListContext udfExprList() {
			return GetRuleContext<UdfExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 734, RULE_functionCall);
		try {
			State = 6400;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,798,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6386;
				pureIdentifier();
				State = 6387;
				Match(OPEN_PAR_SYMBOL);
				State = 6389;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,796,Context) ) {
				case 1:
					{
					State = 6388;
					udfExprList();
					}
					break;
				}
				State = 6391;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6393;
				qualifiedIdentifier();
				State = 6394;
				Match(OPEN_PAR_SYMBOL);
				State = 6396;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,797,Context) ) {
				case 1:
					{
					State = 6395;
					exprList();
					}
					break;
				}
				State = 6398;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UdfExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UdfExprContext[] udfExpr() {
			return GetRuleContexts<UdfExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UdfExprContext udfExpr(int i) {
			return GetRuleContext<UdfExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public UdfExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udfExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUdfExprList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUdfExprList(this);
		}
	}

	[RuleVersion(0)]
	public UdfExprListContext udfExprList() {
		UdfExprListContext _localctx = new UdfExprListContext(Context, State);
		EnterRule(_localctx, 736, RULE_udfExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6402;
			udfExpr();
			State = 6407;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 6403;
				Match(COMMA_SYMBOL);
				State = 6404;
				udfExpr();
				}
				}
				State = 6409;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UdfExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public UdfExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udfExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUdfExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUdfExpr(this);
		}
	}

	[RuleVersion(0)]
	public UdfExprContext udfExpr() {
		UdfExprContext _localctx = new UdfExprContext(Context, State);
		EnterRule(_localctx, 738, RULE_udfExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6410;
			expr(0);
			State = 6412;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,800,Context) ) {
			case 1:
				{
				State = 6411;
				selectAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserVariableContext userVariable() {
			return GetRuleContext<UserVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SystemVariableContext systemVariable() {
			return GetRuleContext<SystemVariableContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 740, RULE_variable);
		try {
			State = 6416;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT_SIGN_SYMBOL:
			case AT_TEXT_SUFFIX:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6414;
				userVariable();
				}
				break;
			case AT_AT_SIGN_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6415;
				systemVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SIGN_SYMBOL() { return GetToken(MySqlParser.AT_SIGN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_TEXT_SUFFIX() { return GetToken(MySqlParser.AT_TEXT_SUFFIX, 0); }
		public UserVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUserVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUserVariable(this);
		}
	}

	[RuleVersion(0)]
	public UserVariableContext userVariable() {
		UserVariableContext _localctx = new UserVariableContext(Context, State);
		EnterRule(_localctx, 742, RULE_userVariable);
		try {
			State = 6421;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT_SIGN_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6418;
				Match(AT_SIGN_SYMBOL);
				State = 6419;
				textOrIdentifier();
				}
				break;
			case AT_TEXT_SUFFIX:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6420;
				Match(AT_TEXT_SUFFIX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SystemVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_AT_SIGN_SYMBOL() { return GetToken(MySqlParser.AT_AT_SIGN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarIdentTypeContext varIdentType() {
			return GetRuleContext<VarIdentTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public SystemVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_systemVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSystemVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSystemVariable(this);
		}
	}

	[RuleVersion(0)]
	public SystemVariableContext systemVariable() {
		SystemVariableContext _localctx = new SystemVariableContext(Context, State);
		EnterRule(_localctx, 744, RULE_systemVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6423;
			Match(AT_AT_SIGN_SYMBOL);
			State = 6425;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,803,Context) ) {
			case 1:
				{
				State = 6424;
				varIdentType();
				}
				break;
			}
			State = 6427;
			textOrIdentifier();
			State = 6429;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,804,Context) ) {
			case 1:
				{
				State = 6428;
				dotIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InternalVariableNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LValueIdentifierContext lValueIdentifier() {
			return GetRuleContext<LValueIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		public InternalVariableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_internalVariableName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInternalVariableName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInternalVariableName(this);
		}
	}

	[RuleVersion(0)]
	public InternalVariableNameContext internalVariableName() {
		InternalVariableNameContext _localctx = new InternalVariableNameContext(Context, State);
		EnterRule(_localctx, 746, RULE_internalVariableName);
		int _la;
		try {
			State = 6445;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,808,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6441;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,807,Context) ) {
				case 1:
					{
					State = 6431;
					if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
					State = 6432;
					identifier();
					State = 6434;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DOT_SYMBOL) {
						{
						State = 6433;
						dotIdentifier();
						}
					}

					}
					break;
				case 2:
					{
					State = 6436;
					if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
					State = 6437;
					lValueIdentifier();
					State = 6439;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DOT_SYMBOL) {
						{
						State = 6438;
						dotIdentifier();
						}
					}

					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6443;
				Match(DEFAULT_SYMBOL);
				State = 6444;
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhenExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN_SYMBOL() { return GetToken(MySqlParser.WHEN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public WhenExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whenExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWhenExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWhenExpression(this);
		}
	}

	[RuleVersion(0)]
	public WhenExpressionContext whenExpression() {
		WhenExpressionContext _localctx = new WhenExpressionContext(Context, State);
		EnterRule(_localctx, 748, RULE_whenExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6447;
			Match(WHEN_SYMBOL);
			State = 6448;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThenExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN_SYMBOL() { return GetToken(MySqlParser.THEN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ThenExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thenExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterThenExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitThenExpression(this);
		}
	}

	[RuleVersion(0)]
	public ThenExpressionContext thenExpression() {
		ThenExpressionContext _localctx = new ThenExpressionContext(Context, State);
		EnterRule(_localctx, 750, RULE_thenExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6450;
			Match(THEN_SYMBOL);
			State = 6451;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE_SYMBOL() { return GetToken(MySqlParser.ELSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ElseExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterElseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitElseExpression(this);
		}
	}

	[RuleVersion(0)]
	public ElseExpressionContext elseExpression() {
		ElseExpressionContext _localctx = new ElseExpressionContext(Context, State);
		EnterRule(_localctx, 752, RULE_elseExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6453;
			Match(ELSE_SYMBOL);
			State = 6454;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySqlParser.BINARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_SYMBOL() { return GetToken(MySqlParser.CHAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetWithOptBinaryContext charsetWithOptBinary() {
			return GetRuleContext<CharsetWithOptBinaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NcharContext nchar() {
			return GetRuleContext<NcharContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNED_SYMBOL() { return GetToken(MySqlParser.SIGNED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_SYMBOL() { return GetToken(MySqlParser.INT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_SYMBOL() { return GetToken(MySqlParser.UNSIGNED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_SYMBOL() { return GetToken(MySqlParser.DATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_SYMBOL() { return GetToken(MySqlParser.TIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeDatetimePrecisionContext typeDatetimePrecision() {
			return GetRuleContext<TypeDatetimePrecisionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME_SYMBOL() { return GetToken(MySqlParser.DATETIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_SYMBOL() { return GetToken(MySqlParser.DECIMAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FloatOptionsContext floatOptions() {
			return GetRuleContext<FloatOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SYMBOL() { return GetToken(MySqlParser.JSON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RealTypeContext realType() {
			return GetRuleContext<RealTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_SYMBOL() { return GetToken(MySqlParser.FLOAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StandardFloatOptionsContext standardFloatOptions() {
			return GetRuleContext<StandardFloatOptionsContext>(0);
		}
		public CastTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCastType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCastType(this);
		}
	}

	[RuleVersion(0)]
	public CastTypeContext castType() {
		CastTypeContext _localctx = new CastTypeContext(Context, State);
		EnterRule(_localctx, 754, RULE_castType);
		try {
			State = 6501;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,819,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6456;
				Match(BINARY_SYMBOL);
				State = 6458;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,809,Context) ) {
				case 1:
					{
					State = 6457;
					fieldLength();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6460;
				Match(CHAR_SYMBOL);
				State = 6462;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,810,Context) ) {
				case 1:
					{
					State = 6461;
					fieldLength();
					}
					break;
				}
				State = 6465;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,811,Context) ) {
				case 1:
					{
					State = 6464;
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6467;
				nchar();
				State = 6469;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,812,Context) ) {
				case 1:
					{
					State = 6468;
					fieldLength();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6471;
				Match(SIGNED_SYMBOL);
				State = 6473;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,813,Context) ) {
				case 1:
					{
					State = 6472;
					Match(INT_SYMBOL);
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6475;
				Match(UNSIGNED_SYMBOL);
				State = 6477;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,814,Context) ) {
				case 1:
					{
					State = 6476;
					Match(INT_SYMBOL);
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6479;
				Match(DATE_SYMBOL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6480;
				Match(TIME_SYMBOL);
				State = 6482;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,815,Context) ) {
				case 1:
					{
					State = 6481;
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6484;
				Match(DATETIME_SYMBOL);
				State = 6486;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,816,Context) ) {
				case 1:
					{
					State = 6485;
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6488;
				Match(DECIMAL_SYMBOL);
				State = 6490;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,817,Context) ) {
				case 1:
					{
					State = 6489;
					floatOptions();
					}
					break;
				}
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 6492;
				if (!(serverVersion >= 50708)) throw new FailedPredicateException(this, "serverVersion >= 50708");
				State = 6493;
				Match(JSON_SYMBOL);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 6494;
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				State = 6495;
				realType();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 6496;
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				State = 6497;
				Match(FLOAT_SYMBOL);
				State = 6499;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,818,Context) ) {
				case 1:
					{
					State = 6498;
					standardFloatOptions();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public ExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExprList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExprList(this);
		}
	}

	[RuleVersion(0)]
	public ExprListContext exprList() {
		ExprListContext _localctx = new ExprListContext(Context, State);
		EnterRule(_localctx, 756, RULE_exprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6503;
			expr(0);
			State = 6508;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 6504;
				Match(COMMA_SYMBOL);
				State = 6505;
				expr(0);
				}
				}
				State = 6510;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharsetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_SYMBOL() { return GetToken(MySqlParser.CHAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySqlParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSET_SYMBOL() { return GetToken(MySqlParser.CHARSET_SYMBOL, 0); }
		public CharsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCharset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCharset(this);
		}
	}

	[RuleVersion(0)]
	public CharsetContext charset() {
		CharsetContext _localctx = new CharsetContext(Context, State);
		EnterRule(_localctx, 758, RULE_charset);
		try {
			State = 6514;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6511;
				Match(CHAR_SYMBOL);
				State = 6512;
				Match(SET_SYMBOL);
				}
				break;
			case CHARSET_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6513;
				Match(CHARSET_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_SYMBOL() { return GetToken(MySqlParser.NOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT2_SYMBOL() { return GetToken(MySqlParser.NOT2_SYMBOL, 0); }
		public NotRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNotRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNotRule(this);
		}
	}

	[RuleVersion(0)]
	public NotRuleContext notRule() {
		NotRuleContext _localctx = new NotRuleContext(Context, State);
		EnterRule(_localctx, 760, RULE_notRule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6516;
			_la = TokenStream.LA(1);
			if ( !(_la==NOT_SYMBOL || _la==NOT2_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Not2RuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_NOT_OPERATOR() { return GetToken(MySqlParser.LOGICAL_NOT_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT2_SYMBOL() { return GetToken(MySqlParser.NOT2_SYMBOL, 0); }
		public Not2RuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_not2Rule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNot2Rule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNot2Rule(this);
		}
	}

	[RuleVersion(0)]
	public Not2RuleContext not2Rule() {
		Not2RuleContext _localctx = new Not2RuleContext(Context, State);
		EnterRule(_localctx, 762, RULE_not2Rule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6518;
			_la = TokenStream.LA(1);
			if ( !(_la==NOT2_SYMBOL || _la==LOGICAL_NOT_OPERATOR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntervalTimeStampContext intervalTimeStamp() {
			return GetRuleContext<IntervalTimeStampContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND_MICROSECOND_SYMBOL() { return GetToken(MySqlParser.SECOND_MICROSECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_MICROSECOND_SYMBOL() { return GetToken(MySqlParser.MINUTE_MICROSECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_SECOND_SYMBOL() { return GetToken(MySqlParser.MINUTE_SECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_MICROSECOND_SYMBOL() { return GetToken(MySqlParser.HOUR_MICROSECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_SECOND_SYMBOL() { return GetToken(MySqlParser.HOUR_SECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_MINUTE_SYMBOL() { return GetToken(MySqlParser.HOUR_MINUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_MICROSECOND_SYMBOL() { return GetToken(MySqlParser.DAY_MICROSECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_SECOND_SYMBOL() { return GetToken(MySqlParser.DAY_SECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_MINUTE_SYMBOL() { return GetToken(MySqlParser.DAY_MINUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_HOUR_SYMBOL() { return GetToken(MySqlParser.DAY_HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR_MONTH_SYMBOL() { return GetToken(MySqlParser.YEAR_MONTH_SYMBOL, 0); }
		public IntervalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interval; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInterval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInterval(this);
		}
	}

	[RuleVersion(0)]
	public IntervalContext interval() {
		IntervalContext _localctx = new IntervalContext(Context, State);
		EnterRule(_localctx, 764, RULE_interval);
		int _la;
		try {
			State = 6522;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DAY_SYMBOL:
			case HOUR_SYMBOL:
			case MICROSECOND_SYMBOL:
			case MINUTE_SYMBOL:
			case MONTH_SYMBOL:
			case QUARTER_SYMBOL:
			case SECOND_SYMBOL:
			case WEEK_SYMBOL:
			case YEAR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6520;
				intervalTimeStamp();
				}
				break;
			case DAY_HOUR_SYMBOL:
			case DAY_MICROSECOND_SYMBOL:
			case DAY_MINUTE_SYMBOL:
			case DAY_SECOND_SYMBOL:
			case HOUR_MICROSECOND_SYMBOL:
			case HOUR_MINUTE_SYMBOL:
			case HOUR_SECOND_SYMBOL:
			case MINUTE_MICROSECOND_SYMBOL:
			case MINUTE_SECOND_SYMBOL:
			case SECOND_MICROSECOND_SYMBOL:
			case YEAR_MONTH_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6521;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & ((1L << (DAY_HOUR_SYMBOL - 118)) | (1L << (DAY_MICROSECOND_SYMBOL - 118)) | (1L << (DAY_MINUTE_SYMBOL - 118)) | (1L << (DAY_SECOND_SYMBOL - 118)))) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (HOUR_MICROSECOND_SYMBOL - 226)) | (1L << (HOUR_MINUTE_SYMBOL - 226)) | (1L << (HOUR_SECOND_SYMBOL - 226)))) != 0) || _la==MINUTE_MICROSECOND_SYMBOL || _la==MINUTE_SECOND_SYMBOL || _la==SECOND_MICROSECOND_SYMBOL || _la==YEAR_MONTH_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalTimeStampContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROSECOND_SYMBOL() { return GetToken(MySqlParser.MICROSECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND_SYMBOL() { return GetToken(MySqlParser.SECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_SYMBOL() { return GetToken(MySqlParser.MINUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_SYMBOL() { return GetToken(MySqlParser.HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_SYMBOL() { return GetToken(MySqlParser.DAY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEK_SYMBOL() { return GetToken(MySqlParser.WEEK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH_SYMBOL() { return GetToken(MySqlParser.MONTH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUARTER_SYMBOL() { return GetToken(MySqlParser.QUARTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR_SYMBOL() { return GetToken(MySqlParser.YEAR_SYMBOL, 0); }
		public IntervalTimeStampContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalTimeStamp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIntervalTimeStamp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIntervalTimeStamp(this);
		}
	}

	[RuleVersion(0)]
	public IntervalTimeStampContext intervalTimeStamp() {
		IntervalTimeStampContext _localctx = new IntervalTimeStampContext(Context, State);
		EnterRule(_localctx, 766, RULE_intervalTimeStamp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6524;
			_la = TokenStream.LA(1);
			if ( !(_la==DAY_SYMBOL || _la==HOUR_SYMBOL || ((((_la - 337)) & ~0x3f) == 0 && ((1L << (_la - 337)) & ((1L << (MICROSECOND_SYMBOL - 337)) | (1L << (MINUTE_SYMBOL - 337)) | (1L << (MONTH_SYMBOL - 337)))) != 0) || _la==QUARTER_SYMBOL || _la==SECOND_SYMBOL || _la==WEEK_SYMBOL || _la==YEAR_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprListWithParenthesesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public ExprListWithParenthesesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprListWithParentheses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExprListWithParentheses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExprListWithParentheses(this);
		}
	}

	[RuleVersion(0)]
	public ExprListWithParenthesesContext exprListWithParentheses() {
		ExprListWithParenthesesContext _localctx = new ExprListWithParenthesesContext(Context, State);
		EnterRule(_localctx, 768, RULE_exprListWithParentheses);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6526;
			Match(OPEN_PAR_SYMBOL);
			State = 6527;
			exprList();
			State = 6528;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprWithParenthesesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public ExprWithParenthesesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprWithParentheses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExprWithParentheses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExprWithParentheses(this);
		}
	}

	[RuleVersion(0)]
	public ExprWithParenthesesContext exprWithParentheses() {
		ExprWithParenthesesContext _localctx = new ExprWithParenthesesContext(Context, State);
		EnterRule(_localctx, 770, RULE_exprWithParentheses);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6530;
			Match(OPEN_PAR_SYMBOL);
			State = 6531;
			expr(0);
			State = 6532;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleExprWithParenthesesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprWithParenthesesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExprWithParentheses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprWithParentheses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprWithParentheses(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExprWithParenthesesContext simpleExprWithParentheses() {
		SimpleExprWithParenthesesContext _localctx = new SimpleExprWithParenthesesContext(Context, State);
		EnterRule(_localctx, 772, RULE_simpleExprWithParentheses);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6534;
			Match(OPEN_PAR_SYMBOL);
			State = 6535;
			simpleExpr(0);
			State = 6536;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OrderExpressionContext[] orderExpression() {
			return GetRuleContexts<OrderExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderExpressionContext orderExpression(int i) {
			return GetRuleContext<OrderExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public OrderListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOrderList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOrderList(this);
		}
	}

	[RuleVersion(0)]
	public OrderListContext orderList() {
		OrderListContext _localctx = new OrderListContext(Context, State);
		EnterRule(_localctx, 774, RULE_orderList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6538;
			orderExpression();
			State = 6543;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,823,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 6539;
					Match(COMMA_SYMBOL);
					State = 6540;
					orderExpression();
					}
					} 
				}
				State = 6545;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,823,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionContext direction() {
			return GetRuleContext<DirectionContext>(0);
		}
		public OrderExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOrderExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOrderExpression(this);
		}
	}

	[RuleVersion(0)]
	public OrderExpressionContext orderExpression() {
		OrderExpressionContext _localctx = new OrderExpressionContext(Context, State);
		EnterRule(_localctx, 776, RULE_orderExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6546;
			expr(0);
			State = 6548;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,824,Context) ) {
			case 1:
				{
				State = 6547;
				direction();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroupingExpressionContext[] groupingExpression() {
			return GetRuleContexts<GroupingExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupingExpressionContext groupingExpression(int i) {
			return GetRuleContext<GroupingExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public GroupListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGroupList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGroupList(this);
		}
	}

	[RuleVersion(0)]
	public GroupListContext groupList() {
		GroupListContext _localctx = new GroupListContext(Context, State);
		EnterRule(_localctx, 778, RULE_groupList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6550;
			groupingExpression();
			State = 6555;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 6551;
				Match(COMMA_SYMBOL);
				State = 6552;
				groupingExpression();
				}
				}
				State = 6557;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupingExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public GroupingExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupingExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGroupingExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGroupingExpression(this);
		}
	}

	[RuleVersion(0)]
	public GroupingExpressionContext groupingExpression() {
		GroupingExpressionContext _localctx = new GroupingExpressionContext(Context, State);
		EnterRule(_localctx, 780, RULE_groupingExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6558;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChannelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySqlParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANNEL_SYMBOL() { return GetToken(MySqlParser.CHANNEL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringNoLinebreakContext textStringNoLinebreak() {
			return GetRuleContext<TextStringNoLinebreakContext>(0);
		}
		public ChannelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_channel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChannel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChannel(this);
		}
	}

	[RuleVersion(0)]
	public ChannelContext channel() {
		ChannelContext _localctx = new ChannelContext(Context, State);
		EnterRule(_localctx, 782, RULE_channel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6560;
			if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
			State = 6561;
			Match(FOR_SYMBOL);
			State = 6562;
			Match(CHANNEL_SYMBOL);
			State = 6563;
			textStringNoLinebreak();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext caseStatement() {
			return GetRuleContext<CaseStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabeledBlockContext labeledBlock() {
			return GetRuleContext<LabeledBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnlabeledBlockContext unlabeledBlock() {
			return GetRuleContext<UnlabeledBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabeledControlContext labeledControl() {
			return GetRuleContext<LabeledControlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnlabeledControlContext unlabeledControl() {
			return GetRuleContext<UnlabeledControlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LeaveStatementContext leaveStatement() {
			return GetRuleContext<LeaveStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IterateStatementContext iterateStatement() {
			return GetRuleContext<IterateStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CursorOpenContext cursorOpen() {
			return GetRuleContext<CursorOpenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CursorFetchContext cursorFetch() {
			return GetRuleContext<CursorFetchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CursorCloseContext cursorClose() {
			return GetRuleContext<CursorCloseContext>(0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCompoundStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCompoundStatement(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 784, RULE_compoundStatement);
		try {
			State = 6578;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,826,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6565;
				simpleStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6566;
				returnStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6567;
				ifStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6568;
				caseStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6569;
				labeledBlock();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6570;
				unlabeledBlock();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6571;
				labeledControl();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6572;
				unlabeledControl();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6573;
				leaveStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 6574;
				iterateStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 6575;
				cursorOpen();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 6576;
				cursorFetch();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 6577;
				cursorClose();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN_SYMBOL() { return GetToken(MySqlParser.RETURN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 786, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6580;
			Match(RETURN_SYMBOL);
			State = 6581;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF_SYMBOL() { return GetTokens(MySqlParser.IF_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_SYMBOL(int i) {
			return GetToken(MySqlParser.IF_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfBodyContext ifBody() {
			return GetRuleContext<IfBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_SYMBOL() { return GetToken(MySqlParser.END_SYMBOL, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 788, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6583;
			Match(IF_SYMBOL);
			State = 6584;
			ifBody();
			State = 6585;
			Match(END_SYMBOL);
			State = 6586;
			Match(IF_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThenStatementContext thenStatement() {
			return GetRuleContext<ThenStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEIF_SYMBOL() { return GetToken(MySqlParser.ELSEIF_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfBodyContext ifBody() {
			return GetRuleContext<IfBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE_SYMBOL() { return GetToken(MySqlParser.ELSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementListContext compoundStatementList() {
			return GetRuleContext<CompoundStatementListContext>(0);
		}
		public IfBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIfBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIfBody(this);
		}
	}

	[RuleVersion(0)]
	public IfBodyContext ifBody() {
		IfBodyContext _localctx = new IfBodyContext(Context, State);
		EnterRule(_localctx, 790, RULE_ifBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6588;
			expr(0);
			State = 6589;
			thenStatement();
			State = 6594;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ELSEIF_SYMBOL:
				{
				State = 6590;
				Match(ELSEIF_SYMBOL);
				State = 6591;
				ifBody();
				}
				break;
			case ELSE_SYMBOL:
				{
				State = 6592;
				Match(ELSE_SYMBOL);
				State = 6593;
				compoundStatementList();
				}
				break;
			case END_SYMBOL:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThenStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN_SYMBOL() { return GetToken(MySqlParser.THEN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementListContext compoundStatementList() {
			return GetRuleContext<CompoundStatementListContext>(0);
		}
		public ThenStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thenStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterThenStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitThenStatement(this);
		}
	}

	[RuleVersion(0)]
	public ThenStatementContext thenStatement() {
		ThenStatementContext _localctx = new ThenStatementContext(Context, State);
		EnterRule(_localctx, 792, RULE_thenStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6596;
			Match(THEN_SYMBOL);
			State = 6597;
			compoundStatementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext[] compoundStatement() {
			return GetRuleContexts<CompoundStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement(int i) {
			return GetRuleContext<CompoundStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON_SYMBOL() { return GetTokens(MySqlParser.SEMICOLON_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON_SYMBOL(int i) {
			return GetToken(MySqlParser.SEMICOLON_SYMBOL, i);
		}
		public CompoundStatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCompoundStatementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCompoundStatementList(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementListContext compoundStatementList() {
		CompoundStatementListContext _localctx = new CompoundStatementListContext(Context, State);
		EnterRule(_localctx, 794, RULE_compoundStatementList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6602;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 6599;
					compoundStatement();
					State = 6600;
					Match(SEMICOLON_SYMBOL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6604;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,828,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CASE_SYMBOL() { return GetTokens(MySqlParser.CASE_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE_SYMBOL(int i) {
			return GetToken(MySqlParser.CASE_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_SYMBOL() { return GetToken(MySqlParser.END_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenExpressionContext[] whenExpression() {
			return GetRuleContexts<WhenExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenExpressionContext whenExpression(int i) {
			return GetRuleContext<WhenExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThenStatementContext[] thenStatement() {
			return GetRuleContexts<ThenStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThenStatementContext thenStatement(int i) {
			return GetRuleContext<ThenStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCaseStatement(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 796, RULE_caseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6606;
			Match(CASE_SYMBOL);
			State = 6608;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,829,Context) ) {
			case 1:
				{
				State = 6607;
				expr(0);
				}
				break;
			}
			State = 6613;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 6610;
				whenExpression();
				State = 6611;
				thenStatement();
				}
				}
				State = 6615;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN_SYMBOL );
			State = 6618;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE_SYMBOL) {
				{
				State = 6617;
				elseStatement();
				}
			}

			State = 6620;
			Match(END_SYMBOL);
			State = 6621;
			Match(CASE_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE_SYMBOL() { return GetToken(MySqlParser.ELSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementListContext compoundStatementList() {
			return GetRuleContext<CompoundStatementListContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 798, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6623;
			Match(ELSE_SYMBOL);
			State = 6624;
			compoundStatementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BeginEndBlockContext beginEndBlock() {
			return GetRuleContext<BeginEndBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelRefContext labelRef() {
			return GetRuleContext<LabelRefContext>(0);
		}
		public LabeledBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLabeledBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLabeledBlock(this);
		}
	}

	[RuleVersion(0)]
	public LabeledBlockContext labeledBlock() {
		LabeledBlockContext _localctx = new LabeledBlockContext(Context, State);
		EnterRule(_localctx, 800, RULE_labeledBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6626;
			label();
			State = 6627;
			beginEndBlock();
			State = 6629;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,832,Context) ) {
			case 1:
				{
				State = 6628;
				labelRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlabeledBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BeginEndBlockContext beginEndBlock() {
			return GetRuleContext<BeginEndBlockContext>(0);
		}
		public UnlabeledBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlabeledBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUnlabeledBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUnlabeledBlock(this);
		}
	}

	[RuleVersion(0)]
	public UnlabeledBlockContext unlabeledBlock() {
		UnlabeledBlockContext _localctx = new UnlabeledBlockContext(Context, State);
		EnterRule(_localctx, 802, RULE_unlabeledBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6631;
			beginEndBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelIdentifierContext labelIdentifier() {
			return GetRuleContext<LabelIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_SYMBOL() { return GetToken(MySqlParser.COLON_SYMBOL, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 804, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6633;
			labelIdentifier();
			State = 6634;
			Match(COLON_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BeginEndBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_SYMBOL() { return GetToken(MySqlParser.BEGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_SYMBOL() { return GetToken(MySqlParser.END_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpDeclarationsContext spDeclarations() {
			return GetRuleContext<SpDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementListContext compoundStatementList() {
			return GetRuleContext<CompoundStatementListContext>(0);
		}
		public BeginEndBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_beginEndBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterBeginEndBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitBeginEndBlock(this);
		}
	}

	[RuleVersion(0)]
	public BeginEndBlockContext beginEndBlock() {
		BeginEndBlockContext _localctx = new BeginEndBlockContext(Context, State);
		EnterRule(_localctx, 806, RULE_beginEndBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6636;
			Match(BEGIN_SYMBOL);
			State = 6638;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,833,Context) ) {
			case 1:
				{
				State = 6637;
				spDeclarations();
				}
				break;
			}
			State = 6641;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,834,Context) ) {
			case 1:
				{
				State = 6640;
				compoundStatementList();
				}
				break;
			}
			State = 6643;
			Match(END_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledControlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnlabeledControlContext unlabeledControl() {
			return GetRuleContext<UnlabeledControlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelRefContext labelRef() {
			return GetRuleContext<LabelRefContext>(0);
		}
		public LabeledControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledControl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLabeledControl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLabeledControl(this);
		}
	}

	[RuleVersion(0)]
	public LabeledControlContext labeledControl() {
		LabeledControlContext _localctx = new LabeledControlContext(Context, State);
		EnterRule(_localctx, 808, RULE_labeledControl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6645;
			label();
			State = 6646;
			unlabeledControl();
			State = 6648;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,835,Context) ) {
			case 1:
				{
				State = 6647;
				labelRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlabeledControlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LoopBlockContext loopBlock() {
			return GetRuleContext<LoopBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileDoBlockContext whileDoBlock() {
			return GetRuleContext<WhileDoBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatUntilBlockContext repeatUntilBlock() {
			return GetRuleContext<RepeatUntilBlockContext>(0);
		}
		public UnlabeledControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlabeledControl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUnlabeledControl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUnlabeledControl(this);
		}
	}

	[RuleVersion(0)]
	public UnlabeledControlContext unlabeledControl() {
		UnlabeledControlContext _localctx = new UnlabeledControlContext(Context, State);
		EnterRule(_localctx, 810, RULE_unlabeledControl);
		try {
			State = 6653;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LOOP_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6650;
				loopBlock();
				}
				break;
			case WHILE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6651;
				whileDoBlock();
				}
				break;
			case REPEAT_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6652;
				repeatUntilBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOOP_SYMBOL() { return GetTokens(MySqlParser.LOOP_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP_SYMBOL(int i) {
			return GetToken(MySqlParser.LOOP_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementListContext compoundStatementList() {
			return GetRuleContext<CompoundStatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_SYMBOL() { return GetToken(MySqlParser.END_SYMBOL, 0); }
		public LoopBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLoopBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLoopBlock(this);
		}
	}

	[RuleVersion(0)]
	public LoopBlockContext loopBlock() {
		LoopBlockContext _localctx = new LoopBlockContext(Context, State);
		EnterRule(_localctx, 812, RULE_loopBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6655;
			Match(LOOP_SYMBOL);
			State = 6656;
			compoundStatementList();
			State = 6657;
			Match(END_SYMBOL);
			State = 6658;
			Match(LOOP_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileDoBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHILE_SYMBOL() { return GetTokens(MySqlParser.WHILE_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE_SYMBOL(int i) {
			return GetToken(MySqlParser.WHILE_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO_SYMBOL() { return GetToken(MySqlParser.DO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementListContext compoundStatementList() {
			return GetRuleContext<CompoundStatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_SYMBOL() { return GetToken(MySqlParser.END_SYMBOL, 0); }
		public WhileDoBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileDoBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWhileDoBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWhileDoBlock(this);
		}
	}

	[RuleVersion(0)]
	public WhileDoBlockContext whileDoBlock() {
		WhileDoBlockContext _localctx = new WhileDoBlockContext(Context, State);
		EnterRule(_localctx, 814, RULE_whileDoBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6660;
			Match(WHILE_SYMBOL);
			State = 6661;
			expr(0);
			State = 6662;
			Match(DO_SYMBOL);
			State = 6663;
			compoundStatementList();
			State = 6664;
			Match(END_SYMBOL);
			State = 6665;
			Match(WHILE_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatUntilBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REPEAT_SYMBOL() { return GetTokens(MySqlParser.REPEAT_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT_SYMBOL(int i) {
			return GetToken(MySqlParser.REPEAT_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementListContext compoundStatementList() {
			return GetRuleContext<CompoundStatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL_SYMBOL() { return GetToken(MySqlParser.UNTIL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_SYMBOL() { return GetToken(MySqlParser.END_SYMBOL, 0); }
		public RepeatUntilBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatUntilBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRepeatUntilBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRepeatUntilBlock(this);
		}
	}

	[RuleVersion(0)]
	public RepeatUntilBlockContext repeatUntilBlock() {
		RepeatUntilBlockContext _localctx = new RepeatUntilBlockContext(Context, State);
		EnterRule(_localctx, 816, RULE_repeatUntilBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6667;
			Match(REPEAT_SYMBOL);
			State = 6668;
			compoundStatementList();
			State = 6669;
			Match(UNTIL_SYMBOL);
			State = 6670;
			expr(0);
			State = 6671;
			Match(END_SYMBOL);
			State = 6672;
			Match(REPEAT_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpDeclarationContext[] spDeclaration() {
			return GetRuleContexts<SpDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpDeclarationContext spDeclaration(int i) {
			return GetRuleContext<SpDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON_SYMBOL() { return GetTokens(MySqlParser.SEMICOLON_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON_SYMBOL(int i) {
			return GetToken(MySqlParser.SEMICOLON_SYMBOL, i);
		}
		public SpDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSpDeclarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSpDeclarations(this);
		}
	}

	[RuleVersion(0)]
	public SpDeclarationsContext spDeclarations() {
		SpDeclarationsContext _localctx = new SpDeclarationsContext(Context, State);
		EnterRule(_localctx, 818, RULE_spDeclarations);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6677;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 6674;
					spDeclaration();
					State = 6675;
					Match(SEMICOLON_SYMBOL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6679;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,837,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionDeclarationContext conditionDeclaration() {
			return GetRuleContext<ConditionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerDeclarationContext handlerDeclaration() {
			return GetRuleContext<HandlerDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CursorDeclarationContext cursorDeclaration() {
			return GetRuleContext<CursorDeclarationContext>(0);
		}
		public SpDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSpDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSpDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public SpDeclarationContext spDeclaration() {
		SpDeclarationContext _localctx = new SpDeclarationContext(Context, State);
		EnterRule(_localctx, 820, RULE_spDeclaration);
		try {
			State = 6685;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,838,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6681;
				variableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6682;
				conditionDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6683;
				handlerDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6684;
				cursorDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE_SYMBOL() { return GetToken(MySqlParser.DECLARE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 822, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6687;
			Match(DECLARE_SYMBOL);
			State = 6688;
			identifierList();
			State = 6689;
			dataType();
			State = 6691;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLLATE_SYMBOL) {
				{
				State = 6690;
				collate();
				}
			}

			State = 6695;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT_SYMBOL) {
				{
				State = 6693;
				Match(DEFAULT_SYMBOL);
				State = 6694;
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE_SYMBOL() { return GetToken(MySqlParser.DECLARE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITION_SYMBOL() { return GetToken(MySqlParser.CONDITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySqlParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpConditionContext spCondition() {
			return GetRuleContext<SpConditionContext>(0);
		}
		public ConditionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterConditionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitConditionDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ConditionDeclarationContext conditionDeclaration() {
		ConditionDeclarationContext _localctx = new ConditionDeclarationContext(Context, State);
		EnterRule(_localctx, 824, RULE_conditionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6697;
			Match(DECLARE_SYMBOL);
			State = 6698;
			identifier();
			State = 6699;
			Match(CONDITION_SYMBOL);
			State = 6700;
			Match(FOR_SYMBOL);
			State = 6701;
			spCondition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SqlstateContext sqlstate() {
			return GetRuleContext<SqlstateContext>(0);
		}
		public SpConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSpCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSpCondition(this);
		}
	}

	[RuleVersion(0)]
	public SpConditionContext spCondition() {
		SpConditionContext _localctx = new SpConditionContext(Context, State);
		EnterRule(_localctx, 826, RULE_spCondition);
		try {
			State = 6705;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case HEX_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6703;
				ulong_number();
				}
				break;
			case SQLSTATE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6704;
				sqlstate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SqlstateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLSTATE_SYMBOL() { return GetToken(MySqlParser.SQLSTATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_SYMBOL() { return GetToken(MySqlParser.VALUE_SYMBOL, 0); }
		public SqlstateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqlstate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSqlstate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSqlstate(this);
		}
	}

	[RuleVersion(0)]
	public SqlstateContext sqlstate() {
		SqlstateContext _localctx = new SqlstateContext(Context, State);
		EnterRule(_localctx, 828, RULE_sqlstate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6707;
			Match(SQLSTATE_SYMBOL);
			State = 6709;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,842,Context) ) {
			case 1:
				{
				State = 6708;
				Match(VALUE_SYMBOL);
				}
				break;
			}
			State = 6711;
			textLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE_SYMBOL() { return GetToken(MySqlParser.DECLARE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER_SYMBOL() { return GetToken(MySqlParser.HANDLER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySqlParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HandlerConditionContext[] handlerCondition() {
			return GetRuleContexts<HandlerConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerConditionContext handlerCondition(int i) {
			return GetRuleContext<HandlerConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE_SYMBOL() { return GetToken(MySqlParser.CONTINUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXIT_SYMBOL() { return GetToken(MySqlParser.EXIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDO_SYMBOL() { return GetToken(MySqlParser.UNDO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public HandlerDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public HandlerDeclarationContext handlerDeclaration() {
		HandlerDeclarationContext _localctx = new HandlerDeclarationContext(Context, State);
		EnterRule(_localctx, 830, RULE_handlerDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6713;
			Match(DECLARE_SYMBOL);
			State = 6714;
			_la = TokenStream.LA(1);
			if ( !(_la==CONTINUE_SYMBOL || _la==EXIT_SYMBOL || _la==UNDO_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 6715;
			Match(HANDLER_SYMBOL);
			State = 6716;
			Match(FOR_SYMBOL);
			State = 6717;
			handlerCondition();
			State = 6722;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,843,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 6718;
					Match(COMMA_SYMBOL);
					State = 6719;
					handlerCondition();
					}
					} 
				}
				State = 6724;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,843,Context);
			}
			State = 6725;
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpConditionContext spCondition() {
			return GetRuleContext<SpConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLWARNING_SYMBOL() { return GetToken(MySqlParser.SQLWARNING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NotRuleContext notRule() {
			return GetRuleContext<NotRuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOUND_SYMBOL() { return GetToken(MySqlParser.FOUND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLEXCEPTION_SYMBOL() { return GetToken(MySqlParser.SQLEXCEPTION_SYMBOL, 0); }
		public HandlerConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerCondition(this);
		}
	}

	[RuleVersion(0)]
	public HandlerConditionContext handlerCondition() {
		HandlerConditionContext _localctx = new HandlerConditionContext(Context, State);
		EnterRule(_localctx, 832, RULE_handlerCondition);
		try {
			State = 6734;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,844,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6727;
				spCondition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6728;
				identifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6729;
				Match(SQLWARNING_SYMBOL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6730;
				notRule();
				State = 6731;
				Match(FOUND_SYMBOL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6733;
				Match(SQLEXCEPTION_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE_SYMBOL() { return GetToken(MySqlParser.DECLARE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR_SYMBOL() { return GetToken(MySqlParser.CURSOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySqlParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public CursorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCursorDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCursorDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public CursorDeclarationContext cursorDeclaration() {
		CursorDeclarationContext _localctx = new CursorDeclarationContext(Context, State);
		EnterRule(_localctx, 834, RULE_cursorDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6736;
			Match(DECLARE_SYMBOL);
			State = 6737;
			identifier();
			State = 6738;
			Match(CURSOR_SYMBOL);
			State = 6739;
			Match(FOR_SYMBOL);
			State = 6740;
			selectStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterateStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ITERATE_SYMBOL() { return GetToken(MySqlParser.ITERATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LabelRefContext labelRef() {
			return GetRuleContext<LabelRefContext>(0);
		}
		public IterateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterateStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIterateStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIterateStatement(this);
		}
	}

	[RuleVersion(0)]
	public IterateStatementContext iterateStatement() {
		IterateStatementContext _localctx = new IterateStatementContext(Context, State);
		EnterRule(_localctx, 836, RULE_iterateStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6742;
			Match(ITERATE_SYMBOL);
			State = 6743;
			labelRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeaveStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAVE_SYMBOL() { return GetToken(MySqlParser.LEAVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LabelRefContext labelRef() {
			return GetRuleContext<LabelRefContext>(0);
		}
		public LeaveStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leaveStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLeaveStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLeaveStatement(this);
		}
	}

	[RuleVersion(0)]
	public LeaveStatementContext leaveStatement() {
		LeaveStatementContext _localctx = new LeaveStatementContext(Context, State);
		EnterRule(_localctx, 838, RULE_leaveStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6745;
			Match(LEAVE_SYMBOL);
			State = 6746;
			labelRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetDiagnosticsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_SYMBOL() { return GetToken(MySqlParser.GET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIAGNOSTICS_SYMBOL() { return GetToken(MySqlParser.DIAGNOSTICS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementInformationItemContext[] statementInformationItem() {
			return GetRuleContexts<StatementInformationItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementInformationItemContext statementInformationItem(int i) {
			return GetRuleContext<StatementInformationItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITION_SYMBOL() { return GetToken(MySqlParser.CONDITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignalAllowedExprContext signalAllowedExpr() {
			return GetRuleContext<SignalAllowedExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionInformationItemContext[] conditionInformationItem() {
			return GetRuleContexts<ConditionInformationItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionInformationItemContext conditionInformationItem(int i) {
			return GetRuleContext<ConditionInformationItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_SYMBOL() { return GetToken(MySqlParser.CURRENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACKED_SYMBOL() { return GetToken(MySqlParser.STACKED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public GetDiagnosticsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getDiagnostics; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGetDiagnostics(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGetDiagnostics(this);
		}
	}

	[RuleVersion(0)]
	public GetDiagnosticsContext getDiagnostics() {
		GetDiagnosticsContext _localctx = new GetDiagnosticsContext(Context, State);
		EnterRule(_localctx, 840, RULE_getDiagnostics);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6748;
			Match(GET_SYMBOL);
			State = 6752;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,845,Context) ) {
			case 1:
				{
				State = 6749;
				Match(CURRENT_SYMBOL);
				}
				break;
			case 2:
				{
				State = 6750;
				if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
				State = 6751;
				Match(STACKED_SYMBOL);
				}
				break;
			}
			State = 6754;
			Match(DIAGNOSTICS_SYMBOL);
			State = 6773;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,848,Context) ) {
			case 1:
				{
				State = 6755;
				statementInformationItem();
				State = 6760;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 6756;
					Match(COMMA_SYMBOL);
					State = 6757;
					statementInformationItem();
					}
					}
					State = 6762;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				{
				State = 6763;
				Match(CONDITION_SYMBOL);
				State = 6764;
				signalAllowedExpr();
				State = 6765;
				conditionInformationItem();
				State = 6770;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 6766;
					Match(COMMA_SYMBOL);
					State = 6767;
					conditionInformationItem();
					}
					}
					State = 6772;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignalAllowedExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public SignalAllowedExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signalAllowedExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSignalAllowedExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSignalAllowedExpr(this);
		}
	}

	[RuleVersion(0)]
	public SignalAllowedExprContext signalAllowedExpr() {
		SignalAllowedExprContext _localctx = new SignalAllowedExprContext(Context, State);
		EnterRule(_localctx, 842, RULE_signalAllowedExpr);
		try {
			State = 6778;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,849,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6775;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6776;
				variable();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6777;
				qualifiedIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementInformationItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_SYMBOL() { return GetToken(MySqlParser.NUMBER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_COUNT_SYMBOL() { return GetToken(MySqlParser.ROW_COUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public StatementInformationItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementInformationItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStatementInformationItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStatementInformationItem(this);
		}
	}

	[RuleVersion(0)]
	public StatementInformationItemContext statementInformationItem() {
		StatementInformationItemContext _localctx = new StatementInformationItemContext(Context, State);
		EnterRule(_localctx, 844, RULE_statementInformationItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6782;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,850,Context) ) {
			case 1:
				{
				State = 6780;
				variable();
				}
				break;
			case 2:
				{
				State = 6781;
				identifier();
				}
				break;
			}
			State = 6784;
			Match(EQUAL_OPERATOR);
			State = 6785;
			_la = TokenStream.LA(1);
			if ( !(_la==NUMBER_SYMBOL || _la==ROW_COUNT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionInformationItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignalInformationItemNameContext signalInformationItemName() {
			return GetRuleContext<SignalInformationItemNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNED_SQLSTATE_SYMBOL() { return GetToken(MySqlParser.RETURNED_SQLSTATE_SYMBOL, 0); }
		public ConditionInformationItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionInformationItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterConditionInformationItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitConditionInformationItem(this);
		}
	}

	[RuleVersion(0)]
	public ConditionInformationItemContext conditionInformationItem() {
		ConditionInformationItemContext _localctx = new ConditionInformationItemContext(Context, State);
		EnterRule(_localctx, 846, RULE_conditionInformationItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6789;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,851,Context) ) {
			case 1:
				{
				State = 6787;
				variable();
				}
				break;
			case 2:
				{
				State = 6788;
				identifier();
				}
				break;
			}
			State = 6791;
			Match(EQUAL_OPERATOR);
			State = 6794;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CATALOG_NAME_SYMBOL:
			case CLASS_ORIGIN_SYMBOL:
			case COLUMN_NAME_SYMBOL:
			case CONSTRAINT_CATALOG_SYMBOL:
			case CONSTRAINT_NAME_SYMBOL:
			case CONSTRAINT_SCHEMA_SYMBOL:
			case CURSOR_NAME_SYMBOL:
			case MESSAGE_TEXT_SYMBOL:
			case MySql_ERRNO_SYMBOL:
			case SCHEMA_NAME_SYMBOL:
			case SUBCLASS_ORIGIN_SYMBOL:
			case TABLE_NAME_SYMBOL:
				{
				State = 6792;
				signalInformationItemName();
				}
				break;
			case RETURNED_SQLSTATE_SYMBOL:
				{
				State = 6793;
				Match(RETURNED_SQLSTATE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignalInformationItemNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS_ORIGIN_SYMBOL() { return GetToken(MySqlParser.CLASS_ORIGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBCLASS_ORIGIN_SYMBOL() { return GetToken(MySqlParser.SUBCLASS_ORIGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_CATALOG_SYMBOL() { return GetToken(MySqlParser.CONSTRAINT_CATALOG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_SCHEMA_SYMBOL() { return GetToken(MySqlParser.CONSTRAINT_SCHEMA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_NAME_SYMBOL() { return GetToken(MySqlParser.CONSTRAINT_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG_NAME_SYMBOL() { return GetToken(MySqlParser.CATALOG_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA_NAME_SYMBOL() { return GetToken(MySqlParser.SCHEMA_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_NAME_SYMBOL() { return GetToken(MySqlParser.TABLE_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_NAME_SYMBOL() { return GetToken(MySqlParser.COLUMN_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR_NAME_SYMBOL() { return GetToken(MySqlParser.CURSOR_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE_TEXT_SYMBOL() { return GetToken(MySqlParser.MESSAGE_TEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MySql_ERRNO_SYMBOL() { return GetToken(MySqlParser.MySql_ERRNO_SYMBOL, 0); }
		public SignalInformationItemNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signalInformationItemName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSignalInformationItemName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSignalInformationItemName(this);
		}
	}

	[RuleVersion(0)]
	public SignalInformationItemNameContext signalInformationItemName() {
		SignalInformationItemNameContext _localctx = new SignalInformationItemNameContext(Context, State);
		EnterRule(_localctx, 848, RULE_signalInformationItemName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6796;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 53)) & ~0x3f) == 0 && ((1L << (_la - 53)) & ((1L << (CATALOG_NAME_SYMBOL - 53)) | (1L << (CLASS_ORIGIN_SYMBOL - 53)) | (1L << (COLUMN_NAME_SYMBOL - 53)) | (1L << (CONSTRAINT_CATALOG_SYMBOL - 53)) | (1L << (CONSTRAINT_NAME_SYMBOL - 53)) | (1L << (CONSTRAINT_SCHEMA_SYMBOL - 53)) | (1L << (CURSOR_NAME_SYMBOL - 53)))) != 0) || _la==MESSAGE_TEXT_SYMBOL || _la==MySql_ERRNO_SYMBOL || _la==SCHEMA_NAME_SYMBOL || _la==SUBCLASS_ORIGIN_SYMBOL || _la==TABLE_NAME_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignalStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNAL_SYMBOL() { return GetToken(MySqlParser.SIGNAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SqlstateContext sqlstate() {
			return GetRuleContext<SqlstateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySqlParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignalInformationItemContext[] signalInformationItem() {
			return GetRuleContexts<SignalInformationItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignalInformationItemContext signalInformationItem(int i) {
			return GetRuleContext<SignalInformationItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public SignalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signalStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSignalStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSignalStatement(this);
		}
	}

	[RuleVersion(0)]
	public SignalStatementContext signalStatement() {
		SignalStatementContext _localctx = new SignalStatementContext(Context, State);
		EnterRule(_localctx, 850, RULE_signalStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6798;
			Match(SIGNAL_SYMBOL);
			State = 6801;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,853,Context) ) {
			case 1:
				{
				State = 6799;
				identifier();
				}
				break;
			case 2:
				{
				State = 6800;
				sqlstate();
				}
				break;
			}
			State = 6812;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SET_SYMBOL) {
				{
				State = 6803;
				Match(SET_SYMBOL);
				State = 6804;
				signalInformationItem();
				State = 6809;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 6805;
					Match(COMMA_SYMBOL);
					State = 6806;
					signalInformationItem();
					}
					}
					State = 6811;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResignalStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESIGNAL_SYMBOL() { return GetToken(MySqlParser.RESIGNAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SqlstateContext sqlstate() {
			return GetRuleContext<SqlstateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySqlParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignalInformationItemContext[] signalInformationItem() {
			return GetRuleContexts<SignalInformationItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignalInformationItemContext signalInformationItem(int i) {
			return GetRuleContext<SignalInformationItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public ResignalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resignalStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterResignalStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitResignalStatement(this);
		}
	}

	[RuleVersion(0)]
	public ResignalStatementContext resignalStatement() {
		ResignalStatementContext _localctx = new ResignalStatementContext(Context, State);
		EnterRule(_localctx, 852, RULE_resignalStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6814;
			Match(RESIGNAL_SYMBOL);
			State = 6817;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,856,Context) ) {
			case 1:
				{
				State = 6815;
				identifier();
				}
				break;
			case 2:
				{
				State = 6816;
				sqlstate();
				}
				break;
			}
			State = 6828;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SET_SYMBOL) {
				{
				State = 6819;
				Match(SET_SYMBOL);
				State = 6820;
				signalInformationItem();
				State = 6825;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 6821;
					Match(COMMA_SYMBOL);
					State = 6822;
					signalInformationItem();
					}
					}
					State = 6827;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignalInformationItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SignalInformationItemNameContext signalInformationItemName() {
			return GetRuleContext<SignalInformationItemNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignalAllowedExprContext signalAllowedExpr() {
			return GetRuleContext<SignalAllowedExprContext>(0);
		}
		public SignalInformationItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signalInformationItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSignalInformationItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSignalInformationItem(this);
		}
	}

	[RuleVersion(0)]
	public SignalInformationItemContext signalInformationItem() {
		SignalInformationItemContext _localctx = new SignalInformationItemContext(Context, State);
		EnterRule(_localctx, 854, RULE_signalInformationItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6830;
			signalInformationItemName();
			State = 6831;
			Match(EQUAL_OPERATOR);
			State = 6832;
			signalAllowedExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorOpenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_SYMBOL() { return GetToken(MySqlParser.OPEN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public CursorOpenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorOpen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCursorOpen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCursorOpen(this);
		}
	}

	[RuleVersion(0)]
	public CursorOpenContext cursorOpen() {
		CursorOpenContext _localctx = new CursorOpenContext(Context, State);
		EnterRule(_localctx, 856, RULE_cursorOpen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6834;
			Match(OPEN_SYMBOL);
			State = 6835;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorCloseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_SYMBOL() { return GetToken(MySqlParser.CLOSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public CursorCloseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorClose; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCursorClose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCursorClose(this);
		}
	}

	[RuleVersion(0)]
	public CursorCloseContext cursorClose() {
		CursorCloseContext _localctx = new CursorCloseContext(Context, State);
		EnterRule(_localctx, 858, RULE_cursorClose);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6837;
			Match(CLOSE_SYMBOL);
			State = 6838;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorFetchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH_SYMBOL() { return GetToken(MySqlParser.FETCH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO_SYMBOL() { return GetToken(MySqlParser.INTO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySqlParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT_SYMBOL() { return GetToken(MySqlParser.NEXT_SYMBOL, 0); }
		public CursorFetchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorFetch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCursorFetch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCursorFetch(this);
		}
	}

	[RuleVersion(0)]
	public CursorFetchContext cursorFetch() {
		CursorFetchContext _localctx = new CursorFetchContext(Context, State);
		EnterRule(_localctx, 860, RULE_cursorFetch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6840;
			Match(FETCH_SYMBOL);
			State = 6845;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,860,Context) ) {
			case 1:
				{
				State = 6842;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NEXT_SYMBOL) {
					{
					State = 6841;
					Match(NEXT_SYMBOL);
					}
				}

				State = 6844;
				Match(FROM_SYMBOL);
				}
				break;
			}
			State = 6847;
			identifier();
			State = 6848;
			Match(INTO_SYMBOL);
			State = 6849;
			identifierList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScheduleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SYMBOL() { return GetToken(MySqlParser.AT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY_SYMBOL() { return GetToken(MySqlParser.EVERY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntervalContext interval() {
			return GetRuleContext<IntervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTS_SYMBOL() { return GetToken(MySqlParser.STARTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDS_SYMBOL() { return GetToken(MySqlParser.ENDS_SYMBOL, 0); }
		public ScheduleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schedule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSchedule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSchedule(this);
		}
	}

	[RuleVersion(0)]
	public ScheduleContext schedule() {
		ScheduleContext _localctx = new ScheduleContext(Context, State);
		EnterRule(_localctx, 862, RULE_schedule);
		int _la;
		try {
			State = 6864;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6851;
				Match(AT_SYMBOL);
				State = 6852;
				expr(0);
				}
				break;
			case EVERY_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6853;
				Match(EVERY_SYMBOL);
				State = 6854;
				expr(0);
				State = 6855;
				interval();
				State = 6858;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STARTS_SYMBOL) {
					{
					State = 6856;
					Match(STARTS_SYMBOL);
					State = 6857;
					expr(0);
					}
				}

				State = 6862;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ENDS_SYMBOL) {
					{
					State = 6860;
					Match(ENDS_SYMBOL);
					State = 6861;
					expr(0);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameContext columnName() {
			return GetRuleContext<ColumnNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDefinitionContext fieldDefinition() {
			return GetRuleContext<FieldDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckOrReferencesContext checkOrReferences() {
			return GetRuleContext<CheckOrReferencesContext>(0);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterColumnDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitColumnDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ColumnDefinitionContext columnDefinition() {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(Context, State);
		EnterRule(_localctx, 864, RULE_columnDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6866;
			columnName();
			State = 6867;
			fieldDefinition();
			State = 6869;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,864,Context) ) {
			case 1:
				{
				State = 6868;
				checkOrReferences();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckOrReferencesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CheckConstraintContext checkConstraint() {
			return GetRuleContext<CheckConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferencesContext references() {
			return GetRuleContext<ReferencesContext>(0);
		}
		public CheckOrReferencesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkOrReferences; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCheckOrReferences(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCheckOrReferences(this);
		}
	}

	[RuleVersion(0)]
	public CheckOrReferencesContext checkOrReferences() {
		CheckOrReferencesContext _localctx = new CheckOrReferencesContext(Context, State);
		EnterRule(_localctx, 866, RULE_checkOrReferences);
		try {
			State = 6874;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,865,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6871;
				if (!(serverVersion < 80016)) throw new FailedPredicateException(this, "serverVersion < 80016");
				State = 6872;
				checkConstraint();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6873;
				references();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK_SYMBOL() { return GetToken(MySqlParser.CHECK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprWithParenthesesContext exprWithParentheses() {
			return GetRuleContext<ExprWithParenthesesContext>(0);
		}
		public CheckConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCheckConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCheckConstraint(this);
		}
	}

	[RuleVersion(0)]
	public CheckConstraintContext checkConstraint() {
		CheckConstraintContext _localctx = new CheckConstraintContext(Context, State);
		EnterRule(_localctx, 868, RULE_checkConstraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6876;
			Match(CHECK_SYMBOL);
			State = 6877;
			exprWithParentheses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintEnforcementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENFORCED_SYMBOL() { return GetToken(MySqlParser.ENFORCED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_SYMBOL() { return GetToken(MySqlParser.NOT_SYMBOL, 0); }
		public ConstraintEnforcementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraintEnforcement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterConstraintEnforcement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitConstraintEnforcement(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintEnforcementContext constraintEnforcement() {
		ConstraintEnforcementContext _localctx = new ConstraintEnforcementContext(Context, State);
		EnterRule(_localctx, 870, RULE_constraintEnforcement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6880;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT_SYMBOL) {
				{
				State = 6879;
				Match(NOT_SYMBOL);
				}
			}

			State = 6882;
			Match(ENFORCED_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableConstraintDefContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public KeyListVariantsContext keyListVariants() {
			return GetRuleContext<KeyListVariantsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_SYMBOL() { return GetToken(MySqlParser.KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_SYMBOL() { return GetToken(MySqlParser.INDEX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexNameAndTypeContext indexNameAndType() {
			return GetRuleContext<IndexNameAndTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULLTEXT_SYMBOL() { return GetToken(MySqlParser.FULLTEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeyOrIndexContext keyOrIndex() {
			return GetRuleContext<KeyOrIndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexNameContext indexName() {
			return GetRuleContext<IndexNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FulltextIndexOptionContext[] fulltextIndexOption() {
			return GetRuleContexts<FulltextIndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FulltextIndexOptionContext fulltextIndexOption(int i) {
			return GetRuleContext<FulltextIndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPATIAL_SYMBOL() { return GetToken(MySqlParser.SPATIAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpatialIndexOptionContext[] spatialIndexOption() {
			return GetRuleContexts<SpatialIndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpatialIndexOptionContext spatialIndexOption(int i) {
			return GetRuleContext<SpatialIndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyListContext keyList() {
			return GetRuleContext<KeyListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferencesContext references() {
			return GetRuleContext<ReferencesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckConstraintContext checkConstraint() {
			return GetRuleContext<CheckConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintNameContext constraintName() {
			return GetRuleContext<ConstraintNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN_SYMBOL() { return GetToken(MySqlParser.FOREIGN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY_SYMBOL() { return GetToken(MySqlParser.PRIMARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE_SYMBOL() { return GetToken(MySqlParser.UNIQUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintEnforcementContext constraintEnforcement() {
			return GetRuleContext<ConstraintEnforcementContext>(0);
		}
		public TableConstraintDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableConstraintDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableConstraintDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableConstraintDef(this);
		}
	}

	[RuleVersion(0)]
	public TableConstraintDefContext tableConstraintDef() {
		TableConstraintDefContext _localctx = new TableConstraintDefContext(Context, State);
		EnterRule(_localctx, 872, RULE_tableConstraintDef);
		int _la;
		try {
			int _alt;
			State = 6959;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INDEX_SYMBOL:
			case KEY_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6884;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INDEX_SYMBOL || _la==KEY_SYMBOL) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6886;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,867,Context) ) {
				case 1:
					{
					State = 6885;
					indexNameAndType();
					}
					break;
				}
				State = 6888;
				keyListVariants();
				State = 6892;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,868,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 6889;
						indexOption();
						}
						} 
					}
					State = 6894;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,868,Context);
				}
				}
				break;
			case FULLTEXT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6895;
				_localctx.type = Match(FULLTEXT_SYMBOL);
				State = 6897;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,869,Context) ) {
				case 1:
					{
					State = 6896;
					keyOrIndex();
					}
					break;
				}
				State = 6900;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,870,Context) ) {
				case 1:
					{
					State = 6899;
					indexName();
					}
					break;
				}
				State = 6902;
				keyListVariants();
				State = 6906;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,871,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 6903;
						fulltextIndexOption();
						}
						} 
					}
					State = 6908;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,871,Context);
				}
				}
				break;
			case SPATIAL_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6909;
				_localctx.type = Match(SPATIAL_SYMBOL);
				State = 6911;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,872,Context) ) {
				case 1:
					{
					State = 6910;
					keyOrIndex();
					}
					break;
				}
				State = 6914;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,873,Context) ) {
				case 1:
					{
					State = 6913;
					indexName();
					}
					break;
				}
				State = 6916;
				keyListVariants();
				State = 6920;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,874,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 6917;
						spatialIndexOption();
						}
						} 
					}
					State = 6922;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,874,Context);
				}
				}
				break;
			case CHECK_SYMBOL:
			case CONSTRAINT_SYMBOL:
			case FOREIGN_SYMBOL:
			case PRIMARY_SYMBOL:
			case UNIQUE_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6924;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT_SYMBOL) {
					{
					State = 6923;
					constraintName();
					}
				}

				State = 6957;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PRIMARY_SYMBOL:
				case UNIQUE_SYMBOL:
					{
					State = 6932;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case PRIMARY_SYMBOL:
						{
						State = 6926;
						_localctx.type = Match(PRIMARY_SYMBOL);
						State = 6927;
						Match(KEY_SYMBOL);
						}
						break;
					case UNIQUE_SYMBOL:
						{
						State = 6928;
						_localctx.type = Match(UNIQUE_SYMBOL);
						State = 6930;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,876,Context) ) {
						case 1:
							{
							State = 6929;
							keyOrIndex();
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 6935;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,878,Context) ) {
					case 1:
						{
						State = 6934;
						indexNameAndType();
						}
						break;
					}
					State = 6937;
					keyListVariants();
					State = 6941;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,879,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 6938;
							indexOption();
							}
							} 
						}
						State = 6943;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,879,Context);
					}
					}
					break;
				case FOREIGN_SYMBOL:
					{
					State = 6944;
					_localctx.type = Match(FOREIGN_SYMBOL);
					State = 6945;
					Match(KEY_SYMBOL);
					State = 6947;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,880,Context) ) {
					case 1:
						{
						State = 6946;
						indexName();
						}
						break;
					}
					State = 6949;
					keyList();
					State = 6950;
					references();
					}
					break;
				case CHECK_SYMBOL:
					{
					State = 6952;
					checkConstraint();
					State = 6955;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,881,Context) ) {
					case 1:
						{
						State = 6953;
						if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
						State = 6954;
						constraintEnforcement();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_SYMBOL() { return GetToken(MySqlParser.CONSTRAINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstraintNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraintName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterConstraintName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitConstraintName(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintNameContext constraintName() {
		ConstraintNameContext _localctx = new ConstraintNameContext(Context, State);
		EnterRule(_localctx, 874, RULE_constraintName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6961;
			Match(CONSTRAINT_SYMBOL);
			State = 6963;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,884,Context) ) {
			case 1:
				{
				State = 6962;
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySqlParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprWithParenthesesContext exprWithParentheses() {
			return GetRuleContext<ExprWithParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnAttributeContext[] columnAttribute() {
			return GetRuleContexts<ColumnAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnAttributeContext columnAttribute(int i) {
			return GetRuleContext<ColumnAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATED_SYMBOL() { return GetToken(MySqlParser.GENERATED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALWAYS_SYMBOL() { return GetToken(MySqlParser.ALWAYS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIRTUAL_SYMBOL() { return GetToken(MySqlParser.VIRTUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORED_SYMBOL() { return GetToken(MySqlParser.STORED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GcolAttributeContext[] gcolAttribute() {
			return GetRuleContexts<GcolAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GcolAttributeContext gcolAttribute(int i) {
			return GetRuleContext<GcolAttributeContext>(i);
		}
		public FieldDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFieldDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFieldDefinition(this);
		}
	}

	[RuleVersion(0)]
	public FieldDefinitionContext fieldDefinition() {
		FieldDefinitionContext _localctx = new FieldDefinitionContext(Context, State);
		EnterRule(_localctx, 876, RULE_fieldDefinition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6965;
			dataType();
			State = 7001;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,892,Context) ) {
			case 1:
				{
				State = 6969;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,885,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 6966;
						columnAttribute();
						}
						} 
					}
					State = 6971;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,885,Context);
				}
				}
				break;
			case 2:
				{
				State = 6972;
				if (!(serverVersion >= 50707)) throw new FailedPredicateException(this, "serverVersion >= 50707");
				State = 6974;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLLATE_SYMBOL) {
					{
					State = 6973;
					collate();
					}
				}

				State = 6978;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GENERATED_SYMBOL) {
					{
					State = 6976;
					Match(GENERATED_SYMBOL);
					State = 6977;
					Match(ALWAYS_SYMBOL);
					}
				}

				State = 6980;
				Match(AS_SYMBOL);
				State = 6981;
				exprWithParentheses();
				State = 6983;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,888,Context) ) {
				case 1:
					{
					State = 6982;
					_la = TokenStream.LA(1);
					if ( !(_la==STORED_SYMBOL || _la==VIRTUAL_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 6999;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,891,Context) ) {
				case 1:
					{
					State = 6985;
					if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
					State = 6989;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,889,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 6986;
							gcolAttribute();
							}
							} 
						}
						State = 6991;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,889,Context);
					}
					}
					break;
				case 2:
					{
					State = 6992;
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					State = 6996;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,890,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 6993;
							columnAttribute();
							}
							} 
						}
						State = 6998;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,890,Context);
					}
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnAttributeContext : ParserRuleContext {
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_SYMBOL() { return GetToken(MySqlParser.NOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_SYMBOL() { return GetToken(MySqlParser.SECONDARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignedLiteralContext signedLiteral() {
			return GetRuleContext<SignedLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOW_SYMBOL() { return GetToken(MySqlParser.NOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprWithParenthesesContext exprWithParentheses() {
			return GetRuleContext<ExprWithParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimeFunctionParametersContext timeFunctionParameters() {
			return GetRuleContext<TimeFunctionParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySqlParser.UPDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySqlParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_INCREMENT_SYMBOL() { return GetToken(MySqlParser.AUTO_INCREMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_SYMBOL() { return GetToken(MySqlParser.VALUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIAL_SYMBOL() { return GetToken(MySqlParser.SERIAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_SYMBOL() { return GetToken(MySqlParser.KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY_SYMBOL() { return GetToken(MySqlParser.PRIMARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE_SYMBOL() { return GetToken(MySqlParser.UNIQUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySqlParser.COMMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnFormatContext columnFormat() {
			return GetRuleContext<ColumnFormatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_FORMAT_SYMBOL() { return GetToken(MySqlParser.COLUMN_FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StorageMediaContext storageMedia() {
			return GetRuleContext<StorageMediaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE_SYMBOL() { return GetToken(MySqlParser.STORAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulonglong_numberContext real_ulonglong_number() {
			return GetRuleContext<Real_ulonglong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SRID_SYMBOL() { return GetToken(MySqlParser.SRID_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CheckConstraintContext checkConstraint() {
			return GetRuleContext<CheckConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintNameContext constraintName() {
			return GetRuleContext<ConstraintNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintEnforcementContext constraintEnforcement() {
			return GetRuleContext<ConstraintEnforcementContext>(0);
		}
		public ColumnAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterColumnAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitColumnAttribute(this);
		}
	}

	[RuleVersion(0)]
	public ColumnAttributeContext columnAttribute() {
		ColumnAttributeContext _localctx = new ColumnAttributeContext(Context, State);
		EnterRule(_localctx, 878, RULE_columnAttribute);
		int _la;
		try {
			State = 7055;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,900,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7004;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					State = 7003;
					Match(NOT_SYMBOL);
					}
				}

				State = 7006;
				nullLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7007;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 7008;
				Match(NOT_SYMBOL);
				State = 7009;
				Match(SECONDARY_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7010;
				_localctx.value = Match(DEFAULT_SYMBOL);
				State = 7018;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,895,Context) ) {
				case 1:
					{
					State = 7011;
					signedLiteral();
					}
					break;
				case 2:
					{
					State = 7012;
					Match(NOW_SYMBOL);
					State = 7014;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,894,Context) ) {
					case 1:
						{
						State = 7013;
						timeFunctionParameters();
						}
						break;
					}
					}
					break;
				case 3:
					{
					State = 7016;
					if (!(serverVersion >= 80013)) throw new FailedPredicateException(this, "serverVersion >= 80013");
					State = 7017;
					exprWithParentheses();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7020;
				_localctx.value = Match(ON_SYMBOL);
				State = 7021;
				Match(UPDATE_SYMBOL);
				State = 7022;
				Match(NOW_SYMBOL);
				State = 7024;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,896,Context) ) {
				case 1:
					{
					State = 7023;
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7026;
				_localctx.value = Match(AUTO_INCREMENT_SYMBOL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7027;
				_localctx.value = Match(SERIAL_SYMBOL);
				State = 7028;
				Match(DEFAULT_SYMBOL);
				State = 7029;
				Match(VALUE_SYMBOL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7031;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIMARY_SYMBOL) {
					{
					State = 7030;
					Match(PRIMARY_SYMBOL);
					}
				}

				State = 7033;
				_localctx.value = Match(KEY_SYMBOL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7034;
				_localctx.value = Match(UNIQUE_SYMBOL);
				State = 7036;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,898,Context) ) {
				case 1:
					{
					State = 7035;
					Match(KEY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7038;
				_localctx.value = Match(COMMENT_SYMBOL);
				State = 7039;
				textLiteral();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 7040;
				collate();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 7041;
				_localctx.value = Match(COLUMN_FORMAT_SYMBOL);
				State = 7042;
				columnFormat();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 7043;
				_localctx.value = Match(STORAGE_SYMBOL);
				State = 7044;
				storageMedia();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 7045;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 7046;
				_localctx.value = Match(SRID_SYMBOL);
				State = 7047;
				real_ulonglong_number();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 7048;
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				State = 7050;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT_SYMBOL) {
					{
					State = 7049;
					constraintName();
					}
				}

				State = 7052;
				checkConstraint();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 7053;
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				State = 7054;
				constraintEnforcement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnFormatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED_SYMBOL() { return GetToken(MySqlParser.FIXED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC_SYMBOL() { return GetToken(MySqlParser.DYNAMIC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		public ColumnFormatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnFormat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterColumnFormat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitColumnFormat(this);
		}
	}

	[RuleVersion(0)]
	public ColumnFormatContext columnFormat() {
		ColumnFormatContext _localctx = new ColumnFormatContext(Context, State);
		EnterRule(_localctx, 880, RULE_columnFormat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7057;
			_la = TokenStream.LA(1);
			if ( !(_la==DEFAULT_SYMBOL || _la==DYNAMIC_SYMBOL || _la==FIXED_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StorageMediaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISK_SYMBOL() { return GetToken(MySqlParser.DISK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY_SYMBOL() { return GetToken(MySqlParser.MEMORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		public StorageMediaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storageMedia; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStorageMedia(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStorageMedia(this);
		}
	}

	[RuleVersion(0)]
	public StorageMediaContext storageMedia() {
		StorageMediaContext _localctx = new StorageMediaContext(Context, State);
		EnterRule(_localctx, 882, RULE_storageMedia);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7059;
			_la = TokenStream.LA(1);
			if ( !(_la==DEFAULT_SYMBOL || _la==DISK_SYMBOL || _la==MEMORY_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GcolAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE_SYMBOL() { return GetToken(MySqlParser.UNIQUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_SYMBOL() { return GetToken(MySqlParser.KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySqlParser.COMMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_SYMBOL() { return GetToken(MySqlParser.NULL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NotRuleContext notRule() {
			return GetRuleContext<NotRuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY_SYMBOL() { return GetToken(MySqlParser.PRIMARY_SYMBOL, 0); }
		public GcolAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gcolAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGcolAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGcolAttribute(this);
		}
	}

	[RuleVersion(0)]
	public GcolAttributeContext gcolAttribute() {
		GcolAttributeContext _localctx = new GcolAttributeContext(Context, State);
		EnterRule(_localctx, 884, RULE_gcolAttribute);
		int _la;
		try {
			State = 7075;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNIQUE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7061;
				Match(UNIQUE_SYMBOL);
				State = 7063;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,901,Context) ) {
				case 1:
					{
					State = 7062;
					Match(KEY_SYMBOL);
					}
					break;
				}
				}
				break;
			case COMMENT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7065;
				Match(COMMENT_SYMBOL);
				State = 7066;
				textString();
				}
				break;
			case NOT_SYMBOL:
			case NULL_SYMBOL:
			case NOT2_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7068;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT_SYMBOL || _la==NOT2_SYMBOL) {
					{
					State = 7067;
					notRule();
					}
				}

				State = 7070;
				Match(NULL_SYMBOL);
				}
				break;
			case KEY_SYMBOL:
			case PRIMARY_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7072;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIMARY_SYMBOL) {
					{
					State = 7071;
					Match(PRIMARY_SYMBOL);
					}
				}

				State = 7074;
				Match(KEY_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferencesContext : ParserRuleContext {
		public IToken match;
		public IToken option;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES_SYMBOL() { return GetToken(MySqlParser.REFERENCES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return GetRuleContext<IdentifierListWithParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH_SYMBOL() { return GetToken(MySqlParser.MATCH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON_SYMBOL() { return GetTokens(MySqlParser.ON_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL(int i) {
			return GetToken(MySqlParser.ON_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteOptionContext[] deleteOption() {
			return GetRuleContexts<DeleteOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteOptionContext deleteOption(int i) {
			return GetRuleContext<DeleteOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySqlParser.UPDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_SYMBOL() { return GetToken(MySqlParser.DELETE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL_SYMBOL() { return GetToken(MySqlParser.FULL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL_SYMBOL() { return GetToken(MySqlParser.PARTIAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE_SYMBOL() { return GetToken(MySqlParser.SIMPLE_SYMBOL, 0); }
		public ReferencesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_references; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReferences(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReferences(this);
		}
	}

	[RuleVersion(0)]
	public ReferencesContext references() {
		ReferencesContext _localctx = new ReferencesContext(Context, State);
		EnterRule(_localctx, 886, RULE_references);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7077;
			Match(REFERENCES_SYMBOL);
			State = 7078;
			tableRef();
			State = 7080;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 7079;
				identifierListWithParentheses();
				}
			}

			State = 7084;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MATCH_SYMBOL) {
				{
				State = 7082;
				Match(MATCH_SYMBOL);
				State = 7083;
				_localctx.match = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FULL_SYMBOL || _la==PARTIAL_SYMBOL || _la==SIMPLE_SYMBOL) ) {
					_localctx.match = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 7102;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,909,Context) ) {
			case 1:
				{
				State = 7086;
				Match(ON_SYMBOL);
				State = 7087;
				_localctx.option = Match(UPDATE_SYMBOL);
				State = 7088;
				deleteOption();
				State = 7092;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON_SYMBOL) {
					{
					State = 7089;
					Match(ON_SYMBOL);
					State = 7090;
					Match(DELETE_SYMBOL);
					State = 7091;
					deleteOption();
					}
				}

				}
				break;
			case 2:
				{
				State = 7094;
				Match(ON_SYMBOL);
				State = 7095;
				_localctx.option = Match(DELETE_SYMBOL);
				State = 7096;
				deleteOption();
				State = 7100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON_SYMBOL) {
					{
					State = 7097;
					Match(ON_SYMBOL);
					State = 7098;
					Match(UPDATE_SYMBOL);
					State = 7099;
					deleteOption();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT_SYMBOL() { return GetToken(MySqlParser.RESTRICT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE_SYMBOL() { return GetToken(MySqlParser.CASCADE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySqlParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_SYMBOL() { return GetToken(MySqlParser.NO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION_SYMBOL() { return GetToken(MySqlParser.ACTION_SYMBOL, 0); }
		public DeleteOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDeleteOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDeleteOption(this);
		}
	}

	[RuleVersion(0)]
	public DeleteOptionContext deleteOption() {
		DeleteOptionContext _localctx = new DeleteOptionContext(Context, State);
		EnterRule(_localctx, 888, RULE_deleteOption);
		int _la;
		try {
			State = 7109;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASCADE_SYMBOL:
			case RESTRICT_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7104;
				_la = TokenStream.LA(1);
				if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case SET_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7105;
				Match(SET_SYMBOL);
				State = 7106;
				nullLiteral();
				}
				break;
			case NO_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7107;
				Match(NO_SYMBOL);
				State = 7108;
				Match(ACTION_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeyPartContext[] keyPart() {
			return GetRuleContexts<KeyPartContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyPartContext keyPart(int i) {
			return GetRuleContext<KeyPartContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public KeyListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterKeyList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitKeyList(this);
		}
	}

	[RuleVersion(0)]
	public KeyListContext keyList() {
		KeyListContext _localctx = new KeyListContext(Context, State);
		EnterRule(_localctx, 890, RULE_keyList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7111;
			Match(OPEN_PAR_SYMBOL);
			State = 7112;
			keyPart();
			State = 7117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 7113;
				Match(COMMA_SYMBOL);
				State = 7114;
				keyPart();
				}
				}
				State = 7119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 7120;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyPartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionContext direction() {
			return GetRuleContext<DirectionContext>(0);
		}
		public KeyPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyPart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterKeyPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitKeyPart(this);
		}
	}

	[RuleVersion(0)]
	public KeyPartContext keyPart() {
		KeyPartContext _localctx = new KeyPartContext(Context, State);
		EnterRule(_localctx, 892, RULE_keyPart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7122;
			identifier();
			State = 7124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 7123;
				fieldLength();
				}
			}

			State = 7127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC_SYMBOL || _la==DESC_SYMBOL) {
				{
				State = 7126;
				direction();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyListWithExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeyPartOrExpressionContext[] keyPartOrExpression() {
			return GetRuleContexts<KeyPartOrExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyPartOrExpressionContext keyPartOrExpression(int i) {
			return GetRuleContext<KeyPartOrExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public KeyListWithExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyListWithExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterKeyListWithExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitKeyListWithExpression(this);
		}
	}

	[RuleVersion(0)]
	public KeyListWithExpressionContext keyListWithExpression() {
		KeyListWithExpressionContext _localctx = new KeyListWithExpressionContext(Context, State);
		EnterRule(_localctx, 894, RULE_keyListWithExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7129;
			Match(OPEN_PAR_SYMBOL);
			State = 7130;
			keyPartOrExpression();
			State = 7135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 7131;
				Match(COMMA_SYMBOL);
				State = 7132;
				keyPartOrExpression();
				}
				}
				State = 7137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 7138;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyPartOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeyPartContext keyPart() {
			return GetRuleContext<KeyPartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprWithParenthesesContext exprWithParentheses() {
			return GetRuleContext<ExprWithParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionContext direction() {
			return GetRuleContext<DirectionContext>(0);
		}
		public KeyPartOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyPartOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterKeyPartOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitKeyPartOrExpression(this);
		}
	}

	[RuleVersion(0)]
	public KeyPartOrExpressionContext keyPartOrExpression() {
		KeyPartOrExpressionContext _localctx = new KeyPartOrExpressionContext(Context, State);
		EnterRule(_localctx, 896, RULE_keyPartOrExpression);
		int _la;
		try {
			State = 7145;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,916,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7140;
				keyPart();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7141;
				exprWithParentheses();
				State = 7143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASC_SYMBOL || _la==DESC_SYMBOL) {
					{
					State = 7142;
					direction();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyListVariantsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeyListWithExpressionContext keyListWithExpression() {
			return GetRuleContext<KeyListWithExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyListContext keyList() {
			return GetRuleContext<KeyListContext>(0);
		}
		public KeyListVariantsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyListVariants; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterKeyListVariants(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitKeyListVariants(this);
		}
	}

	[RuleVersion(0)]
	public KeyListVariantsContext keyListVariants() {
		KeyListVariantsContext _localctx = new KeyListVariantsContext(Context, State);
		EnterRule(_localctx, 898, RULE_keyListVariants);
		try {
			State = 7151;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,917,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7147;
				if (!(serverVersion >= 80013)) throw new FailedPredicateException(this, "serverVersion >= 80013");
				State = 7148;
				keyListWithExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7149;
				if (!(serverVersion < 80013)) throw new FailedPredicateException(this, "serverVersion < 80013");
				State = 7150;
				keyList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexTypeContext : ParserRuleContext {
		public IToken algorithm;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BTREE_SYMBOL() { return GetToken(MySqlParser.BTREE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTREE_SYMBOL() { return GetToken(MySqlParser.RTREE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH_SYMBOL() { return GetToken(MySqlParser.HASH_SYMBOL, 0); }
		public IndexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexType(this);
		}
	}

	[RuleVersion(0)]
	public IndexTypeContext indexType() {
		IndexTypeContext _localctx = new IndexTypeContext(Context, State);
		EnterRule(_localctx, 900, RULE_indexType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7153;
			_localctx.algorithm = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==BTREE_SYMBOL || _la==HASH_SYMBOL || _la==RTREE_SYMBOL) ) {
				_localctx.algorithm = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommonIndexOptionContext commonIndexOption() {
			return GetRuleContext<CommonIndexOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeClauseContext indexTypeClause() {
			return GetRuleContext<IndexTypeClauseContext>(0);
		}
		public IndexOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexOption(this);
		}
	}

	[RuleVersion(0)]
	public IndexOptionContext indexOption() {
		IndexOptionContext _localctx = new IndexOptionContext(Context, State);
		EnterRule(_localctx, 902, RULE_indexOption);
		try {
			State = 7157;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,918,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7155;
				commonIndexOption();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7156;
				indexTypeClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommonIndexOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_BLOCK_SIZE_SYMBOL() { return GetToken(MySqlParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySqlParser.COMMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public CommonIndexOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commonIndexOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCommonIndexOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCommonIndexOption(this);
		}
	}

	[RuleVersion(0)]
	public CommonIndexOptionContext commonIndexOption() {
		CommonIndexOptionContext _localctx = new CommonIndexOptionContext(Context, State);
		EnterRule(_localctx, 904, RULE_commonIndexOption);
		int _la;
		try {
			State = 7168;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,920,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7159;
				Match(KEY_BLOCK_SIZE_SYMBOL);
				State = 7161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7160;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 7163;
				ulong_number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7164;
				Match(COMMENT_SYMBOL);
				State = 7165;
				textLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7166;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 7167;
				visibility();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VISIBLE_SYMBOL() { return GetToken(MySqlParser.VISIBLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVISIBLE_SYMBOL() { return GetToken(MySqlParser.INVISIBLE_SYMBOL, 0); }
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterVisibility(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitVisibility(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(Context, State);
		EnterRule(_localctx, 906, RULE_visibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7170;
			_la = TokenStream.LA(1);
			if ( !(_la==INVISIBLE_SYMBOL || _la==VISIBLE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexTypeClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING_SYMBOL() { return GetToken(MySqlParser.USING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_SYMBOL() { return GetToken(MySqlParser.TYPE_SYMBOL, 0); }
		public IndexTypeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexTypeClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexTypeClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexTypeClause(this);
		}
	}

	[RuleVersion(0)]
	public IndexTypeClauseContext indexTypeClause() {
		IndexTypeClauseContext _localctx = new IndexTypeClauseContext(Context, State);
		EnterRule(_localctx, 908, RULE_indexTypeClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7172;
			_la = TokenStream.LA(1);
			if ( !(_la==TYPE_SYMBOL || _la==USING_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 7173;
			indexType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FulltextIndexOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommonIndexOptionContext commonIndexOption() {
			return GetRuleContext<CommonIndexOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySqlParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER_SYMBOL() { return GetToken(MySqlParser.PARSER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FulltextIndexOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fulltextIndexOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFulltextIndexOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFulltextIndexOption(this);
		}
	}

	[RuleVersion(0)]
	public FulltextIndexOptionContext fulltextIndexOption() {
		FulltextIndexOptionContext _localctx = new FulltextIndexOptionContext(Context, State);
		EnterRule(_localctx, 910, RULE_fulltextIndexOption);
		try {
			State = 7179;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,921,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7175;
				commonIndexOption();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7176;
				Match(WITH_SYMBOL);
				State = 7177;
				Match(PARSER_SYMBOL);
				State = 7178;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpatialIndexOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommonIndexOptionContext commonIndexOption() {
			return GetRuleContext<CommonIndexOptionContext>(0);
		}
		public SpatialIndexOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spatialIndexOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSpatialIndexOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSpatialIndexOption(this);
		}
	}

	[RuleVersion(0)]
	public SpatialIndexOptionContext spatialIndexOption() {
		SpatialIndexOptionContext _localctx = new SpatialIndexOptionContext(Context, State);
		EnterRule(_localctx, 912, RULE_spatialIndexOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7181;
			commonIndexOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MySqlParser.Eof, 0); }
		public DataTypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataTypeDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDataTypeDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDataTypeDefinition(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeDefinitionContext dataTypeDefinition() {
		DataTypeDefinitionContext _localctx = new DataTypeDefinitionContext(Context, State);
		EnterRule(_localctx, 914, RULE_dataTypeDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7183;
			dataType();
			State = 7184;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_SYMBOL() { return GetToken(MySqlParser.INT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TINYINT_SYMBOL() { return GetToken(MySqlParser.TINYINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALLINT_SYMBOL() { return GetToken(MySqlParser.SMALLINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUMINT_SYMBOL() { return GetToken(MySqlParser.MEDIUMINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIGINT_SYMBOL() { return GetToken(MySqlParser.BIGINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldOptionsContext fieldOptions() {
			return GetRuleContext<FieldOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_SYMBOL() { return GetToken(MySqlParser.REAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_SYMBOL() { return GetToken(MySqlParser.DOUBLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrecisionContext precision() {
			return GetRuleContext<PrecisionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECISION_SYMBOL() { return GetToken(MySqlParser.PRECISION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_SYMBOL() { return GetToken(MySqlParser.FLOAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_SYMBOL() { return GetToken(MySqlParser.DECIMAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC_SYMBOL() { return GetToken(MySqlParser.NUMERIC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED_SYMBOL() { return GetToken(MySqlParser.FIXED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FloatOptionsContext floatOptions() {
			return GetRuleContext<FloatOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_SYMBOL() { return GetToken(MySqlParser.BIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_SYMBOL() { return GetToken(MySqlParser.BOOL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_SYMBOL() { return GetToken(MySqlParser.BOOLEAN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_SYMBOL() { return GetToken(MySqlParser.CHAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetWithOptBinaryContext charsetWithOptBinary() {
			return GetRuleContext<CharsetWithOptBinaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NcharContext nchar() {
			return GetRuleContext<NcharContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySqlParser.BINARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARYING_SYMBOL() { return GetToken(MySqlParser.VARYING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARCHAR_SYMBOL() { return GetToken(MySqlParser.VARCHAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIONAL_SYMBOL() { return GetToken(MySqlParser.NATIONAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NVARCHAR_SYMBOL() { return GetToken(MySqlParser.NVARCHAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR_SYMBOL() { return GetToken(MySqlParser.NCHAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARBINARY_SYMBOL() { return GetToken(MySqlParser.VARBINARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR_SYMBOL() { return GetToken(MySqlParser.YEAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_SYMBOL() { return GetToken(MySqlParser.DATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_SYMBOL() { return GetToken(MySqlParser.TIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeDatetimePrecisionContext typeDatetimePrecision() {
			return GetRuleContext<TypeDatetimePrecisionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP_SYMBOL() { return GetToken(MySqlParser.TIMESTAMP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME_SYMBOL() { return GetToken(MySqlParser.DATETIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TINYBLOB_SYMBOL() { return GetToken(MySqlParser.TINYBLOB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOB_SYMBOL() { return GetToken(MySqlParser.BLOB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUMBLOB_SYMBOL() { return GetToken(MySqlParser.MEDIUMBLOB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONGBLOB_SYMBOL() { return GetToken(MySqlParser.LONGBLOB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG_SYMBOL() { return GetToken(MySqlParser.LONG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TINYTEXT_SYMBOL() { return GetToken(MySqlParser.TINYTEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_SYMBOL() { return GetToken(MySqlParser.TEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUMTEXT_SYMBOL() { return GetToken(MySqlParser.MEDIUMTEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONGTEXT_SYMBOL() { return GetToken(MySqlParser.LONGTEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringListContext stringList() {
			return GetRuleContext<StringListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM_SYMBOL() { return GetToken(MySqlParser.ENUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySqlParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIAL_SYMBOL() { return GetToken(MySqlParser.SERIAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SYMBOL() { return GetToken(MySqlParser.JSON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRY_SYMBOL() { return GetToken(MySqlParser.GEOMETRY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYCOLLECTION_SYMBOL() { return GetToken(MySqlParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINT_SYMBOL() { return GetToken(MySqlParser.POINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOINT_SYMBOL() { return GetToken(MySqlParser.MULTIPOINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINESTRING_SYMBOL() { return GetToken(MySqlParser.LINESTRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTILINESTRING_SYMBOL() { return GetToken(MySqlParser.MULTILINESTRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGON_SYMBOL() { return GetToken(MySqlParser.POLYGON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOLYGON_SYMBOL() { return GetToken(MySqlParser.MULTIPOLYGON_SYMBOL, 0); }
		public DataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDataType(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeContext dataType() {
		DataTypeContext _localctx = new DataTypeContext(Context, State);
		EnterRule(_localctx, 916, RULE_dataType);
		int _la;
		try {
			State = 7333;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,955,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7186;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BIGINT_SYMBOL || _la==INT_SYMBOL || _la==MEDIUMINT_SYMBOL || _la==SMALLINT_SYMBOL || _la==TINYINT_SYMBOL) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7188;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,922,Context) ) {
				case 1:
					{
					State = 7187;
					fieldLength();
					}
					break;
				}
				State = 7191;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,923,Context) ) {
				case 1:
					{
					State = 7190;
					fieldOptions();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7198;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case REAL_SYMBOL:
					{
					State = 7193;
					_localctx.type = Match(REAL_SYMBOL);
					}
					break;
				case DOUBLE_SYMBOL:
					{
					State = 7194;
					_localctx.type = Match(DOUBLE_SYMBOL);
					State = 7196;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,924,Context) ) {
					case 1:
						{
						State = 7195;
						Match(PRECISION_SYMBOL);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7201;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,926,Context) ) {
				case 1:
					{
					State = 7200;
					precision();
					}
					break;
				}
				State = 7204;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,927,Context) ) {
				case 1:
					{
					State = 7203;
					fieldOptions();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7206;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DECIMAL_SYMBOL || _la==FIXED_SYMBOL || _la==FLOAT_SYMBOL || _la==NUMERIC_SYMBOL) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7208;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,928,Context) ) {
				case 1:
					{
					State = 7207;
					floatOptions();
					}
					break;
				}
				State = 7211;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,929,Context) ) {
				case 1:
					{
					State = 7210;
					fieldOptions();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7213;
				_localctx.type = Match(BIT_SYMBOL);
				State = 7215;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,930,Context) ) {
				case 1:
					{
					State = 7214;
					fieldLength();
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7217;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BOOLEAN_SYMBOL || _la==BOOL_SYMBOL) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7218;
				_localctx.type = Match(CHAR_SYMBOL);
				State = 7220;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,931,Context) ) {
				case 1:
					{
					State = 7219;
					fieldLength();
					}
					break;
				}
				State = 7223;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,932,Context) ) {
				case 1:
					{
					State = 7222;
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7225;
				nchar();
				State = 7227;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,933,Context) ) {
				case 1:
					{
					State = 7226;
					fieldLength();
					}
					break;
				}
				State = 7230;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,934,Context) ) {
				case 1:
					{
					State = 7229;
					Match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7232;
				_localctx.type = Match(BINARY_SYMBOL);
				State = 7234;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,935,Context) ) {
				case 1:
					{
					State = 7233;
					fieldLength();
					}
					break;
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7239;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CHAR_SYMBOL:
					{
					State = 7236;
					_localctx.type = Match(CHAR_SYMBOL);
					State = 7237;
					Match(VARYING_SYMBOL);
					}
					break;
				case VARCHAR_SYMBOL:
					{
					State = 7238;
					_localctx.type = Match(VARCHAR_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7241;
				fieldLength();
				State = 7243;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,937,Context) ) {
				case 1:
					{
					State = 7242;
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 7255;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,938,Context) ) {
				case 1:
					{
					State = 7245;
					_localctx.type = Match(NATIONAL_SYMBOL);
					State = 7246;
					Match(VARCHAR_SYMBOL);
					}
					break;
				case 2:
					{
					State = 7247;
					_localctx.type = Match(NVARCHAR_SYMBOL);
					}
					break;
				case 3:
					{
					State = 7248;
					_localctx.type = Match(NCHAR_SYMBOL);
					State = 7249;
					Match(VARCHAR_SYMBOL);
					}
					break;
				case 4:
					{
					State = 7250;
					_localctx.type = Match(NATIONAL_SYMBOL);
					State = 7251;
					Match(CHAR_SYMBOL);
					State = 7252;
					Match(VARYING_SYMBOL);
					}
					break;
				case 5:
					{
					State = 7253;
					_localctx.type = Match(NCHAR_SYMBOL);
					State = 7254;
					Match(VARYING_SYMBOL);
					}
					break;
				}
				State = 7257;
				fieldLength();
				State = 7259;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,939,Context) ) {
				case 1:
					{
					State = 7258;
					Match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 7261;
				_localctx.type = Match(VARBINARY_SYMBOL);
				State = 7262;
				fieldLength();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 7263;
				_localctx.type = Match(YEAR_SYMBOL);
				State = 7265;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,940,Context) ) {
				case 1:
					{
					State = 7264;
					fieldLength();
					}
					break;
				}
				State = 7268;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,941,Context) ) {
				case 1:
					{
					State = 7267;
					fieldOptions();
					}
					break;
				}
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 7270;
				_localctx.type = Match(DATE_SYMBOL);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 7271;
				_localctx.type = Match(TIME_SYMBOL);
				State = 7273;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,942,Context) ) {
				case 1:
					{
					State = 7272;
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 7275;
				_localctx.type = Match(TIMESTAMP_SYMBOL);
				State = 7277;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,943,Context) ) {
				case 1:
					{
					State = 7276;
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 7279;
				_localctx.type = Match(DATETIME_SYMBOL);
				State = 7281;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,944,Context) ) {
				case 1:
					{
					State = 7280;
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 7283;
				_localctx.type = Match(TINYBLOB_SYMBOL);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 7284;
				_localctx.type = Match(BLOB_SYMBOL);
				State = 7286;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,945,Context) ) {
				case 1:
					{
					State = 7285;
					fieldLength();
					}
					break;
				}
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 7288;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==LONGBLOB_SYMBOL || _la==MEDIUMBLOB_SYMBOL) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 7289;
				_localctx.type = Match(LONG_SYMBOL);
				State = 7290;
				Match(VARBINARY_SYMBOL);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 7291;
				_localctx.type = Match(LONG_SYMBOL);
				State = 7295;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,946,Context) ) {
				case 1:
					{
					State = 7292;
					Match(CHAR_SYMBOL);
					State = 7293;
					Match(VARYING_SYMBOL);
					}
					break;
				case 2:
					{
					State = 7294;
					Match(VARCHAR_SYMBOL);
					}
					break;
				}
				State = 7298;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,947,Context) ) {
				case 1:
					{
					State = 7297;
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 7300;
				_localctx.type = Match(TINYTEXT_SYMBOL);
				State = 7302;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,948,Context) ) {
				case 1:
					{
					State = 7301;
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 7304;
				_localctx.type = Match(TEXT_SYMBOL);
				State = 7306;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,949,Context) ) {
				case 1:
					{
					State = 7305;
					fieldLength();
					}
					break;
				}
				State = 7309;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,950,Context) ) {
				case 1:
					{
					State = 7308;
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 7311;
				_localctx.type = Match(MEDIUMTEXT_SYMBOL);
				State = 7313;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,951,Context) ) {
				case 1:
					{
					State = 7312;
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 7315;
				_localctx.type = Match(LONGTEXT_SYMBOL);
				State = 7317;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,952,Context) ) {
				case 1:
					{
					State = 7316;
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 7319;
				_localctx.type = Match(ENUM_SYMBOL);
				State = 7320;
				stringList();
				State = 7322;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,953,Context) ) {
				case 1:
					{
					State = 7321;
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 7324;
				_localctx.type = Match(SET_SYMBOL);
				State = 7325;
				stringList();
				State = 7327;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,954,Context) ) {
				case 1:
					{
					State = 7326;
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 7329;
				_localctx.type = Match(SERIAL_SYMBOL);
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 7330;
				if (!(serverVersion >= 50708)) throw new FailedPredicateException(this, "serverVersion >= 50708");
				State = 7331;
				_localctx.type = Match(JSON_SYMBOL);
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 7332;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==GEOMETRYCOLLECTION_SYMBOL || _la==GEOMETRY_SYMBOL || _la==LINESTRING_SYMBOL || ((((_la - 351)) & ~0x3f) == 0 && ((1L << (_la - 351)) & ((1L << (MULTILINESTRING_SYMBOL - 351)) | (1L << (MULTIPOINT_SYMBOL - 351)) | (1L << (MULTIPOLYGON_SYMBOL - 351)) | (1L << (POINT_SYMBOL - 351)) | (1L << (POLYGON_SYMBOL - 351)))) != 0)) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NcharContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR_SYMBOL() { return GetToken(MySqlParser.NCHAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_SYMBOL() { return GetToken(MySqlParser.CHAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIONAL_SYMBOL() { return GetToken(MySqlParser.NATIONAL_SYMBOL, 0); }
		public NcharContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nchar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNchar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNchar(this);
		}
	}

	[RuleVersion(0)]
	public NcharContext nchar() {
		NcharContext _localctx = new NcharContext(Context, State);
		EnterRule(_localctx, 918, RULE_nchar);
		try {
			State = 7338;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NCHAR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7335;
				_localctx.type = Match(NCHAR_SYMBOL);
				}
				break;
			case NATIONAL_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7336;
				_localctx.type = Match(NATIONAL_SYMBOL);
				State = 7337;
				Match(CHAR_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealTypeContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_SYMBOL() { return GetToken(MySqlParser.REAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_SYMBOL() { return GetToken(MySqlParser.DOUBLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECISION_SYMBOL() { return GetToken(MySqlParser.PRECISION_SYMBOL, 0); }
		public RealTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRealType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRealType(this);
		}
	}

	[RuleVersion(0)]
	public RealTypeContext realType() {
		RealTypeContext _localctx = new RealTypeContext(Context, State);
		EnterRule(_localctx, 920, RULE_realType);
		try {
			State = 7345;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REAL_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7340;
				_localctx.type = Match(REAL_SYMBOL);
				}
				break;
			case DOUBLE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7341;
				_localctx.type = Match(DOUBLE_SYMBOL);
				State = 7343;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,957,Context) ) {
				case 1:
					{
					State = 7342;
					Match(PRECISION_SYMBOL);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldLengthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulonglong_numberContext real_ulonglong_number() {
			return GetRuleContext<Real_ulonglong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_NUMBER() { return GetToken(MySqlParser.DECIMAL_NUMBER, 0); }
		public FieldLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldLength; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFieldLength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFieldLength(this);
		}
	}

	[RuleVersion(0)]
	public FieldLengthContext fieldLength() {
		FieldLengthContext _localctx = new FieldLengthContext(Context, State);
		EnterRule(_localctx, 922, RULE_fieldLength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7347;
			Match(OPEN_PAR_SYMBOL);
			State = 7350;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,959,Context) ) {
			case 1:
				{
				State = 7348;
				real_ulonglong_number();
				}
				break;
			case 2:
				{
				State = 7349;
				Match(DECIMAL_NUMBER);
				}
				break;
			}
			State = 7352;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SIGNED_SYMBOL() { return GetTokens(MySqlParser.SIGNED_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNED_SYMBOL(int i) {
			return GetToken(MySqlParser.SIGNED_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UNSIGNED_SYMBOL() { return GetTokens(MySqlParser.UNSIGNED_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_SYMBOL(int i) {
			return GetToken(MySqlParser.UNSIGNED_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ZEROFILL_SYMBOL() { return GetTokens(MySqlParser.ZEROFILL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZEROFILL_SYMBOL(int i) {
			return GetToken(MySqlParser.ZEROFILL_SYMBOL, i);
		}
		public FieldOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFieldOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFieldOptions(this);
		}
	}

	[RuleVersion(0)]
	public FieldOptionsContext fieldOptions() {
		FieldOptionsContext _localctx = new FieldOptionsContext(Context, State);
		EnterRule(_localctx, 924, RULE_fieldOptions);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7355;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 7354;
					_la = TokenStream.LA(1);
					if ( !(_la==SIGNED_SYMBOL || _la==UNSIGNED_SYMBOL || _la==ZEROFILL_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7357;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,960,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharsetWithOptBinaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AsciiContext ascii() {
			return GetRuleContext<AsciiContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnicodeContext unicode() {
			return GetRuleContext<UnicodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE_SYMBOL() { return GetToken(MySqlParser.BYTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetContext charset() {
			return GetRuleContext<CharsetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySqlParser.BINARY_SYMBOL, 0); }
		public CharsetWithOptBinaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charsetWithOptBinary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCharsetWithOptBinary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCharsetWithOptBinary(this);
		}
	}

	[RuleVersion(0)]
	public CharsetWithOptBinaryContext charsetWithOptBinary() {
		CharsetWithOptBinaryContext _localctx = new CharsetWithOptBinaryContext(Context, State);
		EnterRule(_localctx, 926, RULE_charsetWithOptBinary);
		try {
			State = 7373;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,963,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7359;
				ascii();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7360;
				unicode();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7361;
				Match(BYTE_SYMBOL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7362;
				charset();
				State = 7363;
				charsetName();
				State = 7365;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,961,Context) ) {
				case 1:
					{
					State = 7364;
					Match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7367;
				Match(BINARY_SYMBOL);
				State = 7371;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,962,Context) ) {
				case 1:
					{
					State = 7368;
					charset();
					State = 7369;
					charsetName();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsciiContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASCII_SYMBOL() { return GetToken(MySqlParser.ASCII_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySqlParser.BINARY_SYMBOL, 0); }
		public AsciiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ascii; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAscii(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAscii(this);
		}
	}

	[RuleVersion(0)]
	public AsciiContext ascii() {
		AsciiContext _localctx = new AsciiContext(Context, State);
		EnterRule(_localctx, 928, RULE_ascii);
		try {
			State = 7381;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASCII_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7375;
				Match(ASCII_SYMBOL);
				State = 7377;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,964,Context) ) {
				case 1:
					{
					State = 7376;
					Match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case BINARY_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7379;
				Match(BINARY_SYMBOL);
				State = 7380;
				Match(ASCII_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnicodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNICODE_SYMBOL() { return GetToken(MySqlParser.UNICODE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySqlParser.BINARY_SYMBOL, 0); }
		public UnicodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unicode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUnicode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUnicode(this);
		}
	}

	[RuleVersion(0)]
	public UnicodeContext unicode() {
		UnicodeContext _localctx = new UnicodeContext(Context, State);
		EnterRule(_localctx, 930, RULE_unicode);
		try {
			State = 7389;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNICODE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7383;
				Match(UNICODE_SYMBOL);
				State = 7385;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,966,Context) ) {
				case 1:
					{
					State = 7384;
					Match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case BINARY_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7387;
				Match(BINARY_SYMBOL);
				State = 7388;
				Match(UNICODE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WsNumCodepointsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public WsNumCodepointsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wsNumCodepoints; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWsNumCodepoints(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWsNumCodepoints(this);
		}
	}

	[RuleVersion(0)]
	public WsNumCodepointsContext wsNumCodepoints() {
		WsNumCodepointsContext _localctx = new WsNumCodepointsContext(Context, State);
		EnterRule(_localctx, 932, RULE_wsNumCodepoints);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7391;
			Match(OPEN_PAR_SYMBOL);
			State = 7392;
			real_ulong_number();
			State = 7393;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDatetimePrecisionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySqlParser.INT_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public TypeDatetimePrecisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDatetimePrecision; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTypeDatetimePrecision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTypeDatetimePrecision(this);
		}
	}

	[RuleVersion(0)]
	public TypeDatetimePrecisionContext typeDatetimePrecision() {
		TypeDatetimePrecisionContext _localctx = new TypeDatetimePrecisionContext(Context, State);
		EnterRule(_localctx, 934, RULE_typeDatetimePrecision);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7395;
			Match(OPEN_PAR_SYMBOL);
			State = 7396;
			Match(INT_NUMBER);
			State = 7397;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharsetNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySqlParser.BINARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		public CharsetNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charsetName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCharsetName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCharsetName(this);
		}
	}

	[RuleVersion(0)]
	public CharsetNameContext charsetName() {
		CharsetNameContext _localctx = new CharsetNameContext(Context, State);
		EnterRule(_localctx, 936, RULE_charsetName);
		try {
			State = 7403;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,968,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7399;
				textOrIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7400;
				Match(BINARY_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7401;
				if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
				State = 7402;
				Match(DEFAULT_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollationNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySqlParser.BINARY_SYMBOL, 0); }
		public CollationNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collationName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCollationName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCollationName(this);
		}
	}

	[RuleVersion(0)]
	public CollationNameContext collationName() {
		CollationNameContext _localctx = new CollationNameContext(Context, State);
		EnterRule(_localctx, 938, RULE_collationName);
		try {
			State = 7410;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,969,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7405;
				textOrIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7406;
				if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
				State = 7407;
				Match(DEFAULT_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7408;
				if (!(serverVersion >= 80018)) throw new FailedPredicateException(this, "serverVersion >= 80018");
				State = 7409;
				Match(BINARY_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTableOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateTableOptionContext[] createTableOption() {
			return GetRuleContexts<CreateTableOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTableOptionContext createTableOption(int i) {
			return GetRuleContext<CreateTableOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public CreateTableOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTableOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateTableOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateTableOptions(this);
		}
	}

	[RuleVersion(0)]
	public CreateTableOptionsContext createTableOptions() {
		CreateTableOptionsContext _localctx = new CreateTableOptionsContext(Context, State);
		EnterRule(_localctx, 940, RULE_createTableOptions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7412;
			createTableOption();
			State = 7419;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,971,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 7414;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,970,Context) ) {
					case 1:
						{
						State = 7413;
						Match(COMMA_SYMBOL);
						}
						break;
					}
					State = 7416;
					createTableOption();
					}
					} 
				}
				State = 7421;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,971,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTableOptionsSpaceSeparatedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateTableOptionContext[] createTableOption() {
			return GetRuleContexts<CreateTableOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTableOptionContext createTableOption(int i) {
			return GetRuleContext<CreateTableOptionContext>(i);
		}
		public CreateTableOptionsSpaceSeparatedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTableOptionsSpaceSeparated; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateTableOptionsSpaceSeparated(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateTableOptionsSpaceSeparated(this);
		}
	}

	[RuleVersion(0)]
	public CreateTableOptionsSpaceSeparatedContext createTableOptionsSpaceSeparated() {
		CreateTableOptionsSpaceSeparatedContext _localctx = new CreateTableOptionsSpaceSeparatedContext(Context, State);
		EnterRule(_localctx, 942, RULE_createTableOptionsSpaceSeparated);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7423;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 7422;
					createTableOption();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7425;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,972,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTableOptionContext : ParserRuleContext {
		public IToken option;
		public IToken format;
		public IToken method;
		[System.Diagnostics.DebuggerNonUserCode] public EngineRefContext engineRef() {
			return GetRuleContext<EngineRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySqlParser.ENGINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_ENGINE_SYMBOL() { return GetToken(MySqlParser.SECONDARY_ENGINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_SYMBOL() { return GetToken(MySqlParser.NULL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ulonglong_numberContext ulonglong_number() {
			return GetRuleContext<Ulonglong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_ROWS_SYMBOL() { return GetToken(MySqlParser.MAX_ROWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_ROWS_SYMBOL() { return GetToken(MySqlParser.MIN_ROWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG_ROW_LENGTH_SYMBOL() { return GetToken(MySqlParser.AVG_ROW_LENGTH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySqlParser.PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySqlParser.COMMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSION_SYMBOL() { return GetToken(MySqlParser.COMPRESSION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION_SYMBOL() { return GetToken(MySqlParser.ENCRYPTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_INCREMENT_SYMBOL() { return GetToken(MySqlParser.AUTO_INCREMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TernaryOptionContext ternaryOption() {
			return GetRuleContext<TernaryOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACK_KEYS_SYMBOL() { return GetToken(MySqlParser.PACK_KEYS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_AUTO_RECALC_SYMBOL() { return GetToken(MySqlParser.STATS_AUTO_RECALC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_PERSISTENT_SYMBOL() { return GetToken(MySqlParser.STATS_PERSISTENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_SAMPLE_PAGES_SYMBOL() { return GetToken(MySqlParser.STATS_SAMPLE_PAGES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM_SYMBOL() { return GetToken(MySqlParser.CHECKSUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_CHECKSUM_SYMBOL() { return GetToken(MySqlParser.TABLE_CHECKSUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAY_KEY_WRITE_SYMBOL() { return GetToken(MySqlParser.DELAY_KEY_WRITE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_FORMAT_SYMBOL() { return GetToken(MySqlParser.ROW_FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC_SYMBOL() { return GetToken(MySqlParser.DYNAMIC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED_SYMBOL() { return GetToken(MySqlParser.FIXED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSED_SYMBOL() { return GetToken(MySqlParser.COMPRESSED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDUNDANT_SYMBOL() { return GetToken(MySqlParser.REDUNDANT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPACT_SYMBOL() { return GetToken(MySqlParser.COMPACT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefListContext tableRefList() {
			return GetRuleContext<TableRefListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION_SYMBOL() { return GetToken(MySqlParser.UNION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefaultCharsetContext defaultCharset() {
			return GetRuleContext<DefaultCharsetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultCollationContext defaultCollation() {
			return GetRuleContext<DefaultCollationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT_METHOD_SYMBOL() { return GetToken(MySqlParser.INSERT_METHOD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_SYMBOL() { return GetToken(MySqlParser.NO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_SYMBOL() { return GetToken(MySqlParser.FIRST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_SYMBOL() { return GetToken(MySqlParser.LAST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY_SYMBOL() { return GetToken(MySqlParser.DIRECTORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_SYMBOL() { return GetToken(MySqlParser.DATA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_SYMBOL() { return GetToken(MySqlParser.INDEX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySqlParser.TABLESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE_SYMBOL() { return GetToken(MySqlParser.STORAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISK_SYMBOL() { return GetToken(MySqlParser.DISK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY_SYMBOL() { return GetToken(MySqlParser.MEMORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION_SYMBOL() { return GetToken(MySqlParser.CONNECTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_BLOCK_SIZE_SYMBOL() { return GetToken(MySqlParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
		public CreateTableOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTableOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateTableOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateTableOption(this);
		}
	}

	[RuleVersion(0)]
	public CreateTableOptionContext createTableOption() {
		CreateTableOptionContext _localctx = new CreateTableOptionContext(Context, State);
		EnterRule(_localctx, 944, RULE_createTableOption);
		int _la;
		try {
			State = 7556;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,997,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7427;
				_localctx.option = Match(ENGINE_SYMBOL);
				State = 7429;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,973,Context) ) {
				case 1:
					{
					State = 7428;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7431;
				engineRef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7432;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 7433;
				_localctx.option = Match(SECONDARY_ENGINE_SYMBOL);
				State = 7435;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,974,Context) ) {
				case 1:
					{
					State = 7434;
					equal();
					}
					break;
				}
				State = 7439;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,975,Context) ) {
				case 1:
					{
					State = 7437;
					Match(NULL_SYMBOL);
					}
					break;
				case 2:
					{
					State = 7438;
					textOrIdentifier();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7441;
				_localctx.option = Match(MAX_ROWS_SYMBOL);
				State = 7443;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7442;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 7445;
				ulonglong_number();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7446;
				_localctx.option = Match(MIN_ROWS_SYMBOL);
				State = 7448;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7447;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 7450;
				ulonglong_number();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7451;
				_localctx.option = Match(AVG_ROW_LENGTH_SYMBOL);
				State = 7453;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7452;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 7455;
				ulong_number();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7456;
				_localctx.option = Match(PASSWORD_SYMBOL);
				State = 7458;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,979,Context) ) {
				case 1:
					{
					State = 7457;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7460;
				textStringLiteral();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7461;
				_localctx.option = Match(COMMENT_SYMBOL);
				State = 7463;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,980,Context) ) {
				case 1:
					{
					State = 7462;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7465;
				textStringLiteral();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7466;
				if (!(serverVersion >= 50708)) throw new FailedPredicateException(this, "serverVersion >= 50708");
				State = 7467;
				_localctx.option = Match(COMPRESSION_SYMBOL);
				State = 7469;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,981,Context) ) {
				case 1:
					{
					State = 7468;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7471;
				textString();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7472;
				if (!(serverVersion >= 50711)) throw new FailedPredicateException(this, "serverVersion >= 50711");
				State = 7473;
				_localctx.option = Match(ENCRYPTION_SYMBOL);
				State = 7475;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,982,Context) ) {
				case 1:
					{
					State = 7474;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7477;
				textString();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 7478;
				_localctx.option = Match(AUTO_INCREMENT_SYMBOL);
				State = 7480;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7479;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 7482;
				ulonglong_number();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 7483;
				_localctx.option = Match(PACK_KEYS_SYMBOL);
				State = 7485;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7484;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 7487;
				ternaryOption();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 7488;
				_localctx.option = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 544)) & ~0x3f) == 0 && ((1L << (_la - 544)) & ((1L << (STATS_AUTO_RECALC_SYMBOL - 544)) | (1L << (STATS_PERSISTENT_SYMBOL - 544)) | (1L << (STATS_SAMPLE_PAGES_SYMBOL - 544)))) != 0)) ) {
					_localctx.option = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7490;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7489;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 7492;
				ternaryOption();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 7493;
				_localctx.option = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CHECKSUM_SYMBOL || _la==TABLE_CHECKSUM_SYMBOL) ) {
					_localctx.option = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7495;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7494;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 7497;
				ulong_number();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 7498;
				_localctx.option = Match(DELAY_KEY_WRITE_SYMBOL);
				State = 7500;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7499;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 7502;
				ulong_number();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 7503;
				_localctx.option = Match(ROW_FORMAT_SYMBOL);
				State = 7505;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7504;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 7507;
				_localctx.format = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (COMPACT_SYMBOL - 78)) | (1L << (COMPRESSED_SYMBOL - 78)) | (1L << (DEFAULT_SYMBOL - 78)))) != 0) || _la==DYNAMIC_SYMBOL || _la==FIXED_SYMBOL || _la==REDUNDANT_SYMBOL) ) {
					_localctx.format = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 7508;
				_localctx.option = Match(UNION_SYMBOL);
				State = 7510;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7509;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 7512;
				Match(OPEN_PAR_SYMBOL);
				State = 7513;
				tableRefList();
				State = 7514;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 7516;
				defaultCharset();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 7517;
				defaultCollation();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 7518;
				_localctx.option = Match(INSERT_METHOD_SYMBOL);
				State = 7520;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7519;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 7522;
				_localctx.method = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST_SYMBOL || _la==LAST_SYMBOL || _la==NO_SYMBOL) ) {
					_localctx.method = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 7523;
				_localctx.option = Match(DATA_SYMBOL);
				State = 7524;
				Match(DIRECTORY_SYMBOL);
				State = 7526;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,991,Context) ) {
				case 1:
					{
					State = 7525;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7528;
				textString();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 7529;
				_localctx.option = Match(INDEX_SYMBOL);
				State = 7530;
				Match(DIRECTORY_SYMBOL);
				State = 7532;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,992,Context) ) {
				case 1:
					{
					State = 7531;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7534;
				textString();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 7535;
				_localctx.option = Match(TABLESPACE_SYMBOL);
				State = 7541;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,994,Context) ) {
				case 1:
					{
					State = 7536;
					if (!(serverVersion >= 50707)) throw new FailedPredicateException(this, "serverVersion >= 50707");
					State = 7538;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,993,Context) ) {
					case 1:
						{
						State = 7537;
						Match(EQUAL_OPERATOR);
						}
						break;
					}
					}
					break;
				case 2:
					{
					}
					break;
				}
				State = 7543;
				identifier();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 7544;
				_localctx.option = Match(STORAGE_SYMBOL);
				State = 7545;
				_la = TokenStream.LA(1);
				if ( !(_la==DISK_SYMBOL || _la==MEMORY_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 7546;
				_localctx.option = Match(CONNECTION_SYMBOL);
				State = 7548;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,995,Context) ) {
				case 1:
					{
					State = 7547;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7550;
				textString();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 7551;
				_localctx.option = Match(KEY_BLOCK_SIZE_SYMBOL);
				State = 7553;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7552;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 7555;
				ulong_number();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TernaryOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		public TernaryOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ternaryOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTernaryOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTernaryOption(this);
		}
	}

	[RuleVersion(0)]
	public TernaryOptionContext ternaryOption() {
		TernaryOptionContext _localctx = new TernaryOptionContext(Context, State);
		EnterRule(_localctx, 946, RULE_ternaryOption);
		try {
			State = 7560;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case HEX_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7558;
				ulong_number();
				}
				break;
			case DEFAULT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7559;
				Match(DEFAULT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultCollationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE_SYMBOL() { return GetToken(MySqlParser.COLLATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		public DefaultCollationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultCollation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDefaultCollation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDefaultCollation(this);
		}
	}

	[RuleVersion(0)]
	public DefaultCollationContext defaultCollation() {
		DefaultCollationContext _localctx = new DefaultCollationContext(Context, State);
		EnterRule(_localctx, 948, RULE_defaultCollation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7563;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT_SYMBOL) {
				{
				State = 7562;
				Match(DEFAULT_SYMBOL);
				}
			}

			State = 7565;
			Match(COLLATE_SYMBOL);
			State = 7567;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1000,Context) ) {
			case 1:
				{
				State = 7566;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 7569;
			collationName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultEncryptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION_SYMBOL() { return GetToken(MySqlParser.ENCRYPTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		public DefaultEncryptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultEncryption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDefaultEncryption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDefaultEncryption(this);
		}
	}

	[RuleVersion(0)]
	public DefaultEncryptionContext defaultEncryption() {
		DefaultEncryptionContext _localctx = new DefaultEncryptionContext(Context, State);
		EnterRule(_localctx, 950, RULE_defaultEncryption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7572;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT_SYMBOL) {
				{
				State = 7571;
				Match(DEFAULT_SYMBOL);
				}
			}

			State = 7574;
			Match(ENCRYPTION_SYMBOL);
			State = 7576;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1002,Context) ) {
			case 1:
				{
				State = 7575;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 7578;
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultCharsetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CharsetContext charset() {
			return GetRuleContext<CharsetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		public DefaultCharsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultCharset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDefaultCharset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDefaultCharset(this);
		}
	}

	[RuleVersion(0)]
	public DefaultCharsetContext defaultCharset() {
		DefaultCharsetContext _localctx = new DefaultCharsetContext(Context, State);
		EnterRule(_localctx, 952, RULE_defaultCharset);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7581;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT_SYMBOL) {
				{
				State = 7580;
				Match(DEFAULT_SYMBOL);
				}
			}

			State = 7583;
			charset();
			State = 7585;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1004,Context) ) {
			case 1:
				{
				State = 7584;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 7587;
			charsetName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySqlParser.PARTITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySqlParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionTypeDefContext partitionTypeDef() {
			return GetRuleContext<PartitionTypeDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONS_SYMBOL() { return GetToken(MySqlParser.PARTITIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubPartitionsContext subPartitions() {
			return GetRuleContext<SubPartitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionsContext partitionDefinitions() {
			return GetRuleContext<PartitionDefinitionsContext>(0);
		}
		public PartitionClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionClause(this);
		}
	}

	[RuleVersion(0)]
	public PartitionClauseContext partitionClause() {
		PartitionClauseContext _localctx = new PartitionClauseContext(Context, State);
		EnterRule(_localctx, 954, RULE_partitionClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7589;
			Match(PARTITION_SYMBOL);
			State = 7590;
			Match(BY_SYMBOL);
			State = 7591;
			partitionTypeDef();
			State = 7594;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1005,Context) ) {
			case 1:
				{
				State = 7592;
				Match(PARTITIONS_SYMBOL);
				State = 7593;
				real_ulong_number();
				}
				break;
			}
			State = 7597;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1006,Context) ) {
			case 1:
				{
				State = 7596;
				subPartitions();
				}
				break;
			}
			State = 7600;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1007,Context) ) {
			case 1:
				{
				State = 7599;
				partitionDefinitions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionTypeDefContext : ParserRuleContext {
		public PartitionTypeDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionTypeDef; } }
	 
		public PartitionTypeDefContext() { }
		public virtual void CopyFrom(PartitionTypeDefContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PartitionDefRangeListContext : PartitionTypeDefContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE_SYMBOL() { return GetToken(MySqlParser.RANGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST_SYMBOL() { return GetToken(MySqlParser.LIST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS_SYMBOL() { return GetToken(MySqlParser.COLUMNS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public PartitionDefRangeListContext(PartitionTypeDefContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionDefRangeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionDefRangeList(this);
		}
	}
	public partial class PartitionDefKeyContext : PartitionTypeDefContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_SYMBOL() { return GetToken(MySqlParser.KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEAR_SYMBOL() { return GetToken(MySqlParser.LINEAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionKeyAlgorithmContext partitionKeyAlgorithm() {
			return GetRuleContext<PartitionKeyAlgorithmContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public PartitionDefKeyContext(PartitionTypeDefContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionDefKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionDefKey(this);
		}
	}
	public partial class PartitionDefHashContext : PartitionTypeDefContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH_SYMBOL() { return GetToken(MySqlParser.HASH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEAR_SYMBOL() { return GetToken(MySqlParser.LINEAR_SYMBOL, 0); }
		public PartitionDefHashContext(PartitionTypeDefContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionDefHash(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionDefHash(this);
		}
	}

	[RuleVersion(0)]
	public PartitionTypeDefContext partitionTypeDef() {
		PartitionTypeDefContext _localctx = new PartitionTypeDefContext(Context, State);
		EnterRule(_localctx, 956, RULE_partitionTypeDef);
		int _la;
		try {
			State = 7635;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1014,Context) ) {
			case 1:
				_localctx = new PartitionDefKeyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 7603;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINEAR_SYMBOL) {
					{
					State = 7602;
					Match(LINEAR_SYMBOL);
					}
				}

				State = 7605;
				Match(KEY_SYMBOL);
				State = 7607;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1009,Context) ) {
				case 1:
					{
					State = 7606;
					partitionKeyAlgorithm();
					}
					break;
				}
				State = 7609;
				Match(OPEN_PAR_SYMBOL);
				State = 7611;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1010,Context) ) {
				case 1:
					{
					State = 7610;
					identifierList();
					}
					break;
				}
				State = 7613;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				_localctx = new PartitionDefHashContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 7615;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINEAR_SYMBOL) {
					{
					State = 7614;
					Match(LINEAR_SYMBOL);
					}
				}

				State = 7617;
				Match(HASH_SYMBOL);
				State = 7618;
				Match(OPEN_PAR_SYMBOL);
				State = 7619;
				bitExpr(0);
				State = 7620;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 3:
				_localctx = new PartitionDefRangeListContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 7622;
				_la = TokenStream.LA(1);
				if ( !(_la==LIST_SYMBOL || _la==RANGE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7633;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_PAR_SYMBOL:
					{
					State = 7623;
					Match(OPEN_PAR_SYMBOL);
					State = 7624;
					bitExpr(0);
					State = 7625;
					Match(CLOSE_PAR_SYMBOL);
					}
					break;
				case COLUMNS_SYMBOL:
					{
					State = 7627;
					Match(COLUMNS_SYMBOL);
					State = 7628;
					Match(OPEN_PAR_SYMBOL);
					State = 7630;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1012,Context) ) {
					case 1:
						{
						State = 7629;
						identifierList();
						}
						break;
					}
					State = 7632;
					Match(CLOSE_PAR_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubPartitionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITION_SYMBOL() { return GetToken(MySqlParser.SUBPARTITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySqlParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH_SYMBOL() { return GetToken(MySqlParser.HASH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_SYMBOL() { return GetToken(MySqlParser.KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return GetRuleContext<IdentifierListWithParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEAR_SYMBOL() { return GetToken(MySqlParser.LINEAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITIONS_SYMBOL() { return GetToken(MySqlParser.SUBPARTITIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionKeyAlgorithmContext partitionKeyAlgorithm() {
			return GetRuleContext<PartitionKeyAlgorithmContext>(0);
		}
		public SubPartitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subPartitions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSubPartitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSubPartitions(this);
		}
	}

	[RuleVersion(0)]
	public SubPartitionsContext subPartitions() {
		SubPartitionsContext _localctx = new SubPartitionsContext(Context, State);
		EnterRule(_localctx, 958, RULE_subPartitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7637;
			Match(SUBPARTITION_SYMBOL);
			State = 7638;
			Match(BY_SYMBOL);
			State = 7640;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LINEAR_SYMBOL) {
				{
				State = 7639;
				Match(LINEAR_SYMBOL);
				}
			}

			State = 7652;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HASH_SYMBOL:
				{
				State = 7642;
				Match(HASH_SYMBOL);
				State = 7643;
				Match(OPEN_PAR_SYMBOL);
				State = 7644;
				bitExpr(0);
				State = 7645;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case KEY_SYMBOL:
				{
				State = 7647;
				Match(KEY_SYMBOL);
				State = 7649;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1016,Context) ) {
				case 1:
					{
					State = 7648;
					partitionKeyAlgorithm();
					}
					break;
				}
				State = 7651;
				identifierListWithParentheses();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 7656;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1018,Context) ) {
			case 1:
				{
				State = 7654;
				Match(SUBPARTITIONS_SYMBOL);
				State = 7655;
				real_ulong_number();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionKeyAlgorithmContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM_SYMBOL() { return GetToken(MySqlParser.ALGORITHM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		public PartitionKeyAlgorithmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionKeyAlgorithm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionKeyAlgorithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionKeyAlgorithm(this);
		}
	}

	[RuleVersion(0)]
	public PartitionKeyAlgorithmContext partitionKeyAlgorithm() {
		PartitionKeyAlgorithmContext _localctx = new PartitionKeyAlgorithmContext(Context, State);
		EnterRule(_localctx, 960, RULE_partitionKeyAlgorithm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7658;
			if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
			State = 7659;
			Match(ALGORITHM_SYMBOL);
			State = 7660;
			Match(EQUAL_OPERATOR);
			State = 7661;
			real_ulong_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionDefinitionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionContext[] partitionDefinition() {
			return GetRuleContexts<PartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionContext partitionDefinition(int i) {
			return GetRuleContext<PartitionDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public PartitionDefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionDefinitions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionDefinitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionDefinitions(this);
		}
	}

	[RuleVersion(0)]
	public PartitionDefinitionsContext partitionDefinitions() {
		PartitionDefinitionsContext _localctx = new PartitionDefinitionsContext(Context, State);
		EnterRule(_localctx, 962, RULE_partitionDefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7663;
			Match(OPEN_PAR_SYMBOL);
			State = 7664;
			partitionDefinition();
			State = 7669;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 7665;
				Match(COMMA_SYMBOL);
				State = 7666;
				partitionDefinition();
				}
				}
				State = 7671;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 7672;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySqlParser.PARTITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES_SYMBOL() { return GetToken(MySqlParser.VALUES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_SYMBOL() { return GetToken(MySqlParser.LESS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THAN_SYMBOL() { return GetToken(MySqlParser.THAN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_SYMBOL() { return GetToken(MySqlParser.IN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionValuesInContext partitionValuesIn() {
			return GetRuleContext<PartitionValuesInContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext[] subpartitionDefinition() {
			return GetRuleContexts<SubpartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return GetRuleContext<SubpartitionDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionValueItemListParenContext partitionValueItemListParen() {
			return GetRuleContext<PartitionValueItemListParenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXVALUE_SYMBOL() { return GetToken(MySqlParser.MAXVALUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public PartitionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionDefinition(this);
		}
	}

	[RuleVersion(0)]
	public PartitionDefinitionContext partitionDefinition() {
		PartitionDefinitionContext _localctx = new PartitionDefinitionContext(Context, State);
		EnterRule(_localctx, 964, RULE_partitionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7674;
			Match(PARTITION_SYMBOL);
			State = 7675;
			identifier();
			State = 7686;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1021,Context) ) {
			case 1:
				{
				State = 7676;
				Match(VALUES_SYMBOL);
				State = 7677;
				Match(LESS_SYMBOL);
				State = 7678;
				Match(THAN_SYMBOL);
				State = 7681;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_PAR_SYMBOL:
					{
					State = 7679;
					partitionValueItemListParen();
					}
					break;
				case MAXVALUE_SYMBOL:
					{
					State = 7680;
					Match(MAXVALUE_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				State = 7683;
				Match(VALUES_SYMBOL);
				State = 7684;
				Match(IN_SYMBOL);
				State = 7685;
				partitionValuesIn();
				}
				break;
			}
			State = 7691;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMENT_SYMBOL || _la==DATA_SYMBOL || _la==ENGINE_SYMBOL || _la==INDEX_SYMBOL || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAX_ROWS_SYMBOL - 323)) | (1L << (MIN_ROWS_SYMBOL - 323)) | (1L << (NODEGROUP_SYMBOL - 323)))) != 0) || _la==STORAGE_SYMBOL || _la==TABLESPACE_SYMBOL) {
				{
				{
				State = 7688;
				partitionOption();
				}
				}
				State = 7693;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 7705;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 7694;
				Match(OPEN_PAR_SYMBOL);
				State = 7695;
				subpartitionDefinition();
				State = 7700;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 7696;
					Match(COMMA_SYMBOL);
					State = 7697;
					subpartitionDefinition();
					}
					}
					State = 7702;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 7703;
				Match(CLOSE_PAR_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionValuesInContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PartitionValueItemListParenContext[] partitionValueItemListParen() {
			return GetRuleContexts<PartitionValueItemListParenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionValueItemListParenContext partitionValueItemListParen(int i) {
			return GetRuleContext<PartitionValueItemListParenContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public PartitionValuesInContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionValuesIn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionValuesIn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionValuesIn(this);
		}
	}

	[RuleVersion(0)]
	public PartitionValuesInContext partitionValuesIn() {
		PartitionValuesInContext _localctx = new PartitionValuesInContext(Context, State);
		EnterRule(_localctx, 966, RULE_partitionValuesIn);
		int _la;
		try {
			State = 7719;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1026,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7707;
				partitionValueItemListParen();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7708;
				Match(OPEN_PAR_SYMBOL);
				State = 7709;
				partitionValueItemListParen();
				State = 7714;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 7710;
					Match(COMMA_SYMBOL);
					State = 7711;
					partitionValueItemListParen();
					}
					}
					State = 7716;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 7717;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionOptionContext : ParserRuleContext {
		public IToken option;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySqlParser.TABLESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineRefContext engineRef() {
			return GetRuleContext<EngineRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySqlParser.ENGINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE_SYMBOL() { return GetToken(MySqlParser.STORAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODEGROUP_SYMBOL() { return GetToken(MySqlParser.NODEGROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_ROWS_SYMBOL() { return GetToken(MySqlParser.MAX_ROWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_ROWS_SYMBOL() { return GetToken(MySqlParser.MIN_ROWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY_SYMBOL() { return GetToken(MySqlParser.DIRECTORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_SYMBOL() { return GetToken(MySqlParser.DATA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_SYMBOL() { return GetToken(MySqlParser.INDEX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySqlParser.COMMENT_SYMBOL, 0); }
		public PartitionOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionOption(this);
		}
	}

	[RuleVersion(0)]
	public PartitionOptionContext partitionOption() {
		PartitionOptionContext _localctx = new PartitionOptionContext(Context, State);
		EnterRule(_localctx, 968, RULE_partitionOption);
		int _la;
		try {
			State = 7755;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TABLESPACE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7721;
				_localctx.option = Match(TABLESPACE_SYMBOL);
				State = 7723;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1027,Context) ) {
				case 1:
					{
					State = 7722;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7725;
				identifier();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7727;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STORAGE_SYMBOL) {
					{
					State = 7726;
					Match(STORAGE_SYMBOL);
					}
				}

				State = 7729;
				_localctx.option = Match(ENGINE_SYMBOL);
				State = 7731;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1029,Context) ) {
				case 1:
					{
					State = 7730;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7733;
				engineRef();
				}
				break;
			case NODEGROUP_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7734;
				_localctx.option = Match(NODEGROUP_SYMBOL);
				State = 7736;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7735;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 7738;
				real_ulong_number();
				}
				break;
			case MAX_ROWS_SYMBOL:
			case MIN_ROWS_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7739;
				_localctx.option = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==MAX_ROWS_SYMBOL || _la==MIN_ROWS_SYMBOL) ) {
					_localctx.option = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7741;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7740;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 7743;
				real_ulong_number();
				}
				break;
			case DATA_SYMBOL:
			case INDEX_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7744;
				_localctx.option = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DATA_SYMBOL || _la==INDEX_SYMBOL) ) {
					_localctx.option = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7745;
				Match(DIRECTORY_SYMBOL);
				State = 7747;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1032,Context) ) {
				case 1:
					{
					State = 7746;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7749;
				textLiteral();
				}
				break;
			case COMMENT_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7750;
				_localctx.option = Match(COMMENT_SYMBOL);
				State = 7752;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1033,Context) ) {
				case 1:
					{
					State = 7751;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7754;
				textLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubpartitionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITION_SYMBOL() { return GetToken(MySqlParser.SUBPARTITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		public SubpartitionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subpartitionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSubpartitionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSubpartitionDefinition(this);
		}
	}

	[RuleVersion(0)]
	public SubpartitionDefinitionContext subpartitionDefinition() {
		SubpartitionDefinitionContext _localctx = new SubpartitionDefinitionContext(Context, State);
		EnterRule(_localctx, 970, RULE_subpartitionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7757;
			Match(SUBPARTITION_SYMBOL);
			State = 7758;
			textOrIdentifier();
			State = 7762;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMENT_SYMBOL || _la==DATA_SYMBOL || _la==ENGINE_SYMBOL || _la==INDEX_SYMBOL || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAX_ROWS_SYMBOL - 323)) | (1L << (MIN_ROWS_SYMBOL - 323)) | (1L << (NODEGROUP_SYMBOL - 323)))) != 0) || _la==STORAGE_SYMBOL || _la==TABLESPACE_SYMBOL) {
				{
				{
				State = 7759;
				partitionOption();
				}
				}
				State = 7764;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionValueItemListParenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionValueItemContext[] partitionValueItem() {
			return GetRuleContexts<PartitionValueItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionValueItemContext partitionValueItem(int i) {
			return GetRuleContext<PartitionValueItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public PartitionValueItemListParenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionValueItemListParen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionValueItemListParen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionValueItemListParen(this);
		}
	}

	[RuleVersion(0)]
	public PartitionValueItemListParenContext partitionValueItemListParen() {
		PartitionValueItemListParenContext _localctx = new PartitionValueItemListParenContext(Context, State);
		EnterRule(_localctx, 972, RULE_partitionValueItemListParen);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7765;
			Match(OPEN_PAR_SYMBOL);
			State = 7766;
			partitionValueItem();
			State = 7771;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 7767;
				Match(COMMA_SYMBOL);
				State = 7768;
				partitionValueItem();
				}
				}
				State = 7773;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 7774;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionValueItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXVALUE_SYMBOL() { return GetToken(MySqlParser.MAXVALUE_SYMBOL, 0); }
		public PartitionValueItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionValueItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionValueItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionValueItem(this);
		}
	}

	[RuleVersion(0)]
	public PartitionValueItemContext partitionValueItem() {
		PartitionValueItemContext _localctx = new PartitionValueItemContext(Context, State);
		EnterRule(_localctx, 974, RULE_partitionValueItem);
		try {
			State = 7778;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1037,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7776;
				bitExpr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7777;
				Match(MAXVALUE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinerClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER_SYMBOL() { return GetToken(MySqlParser.DEFINER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		public DefinerClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definerClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDefinerClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDefinerClause(this);
		}
	}

	[RuleVersion(0)]
	public DefinerClauseContext definerClause() {
		DefinerClauseContext _localctx = new DefinerClauseContext(Context, State);
		EnterRule(_localctx, 976, RULE_definerClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7780;
			Match(DEFINER_SYMBOL);
			State = 7781;
			Match(EQUAL_OPERATOR);
			State = 7782;
			user();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfExistsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_SYMBOL() { return GetToken(MySqlParser.IF_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS_SYMBOL() { return GetToken(MySqlParser.EXISTS_SYMBOL, 0); }
		public IfExistsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifExists; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIfExists(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIfExists(this);
		}
	}

	[RuleVersion(0)]
	public IfExistsContext ifExists() {
		IfExistsContext _localctx = new IfExistsContext(Context, State);
		EnterRule(_localctx, 978, RULE_ifExists);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7784;
			Match(IF_SYMBOL);
			State = 7785;
			Match(EXISTS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfNotExistsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_SYMBOL() { return GetToken(MySqlParser.IF_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NotRuleContext notRule() {
			return GetRuleContext<NotRuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS_SYMBOL() { return GetToken(MySqlParser.EXISTS_SYMBOL, 0); }
		public IfNotExistsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifNotExists; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIfNotExists(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIfNotExists(this);
		}
	}

	[RuleVersion(0)]
	public IfNotExistsContext ifNotExists() {
		IfNotExistsContext _localctx = new IfNotExistsContext(Context, State);
		EnterRule(_localctx, 980, RULE_ifNotExists);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7787;
			Match(IF_SYMBOL);
			State = 7788;
			notRule();
			State = 7789;
			Match(EXISTS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureParameterContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext functionParameter() {
			return GetRuleContext<FunctionParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_SYMBOL() { return GetToken(MySqlParser.IN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT_SYMBOL() { return GetToken(MySqlParser.OUT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT_SYMBOL() { return GetToken(MySqlParser.INOUT_SYMBOL, 0); }
		public ProcedureParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterProcedureParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitProcedureParameter(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureParameterContext procedureParameter() {
		ProcedureParameterContext _localctx = new ProcedureParameterContext(Context, State);
		EnterRule(_localctx, 982, RULE_procedureParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7792;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1038,Context) ) {
			case 1:
				{
				State = 7791;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INOUT_SYMBOL || _la==IN_SYMBOL || _la==OUT_SYMBOL) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 7794;
			functionParameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterNameContext parameterName() {
			return GetRuleContext<ParameterNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeWithOptCollateContext typeWithOptCollate() {
			return GetRuleContext<TypeWithOptCollateContext>(0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFunctionParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFunctionParameter(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterContext functionParameter() {
		FunctionParameterContext _localctx = new FunctionParameterContext(Context, State);
		EnterRule(_localctx, 984, RULE_functionParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7796;
			parameterName();
			State = 7797;
			typeWithOptCollate();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE_SYMBOL() { return GetToken(MySqlParser.COLLATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public CollateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCollate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCollate(this);
		}
	}

	[RuleVersion(0)]
	public CollateContext collate() {
		CollateContext _localctx = new CollateContext(Context, State);
		EnterRule(_localctx, 986, RULE_collate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7799;
			Match(COLLATE_SYMBOL);
			State = 7800;
			collationName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeWithOptCollateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		public TypeWithOptCollateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeWithOptCollate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTypeWithOptCollate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTypeWithOptCollate(this);
		}
	}

	[RuleVersion(0)]
	public TypeWithOptCollateContext typeWithOptCollate() {
		TypeWithOptCollateContext _localctx = new TypeWithOptCollateContext(Context, State);
		EnterRule(_localctx, 988, RULE_typeWithOptCollate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7802;
			dataType();
			State = 7804;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1039,Context) ) {
			case 1:
				{
				State = 7803;
				collate();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaIdentifierPairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SchemaRefContext[] schemaRef() {
			return GetRuleContexts<SchemaRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SchemaRefContext schemaRef(int i) {
			return GetRuleContext<SchemaRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL() { return GetToken(MySqlParser.COMMA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public SchemaIdentifierPairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schemaIdentifierPair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSchemaIdentifierPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSchemaIdentifierPair(this);
		}
	}

	[RuleVersion(0)]
	public SchemaIdentifierPairContext schemaIdentifierPair() {
		SchemaIdentifierPairContext _localctx = new SchemaIdentifierPairContext(Context, State);
		EnterRule(_localctx, 990, RULE_schemaIdentifierPair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7806;
			Match(OPEN_PAR_SYMBOL);
			State = 7807;
			schemaRef();
			State = 7808;
			Match(COMMA_SYMBOL);
			State = 7809;
			schemaRef();
			State = 7810;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewRefListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ViewRefContext[] viewRef() {
			return GetRuleContexts<ViewRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewRefContext viewRef(int i) {
			return GetRuleContext<ViewRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public ViewRefListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewRefList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterViewRefList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitViewRefList(this);
		}
	}

	[RuleVersion(0)]
	public ViewRefListContext viewRefList() {
		ViewRefListContext _localctx = new ViewRefListContext(Context, State);
		EnterRule(_localctx, 992, RULE_viewRefList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7812;
			viewRef();
			State = 7817;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 7813;
				Match(COMMA_SYMBOL);
				State = 7814;
				viewRef();
				}
				}
				State = 7819;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UpdateElementContext[] updateElement() {
			return GetRuleContexts<UpdateElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateElementContext updateElement(int i) {
			return GetRuleContext<UpdateElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public UpdateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUpdateList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUpdateList(this);
		}
	}

	[RuleVersion(0)]
	public UpdateListContext updateList() {
		UpdateListContext _localctx = new UpdateListContext(Context, State);
		EnterRule(_localctx, 994, RULE_updateList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7820;
			updateElement();
			State = 7825;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1041,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 7821;
					Match(COMMA_SYMBOL);
					State = 7822;
					updateElement();
					}
					} 
				}
				State = 7827;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1041,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnRefContext columnRef() {
			return GetRuleContext<ColumnRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		public UpdateElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUpdateElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUpdateElement(this);
		}
	}

	[RuleVersion(0)]
	public UpdateElementContext updateElement() {
		UpdateElementContext _localctx = new UpdateElementContext(Context, State);
		EnterRule(_localctx, 996, RULE_updateElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7828;
			columnRef();
			State = 7829;
			Match(EQUAL_OPERATOR);
			State = 7832;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1042,Context) ) {
			case 1:
				{
				State = 7830;
				expr(0);
				}
				break;
			case 2:
				{
				State = 7831;
				Match(DEFAULT_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharsetClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CharsetContext charset() {
			return GetRuleContext<CharsetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public CharsetClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charsetClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCharsetClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCharsetClause(this);
		}
	}

	[RuleVersion(0)]
	public CharsetClauseContext charsetClause() {
		CharsetClauseContext _localctx = new CharsetClauseContext(Context, State);
		EnterRule(_localctx, 998, RULE_charsetClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7834;
			charset();
			State = 7835;
			charsetName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS_SYMBOL() { return GetToken(MySqlParser.COLUMNS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldTermContext[] fieldTerm() {
			return GetRuleContexts<FieldTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldTermContext fieldTerm(int i) {
			return GetRuleContext<FieldTermContext>(i);
		}
		public FieldsClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldsClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFieldsClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFieldsClause(this);
		}
	}

	[RuleVersion(0)]
	public FieldsClauseContext fieldsClause() {
		FieldsClauseContext _localctx = new FieldsClauseContext(Context, State);
		EnterRule(_localctx, 1000, RULE_fieldsClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7837;
			Match(COLUMNS_SYMBOL);
			State = 7839;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 7838;
					fieldTerm();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7841;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1043,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINATED_SYMBOL() { return GetToken(MySqlParser.TERMINATED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySqlParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCLOSED_SYMBOL() { return GetToken(MySqlParser.ENCLOSED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONALLY_SYMBOL() { return GetToken(MySqlParser.OPTIONALLY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPED_SYMBOL() { return GetToken(MySqlParser.ESCAPED_SYMBOL, 0); }
		public FieldTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFieldTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFieldTerm(this);
		}
	}

	[RuleVersion(0)]
	public FieldTermContext fieldTerm() {
		FieldTermContext _localctx = new FieldTermContext(Context, State);
		EnterRule(_localctx, 1002, RULE_fieldTerm);
		int _la;
		try {
			State = 7855;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TERMINATED_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7843;
				Match(TERMINATED_SYMBOL);
				State = 7844;
				Match(BY_SYMBOL);
				State = 7845;
				textString();
				}
				break;
			case ENCLOSED_SYMBOL:
			case OPTIONALLY_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7847;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPTIONALLY_SYMBOL) {
					{
					State = 7846;
					Match(OPTIONALLY_SYMBOL);
					}
				}

				State = 7849;
				Match(ENCLOSED_SYMBOL);
				State = 7850;
				Match(BY_SYMBOL);
				State = 7851;
				textString();
				}
				break;
			case ESCAPED_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7852;
				Match(ESCAPED_SYMBOL);
				State = 7853;
				Match(BY_SYMBOL);
				State = 7854;
				textString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinesClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINES_SYMBOL() { return GetToken(MySqlParser.LINES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineTermContext[] lineTerm() {
			return GetRuleContexts<LineTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineTermContext lineTerm(int i) {
			return GetRuleContext<LineTermContext>(i);
		}
		public LinesClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linesClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLinesClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLinesClause(this);
		}
	}

	[RuleVersion(0)]
	public LinesClauseContext linesClause() {
		LinesClauseContext _localctx = new LinesClauseContext(Context, State);
		EnterRule(_localctx, 1004, RULE_linesClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7857;
			Match(LINES_SYMBOL);
			State = 7859;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 7858;
					lineTerm();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7861;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1046,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySqlParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINATED_SYMBOL() { return GetToken(MySqlParser.TERMINATED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTING_SYMBOL() { return GetToken(MySqlParser.STARTING_SYMBOL, 0); }
		public LineTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLineTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLineTerm(this);
		}
	}

	[RuleVersion(0)]
	public LineTermContext lineTerm() {
		LineTermContext _localctx = new LineTermContext(Context, State);
		EnterRule(_localctx, 1006, RULE_lineTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7863;
			_la = TokenStream.LA(1);
			if ( !(_la==STARTING_SYMBOL || _la==TERMINATED_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 7864;
			Match(BY_SYMBOL);
			State = 7865;
			textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserContext[] user() {
			return GetRuleContexts<UserContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserContext user(int i) {
			return GetRuleContext<UserContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public UserListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUserList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUserList(this);
		}
	}

	[RuleVersion(0)]
	public UserListContext userList() {
		UserListContext _localctx = new UserListContext(Context, State);
		EnterRule(_localctx, 1008, RULE_userList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7867;
			user();
			State = 7872;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1047,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 7868;
					Match(COMMA_SYMBOL);
					State = 7869;
					user();
					}
					} 
				}
				State = 7874;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1047,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUserListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateUserEntryContext[] createUserEntry() {
			return GetRuleContexts<CreateUserEntryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateUserEntryContext createUserEntry(int i) {
			return GetRuleContext<CreateUserEntryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public CreateUserListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUserList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateUserList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateUserList(this);
		}
	}

	[RuleVersion(0)]
	public CreateUserListContext createUserList() {
		CreateUserListContext _localctx = new CreateUserListContext(Context, State);
		EnterRule(_localctx, 1010, RULE_createUserList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7875;
			createUserEntry();
			State = 7880;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1048,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 7876;
					Match(COMMA_SYMBOL);
					State = 7877;
					createUserEntry();
					}
					} 
				}
				State = 7882;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1048,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterUserListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterUserEntryContext[] alterUserEntry() {
			return GetRuleContexts<AlterUserEntryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterUserEntryContext alterUserEntry(int i) {
			return GetRuleContext<AlterUserEntryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public AlterUserListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterUserList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterUserList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterUserList(this);
		}
	}

	[RuleVersion(0)]
	public AlterUserListContext alterUserList() {
		AlterUserListContext _localctx = new AlterUserListContext(Context, State);
		EnterRule(_localctx, 1012, RULE_alterUserList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7883;
			alterUserEntry();
			State = 7888;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1049,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 7884;
					Match(COMMA_SYMBOL);
					State = 7885;
					alterUserEntry();
					}
					} 
				}
				State = 7890;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1049,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUserEntryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySqlParser.IDENTIFIED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySqlParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySqlParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANDOM_SYMBOL() { return GetToken(MySqlParser.RANDOM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySqlParser.PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySqlParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringHashContext textStringHash() {
			return GetRuleContext<TextStringHashContext>(0);
		}
		public CreateUserEntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUserEntry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateUserEntry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateUserEntry(this);
		}
	}

	[RuleVersion(0)]
	public CreateUserEntryContext createUserEntry() {
		CreateUserEntryContext _localctx = new CreateUserEntryContext(Context, State);
		EnterRule(_localctx, 1014, RULE_createUserEntry);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7891;
			user();
			State = 7918;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1054,Context) ) {
			case 1:
				{
				State = 7892;
				Match(IDENTIFIED_SYMBOL);
				State = 7916;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1053,Context) ) {
				case 1:
					{
					State = 7893;
					Match(BY_SYMBOL);
					State = 7896;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1050,Context) ) {
					case 1:
						{
						State = 7894;
						if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
						State = 7895;
						Match(PASSWORD_SYMBOL);
						}
						break;
					}
					State = 7898;
					textString();
					}
					break;
				case 2:
					{
					State = 7899;
					Match(WITH_SYMBOL);
					State = 7900;
					textOrIdentifier();
					State = 7906;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1051,Context) ) {
					case 1:
						{
						State = 7901;
						Match(AS_SYMBOL);
						State = 7902;
						textStringHash();
						}
						break;
					case 2:
						{
						State = 7903;
						if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
						State = 7904;
						Match(BY_SYMBOL);
						State = 7905;
						textString();
						}
						break;
					}
					}
					break;
				case 3:
					{
					State = 7908;
					if (!(serverVersion >= 80018)) throw new FailedPredicateException(this, "serverVersion >= 80018");
					State = 7911;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WITH_SYMBOL) {
						{
						State = 7909;
						Match(WITH_SYMBOL);
						State = 7910;
						textOrIdentifier();
						}
					}

					State = 7913;
					Match(BY_SYMBOL);
					State = 7914;
					Match(RANDOM_SYMBOL);
					State = 7915;
					Match(PASSWORD_SYMBOL);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterUserEntryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySqlParser.IDENTIFIED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySqlParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext[] textString() {
			return GetRuleContexts<TextStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString(int i) {
			return GetRuleContext<TextStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySqlParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DiscardOldPasswordContext discardOldPassword() {
			return GetRuleContext<DiscardOldPasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySqlParser.REPLACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RetainCurrentPasswordContext retainCurrentPassword() {
			return GetRuleContext<RetainCurrentPasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySqlParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringHashContext textStringHash() {
			return GetRuleContext<TextStringHashContext>(0);
		}
		public AlterUserEntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterUserEntry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterUserEntry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterUserEntry(this);
		}
	}

	[RuleVersion(0)]
	public AlterUserEntryContext alterUserEntry() {
		AlterUserEntryContext _localctx = new AlterUserEntryContext(Context, State);
		EnterRule(_localctx, 1016, RULE_alterUserEntry);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7920;
			user();
			State = 7949;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1062,Context) ) {
			case 1:
				{
				State = 7921;
				Match(IDENTIFIED_SYMBOL);
				State = 7944;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1060,Context) ) {
				case 1:
					{
					State = 7924;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WITH_SYMBOL) {
						{
						State = 7922;
						Match(WITH_SYMBOL);
						State = 7923;
						textOrIdentifier();
						}
					}

					State = 7926;
					Match(BY_SYMBOL);
					State = 7927;
					textString();
					State = 7930;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1056,Context) ) {
					case 1:
						{
						State = 7928;
						Match(REPLACE_SYMBOL);
						State = 7929;
						textString();
						}
						break;
					}
					State = 7933;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1057,Context) ) {
					case 1:
						{
						State = 7932;
						retainCurrentPassword();
						}
						break;
					}
					}
					break;
				case 2:
					{
					State = 7935;
					Match(WITH_SYMBOL);
					State = 7936;
					textOrIdentifier();
					State = 7942;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1059,Context) ) {
					case 1:
						{
						State = 7937;
						Match(AS_SYMBOL);
						State = 7938;
						textStringHash();
						State = 7940;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,1058,Context) ) {
						case 1:
							{
							State = 7939;
							retainCurrentPassword();
							}
							break;
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 7947;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1061,Context) ) {
				case 1:
					{
					State = 7946;
					discardOldPassword();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetainCurrentPasswordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN_SYMBOL() { return GetToken(MySqlParser.RETAIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_SYMBOL() { return GetToken(MySqlParser.CURRENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySqlParser.PASSWORD_SYMBOL, 0); }
		public RetainCurrentPasswordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retainCurrentPassword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRetainCurrentPassword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRetainCurrentPassword(this);
		}
	}

	[RuleVersion(0)]
	public RetainCurrentPasswordContext retainCurrentPassword() {
		RetainCurrentPasswordContext _localctx = new RetainCurrentPasswordContext(Context, State);
		EnterRule(_localctx, 1018, RULE_retainCurrentPassword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7951;
			Match(RETAIN_SYMBOL);
			State = 7952;
			Match(CURRENT_SYMBOL);
			State = 7953;
			Match(PASSWORD_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DiscardOldPasswordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD_SYMBOL() { return GetToken(MySqlParser.DISCARD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD_SYMBOL() { return GetToken(MySqlParser.OLD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySqlParser.PASSWORD_SYMBOL, 0); }
		public DiscardOldPasswordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_discardOldPassword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDiscardOldPassword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDiscardOldPassword(this);
		}
	}

	[RuleVersion(0)]
	public DiscardOldPasswordContext discardOldPassword() {
		DiscardOldPasswordContext _localctx = new DiscardOldPasswordContext(Context, State);
		EnterRule(_localctx, 1020, RULE_discardOldPassword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7955;
			Match(DISCARD_SYMBOL);
			State = 7956;
			Match(OLD_SYMBOL);
			State = 7957;
			Match(PASSWORD_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplacePasswordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySqlParser.REPLACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public ReplacePasswordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replacePassword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReplacePassword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReplacePassword(this);
		}
	}

	[RuleVersion(0)]
	public ReplacePasswordContext replacePassword() {
		ReplacePasswordContext _localctx = new ReplacePasswordContext(Context, State);
		EnterRule(_localctx, 1022, RULE_replacePassword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7959;
			Match(REPLACE_SYMBOL);
			State = 7960;
			textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserIdentifierOrTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext[] textOrIdentifier() {
			return GetRuleContexts<TextOrIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier(int i) {
			return GetRuleContext<TextOrIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SIGN_SYMBOL() { return GetToken(MySqlParser.AT_SIGN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_TEXT_SUFFIX() { return GetToken(MySqlParser.AT_TEXT_SUFFIX, 0); }
		public UserIdentifierOrTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userIdentifierOrText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUserIdentifierOrText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUserIdentifierOrText(this);
		}
	}

	[RuleVersion(0)]
	public UserIdentifierOrTextContext userIdentifierOrText() {
		UserIdentifierOrTextContext _localctx = new UserIdentifierOrTextContext(Context, State);
		EnterRule(_localctx, 1024, RULE_userIdentifierOrText);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7962;
			textOrIdentifier();
			State = 7966;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1063,Context) ) {
			case 1:
				{
				State = 7963;
				Match(AT_SIGN_SYMBOL);
				State = 7964;
				textOrIdentifier();
				}
				break;
			case 2:
				{
				State = 7965;
				Match(AT_TEXT_SUFFIX);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserIdentifierOrTextContext userIdentifierOrText() {
			return GetRuleContext<UserIdentifierOrTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_USER_SYMBOL() { return GetToken(MySqlParser.CURRENT_USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesesContext parentheses() {
			return GetRuleContext<ParenthesesContext>(0);
		}
		public UserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_user; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUser(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUser(this);
		}
	}

	[RuleVersion(0)]
	public UserContext user() {
		UserContext _localctx = new UserContext(Context, State);
		EnterRule(_localctx, 1026, RULE_user);
		try {
			State = 7973;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1065,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7968;
				userIdentifierOrText();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7969;
				Match(CURRENT_USER_SYMBOL);
				State = 7971;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1064,Context) ) {
				case 1:
					{
					State = 7970;
					parentheses();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LikeClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE_SYMBOL() { return GetToken(MySqlParser.LIKE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public LikeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_likeClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLikeClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLikeClause(this);
		}
	}

	[RuleVersion(0)]
	public LikeClauseContext likeClause() {
		LikeClauseContext _localctx = new LikeClauseContext(Context, State);
		EnterRule(_localctx, 1028, RULE_likeClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7975;
			Match(LIKE_SYMBOL);
			State = 7976;
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LikeOrWhereContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LikeClauseContext likeClause() {
			return GetRuleContext<LikeClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public LikeOrWhereContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_likeOrWhere; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLikeOrWhere(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLikeOrWhere(this);
		}
	}

	[RuleVersion(0)]
	public LikeOrWhereContext likeOrWhere() {
		LikeOrWhereContext _localctx = new LikeOrWhereContext(Context, State);
		EnterRule(_localctx, 1030, RULE_likeOrWhere);
		try {
			State = 7980;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LIKE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7978;
				likeClause();
				}
				break;
			case WHERE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7979;
				whereClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnlineOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLINE_SYMBOL() { return GetToken(MySqlParser.ONLINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFLINE_SYMBOL() { return GetToken(MySqlParser.OFFLINE_SYMBOL, 0); }
		public OnlineOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onlineOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOnlineOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOnlineOption(this);
		}
	}

	[RuleVersion(0)]
	public OnlineOptionContext onlineOption() {
		OnlineOptionContext _localctx = new OnlineOptionContext(Context, State);
		EnterRule(_localctx, 1032, RULE_onlineOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7982;
			_la = TokenStream.LA(1);
			if ( !(_la==OFFLINE_SYMBOL || _la==ONLINE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoWriteToBinLogContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySqlParser.LOCAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_WRITE_TO_BINLOG_SYMBOL() { return GetToken(MySqlParser.NO_WRITE_TO_BINLOG_SYMBOL, 0); }
		public NoWriteToBinLogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noWriteToBinLog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNoWriteToBinLog(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNoWriteToBinLog(this);
		}
	}

	[RuleVersion(0)]
	public NoWriteToBinLogContext noWriteToBinLog() {
		NoWriteToBinLogContext _localctx = new NoWriteToBinLogContext(Context, State);
		EnterRule(_localctx, 1034, RULE_noWriteToBinLog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7984;
			_la = TokenStream.LA(1);
			if ( !(_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsePartitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySqlParser.PARTITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return GetRuleContext<IdentifierListWithParenthesesContext>(0);
		}
		public UsePartitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usePartition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUsePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUsePartition(this);
		}
	}

	[RuleVersion(0)]
	public UsePartitionContext usePartition() {
		UsePartitionContext _localctx = new UsePartitionContext(Context, State);
		EnterRule(_localctx, 1036, RULE_usePartition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7986;
			if (!(serverVersion >= 50602)) throw new FailedPredicateException(this, "serverVersion >= 50602");
			State = 7987;
			Match(PARTITION_SYMBOL);
			State = 7988;
			identifierListWithParentheses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public FieldIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFieldIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFieldIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public FieldIdentifierContext fieldIdentifier() {
		FieldIdentifierContext _localctx = new FieldIdentifierContext(Context, State);
		EnterRule(_localctx, 1038, RULE_fieldIdentifier);
		try {
			State = 7995;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1068,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7990;
				dotIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7991;
				qualifiedIdentifier();
				State = 7993;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1067,Context) ) {
				case 1:
					{
					State = 7992;
					dotIdentifier();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldIdentifierContext fieldIdentifier() {
			return GetRuleContext<FieldIdentifierContext>(0);
		}
		public ColumnNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterColumnName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitColumnName(this);
		}
	}

	[RuleVersion(0)]
	public ColumnNameContext columnName() {
		ColumnNameContext _localctx = new ColumnNameContext(Context, State);
		EnterRule(_localctx, 1040, RULE_columnName);
		try {
			State = 8001;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1069,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7997;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 7998;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7999;
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				State = 8000;
				fieldIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnInternalRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ColumnInternalRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnInternalRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterColumnInternalRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitColumnInternalRef(this);
		}
	}

	[RuleVersion(0)]
	public ColumnInternalRefContext columnInternalRef() {
		ColumnInternalRefContext _localctx = new ColumnInternalRefContext(Context, State);
		EnterRule(_localctx, 1042, RULE_columnInternalRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8003;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnInternalRefListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnInternalRefContext[] columnInternalRef() {
			return GetRuleContexts<ColumnInternalRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnInternalRefContext columnInternalRef(int i) {
			return GetRuleContext<ColumnInternalRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public ColumnInternalRefListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnInternalRefList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterColumnInternalRefList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitColumnInternalRefList(this);
		}
	}

	[RuleVersion(0)]
	public ColumnInternalRefListContext columnInternalRefList() {
		ColumnInternalRefListContext _localctx = new ColumnInternalRefListContext(Context, State);
		EnterRule(_localctx, 1044, RULE_columnInternalRefList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8005;
			Match(OPEN_PAR_SYMBOL);
			State = 8006;
			columnInternalRef();
			State = 8011;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 8007;
				Match(COMMA_SYMBOL);
				State = 8008;
				columnInternalRef();
				}
				}
				State = 8013;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 8014;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldIdentifierContext fieldIdentifier() {
			return GetRuleContext<FieldIdentifierContext>(0);
		}
		public ColumnRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterColumnRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitColumnRef(this);
		}
	}

	[RuleVersion(0)]
	public ColumnRefContext columnRef() {
		ColumnRefContext _localctx = new ColumnRefContext(Context, State);
		EnterRule(_localctx, 1046, RULE_columnRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8016;
			fieldIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnRefContext columnRef() {
			return GetRuleContext<ColumnRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableWildContext tableWild() {
			return GetRuleContext<TableWildContext>(0);
		}
		public InsertIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInsertIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInsertIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public InsertIdentifierContext insertIdentifier() {
		InsertIdentifierContext _localctx = new InsertIdentifierContext(Context, State);
		EnterRule(_localctx, 1048, RULE_insertIdentifier);
		try {
			State = 8020;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1071,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8018;
				columnRef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8019;
				tableWild();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IndexNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexName(this);
		}
	}

	[RuleVersion(0)]
	public IndexNameContext indexName() {
		IndexNameContext _localctx = new IndexNameContext(Context, State);
		EnterRule(_localctx, 1050, RULE_indexName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8022;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldIdentifierContext fieldIdentifier() {
			return GetRuleContext<FieldIdentifierContext>(0);
		}
		public IndexRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexRef(this);
		}
	}

	[RuleVersion(0)]
	public IndexRefContext indexRef() {
		IndexRefContext _localctx = new IndexRefContext(Context, State);
		EnterRule(_localctx, 1052, RULE_indexRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8024;
			fieldIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableWildContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT_SYMBOL() { return GetTokens(MySqlParser.DOT_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT_SYMBOL(int i) {
			return GetToken(MySqlParser.DOT_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT_OPERATOR() { return GetToken(MySqlParser.MULT_OPERATOR, 0); }
		public TableWildContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableWild; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableWild(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableWild(this);
		}
	}

	[RuleVersion(0)]
	public TableWildContext tableWild() {
		TableWildContext _localctx = new TableWildContext(Context, State);
		EnterRule(_localctx, 1054, RULE_tableWild);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8026;
			identifier();
			State = 8027;
			Match(DOT_SYMBOL);
			State = 8031;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1072,Context) ) {
			case 1:
				{
				State = 8028;
				identifier();
				State = 8029;
				Match(DOT_SYMBOL);
				}
				break;
			}
			State = 8033;
			Match(MULT_OPERATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SchemaNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schemaName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSchemaName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSchemaName(this);
		}
	}

	[RuleVersion(0)]
	public SchemaNameContext schemaName() {
		SchemaNameContext _localctx = new SchemaNameContext(Context, State);
		EnterRule(_localctx, 1056, RULE_schemaName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8035;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SchemaRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schemaRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSchemaRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSchemaRef(this);
		}
	}

	[RuleVersion(0)]
	public SchemaRefContext schemaRef() {
		SchemaRefContext _localctx = new SchemaRefContext(Context, State);
		EnterRule(_localctx, 1058, RULE_schemaRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8037;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public ProcedureNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterProcedureName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitProcedureName(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureNameContext procedureName() {
		ProcedureNameContext _localctx = new ProcedureNameContext(Context, State);
		EnterRule(_localctx, 1060, RULE_procedureName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8039;
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public ProcedureRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterProcedureRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitProcedureRef(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureRefContext procedureRef() {
		ProcedureRefContext _localctx = new ProcedureRefContext(Context, State);
		EnterRule(_localctx, 1062, RULE_procedureRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8041;
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public FunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFunctionName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFunctionName(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameContext functionName() {
		FunctionNameContext _localctx = new FunctionNameContext(Context, State);
		EnterRule(_localctx, 1064, RULE_functionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8043;
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public FunctionRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFunctionRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFunctionRef(this);
		}
	}

	[RuleVersion(0)]
	public FunctionRefContext functionRef() {
		FunctionRefContext _localctx = new FunctionRefContext(Context, State);
		EnterRule(_localctx, 1066, RULE_functionRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8045;
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public TriggerNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTriggerName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTriggerName(this);
		}
	}

	[RuleVersion(0)]
	public TriggerNameContext triggerName() {
		TriggerNameContext _localctx = new TriggerNameContext(Context, State);
		EnterRule(_localctx, 1068, RULE_triggerName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8047;
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public TriggerRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTriggerRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTriggerRef(this);
		}
	}

	[RuleVersion(0)]
	public TriggerRefContext triggerRef() {
		TriggerRefContext _localctx = new TriggerRefContext(Context, State);
		EnterRule(_localctx, 1070, RULE_triggerRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8049;
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public ViewNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterViewName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitViewName(this);
		}
	}

	[RuleVersion(0)]
	public ViewNameContext viewName() {
		ViewNameContext _localctx = new ViewNameContext(Context, State);
		EnterRule(_localctx, 1072, RULE_viewName);
		try {
			State = 8053;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1073,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8051;
				qualifiedIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8052;
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public ViewRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterViewRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitViewRef(this);
		}
	}

	[RuleVersion(0)]
	public ViewRefContext viewRef() {
		ViewRefContext _localctx = new ViewRefContext(Context, State);
		EnterRule(_localctx, 1074, RULE_viewRef);
		try {
			State = 8057;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1074,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8055;
				qualifiedIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8056;
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablespaceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TablespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablespaceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTablespaceName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTablespaceName(this);
		}
	}

	[RuleVersion(0)]
	public TablespaceNameContext tablespaceName() {
		TablespaceNameContext _localctx = new TablespaceNameContext(Context, State);
		EnterRule(_localctx, 1076, RULE_tablespaceName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8059;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablespaceRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TablespaceRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablespaceRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTablespaceRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTablespaceRef(this);
		}
	}

	[RuleVersion(0)]
	public TablespaceRefContext tablespaceRef() {
		TablespaceRefContext _localctx = new TablespaceRefContext(Context, State);
		EnterRule(_localctx, 1078, RULE_tablespaceRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8061;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogfileGroupNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LogfileGroupNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logfileGroupName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLogfileGroupName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLogfileGroupName(this);
		}
	}

	[RuleVersion(0)]
	public LogfileGroupNameContext logfileGroupName() {
		LogfileGroupNameContext _localctx = new LogfileGroupNameContext(Context, State);
		EnterRule(_localctx, 1080, RULE_logfileGroupName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8063;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogfileGroupRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LogfileGroupRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logfileGroupRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLogfileGroupRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLogfileGroupRef(this);
		}
	}

	[RuleVersion(0)]
	public LogfileGroupRefContext logfileGroupRef() {
		LogfileGroupRefContext _localctx = new LogfileGroupRefContext(Context, State);
		EnterRule(_localctx, 1082, RULE_logfileGroupRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8065;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public EventNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterEventName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitEventName(this);
		}
	}

	[RuleVersion(0)]
	public EventNameContext eventName() {
		EventNameContext _localctx = new EventNameContext(Context, State);
		EnterRule(_localctx, 1084, RULE_eventName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8067;
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public EventRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterEventRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitEventRef(this);
		}
	}

	[RuleVersion(0)]
	public EventRefContext eventRef() {
		EventRefContext _localctx = new EventRefContext(Context, State);
		EnterRule(_localctx, 1086, RULE_eventRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8069;
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UdfNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public UdfNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udfName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUdfName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUdfName(this);
		}
	}

	[RuleVersion(0)]
	public UdfNameContext udfName() {
		UdfNameContext _localctx = new UdfNameContext(Context, State);
		EnterRule(_localctx, 1088, RULE_udfName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8071;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServerNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public ServerNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serverName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterServerName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitServerName(this);
		}
	}

	[RuleVersion(0)]
	public ServerNameContext serverName() {
		ServerNameContext _localctx = new ServerNameContext(Context, State);
		EnterRule(_localctx, 1090, RULE_serverName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8073;
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServerRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public ServerRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serverRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterServerRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitServerRef(this);
		}
	}

	[RuleVersion(0)]
	public ServerRefContext serverRef() {
		ServerRefContext _localctx = new ServerRefContext(Context, State);
		EnterRule(_localctx, 1092, RULE_serverRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8075;
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EngineRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public EngineRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_engineRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterEngineRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitEngineRef(this);
		}
	}

	[RuleVersion(0)]
	public EngineRefContext engineRef() {
		EngineRefContext _localctx = new EngineRefContext(Context, State);
		EnterRule(_localctx, 1094, RULE_engineRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8077;
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableName(this);
		}
	}

	[RuleVersion(0)]
	public TableNameContext tableName() {
		TableNameContext _localctx = new TableNameContext(Context, State);
		EnterRule(_localctx, 1096, RULE_tableName);
		try {
			State = 8081;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1075,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8079;
				qualifiedIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8080;
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterTableRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SchemaRefContext schemaRef() {
			return GetRuleContext<SchemaRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public FilterTableRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterTableRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFilterTableRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFilterTableRef(this);
		}
	}

	[RuleVersion(0)]
	public FilterTableRefContext filterTableRef() {
		FilterTableRefContext _localctx = new FilterTableRefContext(Context, State);
		EnterRule(_localctx, 1098, RULE_filterTableRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8083;
			schemaRef();
			State = 8084;
			dotIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableRefWithWildcardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT_SYMBOL() { return GetToken(MySqlParser.DOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT_OPERATOR() { return GetToken(MySqlParser.MULT_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public TableRefWithWildcardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableRefWithWildcard; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableRefWithWildcard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableRefWithWildcard(this);
		}
	}

	[RuleVersion(0)]
	public TableRefWithWildcardContext tableRefWithWildcard() {
		TableRefWithWildcardContext _localctx = new TableRefWithWildcardContext(Context, State);
		EnterRule(_localctx, 1100, RULE_tableRefWithWildcard);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8086;
			identifier();
			State = 8094;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1077,Context) ) {
			case 1:
				{
				State = 8087;
				Match(DOT_SYMBOL);
				State = 8088;
				Match(MULT_OPERATOR);
				}
				break;
			case 2:
				{
				State = 8089;
				dotIdentifier();
				State = 8092;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1076,Context) ) {
				case 1:
					{
					State = 8090;
					Match(DOT_SYMBOL);
					State = 8091;
					Match(MULT_OPERATOR);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public TableRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableRef(this);
		}
	}

	[RuleVersion(0)]
	public TableRefContext tableRef() {
		TableRefContext _localctx = new TableRefContext(Context, State);
		EnterRule(_localctx, 1102, RULE_tableRef);
		try {
			State = 8098;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1078,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8096;
				qualifiedIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8097;
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableRefListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext[] tableRef() {
			return GetRuleContexts<TableRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef(int i) {
			return GetRuleContext<TableRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public TableRefListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableRefList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableRefList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableRefList(this);
		}
	}

	[RuleVersion(0)]
	public TableRefListContext tableRefList() {
		TableRefListContext _localctx = new TableRefListContext(Context, State);
		EnterRule(_localctx, 1104, RULE_tableRefList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8100;
			tableRef();
			State = 8105;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1079,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8101;
					Match(COMMA_SYMBOL);
					State = 8102;
					tableRef();
					}
					} 
				}
				State = 8107;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1079,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableAliasRefListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableRefWithWildcardContext[] tableRefWithWildcard() {
			return GetRuleContexts<TableRefWithWildcardContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableRefWithWildcardContext tableRefWithWildcard(int i) {
			return GetRuleContext<TableRefWithWildcardContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public TableAliasRefListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableAliasRefList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableAliasRefList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableAliasRefList(this);
		}
	}

	[RuleVersion(0)]
	public TableAliasRefListContext tableAliasRefList() {
		TableAliasRefListContext _localctx = new TableAliasRefListContext(Context, State);
		EnterRule(_localctx, 1106, RULE_tableAliasRefList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8108;
			tableRefWithWildcard();
			State = 8113;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1080,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8109;
					Match(COMMA_SYMBOL);
					State = 8110;
					tableRefWithWildcard();
					}
					} 
				}
				State = 8115;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1080,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterParameterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitParameterName(this);
		}
	}

	[RuleVersion(0)]
	public ParameterNameContext parameterName() {
		ParameterNameContext _localctx = new ParameterNameContext(Context, State);
		EnterRule(_localctx, 1108, RULE_parameterName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8116;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PureIdentifierContext pureIdentifier() {
			return GetRuleContext<PureIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelKeywordContext labelKeyword() {
			return GetRuleContext<LabelKeywordContext>(0);
		}
		public LabelIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLabelIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLabelIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public LabelIdentifierContext labelIdentifier() {
		LabelIdentifierContext _localctx = new LabelIdentifierContext(Context, State);
		EnterRule(_localctx, 1110, RULE_labelIdentifier);
		try {
			State = 8120;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1081,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8118;
				pureIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8119;
				labelKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelIdentifierContext labelIdentifier() {
			return GetRuleContext<LabelIdentifierContext>(0);
		}
		public LabelRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLabelRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLabelRef(this);
		}
	}

	[RuleVersion(0)]
	public LabelRefContext labelRef() {
		LabelRefContext _localctx = new LabelRefContext(Context, State);
		EnterRule(_localctx, 1112, RULE_labelRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8122;
			labelIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PureIdentifierContext pureIdentifier() {
			return GetRuleContext<PureIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoleKeywordContext roleKeyword() {
			return GetRuleContext<RoleKeywordContext>(0);
		}
		public RoleIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoleIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoleIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public RoleIdentifierContext roleIdentifier() {
		RoleIdentifierContext _localctx = new RoleIdentifierContext(Context, State);
		EnterRule(_localctx, 1114, RULE_roleIdentifier);
		try {
			State = 8126;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1082,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8124;
				pureIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8125;
				roleKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RoleIdentifierContext roleIdentifier() {
			return GetRuleContext<RoleIdentifierContext>(0);
		}
		public RoleRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoleRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoleRef(this);
		}
	}

	[RuleVersion(0)]
	public RoleRefContext roleRef() {
		RoleRefContext _localctx = new RoleRefContext(Context, State);
		EnterRule(_localctx, 1116, RULE_roleRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8128;
			roleIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PluginRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PluginRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pluginRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPluginRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPluginRef(this);
		}
	}

	[RuleVersion(0)]
	public PluginRefContext pluginRef() {
		PluginRefContext _localctx = new PluginRefContext(Context, State);
		EnterRule(_localctx, 1118, RULE_pluginRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8130;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public ComponentRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterComponentRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitComponentRef(this);
		}
	}

	[RuleVersion(0)]
	public ComponentRefContext componentRef() {
		ComponentRefContext _localctx = new ComponentRefContext(Context, State);
		EnterRule(_localctx, 1120, RULE_componentRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8132;
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceGroupRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ResourceGroupRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceGroupRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterResourceGroupRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitResourceGroupRef(this);
		}
	}

	[RuleVersion(0)]
	public ResourceGroupRefContext resourceGroupRef() {
		ResourceGroupRefContext _localctx = new ResourceGroupRefContext(Context, State);
		EnterRule(_localctx, 1122, RULE_resourceGroupRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8134;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public WindowNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWindowName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWindowName(this);
		}
	}

	[RuleVersion(0)]
	public WindowNameContext windowName() {
		WindowNameContext _localctx = new WindowNameContext(Context, State);
		EnterRule(_localctx, 1124, RULE_windowName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8136;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PureIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MySqlParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACK_TICK_QUOTED_ID() { return GetToken(MySqlParser.BACK_TICK_QUOTED_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_QUOTED_TEXT() { return GetToken(MySqlParser.DOUBLE_QUOTED_TEXT, 0); }
		public PureIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pureIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPureIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPureIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public PureIdentifierContext pureIdentifier() {
		PureIdentifierContext _localctx = new PureIdentifierContext(Context, State);
		EnterRule(_localctx, 1126, RULE_pureIdentifier);
		int _la;
		try {
			State = 8141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1083,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8138;
				_la = TokenStream.LA(1);
				if ( !(_la==IDENTIFIER || _la==BACK_TICK_QUOTED_ID) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8139;
				if (!(isSqlModeActive(MySqlMode.AnsiQuotes))) throw new FailedPredicateException(this, "isSqlModeActive(AnsiQuotes)");
				State = 8140;
				Match(DOUBLE_QUOTED_TEXT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PureIdentifierContext pureIdentifier() {
			return GetRuleContext<PureIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordContext identifierKeyword() {
			return GetRuleContext<IdentifierKeywordContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 1128, RULE_identifier);
		try {
			State = 8145;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1084,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8143;
				pureIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8144;
				identifierKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(Context, State);
		EnterRule(_localctx, 1130, RULE_identifierList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8147;
			identifier();
			State = 8152;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1085,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8148;
					Match(COMMA_SYMBOL);
					State = 8149;
					identifier();
					}
					} 
				}
				State = 8154;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1085,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListWithParenthesesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public IdentifierListWithParenthesesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierListWithParentheses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIdentifierListWithParentheses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIdentifierListWithParentheses(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListWithParenthesesContext identifierListWithParentheses() {
		IdentifierListWithParenthesesContext _localctx = new IdentifierListWithParenthesesContext(Context, State);
		EnterRule(_localctx, 1132, RULE_identifierListWithParentheses);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8155;
			Match(OPEN_PAR_SYMBOL);
			State = 8156;
			identifierList();
			State = 8157;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public QualifiedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterQualifiedIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitQualifiedIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIdentifierContext qualifiedIdentifier() {
		QualifiedIdentifierContext _localctx = new QualifiedIdentifierContext(Context, State);
		EnterRule(_localctx, 1134, RULE_qualifiedIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8159;
			identifier();
			State = 8161;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1086,Context) ) {
			case 1:
				{
				State = 8160;
				dotIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext[] dotIdentifier() {
			return GetRuleContexts<DotIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier(int i) {
			return GetRuleContext<DotIdentifierContext>(i);
		}
		public SimpleIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public SimpleIdentifierContext simpleIdentifier() {
		SimpleIdentifierContext _localctx = new SimpleIdentifierContext(Context, State);
		EnterRule(_localctx, 1136, RULE_simpleIdentifier);
		int _la;
		try {
			State = 8174;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1089,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8163;
				identifier();
				State = 8168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT_SYMBOL) {
					{
					State = 8164;
					dotIdentifier();
					State = 8166;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DOT_SYMBOL) {
						{
						State = 8165;
						dotIdentifier();
						}
					}

					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8170;
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				State = 8171;
				dotIdentifier();
				State = 8172;
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DotIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT_SYMBOL() { return GetToken(MySqlParser.DOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public DotIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dotIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDotIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDotIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public DotIdentifierContext dotIdentifier() {
		DotIdentifierContext _localctx = new DotIdentifierContext(Context, State);
		EnterRule(_localctx, 1138, RULE_dotIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8176;
			Match(DOT_SYMBOL);
			State = 8177;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ulong_numberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySqlParser.INT_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_NUMBER() { return GetToken(MySqlParser.HEX_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG_NUMBER() { return GetToken(MySqlParser.LONG_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ULONGLONG_NUMBER() { return GetToken(MySqlParser.ULONGLONG_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_NUMBER() { return GetToken(MySqlParser.DECIMAL_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_NUMBER() { return GetToken(MySqlParser.FLOAT_NUMBER, 0); }
		public Ulong_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ulong_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUlong_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUlong_number(this);
		}
	}

	[RuleVersion(0)]
	public Ulong_numberContext ulong_number() {
		Ulong_numberContext _localctx = new Ulong_numberContext(Context, State);
		EnterRule(_localctx, 1140, RULE_ulong_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8179;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 747)) & ~0x3f) == 0 && ((1L << (_la - 747)) & ((1L << (INT_NUMBER - 747)) | (1L << (LONG_NUMBER - 747)) | (1L << (ULONGLONG_NUMBER - 747)) | (1L << (HEX_NUMBER - 747)) | (1L << (DECIMAL_NUMBER - 747)) | (1L << (FLOAT_NUMBER - 747)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Real_ulong_numberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySqlParser.INT_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_NUMBER() { return GetToken(MySqlParser.HEX_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG_NUMBER() { return GetToken(MySqlParser.LONG_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ULONGLONG_NUMBER() { return GetToken(MySqlParser.ULONGLONG_NUMBER, 0); }
		public Real_ulong_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_real_ulong_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReal_ulong_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReal_ulong_number(this);
		}
	}

	[RuleVersion(0)]
	public Real_ulong_numberContext real_ulong_number() {
		Real_ulong_numberContext _localctx = new Real_ulong_numberContext(Context, State);
		EnterRule(_localctx, 1142, RULE_real_ulong_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8181;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 747)) & ~0x3f) == 0 && ((1L << (_la - 747)) & ((1L << (INT_NUMBER - 747)) | (1L << (LONG_NUMBER - 747)) | (1L << (ULONGLONG_NUMBER - 747)) | (1L << (HEX_NUMBER - 747)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ulonglong_numberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySqlParser.INT_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG_NUMBER() { return GetToken(MySqlParser.LONG_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ULONGLONG_NUMBER() { return GetToken(MySqlParser.ULONGLONG_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_NUMBER() { return GetToken(MySqlParser.DECIMAL_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_NUMBER() { return GetToken(MySqlParser.FLOAT_NUMBER, 0); }
		public Ulonglong_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ulonglong_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUlonglong_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUlonglong_number(this);
		}
	}

	[RuleVersion(0)]
	public Ulonglong_numberContext ulonglong_number() {
		Ulonglong_numberContext _localctx = new Ulonglong_numberContext(Context, State);
		EnterRule(_localctx, 1144, RULE_ulonglong_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8183;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 747)) & ~0x3f) == 0 && ((1L << (_la - 747)) & ((1L << (INT_NUMBER - 747)) | (1L << (LONG_NUMBER - 747)) | (1L << (ULONGLONG_NUMBER - 747)) | (1L << (DECIMAL_NUMBER - 747)) | (1L << (FLOAT_NUMBER - 747)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Real_ulonglong_numberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySqlParser.INT_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_NUMBER() { return GetToken(MySqlParser.HEX_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ULONGLONG_NUMBER() { return GetToken(MySqlParser.ULONGLONG_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG_NUMBER() { return GetToken(MySqlParser.LONG_NUMBER, 0); }
		public Real_ulonglong_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_real_ulonglong_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReal_ulonglong_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReal_ulonglong_number(this);
		}
	}

	[RuleVersion(0)]
	public Real_ulonglong_numberContext real_ulonglong_number() {
		Real_ulonglong_numberContext _localctx = new Real_ulonglong_numberContext(Context, State);
		EnterRule(_localctx, 1146, RULE_real_ulonglong_number);
		try {
			State = 8190;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1090,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8185;
				Match(INT_NUMBER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8186;
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				State = 8187;
				Match(HEX_NUMBER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8188;
				Match(ULONGLONG_NUMBER);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8189;
				Match(LONG_NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumLiteralContext numLiteral() {
			return GetRuleContext<NumLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemporalLiteralContext temporalLiteral() {
			return GetRuleContext<TemporalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolLiteralContext boolLiteral() {
			return GetRuleContext<BoolLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_NUMBER() { return GetToken(MySqlParser.HEX_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN_NUMBER() { return GetToken(MySqlParser.BIN_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDERSCORE_CHARSET() { return GetToken(MySqlParser.UNDERSCORE_CHARSET, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 1148, RULE_literal);
		int _la;
		try {
			State = 8201;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1092,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8192;
				textLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8193;
				numLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8194;
				temporalLiteral();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8195;
				nullLiteral();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8196;
				boolLiteral();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNDERSCORE_CHARSET) {
					{
					State = 8197;
					Match(UNDERSCORE_CHARSET);
					}
				}

				State = 8200;
				_la = TokenStream.LA(1);
				if ( !(_la==HEX_NUMBER || _la==BIN_NUMBER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_OPERATOR() { return GetToken(MySqlParser.PLUS_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_OPERATOR() { return GetToken(MySqlParser.MINUS_OPERATOR, 0); }
		public SignedLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSignedLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSignedLiteral(this);
		}
	}

	[RuleVersion(0)]
	public SignedLiteralContext signedLiteral() {
		SignedLiteralContext _localctx = new SignedLiteralContext(Context, State);
		EnterRule(_localctx, 1150, RULE_signedLiteral);
		try {
			State = 8208;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1093,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8203;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8204;
				Match(PLUS_OPERATOR);
				State = 8205;
				ulong_number();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8206;
				Match(MINUS_OPERATOR);
				State = 8207;
				ulong_number();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext[] textString() {
			return GetRuleContexts<TextStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString(int i) {
			return GetRuleContext<TextStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public StringListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStringList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStringList(this);
		}
	}

	[RuleVersion(0)]
	public StringListContext stringList() {
		StringListContext _localctx = new StringListContext(Context, State);
		EnterRule(_localctx, 1152, RULE_stringList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8210;
			Match(OPEN_PAR_SYMBOL);
			State = 8211;
			textString();
			State = 8216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 8212;
				Match(COMMA_SYMBOL);
				State = 8213;
				textString();
				}
				}
				State = 8218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 8219;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextStringLiteralContext : ParserRuleContext {
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_QUOTED_TEXT() { return GetToken(MySqlParser.SINGLE_QUOTED_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_QUOTED_TEXT() { return GetToken(MySqlParser.DOUBLE_QUOTED_TEXT, 0); }
		public TextStringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textStringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTextStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTextStringLiteral(this);
		}
	}

	[RuleVersion(0)]
	public TextStringLiteralContext textStringLiteral() {
		TextStringLiteralContext _localctx = new TextStringLiteralContext(Context, State);
		EnterRule(_localctx, 1154, RULE_textStringLiteral);
		try {
			State = 8224;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1095,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8221;
				_localctx.value = Match(SINGLE_QUOTED_TEXT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8222;
				if (!(!isSqlModeActive(MySqlMode.AnsiQuotes))) throw new FailedPredicateException(this, "!isSqlModeActive(AnsiQuotes)");
				State = 8223;
				_localctx.value = Match(DOUBLE_QUOTED_TEXT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_NUMBER() { return GetToken(MySqlParser.HEX_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN_NUMBER() { return GetToken(MySqlParser.BIN_NUMBER, 0); }
		public TextStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTextString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTextString(this);
		}
	}

	[RuleVersion(0)]
	public TextStringContext textString() {
		TextStringContext _localctx = new TextStringContext(Context, State);
		EnterRule(_localctx, 1156, RULE_textString);
		try {
			State = 8229;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1096,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8226;
				textStringLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8227;
				Match(HEX_NUMBER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8228;
				Match(BIN_NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextStringHashContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_NUMBER() { return GetToken(MySqlParser.HEX_NUMBER, 0); }
		public TextStringHashContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textStringHash; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTextStringHash(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTextStringHash(this);
		}
	}

	[RuleVersion(0)]
	public TextStringHashContext textStringHash() {
		TextStringHashContext _localctx = new TextStringHashContext(Context, State);
		EnterRule(_localctx, 1158, RULE_textStringHash);
		try {
			State = 8234;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1097,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8231;
				textStringLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8232;
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				State = 8233;
				Match(HEX_NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext[] textStringLiteral() {
			return GetRuleContexts<TextStringLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral(int i) {
			return GetRuleContext<TextStringLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR_TEXT() { return GetToken(MySqlParser.NCHAR_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDERSCORE_CHARSET() { return GetToken(MySqlParser.UNDERSCORE_CHARSET, 0); }
		public TextLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTextLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTextLiteral(this);
		}
	}

	[RuleVersion(0)]
	public TextLiteralContext textLiteral() {
		TextLiteralContext _localctx = new TextLiteralContext(Context, State);
		EnterRule(_localctx, 1160, RULE_textLiteral);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8241;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1099,Context) ) {
			case 1:
				{
				State = 8237;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1098,Context) ) {
				case 1:
					{
					State = 8236;
					Match(UNDERSCORE_CHARSET);
					}
					break;
				}
				State = 8239;
				textStringLiteral();
				}
				break;
			case 2:
				{
				State = 8240;
				Match(NCHAR_TEXT);
				}
				break;
			}
			State = 8246;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1100,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8243;
					textStringLiteral();
					}
					} 
				}
				State = 8248;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1100,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextStringNoLinebreakContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public TextStringNoLinebreakContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textStringNoLinebreak; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTextStringNoLinebreak(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTextStringNoLinebreak(this);
		}
	}

	[RuleVersion(0)]
	public TextStringNoLinebreakContext textStringNoLinebreak() {
		TextStringNoLinebreakContext _localctx = new TextStringNoLinebreakContext(Context, State);
		EnterRule(_localctx, 1162, RULE_textStringNoLinebreak);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8249;
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextStringLiteralListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext[] textStringLiteral() {
			return GetRuleContexts<TextStringLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral(int i) {
			return GetRuleContext<TextStringLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public TextStringLiteralListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textStringLiteralList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTextStringLiteralList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTextStringLiteralList(this);
		}
	}

	[RuleVersion(0)]
	public TextStringLiteralListContext textStringLiteralList() {
		TextStringLiteralListContext _localctx = new TextStringLiteralListContext(Context, State);
		EnterRule(_localctx, 1164, RULE_textStringLiteralList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8251;
			textStringLiteral();
			State = 8256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 8252;
				Match(COMMA_SYMBOL);
				State = 8253;
				textStringLiteral();
				}
				}
				State = 8258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySqlParser.INT_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG_NUMBER() { return GetToken(MySqlParser.LONG_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ULONGLONG_NUMBER() { return GetToken(MySqlParser.ULONGLONG_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_NUMBER() { return GetToken(MySqlParser.DECIMAL_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_NUMBER() { return GetToken(MySqlParser.FLOAT_NUMBER, 0); }
		public NumLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNumLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNumLiteral(this);
		}
	}

	[RuleVersion(0)]
	public NumLiteralContext numLiteral() {
		NumLiteralContext _localctx = new NumLiteralContext(Context, State);
		EnterRule(_localctx, 1166, RULE_numLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8259;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 747)) & ~0x3f) == 0 && ((1L << (_la - 747)) & ((1L << (INT_NUMBER - 747)) | (1L << (LONG_NUMBER - 747)) | (1L << (ULONGLONG_NUMBER - 747)) | (1L << (DECIMAL_NUMBER - 747)) | (1L << (FLOAT_NUMBER - 747)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE_SYMBOL() { return GetToken(MySqlParser.TRUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE_SYMBOL() { return GetToken(MySqlParser.FALSE_SYMBOL, 0); }
		public BoolLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterBoolLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitBoolLiteral(this);
		}
	}

	[RuleVersion(0)]
	public BoolLiteralContext boolLiteral() {
		BoolLiteralContext _localctx = new BoolLiteralContext(Context, State);
		EnterRule(_localctx, 1168, RULE_boolLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8261;
			_la = TokenStream.LA(1);
			if ( !(_la==FALSE_SYMBOL || _la==TRUE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_SYMBOL() { return GetToken(MySqlParser.NULL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL2_SYMBOL() { return GetToken(MySqlParser.NULL2_SYMBOL, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
	}

	[RuleVersion(0)]
	public NullLiteralContext nullLiteral() {
		NullLiteralContext _localctx = new NullLiteralContext(Context, State);
		EnterRule(_localctx, 1170, RULE_nullLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8263;
			_la = TokenStream.LA(1);
			if ( !(_la==NULL_SYMBOL || _la==NULL2_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemporalLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_SYMBOL() { return GetToken(MySqlParser.DATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_QUOTED_TEXT() { return GetToken(MySqlParser.SINGLE_QUOTED_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_SYMBOL() { return GetToken(MySqlParser.TIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP_SYMBOL() { return GetToken(MySqlParser.TIMESTAMP_SYMBOL, 0); }
		public TemporalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_temporalLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTemporalLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTemporalLiteral(this);
		}
	}

	[RuleVersion(0)]
	public TemporalLiteralContext temporalLiteral() {
		TemporalLiteralContext _localctx = new TemporalLiteralContext(Context, State);
		EnterRule(_localctx, 1172, RULE_temporalLiteral);
		try {
			State = 8271;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DATE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8265;
				Match(DATE_SYMBOL);
				State = 8266;
				Match(SINGLE_QUOTED_TEXT);
				}
				break;
			case TIME_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8267;
				Match(TIME_SYMBOL);
				State = 8268;
				Match(SINGLE_QUOTED_TEXT);
				}
				break;
			case TIMESTAMP_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8269;
				Match(TIMESTAMP_SYMBOL);
				State = 8270;
				Match(SINGLE_QUOTED_TEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrecisionContext precision() {
			return GetRuleContext<PrecisionContext>(0);
		}
		public FloatOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFloatOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFloatOptions(this);
		}
	}

	[RuleVersion(0)]
	public FloatOptionsContext floatOptions() {
		FloatOptionsContext _localctx = new FloatOptionsContext(Context, State);
		EnterRule(_localctx, 1174, RULE_floatOptions);
		try {
			State = 8275;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1103,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8273;
				fieldLength();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8274;
				precision();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StandardFloatOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrecisionContext precision() {
			return GetRuleContext<PrecisionContext>(0);
		}
		public StandardFloatOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standardFloatOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStandardFloatOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStandardFloatOptions(this);
		}
	}

	[RuleVersion(0)]
	public StandardFloatOptionsContext standardFloatOptions() {
		StandardFloatOptionsContext _localctx = new StandardFloatOptionsContext(Context, State);
		EnterRule(_localctx, 1176, RULE_standardFloatOptions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8277;
			precision();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrecisionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT_NUMBER() { return GetTokens(MySqlParser.INT_NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER(int i) {
			return GetToken(MySqlParser.INT_NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL() { return GetToken(MySqlParser.COMMA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public PrecisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precision; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPrecision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPrecision(this);
		}
	}

	[RuleVersion(0)]
	public PrecisionContext precision() {
		PrecisionContext _localctx = new PrecisionContext(Context, State);
		EnterRule(_localctx, 1178, RULE_precision);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8279;
			Match(OPEN_PAR_SYMBOL);
			State = 8280;
			Match(INT_NUMBER);
			State = 8281;
			Match(COMMA_SYMBOL);
			State = 8282;
			Match(INT_NUMBER);
			State = 8283;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextOrIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public TextOrIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textOrIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTextOrIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTextOrIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public TextOrIdentifierContext textOrIdentifier() {
		TextOrIdentifierContext _localctx = new TextOrIdentifierContext(Context, State);
		EnterRule(_localctx, 1180, RULE_textOrIdentifier);
		try {
			State = 8287;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1104,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8285;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8286;
				textStringLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LValueIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PureIdentifierContext pureIdentifier() {
			return GetRuleContext<PureIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LValueKeywordContext lValueKeyword() {
			return GetRuleContext<LValueKeywordContext>(0);
		}
		public LValueIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lValueIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLValueIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLValueIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public LValueIdentifierContext lValueIdentifier() {
		LValueIdentifierContext _localctx = new LValueIdentifierContext(Context, State);
		EnterRule(_localctx, 1182, RULE_lValueIdentifier);
		try {
			State = 8291;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1105,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8289;
				pureIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8290;
				lValueKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleIdentifierOrTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RoleIdentifierContext roleIdentifier() {
			return GetRuleContext<RoleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public RoleIdentifierOrTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleIdentifierOrText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoleIdentifierOrText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoleIdentifierOrText(this);
		}
	}

	[RuleVersion(0)]
	public RoleIdentifierOrTextContext roleIdentifierOrText() {
		RoleIdentifierOrTextContext _localctx = new RoleIdentifierOrTextContext(Context, State);
		EnterRule(_localctx, 1184, RULE_roleIdentifierOrText);
		try {
			State = 8295;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1106,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8293;
				roleIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8294;
				textStringLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SizeNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulonglong_numberContext real_ulonglong_number() {
			return GetRuleContext<Real_ulonglong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PureIdentifierContext pureIdentifier() {
			return GetRuleContext<PureIdentifierContext>(0);
		}
		public SizeNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sizeNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSizeNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSizeNumber(this);
		}
	}

	[RuleVersion(0)]
	public SizeNumberContext sizeNumber() {
		SizeNumberContext _localctx = new SizeNumberContext(Context, State);
		EnterRule(_localctx, 1186, RULE_sizeNumber);
		try {
			State = 8299;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1107,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8297;
				real_ulonglong_number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8298;
				pureIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public ParenthesesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parentheses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterParentheses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitParentheses(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesesContext parentheses() {
		ParenthesesContext _localctx = new ParenthesesContext(Context, State);
		EnterRule(_localctx, 1188, RULE_parentheses);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8301;
			Match(OPEN_PAR_SYMBOL);
			State = 8302;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OPERATOR() { return GetToken(MySqlParser.ASSIGN_OPERATOR, 0); }
		public EqualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterEqual(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitEqual(this);
		}
	}

	[RuleVersion(0)]
	public EqualContext equal() {
		EqualContext _localctx = new EqualContext(Context, State);
		EnterRule(_localctx, 1190, RULE_equal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8304;
			_la = TokenStream.LA(1);
			if ( !(_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERSIST_SYMBOL() { return GetToken(MySqlParser.PERSIST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERSIST_ONLY_SYMBOL() { return GetToken(MySqlParser.PERSIST_ONLY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL_SYMBOL() { return GetToken(MySqlParser.GLOBAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySqlParser.LOCAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_SYMBOL() { return GetToken(MySqlParser.SESSION_SYMBOL, 0); }
		public OptionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOptionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOptionType(this);
		}
	}

	[RuleVersion(0)]
	public OptionTypeContext optionType() {
		OptionTypeContext _localctx = new OptionTypeContext(Context, State);
		EnterRule(_localctx, 1192, RULE_optionType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8306;
			_la = TokenStream.LA(1);
			if ( !(_la==GLOBAL_SYMBOL || _la==LOCAL_SYMBOL || _la==SESSION_SYMBOL || _la==PERSIST_SYMBOL || _la==PERSIST_ONLY_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarIdentTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL_SYMBOL() { return GetToken(MySqlParser.GLOBAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT_SYMBOL() { return GetToken(MySqlParser.DOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySqlParser.LOCAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_SYMBOL() { return GetToken(MySqlParser.SESSION_SYMBOL, 0); }
		public VarIdentTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varIdentType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterVarIdentType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitVarIdentType(this);
		}
	}

	[RuleVersion(0)]
	public VarIdentTypeContext varIdentType() {
		VarIdentTypeContext _localctx = new VarIdentTypeContext(Context, State);
		EnterRule(_localctx, 1194, RULE_varIdentType);
		try {
			State = 8314;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GLOBAL_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8308;
				Match(GLOBAL_SYMBOL);
				State = 8309;
				Match(DOT_SYMBOL);
				}
				break;
			case LOCAL_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8310;
				Match(LOCAL_SYMBOL);
				State = 8311;
				Match(DOT_SYMBOL);
				}
				break;
			case SESSION_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8312;
				Match(SESSION_SYMBOL);
				State = 8313;
				Match(DOT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetVarIdentTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERSIST_SYMBOL() { return GetToken(MySqlParser.PERSIST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT_SYMBOL() { return GetToken(MySqlParser.DOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERSIST_ONLY_SYMBOL() { return GetToken(MySqlParser.PERSIST_ONLY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL_SYMBOL() { return GetToken(MySqlParser.GLOBAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySqlParser.LOCAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_SYMBOL() { return GetToken(MySqlParser.SESSION_SYMBOL, 0); }
		public SetVarIdentTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setVarIdentType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetVarIdentType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetVarIdentType(this);
		}
	}

	[RuleVersion(0)]
	public SetVarIdentTypeContext setVarIdentType() {
		SetVarIdentTypeContext _localctx = new SetVarIdentTypeContext(Context, State);
		EnterRule(_localctx, 1196, RULE_setVarIdentType);
		try {
			State = 8326;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PERSIST_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8316;
				Match(PERSIST_SYMBOL);
				State = 8317;
				Match(DOT_SYMBOL);
				}
				break;
			case PERSIST_ONLY_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8318;
				Match(PERSIST_ONLY_SYMBOL);
				State = 8319;
				Match(DOT_SYMBOL);
				}
				break;
			case GLOBAL_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8320;
				Match(GLOBAL_SYMBOL);
				State = 8321;
				Match(DOT_SYMBOL);
				}
				break;
			case LOCAL_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8322;
				Match(LOCAL_SYMBOL);
				State = 8323;
				Match(DOT_SYMBOL);
				}
				break;
			case SESSION_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8324;
				Match(SESSION_SYMBOL);
				State = 8325;
				Match(DOT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierKeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelKeywordContext labelKeyword() {
			return GetRuleContext<LabelKeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoleOrIdentifierKeywordContext roleOrIdentifierKeyword() {
			return GetRuleContext<RoleOrIdentifierKeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE_SYMBOL() { return GetToken(MySqlParser.EXECUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHUTDOWN_SYMBOL() { return GetToken(MySqlParser.SHUTDOWN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART_SYMBOL() { return GetToken(MySqlParser.RESTART_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
			return GetRuleContext<IdentifierKeywordsUnambiguousContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsAmbiguous1RolesAndLabelsContext identifierKeywordsAmbiguous1RolesAndLabels() {
			return GetRuleContext<IdentifierKeywordsAmbiguous1RolesAndLabelsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsAmbiguous2LabelsContext identifierKeywordsAmbiguous2Labels() {
			return GetRuleContext<IdentifierKeywordsAmbiguous2LabelsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsAmbiguous3RolesContext identifierKeywordsAmbiguous3Roles() {
			return GetRuleContext<IdentifierKeywordsAmbiguous3RolesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsAmbiguous4SystemVariablesContext identifierKeywordsAmbiguous4SystemVariables() {
			return GetRuleContext<IdentifierKeywordsAmbiguous4SystemVariablesContext>(0);
		}
		public IdentifierKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierKeyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIdentifierKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIdentifierKeyword(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierKeywordContext identifierKeyword() {
		IdentifierKeywordContext _localctx = new IdentifierKeywordContext(Context, State);
		EnterRule(_localctx, 1198, RULE_identifierKeyword);
		try {
			State = 8345;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1112,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8328;
				if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
				State = 8336;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1110,Context) ) {
				case 1:
					{
					State = 8329;
					labelKeyword();
					}
					break;
				case 2:
					{
					State = 8330;
					roleOrIdentifierKeyword();
					}
					break;
				case 3:
					{
					State = 8331;
					Match(EXECUTE_SYMBOL);
					}
					break;
				case 4:
					{
					State = 8332;
					if (!(serverVersion >= 50709)) throw new FailedPredicateException(this, "serverVersion >= 50709");
					State = 8333;
					Match(SHUTDOWN_SYMBOL);
					}
					break;
				case 5:
					{
					State = 8334;
					if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
					State = 8335;
					Match(RESTART_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8343;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1111,Context) ) {
				case 1:
					{
					State = 8338;
					identifierKeywordsUnambiguous();
					}
					break;
				case 2:
					{
					State = 8339;
					identifierKeywordsAmbiguous1RolesAndLabels();
					}
					break;
				case 3:
					{
					State = 8340;
					identifierKeywordsAmbiguous2Labels();
					}
					break;
				case 4:
					{
					State = 8341;
					identifierKeywordsAmbiguous3Roles();
					}
					break;
				case 5:
					{
					State = 8342;
					identifierKeywordsAmbiguous4SystemVariables();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierKeywordsAmbiguous1RolesAndLabelsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE_SYMBOL() { return GetToken(MySqlParser.EXECUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART_SYMBOL() { return GetToken(MySqlParser.RESTART_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHUTDOWN_SYMBOL() { return GetToken(MySqlParser.SHUTDOWN_SYMBOL, 0); }
		public IdentifierKeywordsAmbiguous1RolesAndLabelsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierKeywordsAmbiguous1RolesAndLabels; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIdentifierKeywordsAmbiguous1RolesAndLabels(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIdentifierKeywordsAmbiguous1RolesAndLabels(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierKeywordsAmbiguous1RolesAndLabelsContext identifierKeywordsAmbiguous1RolesAndLabels() {
		IdentifierKeywordsAmbiguous1RolesAndLabelsContext _localctx = new IdentifierKeywordsAmbiguous1RolesAndLabelsContext(Context, State);
		EnterRule(_localctx, 1200, RULE_identifierKeywordsAmbiguous1RolesAndLabels);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8347;
			_la = TokenStream.LA(1);
			if ( !(_la==EXECUTE_SYMBOL || _la==SHUTDOWN_SYMBOL || _la==RESTART_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierKeywordsAmbiguous2LabelsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASCII_SYMBOL() { return GetToken(MySqlParser.ASCII_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_SYMBOL() { return GetToken(MySqlParser.BEGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE_SYMBOL() { return GetToken(MySqlParser.BYTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE_SYMBOL() { return GetToken(MySqlParser.CACHE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSET_SYMBOL() { return GetToken(MySqlParser.CHARSET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM_SYMBOL() { return GetToken(MySqlParser.CHECKSUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLONE_SYMBOL() { return GetToken(MySqlParser.CLONE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySqlParser.COMMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT_SYMBOL() { return GetToken(MySqlParser.COMMIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS_SYMBOL() { return GetToken(MySqlParser.CONTAINS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEALLOCATE_SYMBOL() { return GetToken(MySqlParser.DEALLOCATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO_SYMBOL() { return GetToken(MySqlParser.DO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_SYMBOL() { return GetToken(MySqlParser.END_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH_SYMBOL() { return GetToken(MySqlParser.FLUSH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWS_SYMBOL() { return GetToken(MySqlParser.FOLLOWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER_SYMBOL() { return GetToken(MySqlParser.HANDLER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HELP_SYMBOL() { return GetToken(MySqlParser.HELP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT_SYMBOL() { return GetToken(MySqlParser.IMPORT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTALL_SYMBOL() { return GetToken(MySqlParser.INSTALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE_SYMBOL() { return GetToken(MySqlParser.LANGUAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_SYMBOL() { return GetToken(MySqlParser.NO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDES_SYMBOL() { return GetToken(MySqlParser.PRECEDES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE_SYMBOL() { return GetToken(MySqlParser.PREPARE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPAIR_SYMBOL() { return GetToken(MySqlParser.REPAIR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET_SYMBOL() { return GetToken(MySqlParser.RESET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK_SYMBOL() { return GetToken(MySqlParser.ROLLBACK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT_SYMBOL() { return GetToken(MySqlParser.SAVEPOINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNED_SYMBOL() { return GetToken(MySqlParser.SIGNED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE_SYMBOL() { return GetToken(MySqlParser.SLAVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_SYMBOL() { return GetToken(MySqlParser.START_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP_SYMBOL() { return GetToken(MySqlParser.STOP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE_SYMBOL() { return GetToken(MySqlParser.TRUNCATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNICODE_SYMBOL() { return GetToken(MySqlParser.UNICODE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNINSTALL_SYMBOL() { return GetToken(MySqlParser.UNINSTALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA_SYMBOL() { return GetToken(MySqlParser.XA_SYMBOL, 0); }
		public IdentifierKeywordsAmbiguous2LabelsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierKeywordsAmbiguous2Labels; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIdentifierKeywordsAmbiguous2Labels(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIdentifierKeywordsAmbiguous2Labels(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierKeywordsAmbiguous2LabelsContext identifierKeywordsAmbiguous2Labels() {
		IdentifierKeywordsAmbiguous2LabelsContext _localctx = new IdentifierKeywordsAmbiguous2LabelsContext(Context, State);
		EnterRule(_localctx, 1202, RULE_identifierKeywordsAmbiguous2Labels);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8349;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASCII_SYMBOL) | (1L << BEGIN_SYMBOL) | (1L << BYTE_SYMBOL) | (1L << CACHE_SYMBOL) | (1L << CHARSET_SYMBOL) | (1L << CHECKSUM_SYMBOL))) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (COMMENT_SYMBOL - 75)) | (1L << (COMMIT_SYMBOL - 75)) | (1L << (CONTAINS_SYMBOL - 75)) | (1L << (DEALLOCATE_SYMBOL - 75)))) != 0) || ((((_la - 147)) & ~0x3f) == 0 && ((1L << (_la - 147)) & ((1L << (DO_SYMBOL - 147)) | (1L << (END_SYMBOL - 147)) | (1L << (FLUSH_SYMBOL - 147)) | (1L << (FOLLOWS_SYMBOL - 147)))) != 0) || ((((_la - 219)) & ~0x3f) == 0 && ((1L << (_la - 219)) & ((1L << (HANDLER_SYMBOL - 219)) | (1L << (HELP_SYMBOL - 219)) | (1L << (IMPORT_SYMBOL - 219)) | (1L << (INSTALL_SYMBOL - 219)) | (1L << (LANGUAGE_SYMBOL - 219)))) != 0) || ((((_la - 373)) & ~0x3f) == 0 && ((1L << (_la - 373)) & ((1L << (NO_SYMBOL - 373)) | (1L << (PRECEDES_SYMBOL - 373)) | (1L << (PREPARE_SYMBOL - 373)))) != 0) || ((((_la - 455)) & ~0x3f) == 0 && ((1L << (_la - 455)) & ((1L << (REPAIR_SYMBOL - 455)) | (1L << (RESET_SYMBOL - 455)) | (1L << (ROLLBACK_SYMBOL - 455)) | (1L << (SAVEPOINT_SYMBOL - 455)) | (1L << (SIGNED_SYMBOL - 455)) | (1L << (SLAVE_SYMBOL - 455)))) != 0) || ((((_la - 543)) & ~0x3f) == 0 && ((1L << (_la - 543)) & ((1L << (START_SYMBOL - 543)) | (1L << (STOP_SYMBOL - 543)) | (1L << (TRUNCATE_SYMBOL - 543)) | (1L << (UNICODE_SYMBOL - 543)))) != 0) || _la==UNINSTALL_SYMBOL || _la==XA_SYMBOL || _la==CLONE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelKeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RoleOrLabelKeywordContext roleOrLabelKeyword() {
			return GetRuleContext<RoleOrLabelKeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT_SYMBOL() { return GetToken(MySqlParser.EVENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE_SYMBOL() { return GetToken(MySqlParser.FILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE_SYMBOL() { return GetToken(MySqlParser.NONE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESS_SYMBOL() { return GetToken(MySqlParser.PROCESS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROXY_SYMBOL() { return GetToken(MySqlParser.PROXY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELOAD_SYMBOL() { return GetToken(MySqlParser.RELOAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_SYMBOL() { return GetToken(MySqlParser.REPLICATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_SYMBOL() { return GetToken(MySqlParser.RESOURCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER_SYMBOL() { return GetToken(MySqlParser.SUPER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
			return GetRuleContext<IdentifierKeywordsUnambiguousContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsAmbiguous3RolesContext identifierKeywordsAmbiguous3Roles() {
			return GetRuleContext<IdentifierKeywordsAmbiguous3RolesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsAmbiguous4SystemVariablesContext identifierKeywordsAmbiguous4SystemVariables() {
			return GetRuleContext<IdentifierKeywordsAmbiguous4SystemVariablesContext>(0);
		}
		public LabelKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelKeyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLabelKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLabelKeyword(this);
		}
	}

	[RuleVersion(0)]
	public LabelKeywordContext labelKeyword() {
		LabelKeywordContext _localctx = new LabelKeywordContext(Context, State);
		EnterRule(_localctx, 1204, RULE_labelKeyword);
		try {
			State = 8369;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1115,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8351;
				if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
				State = 8362;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1113,Context) ) {
				case 1:
					{
					State = 8352;
					roleOrLabelKeyword();
					}
					break;
				case 2:
					{
					State = 8353;
					Match(EVENT_SYMBOL);
					}
					break;
				case 3:
					{
					State = 8354;
					Match(FILE_SYMBOL);
					}
					break;
				case 4:
					{
					State = 8355;
					Match(NONE_SYMBOL);
					}
					break;
				case 5:
					{
					State = 8356;
					Match(PROCESS_SYMBOL);
					}
					break;
				case 6:
					{
					State = 8357;
					Match(PROXY_SYMBOL);
					}
					break;
				case 7:
					{
					State = 8358;
					Match(RELOAD_SYMBOL);
					}
					break;
				case 8:
					{
					State = 8359;
					Match(REPLICATION_SYMBOL);
					}
					break;
				case 9:
					{
					State = 8360;
					Match(RESOURCE_SYMBOL);
					}
					break;
				case 10:
					{
					State = 8361;
					Match(SUPER_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8367;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1114,Context) ) {
				case 1:
					{
					State = 8364;
					identifierKeywordsUnambiguous();
					}
					break;
				case 2:
					{
					State = 8365;
					identifierKeywordsAmbiguous3Roles();
					}
					break;
				case 3:
					{
					State = 8366;
					identifierKeywordsAmbiguous4SystemVariables();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierKeywordsAmbiguous3RolesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT_SYMBOL() { return GetToken(MySqlParser.EVENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE_SYMBOL() { return GetToken(MySqlParser.FILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE_SYMBOL() { return GetToken(MySqlParser.NONE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESS_SYMBOL() { return GetToken(MySqlParser.PROCESS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROXY_SYMBOL() { return GetToken(MySqlParser.PROXY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELOAD_SYMBOL() { return GetToken(MySqlParser.RELOAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_SYMBOL() { return GetToken(MySqlParser.REPLICATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_SYMBOL() { return GetToken(MySqlParser.RESOURCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER_SYMBOL() { return GetToken(MySqlParser.SUPER_SYMBOL, 0); }
		public IdentifierKeywordsAmbiguous3RolesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierKeywordsAmbiguous3Roles; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIdentifierKeywordsAmbiguous3Roles(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIdentifierKeywordsAmbiguous3Roles(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierKeywordsAmbiguous3RolesContext identifierKeywordsAmbiguous3Roles() {
		IdentifierKeywordsAmbiguous3RolesContext _localctx = new IdentifierKeywordsAmbiguous3RolesContext(Context, State);
		EnterRule(_localctx, 1206, RULE_identifierKeywordsAmbiguous3Roles);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8371;
			_la = TokenStream.LA(1);
			if ( !(_la==EVENT_SYMBOL || _la==FILE_SYMBOL || ((((_la - 369)) & ~0x3f) == 0 && ((1L << (_la - 369)) & ((1L << (NONE_SYMBOL - 369)) | (1L << (PROCESS_SYMBOL - 369)) | (1L << (PROXY_SYMBOL - 369)))) != 0) || _la==RELOAD_SYMBOL || _la==REPLICATION_SYMBOL || _la==SUPER_SYMBOL || _la==RESOURCE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierKeywordsUnambiguousContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION_SYMBOL() { return GetToken(MySqlParser.ACTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCOUNT_SYMBOL() { return GetToken(MySqlParser.ACCOUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTIVE_SYMBOL() { return GetToken(MySqlParser.ACTIVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDDATE_SYMBOL() { return GetToken(MySqlParser.ADDDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN_SYMBOL() { return GetToken(MySqlParser.ADMIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER_SYMBOL() { return GetToken(MySqlParser.AFTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGAINST_SYMBOL() { return GetToken(MySqlParser.AGAINST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE_SYMBOL() { return GetToken(MySqlParser.AGGREGATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM_SYMBOL() { return GetToken(MySqlParser.ALGORITHM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALWAYS_SYMBOL() { return GetToken(MySqlParser.ALWAYS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY_SYMBOL() { return GetToken(MySqlParser.ANY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SYMBOL() { return GetToken(MySqlParser.AT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOEXTEND_SIZE_SYMBOL() { return GetToken(MySqlParser.AUTOEXTEND_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_INCREMENT_SYMBOL() { return GetToken(MySqlParser.AUTO_INCREMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG_ROW_LENGTH_SYMBOL() { return GetToken(MySqlParser.AVG_ROW_LENGTH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG_SYMBOL() { return GetToken(MySqlParser.AVG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKUP_SYMBOL() { return GetToken(MySqlParser.BACKUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_SYMBOL() { return GetToken(MySqlParser.BINLOG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_SYMBOL() { return GetToken(MySqlParser.BIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK_SYMBOL() { return GetToken(MySqlParser.BLOCK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_SYMBOL() { return GetToken(MySqlParser.BOOLEAN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_SYMBOL() { return GetToken(MySqlParser.BOOL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BTREE_SYMBOL() { return GetToken(MySqlParser.BTREE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUCKETS_SYMBOL() { return GetToken(MySqlParser.BUCKETS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADED_SYMBOL() { return GetToken(MySqlParser.CASCADED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG_NAME_SYMBOL() { return GetToken(MySqlParser.CATALOG_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN_SYMBOL() { return GetToken(MySqlParser.CHAIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGED_SYMBOL() { return GetToken(MySqlParser.CHANGED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANNEL_SYMBOL() { return GetToken(MySqlParser.CHANNEL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CIPHER_SYMBOL() { return GetToken(MySqlParser.CIPHER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS_ORIGIN_SYMBOL() { return GetToken(MySqlParser.CLASS_ORIGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLIENT_SYMBOL() { return GetToken(MySqlParser.CLIENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_SYMBOL() { return GetToken(MySqlParser.CLOSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE_SYMBOL() { return GetToken(MySqlParser.COALESCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODE_SYMBOL() { return GetToken(MySqlParser.CODE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION_SYMBOL() { return GetToken(MySqlParser.COLLATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS_SYMBOL() { return GetToken(MySqlParser.COLUMNS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_FORMAT_SYMBOL() { return GetToken(MySqlParser.COLUMN_FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_NAME_SYMBOL() { return GetToken(MySqlParser.COLUMN_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMITTED_SYMBOL() { return GetToken(MySqlParser.COMMITTED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPACT_SYMBOL() { return GetToken(MySqlParser.COMPACT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPLETION_SYMBOL() { return GetToken(MySqlParser.COMPLETION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPONENT_SYMBOL() { return GetToken(MySqlParser.COMPONENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSED_SYMBOL() { return GetToken(MySqlParser.COMPRESSED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSION_SYMBOL() { return GetToken(MySqlParser.COMPRESSION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENT_SYMBOL() { return GetToken(MySqlParser.CONCURRENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION_SYMBOL() { return GetToken(MySqlParser.CONNECTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSISTENT_SYMBOL() { return GetToken(MySqlParser.CONSISTENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_CATALOG_SYMBOL() { return GetToken(MySqlParser.CONSTRAINT_CATALOG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_NAME_SYMBOL() { return GetToken(MySqlParser.CONSTRAINT_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_SCHEMA_SYMBOL() { return GetToken(MySqlParser.CONSTRAINT_SCHEMA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTEXT_SYMBOL() { return GetToken(MySqlParser.CONTEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPU_SYMBOL() { return GetToken(MySqlParser.CPU_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_SYMBOL() { return GetToken(MySqlParser.CURRENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR_NAME_SYMBOL() { return GetToken(MySqlParser.CURSOR_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATAFILE_SYMBOL() { return GetToken(MySqlParser.DATAFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_SYMBOL() { return GetToken(MySqlParser.DATA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME_SYMBOL() { return GetToken(MySqlParser.DATETIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_SYMBOL() { return GetToken(MySqlParser.DATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_SYMBOL() { return GetToken(MySqlParser.DAY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_AUTH_SYMBOL() { return GetToken(MySqlParser.DEFAULT_AUTH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER_SYMBOL() { return GetToken(MySqlParser.DEFINER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINITION_SYMBOL() { return GetToken(MySqlParser.DEFINITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAY_KEY_WRITE_SYMBOL() { return GetToken(MySqlParser.DELAY_KEY_WRITE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIPTION_SYMBOL() { return GetToken(MySqlParser.DESCRIPTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIAGNOSTICS_SYMBOL() { return GetToken(MySqlParser.DIAGNOSTICS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY_SYMBOL() { return GetToken(MySqlParser.DIRECTORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_SYMBOL() { return GetToken(MySqlParser.DISABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD_SYMBOL() { return GetToken(MySqlParser.DISCARD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISK_SYMBOL() { return GetToken(MySqlParser.DISK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUMPFILE_SYMBOL() { return GetToken(MySqlParser.DUMPFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUPLICATE_SYMBOL() { return GetToken(MySqlParser.DUPLICATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC_SYMBOL() { return GetToken(MySqlParser.DYNAMIC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_SYMBOL() { return GetToken(MySqlParser.ENABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION_SYMBOL() { return GetToken(MySqlParser.ENCRYPTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDS_SYMBOL() { return GetToken(MySqlParser.ENDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENFORCED_SYMBOL() { return GetToken(MySqlParser.ENFORCED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINES_SYMBOL() { return GetToken(MySqlParser.ENGINES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySqlParser.ENGINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM_SYMBOL() { return GetToken(MySqlParser.ENUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERRORS_SYMBOL() { return GetToken(MySqlParser.ERRORS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR_SYMBOL() { return GetToken(MySqlParser.ERROR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_SYMBOL() { return GetToken(MySqlParser.ESCAPE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENTS_SYMBOL() { return GetToken(MySqlParser.EVENTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY_SYMBOL() { return GetToken(MySqlParser.EVERY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCHANGE_SYMBOL() { return GetToken(MySqlParser.EXCHANGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE_SYMBOL() { return GetToken(MySqlParser.EXCLUDE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPANSION_SYMBOL() { return GetToken(MySqlParser.EXPANSION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPIRE_SYMBOL() { return GetToken(MySqlParser.EXPIRE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT_SYMBOL() { return GetToken(MySqlParser.EXPORT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySqlParser.EXTENDED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENT_SIZE_SYMBOL() { return GetToken(MySqlParser.EXTENT_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAST_SYMBOL() { return GetToken(MySqlParser.FAST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAULTS_SYMBOL() { return GetToken(MySqlParser.FAULTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE_BLOCK_SIZE_SYMBOL() { return GetToken(MySqlParser.FILE_BLOCK_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER_SYMBOL() { return GetToken(MySqlParser.FILTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_SYMBOL() { return GetToken(MySqlParser.FIRST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED_SYMBOL() { return GetToken(MySqlParser.FIXED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING_SYMBOL() { return GetToken(MySqlParser.FOLLOWING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT_SYMBOL() { return GetToken(MySqlParser.FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOUND_SYMBOL() { return GetToken(MySqlParser.FOUND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL_SYMBOL() { return GetToken(MySqlParser.FULL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERAL_SYMBOL() { return GetToken(MySqlParser.GENERAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYCOLLECTION_SYMBOL() { return GetToken(MySqlParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRY_SYMBOL() { return GetToken(MySqlParser.GEOMETRY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_FORMAT_SYMBOL() { return GetToken(MySqlParser.GET_FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_MASTER_PUBLIC_KEY_SYMBOL() { return GetToken(MySqlParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTS_SYMBOL() { return GetToken(MySqlParser.GRANTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_REPLICATION_SYMBOL() { return GetToken(MySqlParser.GROUP_REPLICATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH_SYMBOL() { return GetToken(MySqlParser.HASH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HISTOGRAM_SYMBOL() { return GetToken(MySqlParser.HISTOGRAM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HISTORY_SYMBOL() { return GetToken(MySqlParser.HISTORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOSTS_SYMBOL() { return GetToken(MySqlParser.HOSTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOST_SYMBOL() { return GetToken(MySqlParser.HOST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_SYMBOL() { return GetToken(MySqlParser.HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySqlParser.IDENTIFIED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SERVER_IDS_SYMBOL() { return GetToken(MySqlParser.IGNORE_SERVER_IDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INACTIVE_SYMBOL() { return GetToken(MySqlParser.INACTIVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXES_SYMBOL() { return GetToken(MySqlParser.INDEXES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE_SYMBOL() { return GetToken(MySqlParser.INITIAL_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT_METHOD_SYMBOL() { return GetToken(MySqlParser.INSERT_METHOD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANCE_SYMBOL() { return GetToken(MySqlParser.INSTANCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVISIBLE_SYMBOL() { return GetToken(MySqlParser.INVISIBLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER_SYMBOL() { return GetToken(MySqlParser.INVOKER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IO_SYMBOL() { return GetToken(MySqlParser.IO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IPC_SYMBOL() { return GetToken(MySqlParser.IPC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION_SYMBOL() { return GetToken(MySqlParser.ISOLATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISSUER_SYMBOL() { return GetToken(MySqlParser.ISSUER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SYMBOL() { return GetToken(MySqlParser.JSON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_BLOCK_SIZE_SYMBOL() { return GetToken(MySqlParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_SYMBOL() { return GetToken(MySqlParser.LAST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAVES_SYMBOL() { return GetToken(MySqlParser.LEAVES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_SYMBOL() { return GetToken(MySqlParser.LESS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL_SYMBOL() { return GetToken(MySqlParser.LEVEL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINESTRING_SYMBOL() { return GetToken(MySqlParser.LINESTRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST_SYMBOL() { return GetToken(MySqlParser.LIST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCKED_SYMBOL() { return GetToken(MySqlParser.LOCKED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCKS_SYMBOL() { return GetToken(MySqlParser.LOCKS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE_SYMBOL() { return GetToken(MySqlParser.LOGFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS_SYMBOL() { return GetToken(MySqlParser.LOGS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_AUTO_POSITION_SYMBOL() { return GetToken(MySqlParser.MASTER_AUTO_POSITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_COMPRESSION_ALGORITHM_SYMBOL() { return GetToken(MySqlParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_CONNECT_RETRY_SYMBOL() { return GetToken(MySqlParser.MASTER_CONNECT_RETRY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_DELAY_SYMBOL() { return GetToken(MySqlParser.MASTER_DELAY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_HEARTBEAT_PERIOD_SYMBOL() { return GetToken(MySqlParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_HOST_SYMBOL() { return GetToken(MySqlParser.MASTER_HOST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NETWORK_NAMESPACE_SYMBOL() { return GetToken(MySqlParser.NETWORK_NAMESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_FILE_SYMBOL() { return GetToken(MySqlParser.MASTER_LOG_FILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_POS_SYMBOL() { return GetToken(MySqlParser.MASTER_LOG_POS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PASSWORD_SYMBOL() { return GetToken(MySqlParser.MASTER_PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PORT_SYMBOL() { return GetToken(MySqlParser.MASTER_PORT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PUBLIC_KEY_PATH_SYMBOL() { return GetToken(MySqlParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_RETRY_COUNT_SYMBOL() { return GetToken(MySqlParser.MASTER_RETRY_COUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SERVER_ID_SYMBOL() { return GetToken(MySqlParser.MASTER_SERVER_ID_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CAPATH_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_CAPATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CA_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_CA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CERT_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_CERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CIPHER_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_CIPHER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CRLPATH_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_CRLPATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CRL_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_CRL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_KEY_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SYMBOL() { return GetToken(MySqlParser.MASTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_TLS_CIPHERSUITES_SYMBOL() { return GetToken(MySqlParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_TLS_VERSION_SYMBOL() { return GetToken(MySqlParser.MASTER_TLS_VERSION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_USER_SYMBOL() { return GetToken(MySqlParser.MASTER_USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL() { return GetToken(MySqlParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return GetToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_QUERIES_PER_HOUR_SYMBOL() { return GetToken(MySqlParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_ROWS_SYMBOL() { return GetToken(MySqlParser.MAX_ROWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_SIZE_SYMBOL() { return GetToken(MySqlParser.MAX_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_UPDATES_PER_HOUR_SYMBOL() { return GetToken(MySqlParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_USER_CONNECTIONS_SYMBOL() { return GetToken(MySqlParser.MAX_USER_CONNECTIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUM_SYMBOL() { return GetToken(MySqlParser.MEDIUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY_SYMBOL() { return GetToken(MySqlParser.MEMORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE_SYMBOL() { return GetToken(MySqlParser.MERGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE_TEXT_SYMBOL() { return GetToken(MySqlParser.MESSAGE_TEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROSECOND_SYMBOL() { return GetToken(MySqlParser.MICROSECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIGRATE_SYMBOL() { return GetToken(MySqlParser.MIGRATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_SYMBOL() { return GetToken(MySqlParser.MINUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_ROWS_SYMBOL() { return GetToken(MySqlParser.MIN_ROWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODE_SYMBOL() { return GetToken(MySqlParser.MODE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFY_SYMBOL() { return GetToken(MySqlParser.MODIFY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH_SYMBOL() { return GetToken(MySqlParser.MONTH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTILINESTRING_SYMBOL() { return GetToken(MySqlParser.MULTILINESTRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOINT_SYMBOL() { return GetToken(MySqlParser.MULTIPOINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOLYGON_SYMBOL() { return GetToken(MySqlParser.MULTIPOLYGON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUTEX_SYMBOL() { return GetToken(MySqlParser.MUTEX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MySql_ERRNO_SYMBOL() { return GetToken(MySqlParser.MySql_ERRNO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMES_SYMBOL() { return GetToken(MySqlParser.NAMES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME_SYMBOL() { return GetToken(MySqlParser.NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIONAL_SYMBOL() { return GetToken(MySqlParser.NATIONAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR_SYMBOL() { return GetToken(MySqlParser.NCHAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NDBCLUSTER_SYMBOL() { return GetToken(MySqlParser.NDBCLUSTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NESTED_SYMBOL() { return GetToken(MySqlParser.NESTED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEVER_SYMBOL() { return GetToken(MySqlParser.NEVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_SYMBOL() { return GetToken(MySqlParser.NEW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT_SYMBOL() { return GetToken(MySqlParser.NEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODEGROUP_SYMBOL() { return GetToken(MySqlParser.NODEGROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOWAIT_SYMBOL() { return GetToken(MySqlParser.NOWAIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_WAIT_SYMBOL() { return GetToken(MySqlParser.NO_WAIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS_SYMBOL() { return GetToken(MySqlParser.NULLS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_SYMBOL() { return GetToken(MySqlParser.NUMBER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NVARCHAR_SYMBOL() { return GetToken(MySqlParser.NVARCHAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET_SYMBOL() { return GetToken(MySqlParser.OFFSET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OJ_SYMBOL() { return GetToken(MySqlParser.OJ_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD_SYMBOL() { return GetToken(MySqlParser.OLD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_SYMBOL() { return GetToken(MySqlParser.ONE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY_SYMBOL() { return GetToken(MySqlParser.ONLY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_SYMBOL() { return GetToken(MySqlParser.OPEN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL_SYMBOL() { return GetToken(MySqlParser.OPTIONAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS_SYMBOL() { return GetToken(MySqlParser.OPTIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDINALITY_SYMBOL() { return GetToken(MySqlParser.ORDINALITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORGANIZATION_SYMBOL() { return GetToken(MySqlParser.ORGANIZATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERS_SYMBOL() { return GetToken(MySqlParser.OTHERS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER_SYMBOL() { return GetToken(MySqlParser.OWNER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACK_KEYS_SYMBOL() { return GetToken(MySqlParser.PACK_KEYS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAGE_SYMBOL() { return GetToken(MySqlParser.PAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER_SYMBOL() { return GetToken(MySqlParser.PARSER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL_SYMBOL() { return GetToken(MySqlParser.PARTIAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONING_SYMBOL() { return GetToken(MySqlParser.PARTITIONING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONS_SYMBOL() { return GetToken(MySqlParser.PARTITIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySqlParser.PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATH_SYMBOL() { return GetToken(MySqlParser.PATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHASE_SYMBOL() { return GetToken(MySqlParser.PHASE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGINS_SYMBOL() { return GetToken(MySqlParser.PLUGINS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN_DIR_SYMBOL() { return GetToken(MySqlParser.PLUGIN_DIR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN_SYMBOL() { return GetToken(MySqlParser.PLUGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINT_SYMBOL() { return GetToken(MySqlParser.POINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGON_SYMBOL() { return GetToken(MySqlParser.POLYGON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PORT_SYMBOL() { return GetToken(MySqlParser.PORT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING_SYMBOL() { return GetToken(MySqlParser.PRECEDING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE_SYMBOL() { return GetToken(MySqlParser.PRESERVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREV_SYMBOL() { return GetToken(MySqlParser.PREV_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES_SYMBOL() { return GetToken(MySqlParser.PRIVILEGES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGE_CHECKS_USER_SYMBOL() { return GetToken(MySqlParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESSLIST_SYMBOL() { return GetToken(MySqlParser.PROCESSLIST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILES_SYMBOL() { return GetToken(MySqlParser.PROFILES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILE_SYMBOL() { return GetToken(MySqlParser.PROFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUARTER_SYMBOL() { return GetToken(MySqlParser.QUARTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY_SYMBOL() { return GetToken(MySqlParser.QUERY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK_SYMBOL() { return GetToken(MySqlParser.QUICK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_ONLY_SYMBOL() { return GetToken(MySqlParser.READ_ONLY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REBUILD_SYMBOL() { return GetToken(MySqlParser.REBUILD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECOVER_SYMBOL() { return GetToken(MySqlParser.RECOVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDO_BUFFER_SIZE_SYMBOL() { return GetToken(MySqlParser.REDO_BUFFER_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDUNDANT_SYMBOL() { return GetToken(MySqlParser.REDUNDANT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCE_SYMBOL() { return GetToken(MySqlParser.REFERENCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_SYMBOL() { return GetToken(MySqlParser.RELAY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAYLOG_SYMBOL() { return GetToken(MySqlParser.RELAYLOG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_FILE_SYMBOL() { return GetToken(MySqlParser.RELAY_LOG_FILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_POS_SYMBOL() { return GetToken(MySqlParser.RELAY_LOG_POS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_THREAD_SYMBOL() { return GetToken(MySqlParser.RELAY_THREAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE_SYMBOL() { return GetToken(MySqlParser.REMOVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REORGANIZE_SYMBOL() { return GetToken(MySqlParser.REORGANIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE_SYMBOL() { return GetToken(MySqlParser.REPEATABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_DO_DB_SYMBOL() { return GetToken(MySqlParser.REPLICATE_DO_DB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_DO_TABLE_SYMBOL() { return GetToken(MySqlParser.REPLICATE_DO_TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_IGNORE_DB_SYMBOL() { return GetToken(MySqlParser.REPLICATE_IGNORE_DB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_IGNORE_TABLE_SYMBOL() { return GetToken(MySqlParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_REWRITE_DB_SYMBOL() { return GetToken(MySqlParser.REPLICATE_REWRITE_DB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_WILD_DO_TABLE_SYMBOL() { return GetToken(MySqlParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_WILD_IGNORE_TABLE_SYMBOL() { return GetToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_RESOURCES_SYMBOL() { return GetToken(MySqlParser.USER_RESOURCES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESPECT_SYMBOL() { return GetToken(MySqlParser.RESPECT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTORE_SYMBOL() { return GetToken(MySqlParser.RESTORE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESUME_SYMBOL() { return GetToken(MySqlParser.RESUME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN_SYMBOL() { return GetToken(MySqlParser.RETAIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNED_SQLSTATE_SYMBOL() { return GetToken(MySqlParser.RETURNED_SQLSTATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS_SYMBOL() { return GetToken(MySqlParser.RETURNS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REUSE_SYMBOL() { return GetToken(MySqlParser.REUSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE_SYMBOL() { return GetToken(MySqlParser.REVERSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE_SYMBOL() { return GetToken(MySqlParser.ROLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP_SYMBOL() { return GetToken(MySqlParser.ROLLUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROTATE_SYMBOL() { return GetToken(MySqlParser.ROTATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE_SYMBOL() { return GetToken(MySqlParser.ROUTINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_COUNT_SYMBOL() { return GetToken(MySqlParser.ROW_COUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_FORMAT_SYMBOL() { return GetToken(MySqlParser.ROW_FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTREE_SYMBOL() { return GetToken(MySqlParser.RTREE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEDULE_SYMBOL() { return GetToken(MySqlParser.SCHEDULE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA_NAME_SYMBOL() { return GetToken(MySqlParser.SCHEMA_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_ENGINE_SYMBOL() { return GetToken(MySqlParser.SECONDARY_ENGINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_LOAD_SYMBOL() { return GetToken(MySqlParser.SECONDARY_LOAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_SYMBOL() { return GetToken(MySqlParser.SECONDARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_UNLOAD_SYMBOL() { return GetToken(MySqlParser.SECONDARY_UNLOAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND_SYMBOL() { return GetToken(MySqlParser.SECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY_SYMBOL() { return GetToken(MySqlParser.SECURITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIALIZABLE_SYMBOL() { return GetToken(MySqlParser.SERIALIZABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIAL_SYMBOL() { return GetToken(MySqlParser.SERIAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER_SYMBOL() { return GetToken(MySqlParser.SERVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE_SYMBOL() { return GetToken(MySqlParser.SHARE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE_SYMBOL() { return GetToken(MySqlParser.SIMPLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIP_SYMBOL() { return GetToken(MySqlParser.SKIP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLOW_SYMBOL() { return GetToken(MySqlParser.SLOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT_SYMBOL() { return GetToken(MySqlParser.SNAPSHOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOCKET_SYMBOL() { return GetToken(MySqlParser.SOCKET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SONAME_SYMBOL() { return GetToken(MySqlParser.SONAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOUNDS_SYMBOL() { return GetToken(MySqlParser.SOUNDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SYMBOL() { return GetToken(MySqlParser.SOURCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_AFTER_GTIDS_SYMBOL() { return GetToken(MySqlParser.SQL_AFTER_GTIDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_AFTER_MTS_GAPS_SYMBOL() { return GetToken(MySqlParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BEFORE_GTIDS_SYMBOL() { return GetToken(MySqlParser.SQL_BEFORE_GTIDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BUFFER_RESULT_SYMBOL() { return GetToken(MySqlParser.SQL_BUFFER_RESULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_NO_CACHE_SYMBOL() { return GetToken(MySqlParser.SQL_NO_CACHE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_THREAD_SYMBOL() { return GetToken(MySqlParser.SQL_THREAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SRID_SYMBOL() { return GetToken(MySqlParser.SRID_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACKED_SYMBOL() { return GetToken(MySqlParser.STACKED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTS_SYMBOL() { return GetToken(MySqlParser.STARTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_AUTO_RECALC_SYMBOL() { return GetToken(MySqlParser.STATS_AUTO_RECALC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_PERSISTENT_SYMBOL() { return GetToken(MySqlParser.STATS_PERSISTENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_SAMPLE_PAGES_SYMBOL() { return GetToken(MySqlParser.STATS_SAMPLE_PAGES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS_SYMBOL() { return GetToken(MySqlParser.STATUS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE_SYMBOL() { return GetToken(MySqlParser.STORAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_SYMBOL() { return GetToken(MySqlParser.STRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBCLASS_ORIGIN_SYMBOL() { return GetToken(MySqlParser.SUBCLASS_ORIGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBDATE_SYMBOL() { return GetToken(MySqlParser.SUBDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBJECT_SYMBOL() { return GetToken(MySqlParser.SUBJECT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITIONS_SYMBOL() { return GetToken(MySqlParser.SUBPARTITIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITION_SYMBOL() { return GetToken(MySqlParser.SUBPARTITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUSPEND_SYMBOL() { return GetToken(MySqlParser.SUSPEND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWAPS_SYMBOL() { return GetToken(MySqlParser.SWAPS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCHES_SYMBOL() { return GetToken(MySqlParser.SWITCHES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES_SYMBOL() { return GetToken(MySqlParser.TABLES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySqlParser.TABLESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_CHECKSUM_SYMBOL() { return GetToken(MySqlParser.TABLE_CHECKSUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_NAME_SYMBOL() { return GetToken(MySqlParser.TABLE_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY_SYMBOL() { return GetToken(MySqlParser.TEMPORARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPTABLE_SYMBOL() { return GetToken(MySqlParser.TEMPTABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_SYMBOL() { return GetToken(MySqlParser.TEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THAN_SYMBOL() { return GetToken(MySqlParser.THAN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THREAD_PRIORITY_SYMBOL() { return GetToken(MySqlParser.THREAD_PRIORITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIES_SYMBOL() { return GetToken(MySqlParser.TIES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP_ADD_SYMBOL() { return GetToken(MySqlParser.TIMESTAMP_ADD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP_DIFF_SYMBOL() { return GetToken(MySqlParser.TIMESTAMP_DIFF_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP_SYMBOL() { return GetToken(MySqlParser.TIMESTAMP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_SYMBOL() { return GetToken(MySqlParser.TIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION_SYMBOL() { return GetToken(MySqlParser.TRANSACTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGERS_SYMBOL() { return GetToken(MySqlParser.TRIGGERS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPES_SYMBOL() { return GetToken(MySqlParser.TYPES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_SYMBOL() { return GetToken(MySqlParser.TYPE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED_SYMBOL() { return GetToken(MySqlParser.UNBOUNDED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMMITTED_SYMBOL() { return GetToken(MySqlParser.UNCOMMITTED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDEFINED_SYMBOL() { return GetToken(MySqlParser.UNDEFINED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDOFILE_SYMBOL() { return GetToken(MySqlParser.UNDOFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDO_BUFFER_SIZE_SYMBOL() { return GetToken(MySqlParser.UNDO_BUFFER_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN_SYMBOL() { return GetToken(MySqlParser.UNKNOWN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL_SYMBOL() { return GetToken(MySqlParser.UNTIL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPGRADE_SYMBOL() { return GetToken(MySqlParser.UPGRADE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySqlParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_FRM_SYMBOL() { return GetToken(MySqlParser.USE_FRM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATION_SYMBOL() { return GetToken(MySqlParser.VALIDATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_SYMBOL() { return GetToken(MySqlParser.VALUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLES_SYMBOL() { return GetToken(MySqlParser.VARIABLES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VCPU_SYMBOL() { return GetToken(MySqlParser.VCPU_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW_SYMBOL() { return GetToken(MySqlParser.VIEW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VISIBLE_SYMBOL() { return GetToken(MySqlParser.VISIBLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT_SYMBOL() { return GetToken(MySqlParser.WAIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WARNINGS_SYMBOL() { return GetToken(MySqlParser.WARNINGS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEK_SYMBOL() { return GetToken(MySqlParser.WEEK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEIGHT_STRING_SYMBOL() { return GetToken(MySqlParser.WEIGHT_STRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT_SYMBOL() { return GetToken(MySqlParser.WITHOUT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK_SYMBOL() { return GetToken(MySqlParser.WORK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER_SYMBOL() { return GetToken(MySqlParser.WRAPPER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode X509_SYMBOL() { return GetToken(MySqlParser.X509_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XID_SYMBOL() { return GetToken(MySqlParser.XID_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML_SYMBOL() { return GetToken(MySqlParser.XML_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR_SYMBOL() { return GetToken(MySqlParser.YEAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY_SYMBOL() { return GetToken(MySqlParser.ARRAY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAILED_LOGIN_ATTEMPTS_SYMBOL() { return GetToken(MySqlParser.FAILED_LOGIN_ATTEMPTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMBER_SYMBOL() { return GetToken(MySqlParser.MEMBER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF_SYMBOL() { return GetToken(MySqlParser.OFF_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_LOCK_TIME_SYMBOL() { return GetToken(MySqlParser.PASSWORD_LOCK_TIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANDOM_SYMBOL() { return GetToken(MySqlParser.RANDOM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE_ROW_FORMAT_SYMBOL() { return GetToken(MySqlParser.REQUIRE_ROW_FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL() { return GetToken(MySqlParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STREAM_SYMBOL() { return GetToken(MySqlParser.STREAM_SYMBOL, 0); }
		public IdentifierKeywordsUnambiguousContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierKeywordsUnambiguous; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIdentifierKeywordsUnambiguous(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIdentifierKeywordsUnambiguous(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
		IdentifierKeywordsUnambiguousContext _localctx = new IdentifierKeywordsUnambiguousContext(Context, State);
		EnterRule(_localctx, 1208, RULE_identifierKeywordsUnambiguous);
		int _la;
		try {
			State = 8376;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1116,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8373;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT_SYMBOL) | (1L << ACTION_SYMBOL) | (1L << ADDDATE_SYMBOL) | (1L << AFTER_SYMBOL) | (1L << AGAINST_SYMBOL) | (1L << AGGREGATE_SYMBOL) | (1L << ALGORITHM_SYMBOL) | (1L << ALWAYS_SYMBOL) | (1L << ANY_SYMBOL) | (1L << AT_SYMBOL) | (1L << AUTOEXTEND_SIZE_SYMBOL) | (1L << AUTO_INCREMENT_SYMBOL) | (1L << AVG_ROW_LENGTH_SYMBOL) | (1L << AVG_SYMBOL) | (1L << BACKUP_SYMBOL) | (1L << BINLOG_SYMBOL) | (1L << BIT_SYMBOL) | (1L << BLOCK_SYMBOL) | (1L << BOOLEAN_SYMBOL) | (1L << BOOL_SYMBOL) | (1L << BTREE_SYMBOL) | (1L << CASCADED_SYMBOL) | (1L << CATALOG_NAME_SYMBOL) | (1L << CHAIN_SYMBOL) | (1L << CHANGED_SYMBOL) | (1L << CHANNEL_SYMBOL) | (1L << CIPHER_SYMBOL))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS_ORIGIN_SYMBOL - 64)) | (1L << (CLIENT_SYMBOL - 64)) | (1L << (CLOSE_SYMBOL - 64)) | (1L << (COALESCE_SYMBOL - 64)) | (1L << (CODE_SYMBOL - 64)) | (1L << (COLLATION_SYMBOL - 64)) | (1L << (COLUMNS_SYMBOL - 64)) | (1L << (COLUMN_NAME_SYMBOL - 64)) | (1L << (COLUMN_FORMAT_SYMBOL - 64)) | (1L << (COMMITTED_SYMBOL - 64)) | (1L << (COMPACT_SYMBOL - 64)) | (1L << (COMPLETION_SYMBOL - 64)) | (1L << (COMPRESSED_SYMBOL - 64)) | (1L << (COMPRESSION_SYMBOL - 64)) | (1L << (CONCURRENT_SYMBOL - 64)) | (1L << (CONNECTION_SYMBOL - 64)) | (1L << (CONSISTENT_SYMBOL - 64)) | (1L << (CONSTRAINT_CATALOG_SYMBOL - 64)) | (1L << (CONSTRAINT_NAME_SYMBOL - 64)) | (1L << (CONSTRAINT_SCHEMA_SYMBOL - 64)) | (1L << (CONTEXT_SYMBOL - 64)) | (1L << (CPU_SYMBOL - 64)) | (1L << (CURRENT_SYMBOL - 64)) | (1L << (CURSOR_NAME_SYMBOL - 64)) | (1L << (DATAFILE_SYMBOL - 64)) | (1L << (DATA_SYMBOL - 64)) | (1L << (DATETIME_SYMBOL - 64)) | (1L << (DATE_SYMBOL - 64)) | (1L << (DAY_SYMBOL - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULT_AUTH_SYMBOL - 129)) | (1L << (DEFINER_SYMBOL - 129)) | (1L << (DELAY_KEY_WRITE_SYMBOL - 129)) | (1L << (DIAGNOSTICS_SYMBOL - 129)) | (1L << (DIRECTORY_SYMBOL - 129)) | (1L << (DISABLE_SYMBOL - 129)) | (1L << (DISCARD_SYMBOL - 129)) | (1L << (DISK_SYMBOL - 129)) | (1L << (DUMPFILE_SYMBOL - 129)) | (1L << (DUPLICATE_SYMBOL - 129)) | (1L << (DYNAMIC_SYMBOL - 129)) | (1L << (ENABLE_SYMBOL - 129)) | (1L << (ENCRYPTION_SYMBOL - 129)) | (1L << (ENDS_SYMBOL - 129)) | (1L << (ENGINES_SYMBOL - 129)) | (1L << (ENGINE_SYMBOL - 129)) | (1L << (ENUM_SYMBOL - 129)) | (1L << (ERROR_SYMBOL - 129)) | (1L << (ERRORS_SYMBOL - 129)) | (1L << (ESCAPE_SYMBOL - 129)) | (1L << (EVENTS_SYMBOL - 129)) | (1L << (EVERY_SYMBOL - 129)) | (1L << (EXCHANGE_SYMBOL - 129)) | (1L << (EXPANSION_SYMBOL - 129)) | (1L << (EXPIRE_SYMBOL - 129)) | (1L << (EXPORT_SYMBOL - 129)) | (1L << (EXTENDED_SYMBOL - 129)) | (1L << (EXTENT_SIZE_SYMBOL - 129)) | (1L << (FAST_SYMBOL - 129)) | (1L << (FAULTS_SYMBOL - 129)) | (1L << (FILE_BLOCK_SIZE_SYMBOL - 129)) | (1L << (FILTER_SYMBOL - 129)) | (1L << (FIRST_SYMBOL - 129)) | (1L << (FIXED_SYMBOL - 129)))) != 0) || ((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (FORMAT_SYMBOL - 201)) | (1L << (FOUND_SYMBOL - 201)) | (1L << (FULL_SYMBOL - 201)) | (1L << (GENERAL_SYMBOL - 201)) | (1L << (GROUP_REPLICATION_SYMBOL - 201)) | (1L << (GEOMETRYCOLLECTION_SYMBOL - 201)) | (1L << (GEOMETRY_SYMBOL - 201)) | (1L << (GET_FORMAT_SYMBOL - 201)) | (1L << (GRANTS_SYMBOL - 201)) | (1L << (HASH_SYMBOL - 201)) | (1L << (HOST_SYMBOL - 201)) | (1L << (HOSTS_SYMBOL - 201)) | (1L << (HOUR_SYMBOL - 201)) | (1L << (IDENTIFIED_SYMBOL - 201)) | (1L << (IGNORE_SERVER_IDS_SYMBOL - 201)) | (1L << (INDEXES_SYMBOL - 201)) | (1L << (INITIAL_SIZE_SYMBOL - 201)) | (1L << (INSERT_METHOD_SYMBOL - 201)) | (1L << (INSTANCE_SYMBOL - 201)) | (1L << (INVOKER_SYMBOL - 201)) | (1L << (IO_SYMBOL - 201)) | (1L << (IPC_SYMBOL - 201)) | (1L << (ISOLATION_SYMBOL - 201)) | (1L << (ISSUER_SYMBOL - 201)) | (1L << (JSON_SYMBOL - 201)) | (1L << (KEY_BLOCK_SIZE_SYMBOL - 201)))) != 0) || ((((_la - 268)) & ~0x3f) == 0 && ((1L << (_la - 268)) & ((1L << (LAST_SYMBOL - 268)) | (1L << (LEAVES_SYMBOL - 268)) | (1L << (LESS_SYMBOL - 268)) | (1L << (LEVEL_SYMBOL - 268)) | (1L << (LINESTRING_SYMBOL - 268)) | (1L << (LIST_SYMBOL - 268)) | (1L << (LOCKS_SYMBOL - 268)) | (1L << (LOGFILE_SYMBOL - 268)) | (1L << (LOGS_SYMBOL - 268)) | (1L << (MASTER_AUTO_POSITION_SYMBOL - 268)) | (1L << (MASTER_CONNECT_RETRY_SYMBOL - 268)) | (1L << (MASTER_DELAY_SYMBOL - 268)) | (1L << (MASTER_HOST_SYMBOL - 268)) | (1L << (MASTER_LOG_FILE_SYMBOL - 268)) | (1L << (MASTER_LOG_POS_SYMBOL - 268)) | (1L << (MASTER_PASSWORD_SYMBOL - 268)) | (1L << (MASTER_PORT_SYMBOL - 268)) | (1L << (MASTER_RETRY_COUNT_SYMBOL - 268)) | (1L << (MASTER_SERVER_ID_SYMBOL - 268)) | (1L << (MASTER_SSL_CAPATH_SYMBOL - 268)) | (1L << (MASTER_SSL_CA_SYMBOL - 268)) | (1L << (MASTER_SSL_CERT_SYMBOL - 268)) | (1L << (MASTER_SSL_CIPHER_SYMBOL - 268)) | (1L << (MASTER_SSL_CRL_SYMBOL - 268)) | (1L << (MASTER_SSL_CRLPATH_SYMBOL - 268)) | (1L << (MASTER_SSL_KEY_SYMBOL - 268)) | (1L << (MASTER_SSL_SYMBOL - 268)) | (1L << (MASTER_SYMBOL - 268)) | (1L << (MASTER_TLS_VERSION_SYMBOL - 268)) | (1L << (MASTER_USER_SYMBOL - 268)) | (1L << (MASTER_HEARTBEAT_PERIOD_SYMBOL - 268)) | (1L << (MAX_CONNECTIONS_PER_HOUR_SYMBOL - 268)) | (1L << (MAX_QUERIES_PER_HOUR_SYMBOL - 268)) | (1L << (MAX_ROWS_SYMBOL - 268)) | (1L << (MAX_SIZE_SYMBOL - 268)) | (1L << (MAX_UPDATES_PER_HOUR_SYMBOL - 268)) | (1L << (MAX_USER_CONNECTIONS_SYMBOL - 268)))) != 0) || ((((_la - 333)) & ~0x3f) == 0 && ((1L << (_la - 333)) & ((1L << (MEDIUM_SYMBOL - 333)) | (1L << (MEMORY_SYMBOL - 333)) | (1L << (MERGE_SYMBOL - 333)) | (1L << (MESSAGE_TEXT_SYMBOL - 333)) | (1L << (MICROSECOND_SYMBOL - 333)) | (1L << (MIGRATE_SYMBOL - 333)) | (1L << (MINUTE_SYMBOL - 333)) | (1L << (MIN_ROWS_SYMBOL - 333)) | (1L << (MODE_SYMBOL - 333)) | (1L << (MODIFY_SYMBOL - 333)) | (1L << (MONTH_SYMBOL - 333)) | (1L << (MULTILINESTRING_SYMBOL - 333)) | (1L << (MULTIPOINT_SYMBOL - 333)) | (1L << (MULTIPOLYGON_SYMBOL - 333)) | (1L << (MUTEX_SYMBOL - 333)) | (1L << (MySql_ERRNO_SYMBOL - 333)) | (1L << (NAMES_SYMBOL - 333)) | (1L << (NAME_SYMBOL - 333)) | (1L << (NATIONAL_SYMBOL - 333)) | (1L << (NCHAR_SYMBOL - 333)) | (1L << (NDBCLUSTER_SYMBOL - 333)) | (1L << (NEVER_SYMBOL - 333)) | (1L << (NEW_SYMBOL - 333)) | (1L << (NEXT_SYMBOL - 333)) | (1L << (NODEGROUP_SYMBOL - 333)) | (1L << (NO_WAIT_SYMBOL - 333)) | (1L << (NUMBER_SYMBOL - 333)) | (1L << (NVARCHAR_SYMBOL - 333)) | (1L << (OFFSET_SYMBOL - 333)) | (1L << (ONE_SYMBOL - 333)) | (1L << (ONLY_SYMBOL - 333)) | (1L << (OPEN_SYMBOL - 333)) | (1L << (OPTIONS_SYMBOL - 333)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (OWNER_SYMBOL - 398)) | (1L << (PACK_KEYS_SYMBOL - 398)) | (1L << (PAGE_SYMBOL - 398)) | (1L << (PARSER_SYMBOL - 398)) | (1L << (PARTIAL_SYMBOL - 398)) | (1L << (PARTITIONING_SYMBOL - 398)) | (1L << (PARTITIONS_SYMBOL - 398)) | (1L << (PASSWORD_SYMBOL - 398)) | (1L << (PHASE_SYMBOL - 398)) | (1L << (PLUGINS_SYMBOL - 398)) | (1L << (PLUGIN_DIR_SYMBOL - 398)) | (1L << (PLUGIN_SYMBOL - 398)) | (1L << (POINT_SYMBOL - 398)) | (1L << (POLYGON_SYMBOL - 398)) | (1L << (PORT_SYMBOL - 398)) | (1L << (PRESERVE_SYMBOL - 398)) | (1L << (PREV_SYMBOL - 398)) | (1L << (PRIVILEGES_SYMBOL - 398)) | (1L << (PROCESSLIST_SYMBOL - 398)) | (1L << (PROFILE_SYMBOL - 398)) | (1L << (PROFILES_SYMBOL - 398)) | (1L << (QUARTER_SYMBOL - 398)) | (1L << (QUERY_SYMBOL - 398)) | (1L << (QUICK_SYMBOL - 398)) | (1L << (READ_ONLY_SYMBOL - 398)) | (1L << (REBUILD_SYMBOL - 398)) | (1L << (RECOVER_SYMBOL - 398)) | (1L << (REDO_BUFFER_SIZE_SYMBOL - 398)) | (1L << (REDUNDANT_SYMBOL - 398)) | (1L << (RELAY_SYMBOL - 398)) | (1L << (RELAYLOG_SYMBOL - 398)) | (1L << (RELAY_LOG_FILE_SYMBOL - 398)) | (1L << (RELAY_LOG_POS_SYMBOL - 398)) | (1L << (RELAY_THREAD_SYMBOL - 398)) | (1L << (REMOVE_SYMBOL - 398)) | (1L << (REORGANIZE_SYMBOL - 398)) | (1L << (REPEATABLE_SYMBOL - 398)) | (1L << (REPLICATE_DO_DB_SYMBOL - 398)) | (1L << (REPLICATE_IGNORE_DB_SYMBOL - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (REPLICATE_DO_TABLE_SYMBOL - 462)) | (1L << (REPLICATE_IGNORE_TABLE_SYMBOL - 462)) | (1L << (REPLICATE_WILD_DO_TABLE_SYMBOL - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE_SYMBOL - 462)) | (1L << (REPLICATE_REWRITE_DB_SYMBOL - 462)) | (1L << (RESTORE_SYMBOL - 462)) | (1L << (RESUME_SYMBOL - 462)) | (1L << (RETURNED_SQLSTATE_SYMBOL - 462)) | (1L << (RETURNS_SYMBOL - 462)) | (1L << (REVERSE_SYMBOL - 462)) | (1L << (ROLLUP_SYMBOL - 462)) | (1L << (ROTATE_SYMBOL - 462)) | (1L << (ROUTINE_SYMBOL - 462)) | (1L << (ROW_COUNT_SYMBOL - 462)) | (1L << (ROW_FORMAT_SYMBOL - 462)) | (1L << (RTREE_SYMBOL - 462)) | (1L << (SCHEDULE_SYMBOL - 462)) | (1L << (SCHEMA_NAME_SYMBOL - 462)) | (1L << (SECOND_SYMBOL - 462)) | (1L << (SECURITY_SYMBOL - 462)) | (1L << (SERIALIZABLE_SYMBOL - 462)) | (1L << (SERIAL_SYMBOL - 462)) | (1L << (SERVER_SYMBOL - 462)) | (1L << (SHARE_SYMBOL - 462)) | (1L << (SIMPLE_SYMBOL - 462)) | (1L << (SLOW_SYMBOL - 462)) | (1L << (SNAPSHOT_SYMBOL - 462)) | (1L << (SOCKET_SYMBOL - 462)) | (1L << (SONAME_SYMBOL - 462)) | (1L << (SOUNDS_SYMBOL - 462)) | (1L << (SOURCE_SYMBOL - 462)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (SQL_AFTER_GTIDS_SYMBOL - 528)) | (1L << (SQL_AFTER_MTS_GAPS_SYMBOL - 528)) | (1L << (SQL_BEFORE_GTIDS_SYMBOL - 528)) | (1L << (SQL_BUFFER_RESULT_SYMBOL - 528)) | (1L << (SQL_NO_CACHE_SYMBOL - 528)) | (1L << (SQL_THREAD_SYMBOL - 528)) | (1L << (STACKED_SYMBOL - 528)) | (1L << (STARTS_SYMBOL - 528)) | (1L << (STATS_AUTO_RECALC_SYMBOL - 528)) | (1L << (STATS_PERSISTENT_SYMBOL - 528)) | (1L << (STATS_SAMPLE_PAGES_SYMBOL - 528)) | (1L << (STATUS_SYMBOL - 528)) | (1L << (STORAGE_SYMBOL - 528)) | (1L << (STRING_SYMBOL - 528)) | (1L << (SUBCLASS_ORIGIN_SYMBOL - 528)) | (1L << (SUBDATE_SYMBOL - 528)) | (1L << (SUBJECT_SYMBOL - 528)) | (1L << (SUBPARTITIONS_SYMBOL - 528)) | (1L << (SUBPARTITION_SYMBOL - 528)) | (1L << (SUSPEND_SYMBOL - 528)) | (1L << (SWAPS_SYMBOL - 528)) | (1L << (SWITCHES_SYMBOL - 528)) | (1L << (TABLES_SYMBOL - 528)) | (1L << (TABLESPACE_SYMBOL - 528)) | (1L << (TABLE_CHECKSUM_SYMBOL - 528)) | (1L << (TABLE_NAME_SYMBOL - 528)) | (1L << (TEMPORARY_SYMBOL - 528)) | (1L << (TEMPTABLE_SYMBOL - 528)) | (1L << (TEXT_SYMBOL - 528)) | (1L << (THAN_SYMBOL - 528)) | (1L << (TIMESTAMP_SYMBOL - 528)) | (1L << (TIMESTAMP_ADD_SYMBOL - 528)) | (1L << (TIMESTAMP_DIFF_SYMBOL - 528)) | (1L << (TIME_SYMBOL - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (TRANSACTION_SYMBOL - 592)) | (1L << (TRIGGERS_SYMBOL - 592)) | (1L << (TYPES_SYMBOL - 592)) | (1L << (TYPE_SYMBOL - 592)) | (1L << (UNCOMMITTED_SYMBOL - 592)) | (1L << (UNDEFINED_SYMBOL - 592)) | (1L << (UNDOFILE_SYMBOL - 592)) | (1L << (UNDO_BUFFER_SIZE_SYMBOL - 592)) | (1L << (UNKNOWN_SYMBOL - 592)) | (1L << (UNTIL_SYMBOL - 592)) | (1L << (UPGRADE_SYMBOL - 592)) | (1L << (USER_RESOURCES_SYMBOL - 592)) | (1L << (USER_SYMBOL - 592)) | (1L << (USE_FRM_SYMBOL - 592)) | (1L << (VALIDATION_SYMBOL - 592)) | (1L << (VALUE_SYMBOL - 592)) | (1L << (VARIABLES_SYMBOL - 592)) | (1L << (VIEW_SYMBOL - 592)) | (1L << (WAIT_SYMBOL - 592)) | (1L << (WARNINGS_SYMBOL - 592)) | (1L << (WEEK_SYMBOL - 592)) | (1L << (WEIGHT_STRING_SYMBOL - 592)) | (1L << (WITHOUT_SYMBOL - 592)) | (1L << (WORK_SYMBOL - 592)) | (1L << (WRAPPER_SYMBOL - 592)) | (1L << (X509_SYMBOL - 592)) | (1L << (XID_SYMBOL - 592)) | (1L << (XML_SYMBOL - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (YEAR_SYMBOL - 656)) | (1L << (ROLE_SYMBOL - 656)) | (1L << (ADMIN_SYMBOL - 656)) | (1L << (INVISIBLE_SYMBOL - 656)) | (1L << (VISIBLE_SYMBOL - 656)) | (1L << (COMPONENT_SYMBOL - 656)) | (1L << (SKIP_SYMBOL - 656)) | (1L << (LOCKED_SYMBOL - 656)) | (1L << (NOWAIT_SYMBOL - 656)) | (1L << (HISTOGRAM_SYMBOL - 656)) | (1L << (BUCKETS_SYMBOL - 656)) | (1L << (EXCLUDE_SYMBOL - 656)) | (1L << (FOLLOWING_SYMBOL - 656)) | (1L << (NULLS_SYMBOL - 656)) | (1L << (OTHERS_SYMBOL - 656)) | (1L << (PRECEDING_SYMBOL - 656)) | (1L << (RESPECT_SYMBOL - 656)) | (1L << (TIES_SYMBOL - 656)) | (1L << (UNBOUNDED_SYMBOL - 656)) | (1L << (NESTED_SYMBOL - 656)) | (1L << (ORDINALITY_SYMBOL - 656)) | (1L << (PATH_SYMBOL - 656)) | (1L << (HISTORY_SYMBOL - 656)) | (1L << (REUSE_SYMBOL - 656)) | (1L << (SRID_SYMBOL - 656)) | (1L << (THREAD_PRIORITY_SYMBOL - 656)) | (1L << (VCPU_SYMBOL - 656)) | (1L << (MASTER_PUBLIC_KEY_PATH_SYMBOL - 656)) | (1L << (GET_MASTER_PUBLIC_KEY_SYMBOL - 656)) | (1L << (DEFINITION_SYMBOL - 656)) | (1L << (DESCRIPTION_SYMBOL - 656)) | (1L << (ORGANIZATION_SYMBOL - 656)) | (1L << (REFERENCE_SYMBOL - 656)) | (1L << (OPTIONAL_SYMBOL - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (SECONDARY_SYMBOL - 720)) | (1L << (SECONDARY_ENGINE_SYMBOL - 720)) | (1L << (SECONDARY_LOAD_SYMBOL - 720)) | (1L << (SECONDARY_UNLOAD_SYMBOL - 720)) | (1L << (ACTIVE_SYMBOL - 720)) | (1L << (INACTIVE_SYMBOL - 720)) | (1L << (RETAIN_SYMBOL - 720)) | (1L << (OLD_SYMBOL - 720)) | (1L << (NETWORK_NAMESPACE_SYMBOL - 720)) | (1L << (ENFORCED_SYMBOL - 720)) | (1L << (OJ_SYMBOL - 720)) | (1L << (MASTER_COMPRESSION_ALGORITHM_SYMBOL - 720)) | (1L << (MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL - 720)) | (1L << (PRIVILEGE_CHECKS_USER_SYMBOL - 720)) | (1L << (MASTER_TLS_CIPHERSUITES_SYMBOL - 720)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8374;
				if (!(serverVersion >= 80019)) throw new FailedPredicateException(this, "serverVersion >= 80019");
				State = 8375;
				_la = TokenStream.LA(1);
				if ( !(_la==TIMESTAMP_SYMBOL || _la==TIME_SYMBOL || ((((_la - 731)) & ~0x3f) == 0 && ((1L << (_la - 731)) & ((1L << (ARRAY_SYMBOL - 731)) | (1L << (MEMBER_SYMBOL - 731)) | (1L << (RANDOM_SYMBOL - 731)) | (1L << (MASTER_COMPRESSION_ALGORITHM_SYMBOL - 731)) | (1L << (MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL - 731)) | (1L << (PRIVILEGE_CHECKS_USER_SYMBOL - 731)) | (1L << (MASTER_TLS_CIPHERSUITES_SYMBOL - 731)) | (1L << (REQUIRE_ROW_FORMAT_SYMBOL - 731)) | (1L << (PASSWORD_LOCK_TIME_SYMBOL - 731)) | (1L << (FAILED_LOGIN_ATTEMPTS_SYMBOL - 731)) | (1L << (REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL - 731)) | (1L << (STREAM_SYMBOL - 731)) | (1L << (OFF_SYMBOL - 731)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleKeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RoleOrLabelKeywordContext roleOrLabelKeyword() {
			return GetRuleContext<RoleOrLabelKeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoleOrIdentifierKeywordContext roleOrIdentifierKeyword() {
			return GetRuleContext<RoleOrIdentifierKeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
			return GetRuleContext<IdentifierKeywordsUnambiguousContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsAmbiguous2LabelsContext identifierKeywordsAmbiguous2Labels() {
			return GetRuleContext<IdentifierKeywordsAmbiguous2LabelsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsAmbiguous4SystemVariablesContext identifierKeywordsAmbiguous4SystemVariables() {
			return GetRuleContext<IdentifierKeywordsAmbiguous4SystemVariablesContext>(0);
		}
		public RoleKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleKeyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoleKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoleKeyword(this);
		}
	}

	[RuleVersion(0)]
	public RoleKeywordContext roleKeyword() {
		RoleKeywordContext _localctx = new RoleKeywordContext(Context, State);
		EnterRule(_localctx, 1210, RULE_roleKeyword);
		try {
			State = 8388;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1119,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8378;
				if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
				State = 8381;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1117,Context) ) {
				case 1:
					{
					State = 8379;
					roleOrLabelKeyword();
					}
					break;
				case 2:
					{
					State = 8380;
					roleOrIdentifierKeyword();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8386;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1118,Context) ) {
				case 1:
					{
					State = 8383;
					identifierKeywordsUnambiguous();
					}
					break;
				case 2:
					{
					State = 8384;
					identifierKeywordsAmbiguous2Labels();
					}
					break;
				case 3:
					{
					State = 8385;
					identifierKeywordsAmbiguous4SystemVariables();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LValueKeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
			return GetRuleContext<IdentifierKeywordsUnambiguousContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsAmbiguous1RolesAndLabelsContext identifierKeywordsAmbiguous1RolesAndLabels() {
			return GetRuleContext<IdentifierKeywordsAmbiguous1RolesAndLabelsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsAmbiguous2LabelsContext identifierKeywordsAmbiguous2Labels() {
			return GetRuleContext<IdentifierKeywordsAmbiguous2LabelsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsAmbiguous3RolesContext identifierKeywordsAmbiguous3Roles() {
			return GetRuleContext<IdentifierKeywordsAmbiguous3RolesContext>(0);
		}
		public LValueKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lValueKeyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLValueKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLValueKeyword(this);
		}
	}

	[RuleVersion(0)]
	public LValueKeywordContext lValueKeyword() {
		LValueKeywordContext _localctx = new LValueKeywordContext(Context, State);
		EnterRule(_localctx, 1212, RULE_lValueKeyword);
		try {
			State = 8394;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1120,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8390;
				identifierKeywordsUnambiguous();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8391;
				identifierKeywordsAmbiguous1RolesAndLabels();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8392;
				identifierKeywordsAmbiguous2Labels();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8393;
				identifierKeywordsAmbiguous3Roles();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierKeywordsAmbiguous4SystemVariablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL_SYMBOL() { return GetToken(MySqlParser.GLOBAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySqlParser.LOCAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERSIST_SYMBOL() { return GetToken(MySqlParser.PERSIST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERSIST_ONLY_SYMBOL() { return GetToken(MySqlParser.PERSIST_ONLY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_SYMBOL() { return GetToken(MySqlParser.SESSION_SYMBOL, 0); }
		public IdentifierKeywordsAmbiguous4SystemVariablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierKeywordsAmbiguous4SystemVariables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIdentifierKeywordsAmbiguous4SystemVariables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIdentifierKeywordsAmbiguous4SystemVariables(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierKeywordsAmbiguous4SystemVariablesContext identifierKeywordsAmbiguous4SystemVariables() {
		IdentifierKeywordsAmbiguous4SystemVariablesContext _localctx = new IdentifierKeywordsAmbiguous4SystemVariablesContext(Context, State);
		EnterRule(_localctx, 1214, RULE_identifierKeywordsAmbiguous4SystemVariables);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8396;
			_la = TokenStream.LA(1);
			if ( !(_la==GLOBAL_SYMBOL || _la==LOCAL_SYMBOL || _la==SESSION_SYMBOL || _la==PERSIST_SYMBOL || _la==PERSIST_ONLY_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleOrIdentifierKeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCOUNT_SYMBOL() { return GetToken(MySqlParser.ACCOUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASCII_SYMBOL() { return GetToken(MySqlParser.ASCII_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALWAYS_SYMBOL() { return GetToken(MySqlParser.ALWAYS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKUP_SYMBOL() { return GetToken(MySqlParser.BACKUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_SYMBOL() { return GetToken(MySqlParser.BEGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE_SYMBOL() { return GetToken(MySqlParser.BYTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE_SYMBOL() { return GetToken(MySqlParser.CACHE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSET_SYMBOL() { return GetToken(MySqlParser.CHARSET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM_SYMBOL() { return GetToken(MySqlParser.CHECKSUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLONE_SYMBOL() { return GetToken(MySqlParser.CLONE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_SYMBOL() { return GetToken(MySqlParser.CLOSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySqlParser.COMMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT_SYMBOL() { return GetToken(MySqlParser.COMMIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS_SYMBOL() { return GetToken(MySqlParser.CONTAINS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEALLOCATE_SYMBOL() { return GetToken(MySqlParser.DEALLOCATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO_SYMBOL() { return GetToken(MySqlParser.DO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_SYMBOL() { return GetToken(MySqlParser.END_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH_SYMBOL() { return GetToken(MySqlParser.FLUSH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWS_SYMBOL() { return GetToken(MySqlParser.FOLLOWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT_SYMBOL() { return GetToken(MySqlParser.FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_REPLICATION_SYMBOL() { return GetToken(MySqlParser.GROUP_REPLICATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER_SYMBOL() { return GetToken(MySqlParser.HANDLER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HELP_SYMBOL() { return GetToken(MySqlParser.HELP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOST_SYMBOL() { return GetToken(MySqlParser.HOST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTALL_SYMBOL() { return GetToken(MySqlParser.INSTALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVISIBLE_SYMBOL() { return GetToken(MySqlParser.INVISIBLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE_SYMBOL() { return GetToken(MySqlParser.LANGUAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_SYMBOL() { return GetToken(MySqlParser.NO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_SYMBOL() { return GetToken(MySqlParser.OPEN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS_SYMBOL() { return GetToken(MySqlParser.OPTIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER_SYMBOL() { return GetToken(MySqlParser.OWNER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER_SYMBOL() { return GetToken(MySqlParser.PARSER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySqlParser.PARTITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PORT_SYMBOL() { return GetToken(MySqlParser.PORT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDES_SYMBOL() { return GetToken(MySqlParser.PRECEDES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE_SYMBOL() { return GetToken(MySqlParser.PREPARE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE_SYMBOL() { return GetToken(MySqlParser.REMOVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPAIR_SYMBOL() { return GetToken(MySqlParser.REPAIR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET_SYMBOL() { return GetToken(MySqlParser.RESET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTORE_SYMBOL() { return GetToken(MySqlParser.RESTORE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE_SYMBOL() { return GetToken(MySqlParser.ROLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK_SYMBOL() { return GetToken(MySqlParser.ROLLBACK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT_SYMBOL() { return GetToken(MySqlParser.SAVEPOINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_SYMBOL() { return GetToken(MySqlParser.SECONDARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_ENGINE_SYMBOL() { return GetToken(MySqlParser.SECONDARY_ENGINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_LOAD_SYMBOL() { return GetToken(MySqlParser.SECONDARY_LOAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_UNLOAD_SYMBOL() { return GetToken(MySqlParser.SECONDARY_UNLOAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY_SYMBOL() { return GetToken(MySqlParser.SECURITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER_SYMBOL() { return GetToken(MySqlParser.SERVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNED_SYMBOL() { return GetToken(MySqlParser.SIGNED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOCKET_SYMBOL() { return GetToken(MySqlParser.SOCKET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE_SYMBOL() { return GetToken(MySqlParser.SLAVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SONAME_SYMBOL() { return GetToken(MySqlParser.SONAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_SYMBOL() { return GetToken(MySqlParser.START_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP_SYMBOL() { return GetToken(MySqlParser.STOP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE_SYMBOL() { return GetToken(MySqlParser.TRUNCATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNICODE_SYMBOL() { return GetToken(MySqlParser.UNICODE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNINSTALL_SYMBOL() { return GetToken(MySqlParser.UNINSTALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPGRADE_SYMBOL() { return GetToken(MySqlParser.UPGRADE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VISIBLE_SYMBOL() { return GetToken(MySqlParser.VISIBLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER_SYMBOL() { return GetToken(MySqlParser.WRAPPER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA_SYMBOL() { return GetToken(MySqlParser.XA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHUTDOWN_SYMBOL() { return GetToken(MySqlParser.SHUTDOWN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT_SYMBOL() { return GetToken(MySqlParser.IMPORT_SYMBOL, 0); }
		public RoleOrIdentifierKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleOrIdentifierKeyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoleOrIdentifierKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoleOrIdentifierKeyword(this);
		}
	}

	[RuleVersion(0)]
	public RoleOrIdentifierKeywordContext roleOrIdentifierKeyword() {
		RoleOrIdentifierKeywordContext _localctx = new RoleOrIdentifierKeywordContext(Context, State);
		EnterRule(_localctx, 1216, RULE_roleOrIdentifierKeyword);
		int _la;
		try {
			State = 8403;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1121,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8398;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT_SYMBOL) | (1L << ALWAYS_SYMBOL) | (1L << ASCII_SYMBOL) | (1L << BACKUP_SYMBOL) | (1L << BEGIN_SYMBOL) | (1L << BYTE_SYMBOL) | (1L << CACHE_SYMBOL) | (1L << CHARSET_SYMBOL) | (1L << CHECKSUM_SYMBOL))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CLOSE_SYMBOL - 66)) | (1L << (COMMENT_SYMBOL - 66)) | (1L << (COMMIT_SYMBOL - 66)) | (1L << (CONTAINS_SYMBOL - 66)) | (1L << (DEALLOCATE_SYMBOL - 66)))) != 0) || ((((_la - 147)) & ~0x3f) == 0 && ((1L << (_la - 147)) & ((1L << (DO_SYMBOL - 147)) | (1L << (END_SYMBOL - 147)) | (1L << (FLUSH_SYMBOL - 147)) | (1L << (FOLLOWS_SYMBOL - 147)) | (1L << (FORMAT_SYMBOL - 147)) | (1L << (GROUP_REPLICATION_SYMBOL - 147)))) != 0) || ((((_la - 219)) & ~0x3f) == 0 && ((1L << (_la - 219)) & ((1L << (HANDLER_SYMBOL - 219)) | (1L << (HELP_SYMBOL - 219)) | (1L << (HOST_SYMBOL - 219)) | (1L << (INSTALL_SYMBOL - 219)) | (1L << (LANGUAGE_SYMBOL - 219)))) != 0) || ((((_la - 373)) & ~0x3f) == 0 && ((1L << (_la - 373)) & ((1L << (NO_SYMBOL - 373)) | (1L << (OPEN_SYMBOL - 373)) | (1L << (OPTIONS_SYMBOL - 373)) | (1L << (OWNER_SYMBOL - 373)) | (1L << (PARSER_SYMBOL - 373)) | (1L << (PARTITION_SYMBOL - 373)) | (1L << (PORT_SYMBOL - 373)) | (1L << (PRECEDES_SYMBOL - 373)) | (1L << (PREPARE_SYMBOL - 373)))) != 0) || ((((_la - 452)) & ~0x3f) == 0 && ((1L << (_la - 452)) & ((1L << (REMOVE_SYMBOL - 452)) | (1L << (REPAIR_SYMBOL - 452)) | (1L << (RESET_SYMBOL - 452)) | (1L << (RESTORE_SYMBOL - 452)) | (1L << (ROLLBACK_SYMBOL - 452)) | (1L << (SAVEPOINT_SYMBOL - 452)) | (1L << (SECURITY_SYMBOL - 452)) | (1L << (SERVER_SYMBOL - 452)) | (1L << (SIGNED_SYMBOL - 452)) | (1L << (SLAVE_SYMBOL - 452)))) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (SOCKET_SYMBOL - 519)) | (1L << (SONAME_SYMBOL - 519)) | (1L << (START_SYMBOL - 519)) | (1L << (STOP_SYMBOL - 519)))) != 0) || ((((_la - 597)) & ~0x3f) == 0 && ((1L << (_la - 597)) & ((1L << (TRUNCATE_SYMBOL - 597)) | (1L << (UNICODE_SYMBOL - 597)) | (1L << (UNINSTALL_SYMBOL - 597)) | (1L << (UPGRADE_SYMBOL - 597)) | (1L << (WRAPPER_SYMBOL - 597)) | (1L << (XA_SYMBOL - 597)) | (1L << (ROLE_SYMBOL - 597)))) != 0) || ((((_la - 661)) & ~0x3f) == 0 && ((1L << (_la - 661)) & ((1L << (INVISIBLE_SYMBOL - 661)) | (1L << (VISIBLE_SYMBOL - 661)) | (1L << (CLONE_SYMBOL - 661)) | (1L << (SECONDARY_SYMBOL - 661)) | (1L << (SECONDARY_ENGINE_SYMBOL - 661)) | (1L << (SECONDARY_LOAD_SYMBOL - 661)) | (1L << (SECONDARY_UNLOAD_SYMBOL - 661)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8399;
				if (!(serverVersion >= 50709)) throw new FailedPredicateException(this, "serverVersion >= 50709");
				State = 8400;
				Match(SHUTDOWN_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8401;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 8402;
				Match(IMPORT_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleOrLabelKeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION_SYMBOL() { return GetToken(MySqlParser.ACTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTIVE_SYMBOL() { return GetToken(MySqlParser.ACTIVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDDATE_SYMBOL() { return GetToken(MySqlParser.ADDDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER_SYMBOL() { return GetToken(MySqlParser.AFTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGAINST_SYMBOL() { return GetToken(MySqlParser.AGAINST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE_SYMBOL() { return GetToken(MySqlParser.AGGREGATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM_SYMBOL() { return GetToken(MySqlParser.ALGORITHM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYSE_SYMBOL() { return GetToken(MySqlParser.ANALYSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY_SYMBOL() { return GetToken(MySqlParser.ANY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SYMBOL() { return GetToken(MySqlParser.AT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORS_SYMBOL() { return GetToken(MySqlParser.AUTHORS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_INCREMENT_SYMBOL() { return GetToken(MySqlParser.AUTO_INCREMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOEXTEND_SIZE_SYMBOL() { return GetToken(MySqlParser.AUTOEXTEND_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG_ROW_LENGTH_SYMBOL() { return GetToken(MySqlParser.AVG_ROW_LENGTH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG_SYMBOL() { return GetToken(MySqlParser.AVG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_SYMBOL() { return GetToken(MySqlParser.BINLOG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_SYMBOL() { return GetToken(MySqlParser.BIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK_SYMBOL() { return GetToken(MySqlParser.BLOCK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_SYMBOL() { return GetToken(MySqlParser.BOOL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_SYMBOL() { return GetToken(MySqlParser.BOOLEAN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BTREE_SYMBOL() { return GetToken(MySqlParser.BTREE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUCKETS_SYMBOL() { return GetToken(MySqlParser.BUCKETS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADED_SYMBOL() { return GetToken(MySqlParser.CASCADED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG_NAME_SYMBOL() { return GetToken(MySqlParser.CATALOG_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN_SYMBOL() { return GetToken(MySqlParser.CHAIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGED_SYMBOL() { return GetToken(MySqlParser.CHANGED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANNEL_SYMBOL() { return GetToken(MySqlParser.CHANNEL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CIPHER_SYMBOL() { return GetToken(MySqlParser.CIPHER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLIENT_SYMBOL() { return GetToken(MySqlParser.CLIENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS_ORIGIN_SYMBOL() { return GetToken(MySqlParser.CLASS_ORIGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE_SYMBOL() { return GetToken(MySqlParser.COALESCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODE_SYMBOL() { return GetToken(MySqlParser.CODE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION_SYMBOL() { return GetToken(MySqlParser.COLLATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_NAME_SYMBOL() { return GetToken(MySqlParser.COLUMN_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_FORMAT_SYMBOL() { return GetToken(MySqlParser.COLUMN_FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS_SYMBOL() { return GetToken(MySqlParser.COLUMNS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMITTED_SYMBOL() { return GetToken(MySqlParser.COMMITTED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPACT_SYMBOL() { return GetToken(MySqlParser.COMPACT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPLETION_SYMBOL() { return GetToken(MySqlParser.COMPLETION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPONENT_SYMBOL() { return GetToken(MySqlParser.COMPONENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSED_SYMBOL() { return GetToken(MySqlParser.COMPRESSED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSION_SYMBOL() { return GetToken(MySqlParser.COMPRESSION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENT_SYMBOL() { return GetToken(MySqlParser.CONCURRENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION_SYMBOL() { return GetToken(MySqlParser.CONNECTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSISTENT_SYMBOL() { return GetToken(MySqlParser.CONSISTENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_CATALOG_SYMBOL() { return GetToken(MySqlParser.CONSTRAINT_CATALOG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_SCHEMA_SYMBOL() { return GetToken(MySqlParser.CONSTRAINT_SCHEMA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_NAME_SYMBOL() { return GetToken(MySqlParser.CONSTRAINT_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTEXT_SYMBOL() { return GetToken(MySqlParser.CONTEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTRIBUTORS_SYMBOL() { return GetToken(MySqlParser.CONTRIBUTORS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPU_SYMBOL() { return GetToken(MySqlParser.CPU_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_SYMBOL() { return GetToken(MySqlParser.CURRENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR_NAME_SYMBOL() { return GetToken(MySqlParser.CURSOR_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_SYMBOL() { return GetToken(MySqlParser.DATA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATAFILE_SYMBOL() { return GetToken(MySqlParser.DATAFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME_SYMBOL() { return GetToken(MySqlParser.DATETIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_SYMBOL() { return GetToken(MySqlParser.DATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_SYMBOL() { return GetToken(MySqlParser.DAY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_AUTH_SYMBOL() { return GetToken(MySqlParser.DEFAULT_AUTH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER_SYMBOL() { return GetToken(MySqlParser.DEFINER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAY_KEY_WRITE_SYMBOL() { return GetToken(MySqlParser.DELAY_KEY_WRITE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DES_KEY_FILE_SYMBOL() { return GetToken(MySqlParser.DES_KEY_FILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIPTION_SYMBOL() { return GetToken(MySqlParser.DESCRIPTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIAGNOSTICS_SYMBOL() { return GetToken(MySqlParser.DIAGNOSTICS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY_SYMBOL() { return GetToken(MySqlParser.DIRECTORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_SYMBOL() { return GetToken(MySqlParser.DISABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD_SYMBOL() { return GetToken(MySqlParser.DISCARD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISK_SYMBOL() { return GetToken(MySqlParser.DISK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUMPFILE_SYMBOL() { return GetToken(MySqlParser.DUMPFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUPLICATE_SYMBOL() { return GetToken(MySqlParser.DUPLICATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC_SYMBOL() { return GetToken(MySqlParser.DYNAMIC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION_SYMBOL() { return GetToken(MySqlParser.ENCRYPTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDS_SYMBOL() { return GetToken(MySqlParser.ENDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM_SYMBOL() { return GetToken(MySqlParser.ENUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySqlParser.ENGINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINES_SYMBOL() { return GetToken(MySqlParser.ENGINES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR_SYMBOL() { return GetToken(MySqlParser.ERROR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERRORS_SYMBOL() { return GetToken(MySqlParser.ERRORS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_SYMBOL() { return GetToken(MySqlParser.ESCAPE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENTS_SYMBOL() { return GetToken(MySqlParser.EVENTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY_SYMBOL() { return GetToken(MySqlParser.EVERY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE_SYMBOL() { return GetToken(MySqlParser.EXCLUDE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPANSION_SYMBOL() { return GetToken(MySqlParser.EXPANSION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT_SYMBOL() { return GetToken(MySqlParser.EXPORT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySqlParser.EXTENDED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENT_SIZE_SYMBOL() { return GetToken(MySqlParser.EXTENT_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAULTS_SYMBOL() { return GetToken(MySqlParser.FAULTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAST_SYMBOL() { return GetToken(MySqlParser.FAST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING_SYMBOL() { return GetToken(MySqlParser.FOLLOWING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOUND_SYMBOL() { return GetToken(MySqlParser.FOUND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_SYMBOL() { return GetToken(MySqlParser.ENABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL_SYMBOL() { return GetToken(MySqlParser.FULL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE_BLOCK_SIZE_SYMBOL() { return GetToken(MySqlParser.FILE_BLOCK_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER_SYMBOL() { return GetToken(MySqlParser.FILTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_SYMBOL() { return GetToken(MySqlParser.FIRST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED_SYMBOL() { return GetToken(MySqlParser.FIXED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERAL_SYMBOL() { return GetToken(MySqlParser.GENERAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRY_SYMBOL() { return GetToken(MySqlParser.GEOMETRY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYCOLLECTION_SYMBOL() { return GetToken(MySqlParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_FORMAT_SYMBOL() { return GetToken(MySqlParser.GET_FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTS_SYMBOL() { return GetToken(MySqlParser.GRANTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL_SYMBOL() { return GetToken(MySqlParser.GLOBAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH_SYMBOL() { return GetToken(MySqlParser.HASH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HISTOGRAM_SYMBOL() { return GetToken(MySqlParser.HISTOGRAM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HISTORY_SYMBOL() { return GetToken(MySqlParser.HISTORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOSTS_SYMBOL() { return GetToken(MySqlParser.HOSTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_SYMBOL() { return GetToken(MySqlParser.HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySqlParser.IDENTIFIED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SERVER_IDS_SYMBOL() { return GetToken(MySqlParser.IGNORE_SERVER_IDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER_SYMBOL() { return GetToken(MySqlParser.INVOKER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXES_SYMBOL() { return GetToken(MySqlParser.INDEXES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE_SYMBOL() { return GetToken(MySqlParser.INITIAL_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANCE_SYMBOL() { return GetToken(MySqlParser.INSTANCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INACTIVE_SYMBOL() { return GetToken(MySqlParser.INACTIVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IO_SYMBOL() { return GetToken(MySqlParser.IO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IPC_SYMBOL() { return GetToken(MySqlParser.IPC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION_SYMBOL() { return GetToken(MySqlParser.ISOLATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISSUER_SYMBOL() { return GetToken(MySqlParser.ISSUER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT_METHOD_SYMBOL() { return GetToken(MySqlParser.INSERT_METHOD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SYMBOL() { return GetToken(MySqlParser.JSON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_BLOCK_SIZE_SYMBOL() { return GetToken(MySqlParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_SYMBOL() { return GetToken(MySqlParser.LAST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAVES_SYMBOL() { return GetToken(MySqlParser.LEAVES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_SYMBOL() { return GetToken(MySqlParser.LESS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL_SYMBOL() { return GetToken(MySqlParser.LEVEL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINESTRING_SYMBOL() { return GetToken(MySqlParser.LINESTRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST_SYMBOL() { return GetToken(MySqlParser.LIST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySqlParser.LOCAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCKED_SYMBOL() { return GetToken(MySqlParser.LOCKED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCKS_SYMBOL() { return GetToken(MySqlParser.LOCKS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE_SYMBOL() { return GetToken(MySqlParser.LOGFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS_SYMBOL() { return GetToken(MySqlParser.LOGS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_ROWS_SYMBOL() { return GetToken(MySqlParser.MAX_ROWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SYMBOL() { return GetToken(MySqlParser.MASTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_HEARTBEAT_PERIOD_SYMBOL() { return GetToken(MySqlParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_HOST_SYMBOL() { return GetToken(MySqlParser.MASTER_HOST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PORT_SYMBOL() { return GetToken(MySqlParser.MASTER_PORT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_FILE_SYMBOL() { return GetToken(MySqlParser.MASTER_LOG_FILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_POS_SYMBOL() { return GetToken(MySqlParser.MASTER_LOG_POS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_USER_SYMBOL() { return GetToken(MySqlParser.MASTER_USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PASSWORD_SYMBOL() { return GetToken(MySqlParser.MASTER_PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PUBLIC_KEY_PATH_SYMBOL() { return GetToken(MySqlParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SERVER_ID_SYMBOL() { return GetToken(MySqlParser.MASTER_SERVER_ID_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_CONNECT_RETRY_SYMBOL() { return GetToken(MySqlParser.MASTER_CONNECT_RETRY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_RETRY_COUNT_SYMBOL() { return GetToken(MySqlParser.MASTER_RETRY_COUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_DELAY_SYMBOL() { return GetToken(MySqlParser.MASTER_DELAY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CA_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_CA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CAPATH_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_CAPATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_TLS_VERSION_SYMBOL() { return GetToken(MySqlParser.MASTER_TLS_VERSION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CERT_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_CERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CIPHER_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_CIPHER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CRL_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_CRL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CRLPATH_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_CRLPATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_KEY_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_AUTO_POSITION_SYMBOL() { return GetToken(MySqlParser.MASTER_AUTO_POSITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return GetToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_QUERIES_PER_HOUR_SYMBOL() { return GetToken(MySqlParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_STATEMENT_TIME_SYMBOL() { return GetToken(MySqlParser.MAX_STATEMENT_TIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_SIZE_SYMBOL() { return GetToken(MySqlParser.MAX_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_UPDATES_PER_HOUR_SYMBOL() { return GetToken(MySqlParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_USER_CONNECTIONS_SYMBOL() { return GetToken(MySqlParser.MAX_USER_CONNECTIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUM_SYMBOL() { return GetToken(MySqlParser.MEDIUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY_SYMBOL() { return GetToken(MySqlParser.MEMORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE_SYMBOL() { return GetToken(MySqlParser.MERGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE_TEXT_SYMBOL() { return GetToken(MySqlParser.MESSAGE_TEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROSECOND_SYMBOL() { return GetToken(MySqlParser.MICROSECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIGRATE_SYMBOL() { return GetToken(MySqlParser.MIGRATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_SYMBOL() { return GetToken(MySqlParser.MINUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_ROWS_SYMBOL() { return GetToken(MySqlParser.MIN_ROWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFY_SYMBOL() { return GetToken(MySqlParser.MODIFY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODE_SYMBOL() { return GetToken(MySqlParser.MODE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH_SYMBOL() { return GetToken(MySqlParser.MONTH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTILINESTRING_SYMBOL() { return GetToken(MySqlParser.MULTILINESTRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOINT_SYMBOL() { return GetToken(MySqlParser.MULTIPOINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOLYGON_SYMBOL() { return GetToken(MySqlParser.MULTIPOLYGON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUTEX_SYMBOL() { return GetToken(MySqlParser.MUTEX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MySql_ERRNO_SYMBOL() { return GetToken(MySqlParser.MySql_ERRNO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME_SYMBOL() { return GetToken(MySqlParser.NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMES_SYMBOL() { return GetToken(MySqlParser.NAMES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIONAL_SYMBOL() { return GetToken(MySqlParser.NATIONAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR_SYMBOL() { return GetToken(MySqlParser.NCHAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NDBCLUSTER_SYMBOL() { return GetToken(MySqlParser.NDBCLUSTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NESTED_SYMBOL() { return GetToken(MySqlParser.NESTED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEVER_SYMBOL() { return GetToken(MySqlParser.NEVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT_SYMBOL() { return GetToken(MySqlParser.NEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_SYMBOL() { return GetToken(MySqlParser.NEW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_WAIT_SYMBOL() { return GetToken(MySqlParser.NO_WAIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODEGROUP_SYMBOL() { return GetToken(MySqlParser.NODEGROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS_SYMBOL() { return GetToken(MySqlParser.NULLS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOWAIT_SYMBOL() { return GetToken(MySqlParser.NOWAIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_SYMBOL() { return GetToken(MySqlParser.NUMBER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NVARCHAR_SYMBOL() { return GetToken(MySqlParser.NVARCHAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET_SYMBOL() { return GetToken(MySqlParser.OFFSET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD_SYMBOL() { return GetToken(MySqlParser.OLD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD_PASSWORD_SYMBOL() { return GetToken(MySqlParser.OLD_PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_SYMBOL() { return GetToken(MySqlParser.ONE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL_SYMBOL() { return GetToken(MySqlParser.OPTIONAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDINALITY_SYMBOL() { return GetToken(MySqlParser.ORDINALITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORGANIZATION_SYMBOL() { return GetToken(MySqlParser.ORGANIZATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERS_SYMBOL() { return GetToken(MySqlParser.OTHERS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACK_KEYS_SYMBOL() { return GetToken(MySqlParser.PACK_KEYS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAGE_SYMBOL() { return GetToken(MySqlParser.PAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL_SYMBOL() { return GetToken(MySqlParser.PARTIAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONING_SYMBOL() { return GetToken(MySqlParser.PARTITIONING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONS_SYMBOL() { return GetToken(MySqlParser.PARTITIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySqlParser.PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATH_SYMBOL() { return GetToken(MySqlParser.PATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHASE_SYMBOL() { return GetToken(MySqlParser.PHASE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN_DIR_SYMBOL() { return GetToken(MySqlParser.PLUGIN_DIR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN_SYMBOL() { return GetToken(MySqlParser.PLUGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGINS_SYMBOL() { return GetToken(MySqlParser.PLUGINS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINT_SYMBOL() { return GetToken(MySqlParser.POINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGON_SYMBOL() { return GetToken(MySqlParser.POLYGON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING_SYMBOL() { return GetToken(MySqlParser.PRECEDING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE_SYMBOL() { return GetToken(MySqlParser.PRESERVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREV_SYMBOL() { return GetToken(MySqlParser.PREV_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THREAD_PRIORITY_SYMBOL() { return GetToken(MySqlParser.THREAD_PRIORITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES_SYMBOL() { return GetToken(MySqlParser.PRIVILEGES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESSLIST_SYMBOL() { return GetToken(MySqlParser.PROCESSLIST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILE_SYMBOL() { return GetToken(MySqlParser.PROFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILES_SYMBOL() { return GetToken(MySqlParser.PROFILES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUARTER_SYMBOL() { return GetToken(MySqlParser.QUARTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY_SYMBOL() { return GetToken(MySqlParser.QUERY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK_SYMBOL() { return GetToken(MySqlParser.QUICK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_ONLY_SYMBOL() { return GetToken(MySqlParser.READ_ONLY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REBUILD_SYMBOL() { return GetToken(MySqlParser.REBUILD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECOVER_SYMBOL() { return GetToken(MySqlParser.RECOVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDO_BUFFER_SIZE_SYMBOL() { return GetToken(MySqlParser.REDO_BUFFER_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDOFILE_SYMBOL() { return GetToken(MySqlParser.REDOFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDUNDANT_SYMBOL() { return GetToken(MySqlParser.REDUNDANT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_SYMBOL() { return GetToken(MySqlParser.RELAY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAYLOG_SYMBOL() { return GetToken(MySqlParser.RELAYLOG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_FILE_SYMBOL() { return GetToken(MySqlParser.RELAY_LOG_FILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_POS_SYMBOL() { return GetToken(MySqlParser.RELAY_LOG_POS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_THREAD_SYMBOL() { return GetToken(MySqlParser.RELAY_THREAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOTE_SYMBOL() { return GetToken(MySqlParser.REMOTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REORGANIZE_SYMBOL() { return GetToken(MySqlParser.REORGANIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE_SYMBOL() { return GetToken(MySqlParser.REPEATABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_DO_DB_SYMBOL() { return GetToken(MySqlParser.REPLICATE_DO_DB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_IGNORE_DB_SYMBOL() { return GetToken(MySqlParser.REPLICATE_IGNORE_DB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_DO_TABLE_SYMBOL() { return GetToken(MySqlParser.REPLICATE_DO_TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_IGNORE_TABLE_SYMBOL() { return GetToken(MySqlParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_WILD_DO_TABLE_SYMBOL() { return GetToken(MySqlParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_WILD_IGNORE_TABLE_SYMBOL() { return GetToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_REWRITE_DB_SYMBOL() { return GetToken(MySqlParser.REPLICATE_REWRITE_DB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_RESOURCES_SYMBOL() { return GetToken(MySqlParser.USER_RESOURCES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESPECT_SYMBOL() { return GetToken(MySqlParser.RESPECT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESUME_SYMBOL() { return GetToken(MySqlParser.RESUME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN_SYMBOL() { return GetToken(MySqlParser.RETAIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNED_SQLSTATE_SYMBOL() { return GetToken(MySqlParser.RETURNED_SQLSTATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS_SYMBOL() { return GetToken(MySqlParser.RETURNS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REUSE_SYMBOL() { return GetToken(MySqlParser.REUSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE_SYMBOL() { return GetToken(MySqlParser.REVERSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP_SYMBOL() { return GetToken(MySqlParser.ROLLUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROTATE_SYMBOL() { return GetToken(MySqlParser.ROTATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE_SYMBOL() { return GetToken(MySqlParser.ROUTINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_COUNT_SYMBOL() { return GetToken(MySqlParser.ROW_COUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_FORMAT_SYMBOL() { return GetToken(MySqlParser.ROW_FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTREE_SYMBOL() { return GetToken(MySqlParser.RTREE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEDULE_SYMBOL() { return GetToken(MySqlParser.SCHEDULE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA_NAME_SYMBOL() { return GetToken(MySqlParser.SCHEMA_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND_SYMBOL() { return GetToken(MySqlParser.SECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIAL_SYMBOL() { return GetToken(MySqlParser.SERIAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIALIZABLE_SYMBOL() { return GetToken(MySqlParser.SERIALIZABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_SYMBOL() { return GetToken(MySqlParser.SESSION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE_SYMBOL() { return GetToken(MySqlParser.SHARE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE_SYMBOL() { return GetToken(MySqlParser.SIMPLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIP_SYMBOL() { return GetToken(MySqlParser.SKIP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLOW_SYMBOL() { return GetToken(MySqlParser.SLOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT_SYMBOL() { return GetToken(MySqlParser.SNAPSHOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOUNDS_SYMBOL() { return GetToken(MySqlParser.SOUNDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SYMBOL() { return GetToken(MySqlParser.SOURCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_AFTER_GTIDS_SYMBOL() { return GetToken(MySqlParser.SQL_AFTER_GTIDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_AFTER_MTS_GAPS_SYMBOL() { return GetToken(MySqlParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BEFORE_GTIDS_SYMBOL() { return GetToken(MySqlParser.SQL_BEFORE_GTIDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_CACHE_SYMBOL() { return GetToken(MySqlParser.SQL_CACHE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BUFFER_RESULT_SYMBOL() { return GetToken(MySqlParser.SQL_BUFFER_RESULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_NO_CACHE_SYMBOL() { return GetToken(MySqlParser.SQL_NO_CACHE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_THREAD_SYMBOL() { return GetToken(MySqlParser.SQL_THREAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SRID_SYMBOL() { return GetToken(MySqlParser.SRID_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACKED_SYMBOL() { return GetToken(MySqlParser.STACKED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTS_SYMBOL() { return GetToken(MySqlParser.STARTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_AUTO_RECALC_SYMBOL() { return GetToken(MySqlParser.STATS_AUTO_RECALC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_PERSISTENT_SYMBOL() { return GetToken(MySqlParser.STATS_PERSISTENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_SAMPLE_PAGES_SYMBOL() { return GetToken(MySqlParser.STATS_SAMPLE_PAGES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS_SYMBOL() { return GetToken(MySqlParser.STATUS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE_SYMBOL() { return GetToken(MySqlParser.STORAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_SYMBOL() { return GetToken(MySqlParser.STRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBCLASS_ORIGIN_SYMBOL() { return GetToken(MySqlParser.SUBCLASS_ORIGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBDATE_SYMBOL() { return GetToken(MySqlParser.SUBDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBJECT_SYMBOL() { return GetToken(MySqlParser.SUBJECT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITION_SYMBOL() { return GetToken(MySqlParser.SUBPARTITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITIONS_SYMBOL() { return GetToken(MySqlParser.SUBPARTITIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER_SYMBOL() { return GetToken(MySqlParser.SUPER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUSPEND_SYMBOL() { return GetToken(MySqlParser.SUSPEND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWAPS_SYMBOL() { return GetToken(MySqlParser.SWAPS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCHES_SYMBOL() { return GetToken(MySqlParser.SWITCHES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_NAME_SYMBOL() { return GetToken(MySqlParser.TABLE_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES_SYMBOL() { return GetToken(MySqlParser.TABLES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_CHECKSUM_SYMBOL() { return GetToken(MySqlParser.TABLE_CHECKSUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySqlParser.TABLESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY_SYMBOL() { return GetToken(MySqlParser.TEMPORARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPTABLE_SYMBOL() { return GetToken(MySqlParser.TEMPTABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_SYMBOL() { return GetToken(MySqlParser.TEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THAN_SYMBOL() { return GetToken(MySqlParser.THAN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIES_SYMBOL() { return GetToken(MySqlParser.TIES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION_SYMBOL() { return GetToken(MySqlParser.TRANSACTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGERS_SYMBOL() { return GetToken(MySqlParser.TRIGGERS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP_SYMBOL() { return GetToken(MySqlParser.TIMESTAMP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP_ADD_SYMBOL() { return GetToken(MySqlParser.TIMESTAMP_ADD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP_DIFF_SYMBOL() { return GetToken(MySqlParser.TIMESTAMP_DIFF_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_SYMBOL() { return GetToken(MySqlParser.TIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPES_SYMBOL() { return GetToken(MySqlParser.TYPES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_SYMBOL() { return GetToken(MySqlParser.TYPE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UDF_RETURNS_SYMBOL() { return GetToken(MySqlParser.UDF_RETURNS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED_SYMBOL() { return GetToken(MySqlParser.UNBOUNDED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMMITTED_SYMBOL() { return GetToken(MySqlParser.UNCOMMITTED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDEFINED_SYMBOL() { return GetToken(MySqlParser.UNDEFINED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDO_BUFFER_SIZE_SYMBOL() { return GetToken(MySqlParser.UNDO_BUFFER_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDOFILE_SYMBOL() { return GetToken(MySqlParser.UNDOFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN_SYMBOL() { return GetToken(MySqlParser.UNKNOWN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL_SYMBOL() { return GetToken(MySqlParser.UNTIL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySqlParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_FRM_SYMBOL() { return GetToken(MySqlParser.USE_FRM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLES_SYMBOL() { return GetToken(MySqlParser.VARIABLES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VCPU_SYMBOL() { return GetToken(MySqlParser.VCPU_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW_SYMBOL() { return GetToken(MySqlParser.VIEW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_SYMBOL() { return GetToken(MySqlParser.VALUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WARNINGS_SYMBOL() { return GetToken(MySqlParser.WARNINGS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT_SYMBOL() { return GetToken(MySqlParser.WAIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEK_SYMBOL() { return GetToken(MySqlParser.WEEK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK_SYMBOL() { return GetToken(MySqlParser.WORK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEIGHT_STRING_SYMBOL() { return GetToken(MySqlParser.WEIGHT_STRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode X509_SYMBOL() { return GetToken(MySqlParser.X509_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XID_SYMBOL() { return GetToken(MySqlParser.XID_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML_SYMBOL() { return GetToken(MySqlParser.XML_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR_SYMBOL() { return GetToken(MySqlParser.YEAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHUTDOWN_SYMBOL() { return GetToken(MySqlParser.SHUTDOWN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUBE_SYMBOL() { return GetToken(MySqlParser.CUBE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT_SYMBOL() { return GetToken(MySqlParser.IMPORT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION_SYMBOL() { return GetToken(MySqlParser.FUNCTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS_SYMBOL() { return GetToken(MySqlParser.ROWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_SYMBOL() { return GetToken(MySqlParser.ROW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCHANGE_SYMBOL() { return GetToken(MySqlParser.EXCHANGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPIRE_SYMBOL() { return GetToken(MySqlParser.EXPIRE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY_SYMBOL() { return GetToken(MySqlParser.ONLY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATION_SYMBOL() { return GetToken(MySqlParser.VALIDATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT_SYMBOL() { return GetToken(MySqlParser.WITHOUT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN_SYMBOL() { return GetToken(MySqlParser.ADMIN_SYMBOL, 0); }
		public RoleOrLabelKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleOrLabelKeyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoleOrLabelKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoleOrLabelKeyword(this);
		}
	}

	[RuleVersion(0)]
	public RoleOrLabelKeywordContext roleOrLabelKeyword() {
		RoleOrLabelKeywordContext _localctx = new RoleOrLabelKeywordContext(Context, State);
		EnterRule(_localctx, 1218, RULE_roleOrLabelKeyword);
		int _la;
		try {
			State = 8414;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1122,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8405;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACTION_SYMBOL) | (1L << ADDDATE_SYMBOL) | (1L << AFTER_SYMBOL) | (1L << AGAINST_SYMBOL) | (1L << AGGREGATE_SYMBOL) | (1L << ALGORITHM_SYMBOL) | (1L << ANALYSE_SYMBOL) | (1L << ANY_SYMBOL) | (1L << AT_SYMBOL) | (1L << AUTHORS_SYMBOL) | (1L << AUTOEXTEND_SIZE_SYMBOL) | (1L << AUTO_INCREMENT_SYMBOL) | (1L << AVG_ROW_LENGTH_SYMBOL) | (1L << AVG_SYMBOL) | (1L << BINLOG_SYMBOL) | (1L << BIT_SYMBOL) | (1L << BLOCK_SYMBOL) | (1L << BOOLEAN_SYMBOL) | (1L << BOOL_SYMBOL) | (1L << BTREE_SYMBOL) | (1L << CASCADED_SYMBOL) | (1L << CATALOG_NAME_SYMBOL) | (1L << CHAIN_SYMBOL) | (1L << CHANGED_SYMBOL) | (1L << CHANNEL_SYMBOL) | (1L << CIPHER_SYMBOL))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS_ORIGIN_SYMBOL - 64)) | (1L << (CLIENT_SYMBOL - 64)) | (1L << (COALESCE_SYMBOL - 64)) | (1L << (CODE_SYMBOL - 64)) | (1L << (COLLATION_SYMBOL - 64)) | (1L << (COLUMNS_SYMBOL - 64)) | (1L << (COLUMN_NAME_SYMBOL - 64)) | (1L << (COLUMN_FORMAT_SYMBOL - 64)) | (1L << (COMMITTED_SYMBOL - 64)) | (1L << (COMPACT_SYMBOL - 64)) | (1L << (COMPLETION_SYMBOL - 64)) | (1L << (COMPRESSED_SYMBOL - 64)) | (1L << (COMPRESSION_SYMBOL - 64)) | (1L << (CONCURRENT_SYMBOL - 64)) | (1L << (CONNECTION_SYMBOL - 64)) | (1L << (CONSISTENT_SYMBOL - 64)) | (1L << (CONSTRAINT_CATALOG_SYMBOL - 64)) | (1L << (CONSTRAINT_NAME_SYMBOL - 64)) | (1L << (CONSTRAINT_SCHEMA_SYMBOL - 64)) | (1L << (CONTEXT_SYMBOL - 64)) | (1L << (CONTRIBUTORS_SYMBOL - 64)) | (1L << (CPU_SYMBOL - 64)) | (1L << (CURRENT_SYMBOL - 64)) | (1L << (CURSOR_NAME_SYMBOL - 64)) | (1L << (DATAFILE_SYMBOL - 64)) | (1L << (DATA_SYMBOL - 64)) | (1L << (DATETIME_SYMBOL - 64)) | (1L << (DATE_SYMBOL - 64)) | (1L << (DAY_SYMBOL - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULT_AUTH_SYMBOL - 129)) | (1L << (DEFINER_SYMBOL - 129)) | (1L << (DELAY_KEY_WRITE_SYMBOL - 129)) | (1L << (DES_KEY_FILE_SYMBOL - 129)) | (1L << (DIAGNOSTICS_SYMBOL - 129)) | (1L << (DIRECTORY_SYMBOL - 129)) | (1L << (DISABLE_SYMBOL - 129)) | (1L << (DISCARD_SYMBOL - 129)) | (1L << (DISK_SYMBOL - 129)) | (1L << (DUMPFILE_SYMBOL - 129)) | (1L << (DUPLICATE_SYMBOL - 129)) | (1L << (DYNAMIC_SYMBOL - 129)) | (1L << (ENABLE_SYMBOL - 129)) | (1L << (ENCRYPTION_SYMBOL - 129)) | (1L << (ENDS_SYMBOL - 129)) | (1L << (ENGINES_SYMBOL - 129)) | (1L << (ENGINE_SYMBOL - 129)) | (1L << (ENUM_SYMBOL - 129)) | (1L << (ERROR_SYMBOL - 129)) | (1L << (ERRORS_SYMBOL - 129)) | (1L << (ESCAPE_SYMBOL - 129)) | (1L << (EVENTS_SYMBOL - 129)) | (1L << (EVERY_SYMBOL - 129)) | (1L << (EXPANSION_SYMBOL - 129)) | (1L << (EXPORT_SYMBOL - 129)) | (1L << (EXTENDED_SYMBOL - 129)) | (1L << (EXTENT_SIZE_SYMBOL - 129)) | (1L << (FAST_SYMBOL - 129)) | (1L << (FAULTS_SYMBOL - 129)) | (1L << (FILE_BLOCK_SIZE_SYMBOL - 129)) | (1L << (FILTER_SYMBOL - 129)) | (1L << (FIRST_SYMBOL - 129)) | (1L << (FIXED_SYMBOL - 129)))) != 0) || ((((_la - 202)) & ~0x3f) == 0 && ((1L << (_la - 202)) & ((1L << (FOUND_SYMBOL - 202)) | (1L << (FULL_SYMBOL - 202)) | (1L << (GENERAL_SYMBOL - 202)) | (1L << (GEOMETRYCOLLECTION_SYMBOL - 202)) | (1L << (GEOMETRY_SYMBOL - 202)) | (1L << (GET_FORMAT_SYMBOL - 202)) | (1L << (GLOBAL_SYMBOL - 202)) | (1L << (GRANTS_SYMBOL - 202)) | (1L << (HASH_SYMBOL - 202)) | (1L << (HOSTS_SYMBOL - 202)) | (1L << (HOUR_SYMBOL - 202)) | (1L << (IDENTIFIED_SYMBOL - 202)) | (1L << (IGNORE_SERVER_IDS_SYMBOL - 202)) | (1L << (INDEXES_SYMBOL - 202)) | (1L << (INITIAL_SIZE_SYMBOL - 202)) | (1L << (INSERT_METHOD_SYMBOL - 202)) | (1L << (INSTANCE_SYMBOL - 202)) | (1L << (INVOKER_SYMBOL - 202)) | (1L << (IO_SYMBOL - 202)) | (1L << (IPC_SYMBOL - 202)) | (1L << (ISOLATION_SYMBOL - 202)) | (1L << (ISSUER_SYMBOL - 202)) | (1L << (JSON_SYMBOL - 202)) | (1L << (KEY_BLOCK_SIZE_SYMBOL - 202)))) != 0) || ((((_la - 268)) & ~0x3f) == 0 && ((1L << (_la - 268)) & ((1L << (LAST_SYMBOL - 268)) | (1L << (LEAVES_SYMBOL - 268)) | (1L << (LESS_SYMBOL - 268)) | (1L << (LEVEL_SYMBOL - 268)) | (1L << (LINESTRING_SYMBOL - 268)) | (1L << (LIST_SYMBOL - 268)) | (1L << (LOCAL_SYMBOL - 268)) | (1L << (LOCKS_SYMBOL - 268)) | (1L << (LOGFILE_SYMBOL - 268)) | (1L << (LOGS_SYMBOL - 268)) | (1L << (MASTER_AUTO_POSITION_SYMBOL - 268)) | (1L << (MASTER_CONNECT_RETRY_SYMBOL - 268)) | (1L << (MASTER_DELAY_SYMBOL - 268)) | (1L << (MASTER_HOST_SYMBOL - 268)) | (1L << (MASTER_LOG_FILE_SYMBOL - 268)) | (1L << (MASTER_LOG_POS_SYMBOL - 268)) | (1L << (MASTER_PASSWORD_SYMBOL - 268)) | (1L << (MASTER_PORT_SYMBOL - 268)) | (1L << (MASTER_RETRY_COUNT_SYMBOL - 268)) | (1L << (MASTER_SERVER_ID_SYMBOL - 268)) | (1L << (MASTER_SSL_CAPATH_SYMBOL - 268)) | (1L << (MASTER_SSL_CA_SYMBOL - 268)) | (1L << (MASTER_SSL_CERT_SYMBOL - 268)) | (1L << (MASTER_SSL_CIPHER_SYMBOL - 268)) | (1L << (MASTER_SSL_CRL_SYMBOL - 268)) | (1L << (MASTER_SSL_CRLPATH_SYMBOL - 268)) | (1L << (MASTER_SSL_KEY_SYMBOL - 268)) | (1L << (MASTER_SSL_SYMBOL - 268)) | (1L << (MASTER_SYMBOL - 268)) | (1L << (MASTER_TLS_VERSION_SYMBOL - 268)) | (1L << (MASTER_USER_SYMBOL - 268)) | (1L << (MASTER_HEARTBEAT_PERIOD_SYMBOL - 268)) | (1L << (MAX_CONNECTIONS_PER_HOUR_SYMBOL - 268)) | (1L << (MAX_QUERIES_PER_HOUR_SYMBOL - 268)) | (1L << (MAX_ROWS_SYMBOL - 268)) | (1L << (MAX_SIZE_SYMBOL - 268)) | (1L << (MAX_STATEMENT_TIME_SYMBOL - 268)) | (1L << (MAX_UPDATES_PER_HOUR_SYMBOL - 268)) | (1L << (MAX_USER_CONNECTIONS_SYMBOL - 268)))) != 0) || ((((_la - 333)) & ~0x3f) == 0 && ((1L << (_la - 333)) & ((1L << (MEDIUM_SYMBOL - 333)) | (1L << (MEMORY_SYMBOL - 333)) | (1L << (MERGE_SYMBOL - 333)) | (1L << (MESSAGE_TEXT_SYMBOL - 333)) | (1L << (MICROSECOND_SYMBOL - 333)) | (1L << (MIGRATE_SYMBOL - 333)) | (1L << (MINUTE_SYMBOL - 333)) | (1L << (MIN_ROWS_SYMBOL - 333)) | (1L << (MODE_SYMBOL - 333)) | (1L << (MODIFY_SYMBOL - 333)) | (1L << (MONTH_SYMBOL - 333)) | (1L << (MULTILINESTRING_SYMBOL - 333)) | (1L << (MULTIPOINT_SYMBOL - 333)) | (1L << (MULTIPOLYGON_SYMBOL - 333)) | (1L << (MUTEX_SYMBOL - 333)) | (1L << (MySql_ERRNO_SYMBOL - 333)) | (1L << (NAMES_SYMBOL - 333)) | (1L << (NAME_SYMBOL - 333)) | (1L << (NATIONAL_SYMBOL - 333)) | (1L << (NCHAR_SYMBOL - 333)) | (1L << (NDBCLUSTER_SYMBOL - 333)) | (1L << (NEVER_SYMBOL - 333)) | (1L << (NEW_SYMBOL - 333)) | (1L << (NEXT_SYMBOL - 333)) | (1L << (NODEGROUP_SYMBOL - 333)) | (1L << (NO_WAIT_SYMBOL - 333)) | (1L << (NUMBER_SYMBOL - 333)) | (1L << (NVARCHAR_SYMBOL - 333)) | (1L << (OFFSET_SYMBOL - 333)) | (1L << (OLD_PASSWORD_SYMBOL - 333)) | (1L << (ONE_SYMBOL - 333)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (PACK_KEYS_SYMBOL - 399)) | (1L << (PAGE_SYMBOL - 399)) | (1L << (PARTIAL_SYMBOL - 399)) | (1L << (PARTITIONING_SYMBOL - 399)) | (1L << (PARTITIONS_SYMBOL - 399)) | (1L << (PASSWORD_SYMBOL - 399)) | (1L << (PHASE_SYMBOL - 399)) | (1L << (PLUGINS_SYMBOL - 399)) | (1L << (PLUGIN_DIR_SYMBOL - 399)) | (1L << (PLUGIN_SYMBOL - 399)) | (1L << (POINT_SYMBOL - 399)) | (1L << (POLYGON_SYMBOL - 399)) | (1L << (PRESERVE_SYMBOL - 399)) | (1L << (PREV_SYMBOL - 399)) | (1L << (PRIVILEGES_SYMBOL - 399)) | (1L << (PROCESSLIST_SYMBOL - 399)) | (1L << (PROFILE_SYMBOL - 399)) | (1L << (PROFILES_SYMBOL - 399)) | (1L << (QUARTER_SYMBOL - 399)) | (1L << (QUERY_SYMBOL - 399)) | (1L << (QUICK_SYMBOL - 399)) | (1L << (READ_ONLY_SYMBOL - 399)) | (1L << (REBUILD_SYMBOL - 399)) | (1L << (RECOVER_SYMBOL - 399)) | (1L << (REDOFILE_SYMBOL - 399)) | (1L << (REDO_BUFFER_SIZE_SYMBOL - 399)) | (1L << (REDUNDANT_SYMBOL - 399)) | (1L << (RELAY_SYMBOL - 399)) | (1L << (RELAYLOG_SYMBOL - 399)) | (1L << (RELAY_LOG_FILE_SYMBOL - 399)) | (1L << (RELAY_LOG_POS_SYMBOL - 399)) | (1L << (RELAY_THREAD_SYMBOL - 399)) | (1L << (REORGANIZE_SYMBOL - 399)) | (1L << (REPEATABLE_SYMBOL - 399)) | (1L << (REPLICATE_DO_DB_SYMBOL - 399)) | (1L << (REPLICATE_IGNORE_DB_SYMBOL - 399)) | (1L << (REPLICATE_DO_TABLE_SYMBOL - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (REPLICATE_IGNORE_TABLE_SYMBOL - 463)) | (1L << (REPLICATE_WILD_DO_TABLE_SYMBOL - 463)) | (1L << (REPLICATE_WILD_IGNORE_TABLE_SYMBOL - 463)) | (1L << (REPLICATE_REWRITE_DB_SYMBOL - 463)) | (1L << (RESUME_SYMBOL - 463)) | (1L << (RETURNED_SQLSTATE_SYMBOL - 463)) | (1L << (RETURNS_SYMBOL - 463)) | (1L << (REVERSE_SYMBOL - 463)) | (1L << (ROLLUP_SYMBOL - 463)) | (1L << (ROTATE_SYMBOL - 463)) | (1L << (ROUTINE_SYMBOL - 463)) | (1L << (ROW_COUNT_SYMBOL - 463)) | (1L << (ROW_FORMAT_SYMBOL - 463)) | (1L << (RTREE_SYMBOL - 463)) | (1L << (SCHEDULE_SYMBOL - 463)) | (1L << (SCHEMA_NAME_SYMBOL - 463)) | (1L << (SECOND_SYMBOL - 463)) | (1L << (SERIALIZABLE_SYMBOL - 463)) | (1L << (SERIAL_SYMBOL - 463)) | (1L << (SESSION_SYMBOL - 463)) | (1L << (SHARE_SYMBOL - 463)) | (1L << (SIMPLE_SYMBOL - 463)) | (1L << (SLOW_SYMBOL - 463)) | (1L << (SNAPSHOT_SYMBOL - 463)) | (1L << (SOUNDS_SYMBOL - 463)) | (1L << (SOURCE_SYMBOL - 463)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (SQL_AFTER_GTIDS_SYMBOL - 528)) | (1L << (SQL_AFTER_MTS_GAPS_SYMBOL - 528)) | (1L << (SQL_BEFORE_GTIDS_SYMBOL - 528)) | (1L << (SQL_BUFFER_RESULT_SYMBOL - 528)) | (1L << (SQL_CACHE_SYMBOL - 528)) | (1L << (SQL_NO_CACHE_SYMBOL - 528)) | (1L << (SQL_THREAD_SYMBOL - 528)) | (1L << (STACKED_SYMBOL - 528)) | (1L << (STARTS_SYMBOL - 528)) | (1L << (STATS_AUTO_RECALC_SYMBOL - 528)) | (1L << (STATS_PERSISTENT_SYMBOL - 528)) | (1L << (STATS_SAMPLE_PAGES_SYMBOL - 528)) | (1L << (STATUS_SYMBOL - 528)) | (1L << (STORAGE_SYMBOL - 528)) | (1L << (STRING_SYMBOL - 528)) | (1L << (SUBCLASS_ORIGIN_SYMBOL - 528)) | (1L << (SUBDATE_SYMBOL - 528)) | (1L << (SUBJECT_SYMBOL - 528)) | (1L << (SUBPARTITIONS_SYMBOL - 528)) | (1L << (SUBPARTITION_SYMBOL - 528)) | (1L << (SUPER_SYMBOL - 528)) | (1L << (SUSPEND_SYMBOL - 528)) | (1L << (SWAPS_SYMBOL - 528)) | (1L << (SWITCHES_SYMBOL - 528)) | (1L << (TABLES_SYMBOL - 528)) | (1L << (TABLESPACE_SYMBOL - 528)) | (1L << (TABLE_CHECKSUM_SYMBOL - 528)) | (1L << (TABLE_NAME_SYMBOL - 528)) | (1L << (TEMPORARY_SYMBOL - 528)) | (1L << (TEMPTABLE_SYMBOL - 528)) | (1L << (TEXT_SYMBOL - 528)) | (1L << (THAN_SYMBOL - 528)) | (1L << (TIMESTAMP_SYMBOL - 528)) | (1L << (TIMESTAMP_ADD_SYMBOL - 528)) | (1L << (TIMESTAMP_DIFF_SYMBOL - 528)) | (1L << (TIME_SYMBOL - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (TRANSACTION_SYMBOL - 592)) | (1L << (TRIGGERS_SYMBOL - 592)) | (1L << (TYPES_SYMBOL - 592)) | (1L << (TYPE_SYMBOL - 592)) | (1L << (UDF_RETURNS_SYMBOL - 592)) | (1L << (UNCOMMITTED_SYMBOL - 592)) | (1L << (UNDEFINED_SYMBOL - 592)) | (1L << (UNDOFILE_SYMBOL - 592)) | (1L << (UNDO_BUFFER_SIZE_SYMBOL - 592)) | (1L << (UNKNOWN_SYMBOL - 592)) | (1L << (UNTIL_SYMBOL - 592)) | (1L << (USER_RESOURCES_SYMBOL - 592)) | (1L << (USER_SYMBOL - 592)) | (1L << (USE_FRM_SYMBOL - 592)) | (1L << (VALUE_SYMBOL - 592)) | (1L << (VARIABLES_SYMBOL - 592)) | (1L << (VIEW_SYMBOL - 592)) | (1L << (WAIT_SYMBOL - 592)) | (1L << (WARNINGS_SYMBOL - 592)) | (1L << (WEEK_SYMBOL - 592)) | (1L << (WEIGHT_STRING_SYMBOL - 592)) | (1L << (WORK_SYMBOL - 592)) | (1L << (X509_SYMBOL - 592)) | (1L << (XID_SYMBOL - 592)) | (1L << (XML_SYMBOL - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (YEAR_SYMBOL - 656)) | (1L << (COMPONENT_SYMBOL - 656)) | (1L << (SKIP_SYMBOL - 656)) | (1L << (LOCKED_SYMBOL - 656)) | (1L << (NOWAIT_SYMBOL - 656)) | (1L << (HISTOGRAM_SYMBOL - 656)) | (1L << (BUCKETS_SYMBOL - 656)) | (1L << (REMOTE_SYMBOL - 656)) | (1L << (EXCLUDE_SYMBOL - 656)) | (1L << (FOLLOWING_SYMBOL - 656)) | (1L << (NULLS_SYMBOL - 656)) | (1L << (OTHERS_SYMBOL - 656)) | (1L << (PRECEDING_SYMBOL - 656)) | (1L << (RESPECT_SYMBOL - 656)) | (1L << (TIES_SYMBOL - 656)) | (1L << (UNBOUNDED_SYMBOL - 656)) | (1L << (NESTED_SYMBOL - 656)) | (1L << (ORDINALITY_SYMBOL - 656)) | (1L << (PATH_SYMBOL - 656)) | (1L << (HISTORY_SYMBOL - 656)) | (1L << (REUSE_SYMBOL - 656)) | (1L << (SRID_SYMBOL - 656)) | (1L << (THREAD_PRIORITY_SYMBOL - 656)) | (1L << (VCPU_SYMBOL - 656)) | (1L << (MASTER_PUBLIC_KEY_PATH_SYMBOL - 656)) | (1L << (DESCRIPTION_SYMBOL - 656)) | (1L << (ORGANIZATION_SYMBOL - 656)) | (1L << (OPTIONAL_SYMBOL - 656)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (ACTIVE_SYMBOL - 724)) | (1L << (INACTIVE_SYMBOL - 724)) | (1L << (RETAIN_SYMBOL - 724)) | (1L << (OLD_SYMBOL - 724)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8406;
				if (!(serverVersion < 50709)) throw new FailedPredicateException(this, "serverVersion < 50709");
				State = 8407;
				Match(SHUTDOWN_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8408;
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				State = 8409;
				_la = TokenStream.LA(1);
				if ( !(_la==CUBE_SYMBOL || _la==FUNCTION_SYMBOL || _la==IMPORT_SYMBOL || _la==ROWS_SYMBOL || _la==ROW_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8410;
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				State = 8411;
				_la = TokenStream.LA(1);
				if ( !(_la==EXCHANGE_SYMBOL || _la==EXPIRE_SYMBOL || _la==ONLY_SYMBOL || _la==SUPER_SYMBOL || _la==VALIDATION_SYMBOL || _la==WITHOUT_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8412;
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				State = 8413;
				Match(ADMIN_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return simpleStatement_sempred((SimpleStatementContext)_localctx, predIndex);
		case 2: return alterStatement_sempred((AlterStatementContext)_localctx, predIndex);
		case 3: return alterDatabase_sempred((AlterDatabaseContext)_localctx, predIndex);
		case 9: return alterTable_sempred((AlterTableContext)_localctx, predIndex);
		case 13: return standaloneAlterCommands_sempred((StandaloneAlterCommandsContext)_localctx, predIndex);
		case 14: return alterPartition_sempred((AlterPartitionContext)_localctx, predIndex);
		case 17: return alterListItem_sempred((AlterListItemContext)_localctx, predIndex);
		case 24: return withValidation_sempred((WithValidationContext)_localctx, predIndex);
		case 27: return alterTablespace_sempred((AlterTablespaceContext)_localctx, predIndex);
		case 38: return createStatement_sempred((CreateStatementContext)_localctx, predIndex);
		case 40: return createDatabaseOption_sempred((CreateDatabaseOptionContext)_localctx, predIndex);
		case 53: return createIndex_sempred((CreateIndexContext)_localctx, predIndex);
		case 64: return tsDataFileName_sempred((TsDataFileNameContext)_localctx, predIndex);
		case 67: return tablespaceOption_sempred((TablespaceOptionContext)_localctx, predIndex);
		case 84: return triggerFollowsPrecedesClause_sempred((TriggerFollowsPrecedesClauseContext)_localctx, predIndex);
		case 89: return dropStatement_sempred((DropStatementContext)_localctx, predIndex);
		case 110: return deleteStatement_sempred((DeleteStatementContext)_localctx, predIndex);
		case 111: return partitionDelete_sempred((PartitionDeleteContext)_localctx, predIndex);
		case 113: return doStatement_sempred((DoStatementContext)_localctx, predIndex);
		case 116: return insertStatement_sempred((InsertStatementContext)_localctx, predIndex);
		case 135: return queryExpression_sempred((QueryExpressionContext)_localctx, predIndex);
		case 138: return queryPrimary_sempred((QueryPrimaryContext)_localctx, predIndex);
		case 139: return querySpecification_sempred((QuerySpecificationContext)_localctx, predIndex);
		case 163: return olapOption_sempred((OlapOptionContext)_localctx, predIndex);
		case 171: return selectOption_sempred((SelectOptionContext)_localctx, predIndex);
		case 173: return lockingClause_sempred((LockingClauseContext)_localctx, predIndex);
		case 174: return lockStrengh_sempred((LockStrenghContext)_localctx, predIndex);
		case 180: return tableReference_sempred((TableReferenceContext)_localctx, predIndex);
		case 186: return tableFactor_sempred((TableFactorContext)_localctx, predIndex);
		case 189: return derivedTable_sempred((DerivedTableContext)_localctx, predIndex);
		case 193: return jtColumn_sempred((JtColumnContext)_localctx, predIndex);
		case 199: return tableAlias_sempred((TableAliasContext)_localctx, predIndex);
		case 208: return updateStatement_sempred((UpdateStatementContext)_localctx, predIndex);
		case 212: return transactionCharacteristic_sempred((TransactionCharacteristicContext)_localctx, predIndex);
		case 214: return lockStatement_sempred((LockStatementContext)_localctx, predIndex);
		case 218: return xaConvert_sempred((XaConvertContext)_localctx, predIndex);
		case 220: return replicationStatement_sempred((ReplicationStatementContext)_localctx, predIndex);
		case 221: return resetOption_sempred((ResetOptionContext)_localctx, predIndex);
		case 222: return masterResetOptions_sempred((MasterResetOptionsContext)_localctx, predIndex);
		case 232: return changeReplication_sempred((ChangeReplicationContext)_localctx, predIndex);
		case 240: return slaveUntilOptions_sempred((SlaveUntilOptionsContext)_localctx, predIndex);
		case 241: return slaveConnectionOptions_sempred((SlaveConnectionOptionsContext)_localctx, predIndex);
		case 248: return cloneStatement_sempred((CloneStatementContext)_localctx, predIndex);
		case 251: return accountManagementStatement_sempred((AccountManagementStatementContext)_localctx, predIndex);
		case 252: return alterUser_sempred((AlterUserContext)_localctx, predIndex);
		case 253: return alterUserTail_sempred((AlterUserTailContext)_localctx, predIndex);
		case 255: return createUser_sempred((CreateUserContext)_localctx, predIndex);
		case 256: return createUserTail_sempred((CreateUserTailContext)_localctx, predIndex);
		case 257: return defaultRoleClause_sempred((DefaultRoleClauseContext)_localctx, predIndex);
		case 260: return accountLockPasswordExpireOptions_sempred((AccountLockPasswordExpireOptionsContext)_localctx, predIndex);
		case 261: return dropUser_sempred((DropUserContext)_localctx, predIndex);
		case 262: return grant_sempred((GrantContext)_localctx, predIndex);
		case 263: return grantTargetList_sempred((GrantTargetListContext)_localctx, predIndex);
		case 264: return grantOptions_sempred((GrantOptionsContext)_localctx, predIndex);
		case 268: return versionedRequireClause_sempred((VersionedRequireClauseContext)_localctx, predIndex);
		case 270: return revoke_sempred((RevokeContext)_localctx, predIndex);
		case 271: return onTypeTo_sempred((OnTypeToContext)_localctx, predIndex);
		case 274: return roleOrPrivilege_sempred((RoleOrPrivilegeContext)_localctx, predIndex);
		case 275: return grantIdentifier_sempred((GrantIdentifierContext)_localctx, predIndex);
		case 282: return tableAdministrationStatement_sempred((TableAdministrationStatementContext)_localctx, predIndex);
		case 288: return startOptionValueList_sempred((StartOptionValueListContext)_localctx, predIndex);
		case 293: return optionValueNoOptionType_sempred((OptionValueNoOptionTypeContext)_localctx, predIndex);
		case 298: return setExprOrDefault_sempred((SetExprOrDefaultContext)_localctx, predIndex);
		case 299: return showStatement_sempred((ShowStatementContext)_localctx, predIndex);
		case 300: return showCommandType_sempred((ShowCommandTypeContext)_localctx, predIndex);
		case 301: return nonBlocking_sempred((NonBlockingContext)_localctx, predIndex);
		case 305: return otherAdministrativeStatement_sempred((OtherAdministrativeStatementContext)_localctx, predIndex);
		case 313: return flushOption_sempred((FlushOptionContext)_localctx, predIndex);
		case 316: return flushTablesOptions_sempred((FlushTablesOptionsContext)_localctx, predIndex);
		case 331: return utilityStatement_sempred((UtilityStatementContext)_localctx, predIndex);
		case 333: return explainStatement_sempred((ExplainStatementContext)_localctx, predIndex);
		case 334: return explainableStatement_sempred((ExplainableStatementContext)_localctx, predIndex);
		case 338: return expr_sempred((ExprContext)_localctx, predIndex);
		case 339: return boolPri_sempred((BoolPriContext)_localctx, predIndex);
		case 341: return predicate_sempred((PredicateContext)_localctx, predIndex);
		case 343: return bitExpr_sempred((BitExprContext)_localctx, predIndex);
		case 344: return simpleExpr_sempred((SimpleExprContext)_localctx, predIndex);
		case 345: return arrayCast_sempred((ArrayCastContext)_localctx, predIndex);
		case 346: return jsonOperator_sempred((JsonOperatorContext)_localctx, predIndex);
		case 347: return sumExpr_sempred((SumExprContext)_localctx, predIndex);
		case 358: return runtimeFunctionCall_sempred((RuntimeFunctionCallContext)_localctx, predIndex);
		case 359: return geometryFunction_sempred((GeometryFunctionContext)_localctx, predIndex);
		case 361: return fractionalPrecision_sempred((FractionalPrecisionContext)_localctx, predIndex);
		case 373: return internalVariableName_sempred((InternalVariableNameContext)_localctx, predIndex);
		case 377: return castType_sempred((CastTypeContext)_localctx, predIndex);
		case 391: return channel_sempred((ChannelContext)_localctx, predIndex);
		case 420: return getDiagnostics_sempred((GetDiagnosticsContext)_localctx, predIndex);
		case 433: return checkOrReferences_sempred((CheckOrReferencesContext)_localctx, predIndex);
		case 436: return tableConstraintDef_sempred((TableConstraintDefContext)_localctx, predIndex);
		case 438: return fieldDefinition_sempred((FieldDefinitionContext)_localctx, predIndex);
		case 439: return columnAttribute_sempred((ColumnAttributeContext)_localctx, predIndex);
		case 449: return keyListVariants_sempred((KeyListVariantsContext)_localctx, predIndex);
		case 452: return commonIndexOption_sempred((CommonIndexOptionContext)_localctx, predIndex);
		case 458: return dataType_sempred((DataTypeContext)_localctx, predIndex);
		case 468: return charsetName_sempred((CharsetNameContext)_localctx, predIndex);
		case 469: return collationName_sempred((CollationNameContext)_localctx, predIndex);
		case 472: return createTableOption_sempred((CreateTableOptionContext)_localctx, predIndex);
		case 480: return partitionKeyAlgorithm_sempred((PartitionKeyAlgorithmContext)_localctx, predIndex);
		case 507: return createUserEntry_sempred((CreateUserEntryContext)_localctx, predIndex);
		case 518: return usePartition_sempred((UsePartitionContext)_localctx, predIndex);
		case 520: return columnName_sempred((ColumnNameContext)_localctx, predIndex);
		case 563: return pureIdentifier_sempred((PureIdentifierContext)_localctx, predIndex);
		case 568: return simpleIdentifier_sempred((SimpleIdentifierContext)_localctx, predIndex);
		case 573: return real_ulonglong_number_sempred((Real_ulonglong_numberContext)_localctx, predIndex);
		case 577: return textStringLiteral_sempred((TextStringLiteralContext)_localctx, predIndex);
		case 579: return textStringHash_sempred((TextStringHashContext)_localctx, predIndex);
		case 599: return identifierKeyword_sempred((IdentifierKeywordContext)_localctx, predIndex);
		case 602: return labelKeyword_sempred((LabelKeywordContext)_localctx, predIndex);
		case 604: return identifierKeywordsUnambiguous_sempred((IdentifierKeywordsUnambiguousContext)_localctx, predIndex);
		case 605: return roleKeyword_sempred((RoleKeywordContext)_localctx, predIndex);
		case 608: return roleOrIdentifierKeyword_sempred((RoleOrIdentifierKeywordContext)_localctx, predIndex);
		case 609: return roleOrLabelKeyword_sempred((RoleOrLabelKeywordContext)_localctx, predIndex);
		}
		return true;
	}
	private bool simpleStatement_sempred(SimpleStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return serverVersion >= 80000;
		case 1: return serverVersion >= 80000;
		case 2: return serverVersion >= 80000;
		case 3: return serverVersion >= 50604;
		}
		return true;
	}
	private bool alterStatement_sempred(AlterStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return serverVersion >= 80014;
		case 5: return serverVersion >= 50713;
		}
		return true;
	}
	private bool alterDatabase_sempred(AlterDatabaseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return serverVersion < 80000;
		}
		return true;
	}
	private bool alterTable_sempred(AlterTableContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return serverVersion < 50700;
		}
		return true;
	}
	private bool standaloneAlterCommands_sempred(StandaloneAlterCommandsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return serverVersion >= 80014;
		}
		return true;
	}
	private bool alterPartition_sempred(AlterPartitionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return serverVersion >= 50704;
		case 10: return serverVersion >= 50704;
		}
		return true;
	}
	private bool alterListItem_sempred(AlterListItemContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return serverVersion >= 50700;
		case 12: return serverVersion < 50700;
		case 13: return serverVersion >= 80017;
		case 14: return serverVersion >= 80019;
		case 15: return serverVersion >= 80014;
		case 16: return serverVersion >= 80000;
		case 17: return serverVersion >= 80017;
		case 18: return serverVersion >= 80019;
		case 19: return serverVersion >= 80000;
		case 20: return serverVersion >= 50700;
		case 21: return serverVersion >= 80014;
		case 22: return serverVersion >= 50708 && serverVersion < 80000;
		}
		return true;
	}
	private bool withValidation_sempred(WithValidationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 23: return serverVersion >= 50706;
		}
		return true;
	}
	private bool alterTablespace_sempred(AlterTablespaceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 24: return serverVersion < 80000;
		case 25: return serverVersion >= 80014;
		}
		return true;
	}
	private bool createStatement_sempred(CreateStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 26: return serverVersion >= 80000;
		case 27: return serverVersion >= 80011;
		case 28: return serverVersion >= 80014;
		}
		return true;
	}
	private bool createDatabaseOption_sempred(CreateDatabaseOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 29: return serverVersion >= 80016;
		}
		return true;
	}
	private bool createIndex_sempred(CreateIndexContext _localctx, int predIndex) {
		switch (predIndex) {
		case 30: return serverVersion >= 80014;
		}
		return true;
	}
	private bool tsDataFileName_sempred(TsDataFileNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 31: return serverVersion >= 80014;
		}
		return true;
	}
	private bool tablespaceOption_sempred(TablespaceOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 32: return serverVersion >= 50707;
		case 33: return serverVersion >= 80014;
		}
		return true;
	}
	private bool triggerFollowsPrecedesClause_sempred(TriggerFollowsPrecedesClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 34: return serverVersion >= 50700;
		}
		return true;
	}
	private bool dropStatement_sempred(DropStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 35: return serverVersion >= 80000;
		case 36: return serverVersion >= 80011;
		case 37: return serverVersion >= 80014;
		}
		return true;
	}
	private bool deleteStatement_sempred(DeleteStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 38: return serverVersion >= 80000;
		case 39: return serverVersion >= 80017;
		}
		return true;
	}
	private bool partitionDelete_sempred(PartitionDeleteContext _localctx, int predIndex) {
		switch (predIndex) {
		case 40: return serverVersion >= 50602;
		}
		return true;
	}
	private bool doStatement_sempred(DoStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 41: return serverVersion < 50709;
		case 42: return serverVersion >= 50709;
		}
		return true;
	}
	private bool insertStatement_sempred(InsertStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 43: return  serverVersion >= 80018;
		case 44: return  serverVersion >= 80018;
		}
		return true;
	}
	private bool queryExpression_sempred(QueryExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 45: return serverVersion >= 80000;
		case 46: return serverVersion < 80000;
		}
		return true;
	}
	private bool queryPrimary_sempred(QueryPrimaryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 47: return serverVersion >= 80019;
		case 48: return serverVersion >= 80019;
		}
		return true;
	}
	private bool querySpecification_sempred(QuerySpecificationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 49: return serverVersion >= 80000;
		}
		return true;
	}
	private bool olapOption_sempred(OlapOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 50: return serverVersion < 80000;
		}
		return true;
	}
	private bool selectOption_sempred(SelectOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 51: return serverVersion < 80000;
		case 52: return serverVersion >= 50704 && serverVersion < 50708;
		}
		return true;
	}
	private bool lockingClause_sempred(LockingClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 53: return serverVersion >= 80000;
		case 54: return serverVersion >= 80000;
		}
		return true;
	}
	private bool lockStrengh_sempred(LockStrenghContext _localctx, int predIndex) {
		switch (predIndex) {
		case 55: return serverVersion >= 80000;
		}
		return true;
	}
	private bool tableReference_sempred(TableReferenceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 56: return serverVersion < 80017;
		}
		return true;
	}
	private bool tableFactor_sempred(TableFactorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 57: return serverVersion >= 80004;
		}
		return true;
	}
	private bool derivedTable_sempred(DerivedTableContext _localctx, int predIndex) {
		switch (predIndex) {
		case 58: return serverVersion >= 80000;
		case 59: return serverVersion >= 80014;
		}
		return true;
	}
	private bool jtColumn_sempred(JtColumnContext _localctx, int predIndex) {
		switch (predIndex) {
		case 60: return serverVersion >= 80014;
		}
		return true;
	}
	private bool tableAlias_sempred(TableAliasContext _localctx, int predIndex) {
		switch (predIndex) {
		case 61: return serverVersion < 80017;
		}
		return true;
	}
	private bool updateStatement_sempred(UpdateStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 62: return serverVersion >= 80000;
		}
		return true;
	}
	private bool transactionCharacteristic_sempred(TransactionCharacteristicContext _localctx, int predIndex) {
		switch (predIndex) {
		case 63: return serverVersion >= 50605;
		}
		return true;
	}
	private bool lockStatement_sempred(LockStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 64: return serverVersion >= 80000;
		case 65: return serverVersion >= 80000;
		}
		return true;
	}
	private bool xaConvert_sempred(XaConvertContext _localctx, int predIndex) {
		switch (predIndex) {
		case 66: return serverVersion >= 50704;
		}
		return true;
	}
	private bool replicationStatement_sempred(ReplicationStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 67: return serverVersion > 80000;
		case 68: return serverVersion >= 50700;
		case 69: return serverVersion > 50706;
		}
		return true;
	}
	private bool resetOption_sempred(ResetOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 70: return serverVersion < 80000;
		}
		return true;
	}
	private bool masterResetOptions_sempred(MasterResetOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 71: return serverVersion >= 80000;
		case 72: return serverVersion < 80017;
		case 73: return serverVersion >= 80017;
		}
		return true;
	}
	private bool changeReplication_sempred(ChangeReplicationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 74: return serverVersion >= 80000;
		}
		return true;
	}
	private bool slaveUntilOptions_sempred(SlaveUntilOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 75: return serverVersion >= 50606;
		case 76: return serverVersion >= 50606;
		}
		return true;
	}
	private bool slaveConnectionOptions_sempred(SlaveConnectionOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 77: return serverVersion >= 50604;
		}
		return true;
	}
	private bool cloneStatement_sempred(CloneStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 78: return serverVersion >= 80014;
		}
		return true;
	}
	private bool accountManagementStatement_sempred(AccountManagementStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 79: return serverVersion >= 50606;
		case 80: return serverVersion >= 80000;
		}
		return true;
	}
	private bool alterUser_sempred(AlterUserContext _localctx, int predIndex) {
		switch (predIndex) {
		case 81: return serverVersion >= 50706;
		}
		return true;
	}
	private bool alterUserTail_sempred(AlterUserTailContext _localctx, int predIndex) {
		switch (predIndex) {
		case 82: return serverVersion < 80014;
		case 83: return serverVersion >= 80014;
		case 84: return serverVersion >= 50706;
		case 85: return serverVersion >= 80014;
		case 86: return serverVersion >= 80014;
		case 87: return serverVersion >= 80014;
		case 88: return serverVersion >= 80000;
		case 89: return serverVersion >= 80018;
		}
		return true;
	}
	private bool createUser_sempred(CreateUserContext _localctx, int predIndex) {
		switch (predIndex) {
		case 90: return serverVersion >= 50706;
		}
		return true;
	}
	private bool createUserTail_sempred(CreateUserTailContext _localctx, int predIndex) {
		switch (predIndex) {
		case 91: return serverVersion >= 50706;
		}
		return true;
	}
	private bool defaultRoleClause_sempred(DefaultRoleClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 92: return serverVersion >= 80000;
		}
		return true;
	}
	private bool accountLockPasswordExpireOptions_sempred(AccountLockPasswordExpireOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 93: return serverVersion >= 80014;
		}
		return true;
	}
	private bool dropUser_sempred(DropUserContext _localctx, int predIndex) {
		switch (predIndex) {
		case 94: return serverVersion >= 50706;
		}
		return true;
	}
	private bool grant_sempred(GrantContext _localctx, int predIndex) {
		switch (predIndex) {
		case 95: return serverVersion >= 80000;
		}
		return true;
	}
	private bool grantTargetList_sempred(GrantTargetListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 96: return serverVersion < 80011;
		case 97: return serverVersion >= 80011;
		}
		return true;
	}
	private bool grantOptions_sempred(GrantOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 98: return serverVersion < 80011;
		case 99: return serverVersion >= 80011;
		}
		return true;
	}
	private bool versionedRequireClause_sempred(VersionedRequireClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 100: return serverVersion < 80011;
		}
		return true;
	}
	private bool revoke_sempred(RevokeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 101: return serverVersion >= 80000;
		case 102: return serverVersion >= 80000;
		}
		return true;
	}
	private bool onTypeTo_sempred(OnTypeToContext _localctx, int predIndex) {
		switch (predIndex) {
		case 103: return serverVersion < 80000;
		case 104: return serverVersion >= 80000;
		}
		return true;
	}
	private bool roleOrPrivilege_sempred(RoleOrPrivilegeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 105: return serverVersion > 80000;
		case 106: return serverVersion > 80000;
		}
		return true;
	}
	private bool grantIdentifier_sempred(GrantIdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 107: return serverVersion >= 80017;
		}
		return true;
	}
	private bool tableAdministrationStatement_sempred(TableAdministrationStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 108: return serverVersion >= 80000;
		}
		return true;
	}
	private bool startOptionValueList_sempred(StartOptionValueListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 109: return serverVersion < 50706;
		case 110: return serverVersion < 80014;
		case 111: return serverVersion >= 80018;
		}
		return true;
	}
	private bool optionValueNoOptionType_sempred(OptionValueNoOptionTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 112: return serverVersion >= 80011;
		}
		return true;
	}
	private bool setExprOrDefault_sempred(SetExprOrDefaultContext _localctx, int predIndex) {
		switch (predIndex) {
		case 113: return serverVersion >= 80000;
		}
		return true;
	}
	private bool showStatement_sempred(ShowStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 114: return serverVersion < 50700;
		case 115: return serverVersion >= 80000;
		case 116: return serverVersion < 50700;
		case 117: return serverVersion >= 50704;
		}
		return true;
	}
	private bool showCommandType_sempred(ShowCommandTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 118: return serverVersion >= 80000;
		}
		return true;
	}
	private bool nonBlocking_sempred(NonBlockingContext _localctx, int predIndex) {
		switch (predIndex) {
		case 119: return serverVersion >= 50700 && serverVersion < 50706;
		}
		return true;
	}
	private bool otherAdministrativeStatement_sempred(OtherAdministrativeStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 120: return serverVersion >= 50709;
		}
		return true;
	}
	private bool flushOption_sempred(FlushOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 121: return serverVersion < 80000;
		case 122: return serverVersion >= 50706;
		}
		return true;
	}
	private bool flushTablesOptions_sempred(FlushTablesOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 123: return serverVersion >= 50606;
		}
		return true;
	}
	private bool utilityStatement_sempred(UtilityStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 124: return serverVersion >= 80011;
		}
		return true;
	}
	private bool explainStatement_sempred(ExplainStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 125: return serverVersion < 80000;
		case 126: return serverVersion < 80000;
		case 127: return serverVersion >= 50605;
		case 128: return serverVersion >= 80018;
		case 129: return serverVersion >= 80019;
		}
		return true;
	}
	private bool explainableStatement_sempred(ExplainableStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 130: return serverVersion >= 50603;
		case 131: return serverVersion >= 50700;
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 132: return Precpred(Context, 3);
		case 133: return Precpred(Context, 2);
		case 134: return Precpred(Context, 1);
		}
		return true;
	}
	private bool boolPri_sempred(BoolPriContext _localctx, int predIndex) {
		switch (predIndex) {
		case 135: return Precpred(Context, 3);
		case 136: return Precpred(Context, 2);
		case 137: return Precpred(Context, 1);
		}
		return true;
	}
	private bool predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 138: return serverVersion >= 80017;
		}
		return true;
	}
	private bool bitExpr_sempred(BitExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 139: return Precpred(Context, 7);
		case 140: return Precpred(Context, 6);
		case 141: return Precpred(Context, 5);
		case 142: return Precpred(Context, 3);
		case 143: return Precpred(Context, 2);
		case 144: return Precpred(Context, 1);
		case 145: return Precpred(Context, 4);
		}
		return true;
	}
	private bool simpleExpr_sempred(SimpleExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 146: return serverVersion >= 80000;
		case 147: return serverVersion >= 80000;
		case 148: return Precpred(Context, 15);
		case 149: return Precpred(Context, 21);
		}
		return true;
	}
	private bool arrayCast_sempred(ArrayCastContext _localctx, int predIndex) {
		switch (predIndex) {
		case 150: return serverVersion >= 80017;
		}
		return true;
	}
	private bool jsonOperator_sempred(JsonOperatorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 151: return serverVersion >= 50708;
		case 152: return serverVersion >= 50713;
		}
		return true;
	}
	private bool sumExpr_sempred(SumExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 153: return serverVersion >= 80000;
		case 154: return serverVersion >= 80000;
		case 155: return serverVersion >= 80000;
		case 156: return serverVersion >= 80000;
		case 157: return serverVersion >= 80000;
		case 158: return serverVersion >= 80000;
		case 159: return serverVersion >= 80000;
		case 160: return serverVersion >= 80000;
		case 161: return serverVersion >= 80000;
		case 162: return serverVersion >= 80000;
		case 163: return serverVersion >= 80000;
		case 164: return serverVersion >= 80000;
		case 165: return serverVersion >= 80000;
		}
		return true;
	}
	private bool runtimeFunctionCall_sempred(RuntimeFunctionCallContext _localctx, int predIndex) {
		switch (predIndex) {
		case 166: return serverVersion < 50607;
		case 167: return serverVersion < 80011;
		case 168: return serverVersion < 80000;
		}
		return true;
	}
	private bool geometryFunction_sempred(GeometryFunctionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 169: return serverVersion < 50706;
		}
		return true;
	}
	private bool fractionalPrecision_sempred(FractionalPrecisionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 170: return serverVersion >= 50604;
		}
		return true;
	}
	private bool internalVariableName_sempred(InternalVariableNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 171: return serverVersion < 80017;
		case 172: return serverVersion >= 80017;
		}
		return true;
	}
	private bool castType_sempred(CastTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 173: return serverVersion >= 50708;
		case 174: return serverVersion >= 80017;
		case 175: return serverVersion >= 80017;
		}
		return true;
	}
	private bool channel_sempred(ChannelContext _localctx, int predIndex) {
		switch (predIndex) {
		case 176: return serverVersion >= 50706;
		}
		return true;
	}
	private bool getDiagnostics_sempred(GetDiagnosticsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 177: return serverVersion >= 50700;
		}
		return true;
	}
	private bool checkOrReferences_sempred(CheckOrReferencesContext _localctx, int predIndex) {
		switch (predIndex) {
		case 178: return serverVersion < 80016;
		}
		return true;
	}
	private bool tableConstraintDef_sempred(TableConstraintDefContext _localctx, int predIndex) {
		switch (predIndex) {
		case 179: return serverVersion >= 80017;
		}
		return true;
	}
	private bool fieldDefinition_sempred(FieldDefinitionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 180: return serverVersion >= 50707;
		case 181: return serverVersion < 80000;
		case 182: return serverVersion >= 80000;
		}
		return true;
	}
	private bool columnAttribute_sempred(ColumnAttributeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 183: return serverVersion >= 80014;
		case 184: return serverVersion >= 80013;
		case 185: return serverVersion >= 80000;
		case 186: return serverVersion >= 80017;
		case 187: return serverVersion >= 80017;
		}
		return true;
	}
	private bool keyListVariants_sempred(KeyListVariantsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 188: return serverVersion >= 80013;
		case 189: return serverVersion < 80013;
		}
		return true;
	}
	private bool commonIndexOption_sempred(CommonIndexOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 190: return serverVersion >= 80000;
		}
		return true;
	}
	private bool dataType_sempred(DataTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 191: return serverVersion >= 50708;
		}
		return true;
	}
	private bool charsetName_sempred(CharsetNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 192: return serverVersion < 80011;
		}
		return true;
	}
	private bool collationName_sempred(CollationNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 193: return serverVersion < 80011;
		case 194: return serverVersion >= 80018;
		}
		return true;
	}
	private bool createTableOption_sempred(CreateTableOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 195: return serverVersion >= 80014;
		case 196: return serverVersion >= 50708;
		case 197: return serverVersion >= 50711;
		case 198: return serverVersion >= 50707;
		}
		return true;
	}
	private bool partitionKeyAlgorithm_sempred(PartitionKeyAlgorithmContext _localctx, int predIndex) {
		switch (predIndex) {
		case 199: return serverVersion >= 50700;
		}
		return true;
	}
	private bool createUserEntry_sempred(CreateUserEntryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 200: return serverVersion < 80011;
		case 201: return serverVersion >= 50706;
		case 202: return serverVersion >= 80018;
		}
		return true;
	}
	private bool usePartition_sempred(UsePartitionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 203: return serverVersion >= 50602;
		}
		return true;
	}
	private bool columnName_sempred(ColumnNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 204: return serverVersion >= 80000;
		case 205: return serverVersion < 80000;
		}
		return true;
	}
	private bool pureIdentifier_sempred(PureIdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 206: return isSqlModeActive(MySqlMode.AnsiQuotes);
		}
		return true;
	}
	private bool simpleIdentifier_sempred(SimpleIdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 207: return serverVersion < 80000;
		}
		return true;
	}
	private bool real_ulonglong_number_sempred(Real_ulonglong_numberContext _localctx, int predIndex) {
		switch (predIndex) {
		case 208: return serverVersion >= 80017;
		}
		return true;
	}
	private bool textStringLiteral_sempred(TextStringLiteralContext _localctx, int predIndex) {
		switch (predIndex) {
		case 209: return !isSqlModeActive(MySqlMode.AnsiQuotes);
		}
		return true;
	}
	private bool textStringHash_sempred(TextStringHashContext _localctx, int predIndex) {
		switch (predIndex) {
		case 210: return serverVersion >= 80017;
		}
		return true;
	}
	private bool identifierKeyword_sempred(IdentifierKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 211: return serverVersion < 80017;
		case 212: return serverVersion >= 50709;
		case 213: return serverVersion >= 80011;
		}
		return true;
	}
	private bool labelKeyword_sempred(LabelKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 214: return serverVersion < 80017;
		}
		return true;
	}
	private bool identifierKeywordsUnambiguous_sempred(IdentifierKeywordsUnambiguousContext _localctx, int predIndex) {
		switch (predIndex) {
		case 215: return serverVersion >= 80019;
		}
		return true;
	}
	private bool roleKeyword_sempred(RoleKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 216: return serverVersion < 80017;
		}
		return true;
	}
	private bool roleOrIdentifierKeyword_sempred(RoleOrIdentifierKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 217: return serverVersion >= 50709;
		case 218: return serverVersion >= 80000;
		}
		return true;
	}
	private bool roleOrLabelKeyword_sempred(RoleOrLabelKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 219: return serverVersion < 50709;
		case 220: return serverVersion < 80000;
		case 221: return serverVersion >= 80000;
		case 222: return serverVersion >= 80014;
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,806,8417,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,
		2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,
		2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,
		2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,
		2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,
		2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,
		2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,
		2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
		2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,
		2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,
		2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,7,242,
		2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,7,248,
		2,249,7,249,2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,7,254,
		2,255,7,255,2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,7,260,
		2,261,7,261,2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,
		2,267,7,267,2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,
		2,273,7,273,2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,
		2,279,7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,
		2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
		2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,7,296,
		2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,2,302,7,302,
		2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,7,307,2,308,7,308,
		2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,2,313,7,313,2,314,7,314,
		2,315,7,315,2,316,7,316,2,317,7,317,2,318,7,318,2,319,7,319,2,320,7,320,
		2,321,7,321,2,322,7,322,2,323,7,323,2,324,7,324,2,325,7,325,2,326,7,326,
		2,327,7,327,2,328,7,328,2,329,7,329,2,330,7,330,2,331,7,331,2,332,7,332,
		2,333,7,333,2,334,7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,
		2,339,7,339,2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,
		2,345,7,345,2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,
		2,351,7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,
		2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,7,362,
		2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,2,368,7,368,
		2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,7,373,2,374,7,374,
		2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,2,379,7,379,2,380,7,380,
		2,381,7,381,2,382,7,382,2,383,7,383,2,384,7,384,2,385,7,385,2,386,7,386,
		2,387,7,387,2,388,7,388,2,389,7,389,2,390,7,390,2,391,7,391,2,392,7,392,
		2,393,7,393,2,394,7,394,2,395,7,395,2,396,7,396,2,397,7,397,2,398,7,398,
		2,399,7,399,2,400,7,400,2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,
		2,405,7,405,2,406,7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,
		2,411,7,411,2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,
		2,417,7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,
		2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,7,428,
		2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,2,434,7,434,
		2,435,7,435,2,436,7,436,2,437,7,437,2,438,7,438,2,439,7,439,2,440,7,440,
		2,441,7,441,2,442,7,442,2,443,7,443,2,444,7,444,2,445,7,445,2,446,7,446,
		2,447,7,447,2,448,7,448,2,449,7,449,2,450,7,450,2,451,7,451,2,452,7,452,
		2,453,7,453,2,454,7,454,2,455,7,455,2,456,7,456,2,457,7,457,2,458,7,458,
		2,459,7,459,2,460,7,460,2,461,7,461,2,462,7,462,2,463,7,463,2,464,7,464,
		2,465,7,465,2,466,7,466,2,467,7,467,2,468,7,468,2,469,7,469,2,470,7,470,
		2,471,7,471,2,472,7,472,2,473,7,473,2,474,7,474,2,475,7,475,2,476,7,476,
		2,477,7,477,2,478,7,478,2,479,7,479,2,480,7,480,2,481,7,481,2,482,7,482,
		2,483,7,483,2,484,7,484,2,485,7,485,2,486,7,486,2,487,7,487,2,488,7,488,
		2,489,7,489,2,490,7,490,2,491,7,491,2,492,7,492,2,493,7,493,2,494,7,494,
		2,495,7,495,2,496,7,496,2,497,7,497,2,498,7,498,2,499,7,499,2,500,7,500,
		2,501,7,501,2,502,7,502,2,503,7,503,2,504,7,504,2,505,7,505,2,506,7,506,
		2,507,7,507,2,508,7,508,2,509,7,509,2,510,7,510,2,511,7,511,2,512,7,512,
		2,513,7,513,2,514,7,514,2,515,7,515,2,516,7,516,2,517,7,517,2,518,7,518,
		2,519,7,519,2,520,7,520,2,521,7,521,2,522,7,522,2,523,7,523,2,524,7,524,
		2,525,7,525,2,526,7,526,2,527,7,527,2,528,7,528,2,529,7,529,2,530,7,530,
		2,531,7,531,2,532,7,532,2,533,7,533,2,534,7,534,2,535,7,535,2,536,7,536,
		2,537,7,537,2,538,7,538,2,539,7,539,2,540,7,540,2,541,7,541,2,542,7,542,
		2,543,7,543,2,544,7,544,2,545,7,545,2,546,7,546,2,547,7,547,2,548,7,548,
		2,549,7,549,2,550,7,550,2,551,7,551,2,552,7,552,2,553,7,553,2,554,7,554,
		2,555,7,555,2,556,7,556,2,557,7,557,2,558,7,558,2,559,7,559,2,560,7,560,
		2,561,7,561,2,562,7,562,2,563,7,563,2,564,7,564,2,565,7,565,2,566,7,566,
		2,567,7,567,2,568,7,568,2,569,7,569,2,570,7,570,2,571,7,571,2,572,7,572,
		2,573,7,573,2,574,7,574,2,575,7,575,2,576,7,576,2,577,7,577,2,578,7,578,
		2,579,7,579,2,580,7,580,2,581,7,581,2,582,7,582,2,583,7,583,2,584,7,584,
		2,585,7,585,2,586,7,586,2,587,7,587,2,588,7,588,2,589,7,589,2,590,7,590,
		2,591,7,591,2,592,7,592,2,593,7,593,2,594,7,594,2,595,7,595,2,596,7,596,
		2,597,7,597,2,598,7,598,2,599,7,599,2,600,7,600,2,601,7,601,2,602,7,602,
		2,603,7,603,2,604,7,604,2,605,7,605,2,606,7,606,2,607,7,607,2,608,7,608,
		2,609,7,609,1,0,1,0,1,0,3,0,1224,8,0,1,0,1,0,3,0,1228,8,0,1,0,3,0,1231,
		8,0,3,0,1233,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,3,1,1269,8,1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,1277,8,2,1,2,1,2,
		1,2,3,2,1282,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,3,2,1298,8,2,1,3,1,3,1,3,4,3,1303,8,3,11,3,12,3,1304,1,3,1,3,1,3,1,3,
		1,3,3,3,1312,8,3,1,4,3,4,1315,8,4,1,4,1,4,1,4,1,4,1,4,3,4,1322,8,4,1,4,
		1,4,1,4,3,4,1327,8,4,1,4,3,4,1330,8,4,1,4,1,4,1,4,3,4,1335,8,4,1,4,1,4,
		1,4,1,4,3,4,1341,8,4,3,4,1343,8,4,1,4,1,4,3,4,1347,8,4,1,4,1,4,3,4,1351,
		8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,1360,8,5,1,6,1,6,3,6,1364,8,6,1,6,
		5,6,1367,8,6,10,6,12,6,1370,9,6,1,7,1,7,1,7,3,7,1375,8,7,1,8,1,8,1,8,1,
		8,1,9,3,9,1382,8,9,1,9,1,9,3,9,1386,8,9,1,9,1,9,1,9,3,9,1391,8,9,1,10,
		1,10,1,10,3,10,1396,8,10,1,10,1,10,1,10,1,10,1,10,3,10,1403,8,10,1,10,
		3,10,1406,8,10,1,11,1,11,1,11,1,11,3,11,1412,8,11,1,11,3,11,1415,8,11,
		1,12,1,12,1,12,5,12,1420,8,12,10,12,12,12,1423,9,12,1,13,1,13,1,13,1,13,
		1,13,1,13,1,13,3,13,1432,8,13,1,14,1,14,1,14,3,14,1437,8,14,1,14,1,14,
		1,14,3,14,1442,8,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,1450,8,14,1,14,
		1,14,1,14,1,14,3,14,1456,8,14,1,14,1,14,3,14,1460,8,14,1,14,1,14,1,14,
		3,14,1465,8,14,1,14,1,14,1,14,1,14,1,14,5,14,1472,8,14,10,14,12,14,1475,
		9,14,1,14,1,14,1,14,3,14,1480,8,14,1,14,1,14,5,14,1484,8,14,10,14,12,14,
		1487,9,14,1,14,1,14,1,14,3,14,1492,8,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,3,14,1501,8,14,1,14,1,14,1,14,1,14,3,14,1507,8,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,3,14,1516,8,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,3,14,1530,8,14,1,15,1,15,3,15,1534,8,15,1,15,
		1,15,1,15,1,15,3,15,1540,8,15,5,15,1542,8,15,10,15,12,15,1545,9,15,1,16,
		1,16,1,16,3,16,1550,8,16,1,17,1,17,3,17,1554,8,17,1,17,1,17,1,17,3,17,
		1559,8,17,1,17,3,17,1562,8,17,1,17,1,17,1,17,1,17,3,17,1568,8,17,1,17,
		1,17,1,17,1,17,3,17,1574,8,17,1,17,1,17,1,17,1,17,3,17,1580,8,17,1,17,
		1,17,3,17,1584,8,17,1,17,1,17,1,17,3,17,1589,8,17,1,17,1,17,3,17,1593,
		8,17,1,17,1,17,3,17,1597,8,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,1605,
		8,17,3,17,1607,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
		1,17,3,17,1620,8,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,1628,8,17,1,17,
		1,17,1,17,1,17,1,17,1,17,3,17,1636,8,17,1,17,1,17,3,17,1640,8,17,1,17,
		1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
		1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,1669,
		8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
		1,17,3,17,1685,8,17,1,17,3,17,1688,8,17,1,17,1,17,1,17,1,17,1,17,1,17,
		1,17,3,17,1697,8,17,1,18,1,18,1,18,3,18,1702,8,18,1,19,1,19,1,20,1,20,
		3,20,1708,8,20,1,20,1,20,1,20,3,20,1713,8,20,5,20,1715,8,20,10,20,12,20,
		1718,9,20,1,21,1,21,3,21,1722,8,21,1,21,1,21,3,21,1726,8,21,1,22,1,22,
		3,22,1730,8,22,1,22,1,22,3,22,1734,8,22,1,23,1,23,3,23,1738,8,23,1,23,
		1,23,3,23,1742,8,23,3,23,1744,8,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,
		1,26,1,26,3,26,1755,8,26,1,27,1,27,1,27,1,27,1,27,1,27,3,27,1763,8,27,
		1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,1772,8,27,1,27,5,27,1775,8,27,
		10,27,12,27,1778,9,27,3,27,1780,8,27,1,27,1,27,1,27,3,27,1785,8,27,1,27,
		1,27,1,27,1,27,1,27,3,27,1792,8,27,1,28,1,28,1,28,1,28,1,28,1,28,3,28,
		1800,8,28,1,29,1,29,3,29,1804,8,29,1,29,5,29,1807,8,29,10,29,12,29,1810,
		9,29,1,30,1,30,1,31,1,31,3,31,1816,8,31,1,31,5,31,1819,8,31,10,31,12,31,
		1822,9,31,1,32,1,32,3,32,1826,8,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,
		1834,8,32,1,33,1,33,3,33,1838,8,33,1,33,1,33,1,33,3,33,1843,8,33,1,34,
		3,34,1846,8,34,1,34,3,34,1849,8,34,1,34,3,34,1852,8,34,1,34,1,34,1,34,
		1,34,1,35,3,35,1859,8,35,1,35,1,35,1,35,1,36,1,36,3,36,1866,8,36,1,37,
		1,37,3,37,1870,8,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
		1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,1894,
		8,38,1,39,1,39,3,39,1898,8,39,1,39,1,39,5,39,1902,8,39,10,39,12,39,1905,
		9,39,1,40,1,40,1,40,1,40,3,40,1911,8,40,1,41,3,41,1914,8,41,1,41,1,41,
		3,41,1918,8,41,1,41,1,41,1,41,1,41,1,41,3,41,1925,8,41,1,41,3,41,1928,
		8,41,1,41,3,41,1931,8,41,1,41,3,41,1934,8,41,1,41,1,41,1,41,1,41,1,41,
		1,41,1,41,3,41,1943,8,41,1,42,1,42,1,42,5,42,1948,8,42,10,42,12,42,1951,
		9,42,1,43,1,43,3,43,1955,8,43,1,44,3,44,1958,8,44,1,44,3,44,1961,8,44,
		1,44,1,44,1,45,1,45,3,45,1967,8,45,1,46,1,46,1,46,1,46,3,46,1973,8,46,
		1,46,3,46,1976,8,46,1,46,1,46,1,47,3,47,1981,8,47,1,47,1,47,1,47,1,47,
		1,47,1,47,5,47,1989,8,47,10,47,12,47,1992,9,47,3,47,1994,8,47,1,47,1,47,
		5,47,1998,8,47,10,47,12,47,2001,9,47,1,47,1,47,1,48,3,48,2006,8,48,1,48,
		1,48,1,48,1,48,1,48,1,48,5,48,2014,8,48,10,48,12,48,2017,9,48,3,48,2019,
		8,48,1,48,1,48,1,48,1,48,5,48,2025,8,48,10,48,12,48,2028,9,48,1,48,1,48,
		1,49,3,49,2033,8,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,50,1,50,3,50,
		2044,8,50,1,50,3,50,2047,8,50,1,51,4,51,2050,8,51,11,51,12,51,2051,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,3,52,2071,8,52,1,53,3,53,2074,8,53,1,53,3,53,2077,8,53,1,53,
		1,53,1,53,1,53,3,53,2083,8,53,1,53,3,53,2086,8,53,3,53,2088,8,53,1,53,
		1,53,5,53,2092,8,53,10,53,12,53,2095,9,53,1,53,1,53,1,53,1,53,1,53,5,53,
		2102,8,53,10,53,12,53,2105,9,53,1,53,1,53,1,53,1,53,1,53,5,53,2112,8,53,
		10,53,12,53,2115,9,53,3,53,2117,8,53,1,53,3,53,2120,8,53,1,54,1,54,1,54,
		3,54,2125,8,54,1,54,1,54,1,54,1,54,3,54,2131,8,54,1,55,1,55,1,55,1,55,
		1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,2144,8,56,1,57,1,57,3,57,2148,
		8,57,1,57,5,57,2151,8,57,10,57,12,57,2154,9,57,1,58,1,58,1,58,1,58,1,58,
		1,58,3,58,2162,8,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,60,1,60,
		1,60,1,60,1,60,5,60,2177,8,60,10,60,12,60,2180,9,60,1,60,1,60,1,61,1,61,
		1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,2198,
		8,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,2207,8,62,1,62,3,62,2210,
		8,62,1,63,1,63,1,63,1,63,1,63,1,63,3,63,2218,8,63,1,64,1,64,1,64,3,64,
		2223,8,64,1,64,1,64,3,64,2227,8,64,1,65,1,65,1,65,1,66,1,66,3,66,2234,
		8,66,1,66,5,66,2237,8,66,10,66,12,66,2240,9,66,1,67,1,67,1,67,1,67,1,67,
		1,67,1,67,1,67,1,67,1,67,1,67,1,67,3,67,2254,8,67,1,68,1,68,3,68,2258,
		8,68,1,68,1,68,1,69,1,69,3,69,2264,8,69,1,69,1,69,1,70,1,70,3,70,2270,
		8,70,1,70,1,70,1,71,1,71,3,71,2276,8,71,1,71,1,71,1,72,1,72,3,72,2282,
		8,72,1,72,1,72,1,73,1,73,3,73,2288,8,73,1,73,1,73,1,74,3,74,2293,8,74,
		1,74,1,74,3,74,2297,8,74,1,74,1,74,1,75,1,75,1,76,1,76,3,76,2305,8,76,
		1,76,1,76,1,77,1,77,3,77,2311,8,77,1,77,1,77,1,78,1,78,3,78,2317,8,78,
		1,78,1,78,1,79,3,79,2322,8,79,1,79,3,79,2325,8,79,1,79,3,79,2328,8,79,
		1,79,1,79,1,79,1,79,1,80,1,80,1,80,3,80,2337,8,80,1,80,3,80,2340,8,80,
		1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,83,3,83,2351,8,83,1,83,1,83,
		1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,2363,8,83,1,83,1,83,1,84,
		1,84,1,84,1,84,1,85,3,85,2372,8,85,1,85,1,85,3,85,2376,8,85,1,85,1,85,
		1,85,1,85,1,85,1,85,1,85,3,85,2385,8,85,1,85,3,85,2388,8,85,1,85,1,85,
		1,85,1,85,3,85,2394,8,85,3,85,2396,8,85,1,85,1,85,3,85,2400,8,85,1,85,
		1,85,1,85,1,86,1,86,3,86,2407,8,86,1,86,1,86,1,87,1,87,1,87,1,87,1,87,
		1,87,1,87,5,87,2418,8,87,10,87,12,87,2421,9,87,1,87,1,87,1,87,1,87,3,87,
		2427,8,87,1,87,1,87,5,87,2431,8,87,10,87,12,87,2434,9,87,3,87,2436,8,87,
		1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,
		1,88,3,88,2453,8,88,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,
		1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,3,89,2473,8,89,1,90,1,90,3,90,
		2477,8,90,1,90,1,90,1,91,1,91,3,91,2483,8,91,1,91,1,91,1,92,1,92,3,92,
		2489,8,92,1,92,1,92,1,93,1,93,3,93,2495,8,93,1,93,1,93,1,94,3,94,2500,
		8,94,1,94,1,94,1,94,1,94,1,94,3,94,2507,8,94,1,95,1,95,1,95,1,95,1,95,
		3,95,2514,8,95,1,95,5,95,2517,8,95,10,95,12,95,2520,9,95,3,95,2522,8,95,
		1,96,1,96,3,96,2526,8,96,1,97,1,97,3,97,2530,8,97,1,97,1,97,1,98,3,98,
		2535,8,98,1,98,1,98,3,98,2539,8,98,1,98,1,98,3,98,2543,8,98,1,99,1,99,
		1,99,1,99,3,99,2549,8,99,1,99,5,99,2552,8,99,10,99,12,99,2555,9,99,3,99,
		2557,8,99,1,100,1,100,3,100,2561,8,100,1,100,1,100,1,101,1,101,3,101,2567,
		8,101,1,101,1,101,3,101,2571,8,101,1,102,1,102,3,102,2575,8,102,1,102,
		1,102,1,103,1,103,1,103,1,103,3,103,2583,8,103,1,103,1,103,1,104,1,104,
		1,104,1,104,3,104,2591,8,104,1,105,1,105,1,105,1,105,1,105,5,105,2598,
		8,105,10,105,12,105,2601,9,105,1,106,1,106,1,106,1,106,1,107,1,107,3,107,
		2609,8,107,1,107,1,107,1,108,1,108,1,108,1,108,1,108,1,109,1,109,1,109,
		1,109,3,109,2622,8,109,1,109,3,109,2625,8,109,1,110,1,110,3,110,2629,8,
		110,1,110,1,110,5,110,2633,8,110,10,110,12,110,2636,9,110,1,110,1,110,
		1,110,1,110,1,110,3,110,2643,8,110,1,110,1,110,1,110,3,110,2648,8,110,
		1,110,3,110,2651,8,110,1,110,3,110,2654,8,110,1,110,3,110,2657,8,110,1,
		110,3,110,2660,8,110,3,110,2662,8,110,1,110,1,110,1,110,1,110,3,110,2668,
		8,110,3,110,2670,8,110,1,111,1,111,1,111,1,111,1,111,1,111,1,112,1,112,
		1,113,1,113,1,113,1,113,1,113,3,113,2685,8,113,1,114,1,114,1,114,1,114,
		3,114,2691,8,114,1,114,1,114,1,114,1,114,1,114,3,114,2698,8,114,1,114,
		3,114,2701,8,114,3,114,2703,8,114,3,114,2705,8,114,1,115,1,115,1,115,1,
		115,1,115,1,115,1,115,1,115,3,115,2715,8,115,3,115,2717,8,115,1,116,1,
		116,3,116,2721,8,116,1,116,3,116,2724,8,116,1,116,3,116,2727,8,116,1,116,
		1,116,3,116,2731,8,116,1,116,1,116,1,116,3,116,2736,8,116,1,116,1,116,
		1,116,1,116,3,116,2742,8,116,1,116,3,116,2745,8,116,1,116,3,116,2748,8,
		116,1,117,1,117,1,118,1,118,3,118,2754,8,118,1,118,3,118,2757,8,118,1,
		118,1,118,1,119,1,119,1,119,5,119,2764,8,119,10,119,12,119,2767,9,119,
		1,120,1,120,1,120,1,121,1,121,1,121,3,121,2775,8,121,1,121,1,121,3,121,
		2779,8,121,1,122,1,122,3,122,2783,8,122,1,122,1,122,1,122,1,122,3,122,
		2789,8,122,1,122,5,122,2792,8,122,10,122,12,122,2795,9,122,1,123,1,123,
		3,123,2799,8,123,1,123,1,123,1,123,3,123,2804,8,123,5,123,2806,8,123,10,
		123,12,123,2809,9,123,1,124,1,124,1,124,3,124,2814,8,124,1,125,1,125,1,
		125,1,125,1,125,1,125,1,126,1,126,1,126,3,126,2825,8,126,1,126,3,126,2828,
		8,126,1,126,1,126,1,126,3,126,2833,8,126,1,126,1,126,1,126,1,126,3,126,
		2839,8,126,1,126,3,126,2842,8,126,1,126,3,126,2845,8,126,1,126,3,126,2848,
		8,126,1,126,3,126,2851,8,126,1,126,1,126,1,127,1,127,1,128,1,128,1,128,
		1,128,1,128,1,129,1,129,1,129,3,129,2865,8,129,1,129,3,129,2868,8,129,
		1,129,1,129,3,129,2872,8,129,1,130,1,130,3,130,2876,8,130,1,130,1,130,
		1,131,1,131,3,131,2882,8,131,1,131,1,131,1,131,3,131,2887,8,131,5,131,
		2889,8,131,10,131,12,131,2892,9,131,1,132,1,132,3,132,2896,8,132,1,132,
		3,132,2899,8,132,1,132,1,132,3,132,2903,8,132,1,132,1,132,1,132,1,132,
		3,132,2909,8,132,1,133,1,133,3,133,2913,8,133,1,133,1,133,3,133,2917,8,
		133,1,134,1,134,1,134,1,134,1,134,1,134,1,134,3,134,2926,8,134,1,134,1,
		134,1,134,3,134,2931,8,134,1,135,1,135,3,135,2935,8,135,1,135,1,135,3,
		135,2939,8,135,1,135,3,135,2942,8,135,1,135,1,135,3,135,2946,8,135,1,135,
		3,135,2949,8,135,3,135,2951,8,135,1,135,1,135,3,135,2955,8,135,1,136,1,
		136,1,136,1,136,3,136,2961,8,136,1,136,1,136,3,136,2965,8,136,3,136,2967,
		8,136,1,136,1,136,3,136,2971,8,136,1,136,1,136,3,136,2975,8,136,5,136,
		2977,8,136,10,136,12,136,2980,9,136,1,137,1,137,1,137,1,137,3,137,2986,
		8,137,3,137,2988,8,137,1,137,1,137,1,138,1,138,1,138,1,138,1,138,3,138,
		2997,8,138,1,139,1,139,5,139,3001,8,139,10,139,12,139,3004,9,139,1,139,
		1,139,3,139,3008,8,139,1,139,3,139,3011,8,139,1,139,3,139,3014,8,139,1,
		139,3,139,3017,8,139,1,139,3,139,3020,8,139,1,139,1,139,3,139,3024,8,139,
		1,140,1,140,1,141,1,141,1,142,1,142,1,142,1,143,1,143,1,143,1,144,1,144,
		1,144,3,144,3039,8,144,1,145,1,145,3,145,3043,8,145,1,146,1,146,1,146,
		1,146,3,146,3049,8,146,1,146,3,146,3052,8,146,1,146,3,146,3055,8,146,1,
		146,1,146,1,146,1,146,3,146,3061,8,146,1,146,1,146,1,146,3,146,3066,8,
		146,5,146,3068,8,146,10,146,12,146,3071,9,146,3,146,3073,8,146,1,147,1,
		147,1,147,1,147,1,147,1,147,3,147,3081,8,147,3,147,3083,8,147,1,147,1,
		147,1,148,1,148,1,148,1,149,1,149,1,149,1,149,5,149,3094,8,149,10,149,
		12,149,3097,9,149,1,150,1,150,1,150,1,150,1,151,1,151,1,151,1,151,1,152,
		3,152,3108,8,152,1,152,1,152,1,152,3,152,3113,8,152,1,152,3,152,3116,8,
		152,1,152,3,152,3119,8,152,1,153,1,153,1,153,3,153,3124,8,153,1,154,1,
		154,1,155,1,155,3,155,3130,8,155,1,156,1,156,1,156,1,156,1,156,1,156,1,
		156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,3,156,3146,8,156,1,157,1,
		157,1,157,1,157,1,157,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,
		1,158,1,158,1,158,1,158,1,158,3,158,3166,8,158,1,159,1,159,1,159,1,159,
		1,159,1,159,1,159,3,159,3175,8,159,1,160,1,160,3,160,3179,8,160,1,160,
		1,160,1,160,5,160,3184,8,160,10,160,12,160,3187,9,160,1,161,1,161,3,161,
		3191,8,161,1,161,1,161,1,161,1,162,1,162,1,162,1,162,3,162,3200,8,162,
		1,163,1,163,1,163,1,163,1,163,3,163,3207,8,163,1,164,1,164,1,164,1,164,
		1,165,1,165,1,166,1,166,1,166,3,166,3218,8,166,1,167,1,167,1,167,5,167,
		3223,8,167,10,167,12,167,3226,9,167,1,168,1,168,1,168,1,168,5,168,3232,
		8,168,10,168,12,168,3235,9,168,1,169,1,169,1,169,1,170,1,170,1,170,3,170,
		3243,8,170,1,170,1,170,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,
		3,171,3255,8,171,1,172,4,172,3258,8,172,11,172,12,172,3259,1,173,1,173,
		1,173,1,173,1,173,3,173,3267,8,173,1,173,1,173,3,173,3271,8,173,1,173,
		1,173,1,173,1,173,3,173,3277,8,173,1,174,1,174,1,174,3,174,3282,8,174,
		1,175,1,175,1,175,3,175,3287,8,175,1,176,1,176,3,176,3291,8,176,1,176,
		1,176,5,176,3295,8,176,10,176,12,176,3298,9,176,1,177,1,177,1,177,3,177,
		3303,8,177,3,177,3305,8,177,1,178,3,178,3308,8,178,1,178,1,178,3,178,3312,
		8,178,1,179,1,179,1,179,1,180,1,180,1,180,1,180,1,180,3,180,3322,8,180,
		1,180,1,180,1,180,3,180,3327,8,180,1,180,5,180,3330,8,180,10,180,12,180,
		3333,9,180,1,181,1,181,5,181,3337,8,181,10,181,12,181,3340,9,181,1,182,
		1,182,1,182,1,182,1,182,1,182,3,182,3348,8,182,1,182,1,182,1,182,1,182,
		1,182,1,182,3,182,3356,8,182,1,182,1,182,1,182,3,182,3361,8,182,1,183,
		1,183,3,183,3365,8,183,1,183,1,183,1,183,1,183,3,183,3371,8,183,1,183,
		3,183,3374,8,183,1,184,3,184,3377,8,184,1,184,1,184,3,184,3381,8,184,1,
		185,1,185,3,185,3385,8,185,1,185,1,185,1,186,1,186,1,186,1,186,1,186,1,
		186,3,186,3395,8,186,1,187,1,187,3,187,3399,8,187,1,187,3,187,3402,8,187,
		1,187,3,187,3405,8,187,1,188,1,188,1,188,3,188,3410,8,188,1,188,1,188,
		1,189,1,189,3,189,3416,8,189,1,189,1,189,3,189,3420,8,189,1,189,1,189,
		1,189,1,189,3,189,3426,8,189,1,189,3,189,3429,8,189,3,189,3431,8,189,1,
		190,1,190,1,190,3,190,3436,8,190,1,190,1,190,1,191,1,191,1,191,1,191,1,
		191,1,191,1,191,1,191,3,191,3448,8,191,1,192,1,192,1,192,1,192,1,192,5,
		192,3455,8,192,10,192,12,192,3458,9,192,1,192,1,192,1,193,1,193,1,193,
		1,193,1,193,1,193,1,193,1,193,3,193,3470,8,193,1,193,3,193,3473,8,193,
		1,193,1,193,1,193,3,193,3478,8,193,1,193,1,193,1,193,1,193,1,193,3,193,
		3485,8,193,1,194,1,194,3,194,3489,8,194,1,194,1,194,3,194,3493,8,194,3,
		194,3495,8,194,1,195,1,195,1,195,1,195,1,196,1,196,1,196,1,196,1,197,1,
		197,1,197,1,197,3,197,3509,8,197,1,198,1,198,1,199,1,199,1,199,3,199,3516,
		8,199,1,199,1,199,1,200,1,200,1,200,5,200,3523,8,200,10,200,12,200,3526,
		9,200,1,201,1,201,1,201,3,201,3531,8,201,1,201,1,201,1,201,1,201,1,201,
		1,201,1,201,3,201,3540,8,201,1,201,1,201,3,201,3544,8,201,1,201,1,201,
		3,201,3548,8,201,1,202,1,202,1,203,1,203,1,204,1,204,1,204,1,204,3,204,
		3558,8,204,3,204,3560,8,204,1,205,1,205,1,205,1,205,1,205,1,205,3,205,
		3568,8,205,1,206,1,206,1,206,5,206,3573,8,206,10,206,12,206,3576,9,206,
		1,207,1,207,3,207,3580,8,207,1,208,1,208,3,208,3584,8,208,1,208,1,208,
		3,208,3588,8,208,1,208,3,208,3591,8,208,1,208,1,208,1,208,1,208,3,208,
		3597,8,208,1,208,3,208,3600,8,208,1,208,3,208,3603,8,208,1,209,1,209,1,
		209,1,209,3,209,3609,8,209,1,210,1,210,1,210,5,210,3614,8,210,10,210,12,
		210,3617,9,210,1,210,1,210,3,210,3621,8,210,1,210,1,210,3,210,3625,8,210,
		1,210,3,210,3628,8,210,1,210,3,210,3631,8,210,1,210,3,210,3634,8,210,3,
		210,3636,8,210,1,211,1,211,3,211,3640,8,211,1,212,1,212,1,212,1,212,1,
		212,1,212,3,212,3648,8,212,1,213,1,213,1,213,1,213,3,213,3654,8,213,1,
		213,1,213,3,213,3658,8,213,1,213,1,213,1,213,3,213,3663,8,213,1,213,3,
		213,3666,8,213,1,213,3,213,3669,8,213,1,213,3,213,3672,8,213,3,213,3674,
		8,213,1,213,1,213,1,213,3,213,3679,8,213,1,214,1,214,1,214,1,214,1,214,
		5,214,3686,8,214,10,214,12,214,3689,9,214,1,214,1,214,1,214,1,214,1,214,
		1,214,1,214,1,214,1,214,1,214,3,214,3701,8,214,3,214,3703,8,214,1,215,
		1,215,3,215,3707,8,215,1,215,1,215,1,216,1,216,3,216,3713,8,216,1,216,
		3,216,3716,8,216,1,216,3,216,3719,8,216,1,217,1,217,1,217,1,217,3,217,
		3725,8,217,1,217,1,217,1,217,1,217,1,217,3,217,3732,8,217,3,217,3734,8,
		217,1,217,1,217,1,217,1,217,1,217,1,217,3,217,3742,8,217,1,217,1,217,1,
		217,1,217,3,217,3748,8,217,1,218,1,218,1,218,3,218,3753,8,218,1,218,3,
		218,3756,8,218,1,219,1,219,1,219,1,219,1,219,3,219,3763,8,219,3,219,3765,
		8,219,1,220,1,220,1,220,1,220,1,220,1,220,1,220,3,220,3774,8,220,1,220,
		1,220,1,220,1,220,1,220,5,220,3781,8,220,10,220,12,220,3784,9,220,1,220,
		1,220,1,220,1,220,1,220,1,220,3,220,3792,8,220,1,220,1,220,1,220,1,220,
		1,220,1,220,3,220,3800,8,220,1,221,1,221,3,221,3804,8,221,1,221,1,221,
		1,221,1,221,1,221,3,221,3811,8,221,1,221,3,221,3814,8,221,3,221,3816,8,
		221,1,222,1,222,1,222,1,222,1,222,1,222,3,222,3824,8,222,1,223,1,223,1,
		223,1,223,3,223,3830,8,223,1,223,1,223,1,223,1,224,1,224,1,224,1,224,1,
		224,3,224,3840,8,224,1,225,1,225,1,225,5,225,3845,8,225,10,225,12,225,
		3848,9,225,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,
		1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,
		1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,
		1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,
		1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,
		1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,
		1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,
		1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,3,226,3941,8,226,
		1,227,1,227,3,227,3945,8,227,1,228,1,228,1,229,1,229,3,229,3951,8,229,
		1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,
		3,230,3965,8,230,1,231,1,231,1,231,1,231,5,231,3971,8,231,10,231,12,231,
		3974,9,231,3,231,3976,8,231,1,231,1,231,1,232,1,232,1,232,1,232,1,232,
		1,232,5,232,3986,8,232,10,232,12,232,3989,9,232,1,232,1,232,3,232,3993,
		8,232,1,233,1,233,1,233,1,233,3,233,3999,8,233,1,233,1,233,1,233,1,233,
		1,233,3,233,4006,8,233,1,233,1,233,1,233,1,233,1,233,3,233,4013,8,233,
		1,233,1,233,1,233,1,233,1,233,3,233,4020,8,233,1,233,1,233,1,233,1,233,
		1,233,3,233,4027,8,233,1,233,1,233,1,233,1,233,1,233,3,233,4034,8,233,
		1,233,1,233,1,233,1,233,1,233,3,233,4041,8,233,1,233,3,233,4044,8,233,
		1,234,1,234,1,234,5,234,4049,8,234,10,234,12,234,4052,9,234,1,235,1,235,
		1,235,5,235,4057,8,235,10,235,12,235,4060,9,235,1,236,1,236,1,236,5,236,
		4065,8,236,10,236,12,236,4068,9,236,1,237,1,237,1,238,1,238,1,238,5,238,
		4075,8,238,10,238,12,238,4078,9,238,1,239,1,239,1,239,3,239,4083,8,239,
		1,239,1,239,3,239,4087,8,239,1,239,1,239,3,239,4091,8,239,1,239,1,239,
		1,239,3,239,4096,8,239,1,239,3,239,4099,8,239,3,239,4101,8,239,1,240,1,
		240,1,240,1,240,1,240,1,240,1,240,3,240,4110,8,240,1,240,1,240,5,240,4114,
		8,240,10,240,12,240,4117,9,240,1,241,1,241,1,241,1,241,3,241,4123,8,241,
		1,241,1,241,1,241,3,241,4128,8,241,1,241,1,241,1,241,3,241,4133,8,241,
		1,241,1,241,1,241,3,241,4138,8,241,1,241,3,241,4141,8,241,1,242,1,242,
		1,242,5,242,4146,8,242,10,242,12,242,4149,9,242,1,243,1,243,1,244,1,244,
		1,244,1,245,1,245,1,245,1,245,1,245,3,245,4161,8,245,1,245,1,245,1,245,
		1,245,3,245,4167,8,245,1,246,1,246,1,246,1,246,3,246,4173,8,246,1,247,
		1,247,1,247,5,247,4178,8,247,10,247,12,247,4181,9,247,1,248,1,248,1,248,
		1,248,1,248,3,248,4188,8,248,1,248,1,248,1,248,1,248,3,248,4194,8,248,
		1,248,1,248,1,248,1,248,1,248,1,248,1,248,1,248,1,248,1,248,3,248,4206,
		8,248,3,248,4208,8,248,1,249,1,249,1,249,1,249,3,249,4214,8,249,1,249,
		1,249,3,249,4218,8,249,3,249,4220,8,249,1,250,1,250,3,250,4224,8,250,1,
		250,1,250,1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,3,251,
		4237,8,251,1,252,1,252,1,252,1,252,3,252,4243,8,252,1,252,1,252,1,253,
		1,253,1,253,1,253,3,253,4251,8,253,1,253,1,253,1,253,1,253,1,253,1,253,
		1,253,1,253,1,253,3,253,4262,8,253,1,253,1,253,3,253,4266,8,253,1,253,
		1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,3,253,4279,
		8,253,1,253,1,253,1,253,1,253,1,253,3,253,4286,8,253,1,253,1,253,1,253,
		1,253,3,253,4292,8,253,1,253,1,253,1,253,1,253,1,253,3,253,4299,8,253,
		3,253,4301,8,253,1,254,1,254,1,254,1,255,1,255,1,255,1,255,1,255,3,255,
		4311,8,255,1,255,1,255,1,255,1,255,1,256,1,256,3,256,4319,8,256,1,256,
		3,256,4322,8,256,1,256,5,256,4325,8,256,10,256,12,256,4328,9,256,1,256,
		3,256,4331,8,256,1,257,1,257,1,257,1,257,3,257,4337,8,257,1,257,3,257,
		4340,8,257,1,258,1,258,1,258,3,258,4345,8,258,1,259,1,259,1,259,1,259,
		1,259,1,259,1,259,1,259,1,259,4,259,4356,8,259,11,259,12,259,4357,1,260,
		1,260,1,260,1,260,1,260,1,260,1,260,1,260,1,260,1,260,3,260,4370,8,260,
		1,260,1,260,1,260,3,260,4375,8,260,1,260,1,260,1,260,1,260,1,260,1,260,
		3,260,4383,8,260,1,260,1,260,1,260,1,260,3,260,4389,8,260,3,260,4391,8,
		260,3,260,4393,8,260,1,261,1,261,1,261,1,261,3,261,4399,8,261,1,261,1,
		261,1,262,1,262,1,262,1,262,1,262,1,262,1,262,1,262,3,262,4411,8,262,1,
		262,1,262,1,262,3,262,4416,8,262,3,262,4418,8,262,1,262,1,262,3,262,4422,
		8,262,1,262,1,262,1,262,1,262,3,262,4428,8,262,1,262,3,262,4431,8,262,
		1,262,3,262,4434,8,262,1,262,1,262,1,262,1,262,1,262,1,262,1,262,1,262,
		3,262,4444,8,262,3,262,4446,8,262,1,263,1,263,1,263,1,263,3,263,4452,8,
		263,1,264,1,264,1,264,4,264,4457,8,264,11,264,12,264,4458,1,264,1,264,
		1,264,1,264,3,264,4465,8,264,1,265,1,265,1,265,1,266,1,266,1,266,1,266,
		1,266,3,266,4475,8,266,1,266,1,266,3,266,4479,8,266,1,267,1,267,1,267,
		3,267,4484,8,267,1,268,1,268,1,268,1,269,1,269,1,269,1,269,1,269,1,269,
		1,269,1,269,1,269,1,269,5,269,4499,8,269,10,269,12,269,4502,9,269,1,270,
		1,270,1,270,1,270,1,270,1,270,1,270,1,270,1,270,1,270,1,270,1,270,1,270,
		3,270,4517,8,270,1,270,1,270,1,270,3,270,4522,8,270,1,270,1,270,1,270,
		1,270,1,270,1,270,3,270,4530,8,270,1,270,1,270,1,270,1,270,1,270,1,270,
		3,270,4538,8,270,1,271,1,271,1,271,3,271,4543,8,271,1,271,1,271,1,271,
		1,271,3,271,4549,8,271,1,271,3,271,4552,8,271,3,271,4554,8,271,1,272,1,
		272,1,273,1,273,1,273,5,273,4561,8,273,10,273,12,273,4564,9,273,1,274,
		1,274,1,274,3,274,4569,8,274,1,274,1,274,1,274,1,274,3,274,4575,8,274,
		3,274,4577,8,274,1,274,1,274,3,274,4581,8,274,1,274,1,274,1,274,1,274,
		1,274,1,274,1,274,1,274,1,274,3,274,4592,8,274,1,274,1,274,1,274,1,274,
		1,274,1,274,1,274,1,274,3,274,4602,8,274,1,274,1,274,1,274,3,274,4607,
		8,274,1,275,1,275,1,275,3,275,4612,8,275,1,275,1,275,1,275,3,275,4617,
		8,275,1,275,1,275,1,275,1,275,1,275,1,275,3,275,4625,8,275,1,276,1,276,
		3,276,4629,8,276,1,276,5,276,4632,8,276,10,276,12,276,4635,9,276,1,277,
		1,277,1,277,1,277,1,277,1,277,3,277,4643,8,277,1,278,1,278,1,278,1,278,
		1,278,1,278,1,278,1,278,1,278,1,278,3,278,4655,8,278,1,279,1,279,1,279,
		1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,3,279,4669,8,279,
		1,279,1,279,1,279,1,279,1,279,1,279,1,279,3,279,4678,8,279,3,279,4680,
		8,279,1,280,1,280,1,280,5,280,4685,8,280,10,280,12,280,4688,9,280,1,281,
		1,281,1,281,1,281,3,281,4694,8,281,1,282,1,282,3,282,4698,8,282,1,282,
		1,282,1,282,1,282,3,282,4704,8,282,1,282,1,282,1,282,1,282,5,282,4710,
		8,282,10,282,12,282,4713,9,282,1,282,1,282,1,282,1,282,3,282,4719,8,282,
		1,282,1,282,3,282,4723,8,282,1,282,1,282,1,282,1,282,3,282,4729,8,282,
		1,282,1,282,1,282,5,282,4734,8,282,10,282,12,282,4737,9,282,3,282,4739,
		8,282,1,283,1,283,1,283,1,283,1,283,1,283,1,283,3,283,4748,8,283,1,283,
		1,283,1,283,1,283,3,283,4754,8,283,1,284,1,284,1,284,3,284,4759,8,284,
		1,285,1,285,1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,
		1,286,1,286,1,286,1,286,1,286,1,286,1,286,5,286,4780,8,286,10,286,12,286,
		4783,9,286,3,286,4785,8,286,1,287,1,287,1,287,1,288,1,288,1,288,1,288,
		1,288,1,288,1,288,1,288,1,288,1,288,1,288,3,288,4801,8,288,1,288,1,288,
		1,288,3,288,4806,8,288,1,288,3,288,4809,8,288,1,288,1,288,3,288,4813,8,
		288,1,288,3,288,4816,8,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,
		288,1,288,1,288,1,288,1,288,3,288,4830,8,288,1,288,1,288,1,288,1,288,3,
		288,4836,8,288,1,288,1,288,1,288,3,288,4841,8,288,1,288,3,288,4844,8,288,
		3,288,4846,8,288,1,289,1,289,3,289,4850,8,289,1,289,1,289,1,289,3,289,
		4855,8,289,3,289,4857,8,289,1,290,1,290,1,290,1,291,1,291,1,291,1,291,
		1,291,1,291,1,291,3,291,4869,8,291,1,292,1,292,5,292,4873,8,292,10,292,
		12,292,4876,9,292,1,293,1,293,1,293,1,293,1,293,1,293,1,293,1,293,1,293,
		1,293,1,293,1,293,1,293,1,293,1,293,1,293,1,293,1,293,1,293,3,293,4897,
		8,293,1,293,1,293,3,293,4901,8,293,3,293,4903,8,293,1,294,1,294,1,294,
		1,294,1,294,1,294,3,294,4911,8,294,1,295,1,295,3,295,4915,8,295,1,295,
		1,295,1,296,1,296,1,296,1,296,1,296,3,296,4924,8,296,1,297,1,297,1,297,
		1,297,1,298,1,298,1,298,1,298,3,298,4934,8,298,1,299,1,299,1,299,1,299,
		1,299,3,299,4941,8,299,1,299,3,299,4944,8,299,1,299,1,299,3,299,4948,8,
		299,1,299,3,299,4951,8,299,1,299,3,299,4954,8,299,1,299,1,299,3,299,4958,
		8,299,1,299,3,299,4961,8,299,1,299,1,299,3,299,4965,8,299,1,299,3,299,
		4968,8,299,1,299,1,299,1,299,3,299,4973,8,299,1,299,3,299,4976,8,299,1,
		299,1,299,1,299,3,299,4981,8,299,1,299,3,299,4984,8,299,1,299,1,299,1,
		299,1,299,3,299,4990,8,299,1,299,1,299,3,299,4994,8,299,1,299,1,299,1,
		299,1,299,3,299,5000,8,299,1,299,3,299,5003,8,299,1,299,1,299,1,299,1,
		299,1,299,1,299,1,299,3,299,5012,8,299,3,299,5014,8,299,1,299,1,299,1,
		299,1,299,3,299,5020,8,299,1,299,1,299,3,299,5024,8,299,1,299,3,299,5027,
		8,299,1,299,3,299,5030,8,299,1,299,1,299,3,299,5034,8,299,1,299,1,299,
		1,299,1,299,3,299,5040,8,299,1,299,3,299,5043,8,299,1,299,3,299,5046,8,
		299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,3,299,5056,8,299,1,
		299,1,299,3,299,5060,8,299,1,299,1,299,1,299,1,299,1,299,5,299,5067,8,
		299,10,299,12,299,5070,9,299,3,299,5072,8,299,1,299,1,299,1,299,3,299,
		5077,8,299,1,299,3,299,5080,8,299,1,299,3,299,5083,8,299,1,299,1,299,3,
		299,5087,8,299,1,299,3,299,5090,8,299,1,299,1,299,1,299,3,299,5095,8,299,
		1,299,1,299,3,299,5099,8,299,1,299,1,299,1,299,1,299,1,299,1,299,3,299,
		5107,8,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,
		1,299,3,299,5120,8,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,
		1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,3,299,5138,8,299,1,299,
		1,299,1,299,3,299,5143,8,299,1,299,1,299,1,299,3,299,5148,8,299,1,299,
		1,299,1,299,1,299,1,299,1,299,3,299,5156,8,299,1,300,1,300,1,300,1,300,
		3,300,5162,8,300,3,300,5164,8,300,1,301,1,301,3,301,5168,8,301,1,301,3,
		301,5171,8,301,1,302,1,302,1,303,1,303,1,303,1,304,1,304,1,304,1,304,1,
		304,1,304,1,304,3,304,5185,8,304,1,305,1,305,1,305,1,305,1,305,1,305,1,
		305,1,305,3,305,5195,8,305,1,305,1,305,3,305,5199,8,305,1,305,1,305,1,
		305,1,305,5,305,5205,8,305,10,305,12,305,5208,9,305,3,305,5210,8,305,1,
		305,1,305,3,305,5214,8,305,1,305,1,305,1,305,1,305,1,305,1,305,1,305,1,
		305,3,305,5224,8,305,1,306,1,306,3,306,5228,8,306,1,307,1,307,1,307,5,
		307,5233,8,307,10,307,12,307,5236,9,307,1,308,1,308,3,308,5240,8,308,1,
		309,1,309,1,309,1,309,1,309,1,309,3,309,5248,8,309,1,310,1,310,1,310,3,
		310,5253,8,310,1,310,1,310,1,311,1,311,3,311,5259,8,311,1,312,1,312,1,
		312,5,312,5264,8,312,10,312,12,312,5267,9,312,1,313,1,313,3,313,5271,8,
		313,1,313,1,313,1,313,1,313,3,313,5277,8,313,1,313,1,313,1,313,1,313,1,
		313,3,313,5284,8,313,1,314,1,314,1,315,1,315,1,315,1,315,1,315,1,315,3,
		315,5294,8,315,3,315,5296,8,315,1,316,1,316,1,316,1,316,1,316,1,316,3,
		316,5304,8,316,1,317,1,317,1,317,3,317,5309,8,317,1,317,1,317,3,317,5313,
		8,317,1,317,3,317,5316,8,317,1,318,1,318,1,318,5,318,5321,8,318,10,318,
		12,318,5324,9,318,1,319,1,319,3,319,5328,8,319,1,319,1,319,3,319,5332,
		8,319,1,320,1,320,1,320,1,320,1,320,1,321,1,321,1,321,1,321,3,321,5343,
		8,321,1,322,1,322,1,322,1,322,1,322,1,322,3,322,5351,8,322,1,322,1,322,
		3,322,5355,8,322,1,322,3,322,5358,8,322,1,322,3,322,5361,8,322,1,323,1,
		323,3,323,5365,8,323,1,323,1,323,3,323,5369,8,323,1,323,5,323,5372,8,323,
		10,323,12,323,5375,9,323,1,324,1,324,1,324,3,324,5380,8,324,1,325,1,325,
		3,325,5384,8,325,1,325,1,325,1,326,1,326,1,327,1,327,1,327,1,327,1,327,
		3,327,5395,8,327,1,327,3,327,5398,8,327,1,327,3,327,5401,8,327,1,327,3,
		327,5404,8,327,1,328,1,328,1,328,1,328,1,328,1,328,3,328,5412,8,328,1,
		329,1,329,3,329,5416,8,329,1,329,5,329,5419,8,329,10,329,12,329,5422,9,
		329,1,330,1,330,1,330,1,330,1,330,3,330,5429,8,330,1,331,1,331,1,331,1,
		331,1,331,1,331,3,331,5437,8,331,1,332,1,332,1,332,1,332,3,332,5443,8,
		332,1,333,1,333,1,333,1,333,1,333,1,333,1,333,1,333,1,333,1,333,1,333,
		1,333,1,333,1,333,1,333,1,333,3,333,5461,8,333,1,333,1,333,1,334,1,334,
		1,334,1,334,1,334,1,334,3,334,5471,8,334,1,334,1,334,1,334,1,334,3,334,
		5477,8,334,1,335,1,335,1,335,1,336,1,336,1,336,1,337,1,337,1,338,1,338,
		1,338,1,338,3,338,5491,8,338,1,338,3,338,5494,8,338,1,338,1,338,3,338,
		5498,8,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,5,338,
		5509,8,338,10,338,12,338,5512,9,338,1,339,1,339,1,339,1,339,1,339,1,339,
		3,339,5520,8,339,1,339,1,339,1,339,1,339,1,339,1,339,1,339,1,339,1,339,
		1,339,5,339,5532,8,339,10,339,12,339,5535,9,339,1,340,1,340,1,341,1,341,
		3,341,5541,8,341,1,341,1,341,1,341,1,341,3,341,5547,8,341,1,341,1,341,
		1,341,1,341,3,341,5553,8,341,1,342,1,342,1,342,1,342,1,342,1,342,3,342,
		5561,8,342,1,342,1,342,1,342,1,342,1,342,1,342,1,342,1,342,1,342,3,342,
		5572,8,342,1,342,1,342,3,342,5576,8,342,1,343,1,343,1,343,1,343,1,343,
		1,343,1,343,1,343,1,343,1,343,1,343,1,343,1,343,1,343,1,343,1,343,1,343,
		1,343,1,343,1,343,1,343,1,343,1,343,1,343,1,343,1,343,1,343,5,343,5605,
		8,343,10,343,12,343,5608,9,343,1,344,1,344,1,344,1,344,1,344,3,344,5615,
		8,344,1,344,1,344,3,344,5619,8,344,1,344,1,344,1,344,1,344,1,344,1,344,
		1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,3,344,5636,8,344,
		1,344,1,344,1,344,1,344,1,344,3,344,5643,8,344,1,344,1,344,1,344,1,344,
		1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,3,344,5657,8,344,1,344,
		1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,3,344,5669,8,344,
		1,344,1,344,1,344,1,344,3,344,5675,8,344,1,344,1,344,1,344,4,344,5680,
		8,344,11,344,12,344,5681,1,344,3,344,5685,8,344,1,344,1,344,1,344,1,344,
		1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,
		1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,
		1,344,1,344,1,344,1,344,3,344,5719,8,344,1,344,1,344,1,344,1,344,1,344,
		1,344,5,344,5727,8,344,10,344,12,344,5730,9,344,1,345,1,345,1,345,1,346,
		1,346,1,346,1,346,1,346,1,346,3,346,5741,8,346,1,347,1,347,1,347,3,347,
		5746,8,347,1,347,1,347,1,347,1,347,3,347,5752,8,347,1,347,1,347,1,347,
		1,347,1,347,1,347,3,347,5760,8,347,1,347,1,347,1,347,1,347,1,347,3,347,
		5767,8,347,1,347,1,347,1,347,1,347,3,347,5773,8,347,1,347,1,347,1,347,
		3,347,5778,8,347,1,347,1,347,1,347,1,347,3,347,5784,8,347,1,347,1,347,
		1,347,3,347,5789,8,347,1,347,1,347,1,347,3,347,5794,8,347,1,347,1,347,
		1,347,1,347,3,347,5800,8,347,1,347,1,347,1,347,3,347,5805,8,347,1,347,
		1,347,1,347,1,347,3,347,5811,8,347,1,347,1,347,1,347,1,347,1,347,1,347,
		3,347,5819,8,347,1,347,1,347,1,347,1,347,1,347,1,347,3,347,5827,8,347,
		1,347,1,347,1,347,1,347,1,347,1,347,3,347,5835,8,347,1,347,1,347,1,347,
		1,347,1,347,1,347,3,347,5843,8,347,1,347,1,347,1,347,3,347,5848,8,347,
		1,347,1,347,1,347,1,347,3,347,5854,8,347,1,347,1,347,1,347,3,347,5859,
		8,347,1,347,1,347,3,347,5863,8,347,1,347,1,347,3,347,5867,8,347,1,347,
		1,347,1,347,3,347,5872,8,347,3,347,5874,8,347,1,348,1,348,1,348,1,348,
		1,348,1,349,1,349,1,349,1,349,1,349,1,349,1,349,1,349,1,349,1,349,1,349,
		1,349,3,349,5893,8,349,1,349,1,349,3,349,5897,8,349,1,349,1,349,1,349,
		1,349,1,349,3,349,5904,8,349,1,349,1,349,1,349,1,349,1,349,1,349,1,349,
		1,349,1,349,1,349,3,349,5916,8,349,1,349,3,349,5919,8,349,1,349,1,349,
		3,349,5923,8,349,1,350,1,350,1,350,3,350,5928,8,350,1,351,1,351,1,351,
		3,351,5933,8,351,1,351,1,351,3,351,5937,8,351,1,352,1,352,1,352,1,353,
		1,353,1,353,1,353,1,353,3,353,5947,8,353,1,353,1,353,1,353,1,353,1,353,
		1,353,1,353,3,353,5956,8,353,3,353,5958,8,353,1,354,3,354,5961,8,354,1,
		354,1,354,1,355,1,355,1,355,1,355,1,355,3,355,5970,8,355,1,356,1,356,1,
		356,5,356,5975,8,356,10,356,12,356,5978,9,356,1,357,1,357,1,357,1,357,
		1,357,1,357,1,357,1,357,1,357,1,357,3,357,5990,8,357,1,357,1,357,1,357,
		3,357,5995,8,357,1,358,1,358,1,358,1,358,1,358,3,358,6002,8,358,1,358,
		1,358,1,358,1,358,3,358,6008,8,358,1,358,1,358,1,358,1,358,1,358,1,358,
		1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,
		1,358,1,358,1,358,1,358,4,358,6032,8,358,11,358,12,358,6033,1,358,1,358,
		1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,
		1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,
		1,358,1,358,1,358,3,358,6065,8,358,1,358,1,358,1,358,1,358,1,358,1,358,
		1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,
		3,358,6085,8,358,1,358,1,358,1,358,1,358,3,358,6091,8,358,1,358,1,358,
		3,358,6095,8,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,
		1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,
		1,358,1,358,1,358,1,358,3,358,6122,8,358,1,358,1,358,1,358,1,358,1,358,
		1,358,1,358,1,358,1,358,1,358,3,358,6134,8,358,1,358,1,358,1,358,1,358,
		1,358,1,358,1,358,1,358,1,358,1,358,1,358,3,358,6147,8,358,1,358,1,358,
		3,358,6151,8,358,1,358,1,358,3,358,6155,8,358,1,358,1,358,1,358,1,358,
		1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,
		1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,3,358,6183,
		8,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,
		1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,
		1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,
		1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,
		1,358,1,358,1,358,1,358,1,358,1,358,1,358,3,358,6239,8,358,1,358,1,358,
		1,358,1,358,1,358,1,358,1,358,1,358,3,358,6249,8,358,1,358,1,358,3,358,
		6253,8,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,
		3,358,6265,8,358,1,358,1,358,1,358,3,358,6270,8,358,1,359,1,359,1,359,
		1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,3,359,6283,8,359,1,359,
		1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
		1,359,1,359,1,359,1,359,1,359,3,359,6303,8,359,1,360,1,360,3,360,6307,
		8,360,1,360,1,360,1,361,1,361,1,361,1,362,1,362,1,362,1,362,1,362,1,362,
		1,362,1,362,5,362,6322,8,362,10,362,12,362,6325,9,362,3,362,6327,8,362,
		1,363,1,363,1,363,3,363,6332,8,363,1,363,3,363,6335,8,363,1,364,1,364,
		1,365,1,365,1,365,1,365,1,365,3,365,6344,8,365,1,365,1,365,3,365,6348,
		8,365,1,365,1,365,1,365,1,365,3,365,6354,8,365,1,365,1,365,1,365,1,365,
		3,365,6360,8,365,1,365,1,365,3,365,6364,8,365,1,365,1,365,1,366,1,366,
		1,366,1,366,1,366,1,366,1,366,3,366,6375,8,366,1,366,1,366,1,366,1,366,
		3,366,6381,8,366,3,366,6383,8,366,1,366,1,366,1,367,1,367,1,367,3,367,
		6390,8,367,1,367,1,367,1,367,1,367,1,367,3,367,6397,8,367,1,367,1,367,
		3,367,6401,8,367,1,368,1,368,1,368,5,368,6406,8,368,10,368,12,368,6409,
		9,368,1,369,1,369,3,369,6413,8,369,1,370,1,370,3,370,6417,8,370,1,371,
		1,371,1,371,3,371,6422,8,371,1,372,1,372,3,372,6426,8,372,1,372,1,372,
		3,372,6430,8,372,1,373,1,373,1,373,3,373,6435,8,373,1,373,1,373,1,373,
		3,373,6440,8,373,3,373,6442,8,373,1,373,1,373,3,373,6446,8,373,1,374,1,
		374,1,374,1,375,1,375,1,375,1,376,1,376,1,376,1,377,1,377,3,377,6459,8,
		377,1,377,1,377,3,377,6463,8,377,1,377,3,377,6466,8,377,1,377,1,377,3,
		377,6470,8,377,1,377,1,377,3,377,6474,8,377,1,377,1,377,3,377,6478,8,377,
		1,377,1,377,1,377,3,377,6483,8,377,1,377,1,377,3,377,6487,8,377,1,377,
		1,377,3,377,6491,8,377,1,377,1,377,1,377,1,377,1,377,1,377,1,377,3,377,
		6500,8,377,3,377,6502,8,377,1,378,1,378,1,378,5,378,6507,8,378,10,378,
		12,378,6510,9,378,1,379,1,379,1,379,3,379,6515,8,379,1,380,1,380,1,381,
		1,381,1,382,1,382,3,382,6523,8,382,1,383,1,383,1,384,1,384,1,384,1,384,
		1,385,1,385,1,385,1,385,1,386,1,386,1,386,1,386,1,387,1,387,1,387,5,387,
		6542,8,387,10,387,12,387,6545,9,387,1,388,1,388,3,388,6549,8,388,1,389,
		1,389,1,389,5,389,6554,8,389,10,389,12,389,6557,9,389,1,390,1,390,1,391,
		1,391,1,391,1,391,1,391,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,
		1,392,1,392,1,392,1,392,1,392,3,392,6579,8,392,1,393,1,393,1,393,1,394,
		1,394,1,394,1,394,1,394,1,395,1,395,1,395,1,395,1,395,1,395,3,395,6595,
		8,395,1,396,1,396,1,396,1,397,1,397,1,397,4,397,6603,8,397,11,397,12,397,
		6604,1,398,1,398,3,398,6609,8,398,1,398,1,398,1,398,4,398,6614,8,398,11,
		398,12,398,6615,1,398,3,398,6619,8,398,1,398,1,398,1,398,1,399,1,399,1,
		399,1,400,1,400,1,400,3,400,6630,8,400,1,401,1,401,1,402,1,402,1,402,1,
		403,1,403,3,403,6639,8,403,1,403,3,403,6642,8,403,1,403,1,403,1,404,1,
		404,1,404,3,404,6649,8,404,1,405,1,405,1,405,3,405,6654,8,405,1,406,1,
		406,1,406,1,406,1,406,1,407,1,407,1,407,1,407,1,407,1,407,1,407,1,408,
		1,408,1,408,1,408,1,408,1,408,1,408,1,409,1,409,1,409,4,409,6678,8,409,
		11,409,12,409,6679,1,410,1,410,1,410,1,410,3,410,6686,8,410,1,411,1,411,
		1,411,1,411,3,411,6692,8,411,1,411,1,411,3,411,6696,8,411,1,412,1,412,
		1,412,1,412,1,412,1,412,1,413,1,413,3,413,6706,8,413,1,414,1,414,3,414,
		6710,8,414,1,414,1,414,1,415,1,415,1,415,1,415,1,415,1,415,1,415,5,415,
		6721,8,415,10,415,12,415,6724,9,415,1,415,1,415,1,416,1,416,1,416,1,416,
		1,416,1,416,1,416,3,416,6735,8,416,1,417,1,417,1,417,1,417,1,417,1,417,
		1,418,1,418,1,418,1,419,1,419,1,419,1,420,1,420,1,420,1,420,3,420,6753,
		8,420,1,420,1,420,1,420,1,420,5,420,6759,8,420,10,420,12,420,6762,9,420,
		1,420,1,420,1,420,1,420,1,420,5,420,6769,8,420,10,420,12,420,6772,9,420,
		3,420,6774,8,420,1,421,1,421,1,421,3,421,6779,8,421,1,422,1,422,3,422,
		6783,8,422,1,422,1,422,1,422,1,423,1,423,3,423,6790,8,423,1,423,1,423,
		1,423,3,423,6795,8,423,1,424,1,424,1,425,1,425,1,425,3,425,6802,8,425,
		1,425,1,425,1,425,1,425,5,425,6808,8,425,10,425,12,425,6811,9,425,3,425,
		6813,8,425,1,426,1,426,1,426,3,426,6818,8,426,1,426,1,426,1,426,1,426,
		5,426,6824,8,426,10,426,12,426,6827,9,426,3,426,6829,8,426,1,427,1,427,
		1,427,1,427,1,428,1,428,1,428,1,429,1,429,1,429,1,430,1,430,3,430,6843,
		8,430,1,430,3,430,6846,8,430,1,430,1,430,1,430,1,430,1,431,1,431,1,431,
		1,431,1,431,1,431,1,431,3,431,6859,8,431,1,431,1,431,3,431,6863,8,431,
		3,431,6865,8,431,1,432,1,432,1,432,3,432,6870,8,432,1,433,1,433,1,433,
		3,433,6875,8,433,1,434,1,434,1,434,1,435,3,435,6881,8,435,1,435,1,435,
		1,436,1,436,3,436,6887,8,436,1,436,1,436,5,436,6891,8,436,10,436,12,436,
		6894,9,436,1,436,1,436,3,436,6898,8,436,1,436,3,436,6901,8,436,1,436,1,
		436,5,436,6905,8,436,10,436,12,436,6908,9,436,1,436,1,436,3,436,6912,8,
		436,1,436,3,436,6915,8,436,1,436,1,436,5,436,6919,8,436,10,436,12,436,
		6922,9,436,1,436,3,436,6925,8,436,1,436,1,436,1,436,1,436,3,436,6931,8,
		436,3,436,6933,8,436,1,436,3,436,6936,8,436,1,436,1,436,5,436,6940,8,436,
		10,436,12,436,6943,9,436,1,436,1,436,1,436,3,436,6948,8,436,1,436,1,436,
		1,436,1,436,1,436,1,436,3,436,6956,8,436,3,436,6958,8,436,3,436,6960,8,
		436,1,437,1,437,3,437,6964,8,437,1,438,1,438,5,438,6968,8,438,10,438,12,
		438,6971,9,438,1,438,1,438,3,438,6975,8,438,1,438,1,438,3,438,6979,8,438,
		1,438,1,438,1,438,3,438,6984,8,438,1,438,1,438,5,438,6988,8,438,10,438,
		12,438,6991,9,438,1,438,1,438,5,438,6995,8,438,10,438,12,438,6998,9,438,
		3,438,7000,8,438,3,438,7002,8,438,1,439,3,439,7005,8,439,1,439,1,439,1,
		439,1,439,1,439,1,439,1,439,1,439,3,439,7015,8,439,1,439,1,439,3,439,7019,
		8,439,1,439,1,439,1,439,1,439,3,439,7025,8,439,1,439,1,439,1,439,1,439,
		1,439,3,439,7032,8,439,1,439,1,439,1,439,3,439,7037,8,439,1,439,1,439,
		1,439,1,439,1,439,1,439,1,439,1,439,1,439,1,439,1,439,1,439,3,439,7051,
		8,439,1,439,1,439,1,439,3,439,7056,8,439,1,440,1,440,1,441,1,441,1,442,
		1,442,3,442,7064,8,442,1,442,1,442,1,442,3,442,7069,8,442,1,442,1,442,
		3,442,7073,8,442,1,442,3,442,7076,8,442,1,443,1,443,1,443,3,443,7081,8,
		443,1,443,1,443,3,443,7085,8,443,1,443,1,443,1,443,1,443,1,443,1,443,3,
		443,7093,8,443,1,443,1,443,1,443,1,443,1,443,1,443,3,443,7101,8,443,3,
		443,7103,8,443,1,444,1,444,1,444,1,444,1,444,3,444,7110,8,444,1,445,1,
		445,1,445,1,445,5,445,7116,8,445,10,445,12,445,7119,9,445,1,445,1,445,
		1,446,1,446,3,446,7125,8,446,1,446,3,446,7128,8,446,1,447,1,447,1,447,
		1,447,5,447,7134,8,447,10,447,12,447,7137,9,447,1,447,1,447,1,448,1,448,
		1,448,3,448,7144,8,448,3,448,7146,8,448,1,449,1,449,1,449,1,449,3,449,
		7152,8,449,1,450,1,450,1,451,1,451,3,451,7158,8,451,1,452,1,452,3,452,
		7162,8,452,1,452,1,452,1,452,1,452,1,452,3,452,7169,8,452,1,453,1,453,
		1,454,1,454,1,454,1,455,1,455,1,455,1,455,3,455,7180,8,455,1,456,1,456,
		1,457,1,457,1,457,1,458,1,458,3,458,7189,8,458,1,458,3,458,7192,8,458,
		1,458,1,458,1,458,3,458,7197,8,458,3,458,7199,8,458,1,458,3,458,7202,8,
		458,1,458,3,458,7205,8,458,1,458,1,458,3,458,7209,8,458,1,458,3,458,7212,
		8,458,1,458,1,458,3,458,7216,8,458,1,458,1,458,1,458,3,458,7221,8,458,
		1,458,3,458,7224,8,458,1,458,1,458,3,458,7228,8,458,1,458,3,458,7231,8,
		458,1,458,1,458,3,458,7235,8,458,1,458,1,458,1,458,3,458,7240,8,458,1,
		458,1,458,3,458,7244,8,458,1,458,1,458,1,458,1,458,1,458,1,458,1,458,1,
		458,1,458,1,458,3,458,7256,8,458,1,458,1,458,3,458,7260,8,458,1,458,1,
		458,1,458,1,458,3,458,7266,8,458,1,458,3,458,7269,8,458,1,458,1,458,1,
		458,3,458,7274,8,458,1,458,1,458,3,458,7278,8,458,1,458,1,458,3,458,7282,
		8,458,1,458,1,458,1,458,3,458,7287,8,458,1,458,1,458,1,458,1,458,1,458,
		1,458,1,458,3,458,7296,8,458,1,458,3,458,7299,8,458,1,458,1,458,3,458,
		7303,8,458,1,458,1,458,3,458,7307,8,458,1,458,3,458,7310,8,458,1,458,1,
		458,3,458,7314,8,458,1,458,1,458,3,458,7318,8,458,1,458,1,458,1,458,3,
		458,7323,8,458,1,458,1,458,1,458,3,458,7328,8,458,1,458,1,458,1,458,1,
		458,3,458,7334,8,458,1,459,1,459,1,459,3,459,7339,8,459,1,460,1,460,1,
		460,3,460,7344,8,460,3,460,7346,8,460,1,461,1,461,1,461,3,461,7351,8,461,
		1,461,1,461,1,462,4,462,7356,8,462,11,462,12,462,7357,1,463,1,463,1,463,
		1,463,1,463,1,463,3,463,7366,8,463,1,463,1,463,1,463,1,463,3,463,7372,
		8,463,3,463,7374,8,463,1,464,1,464,3,464,7378,8,464,1,464,1,464,3,464,
		7382,8,464,1,465,1,465,3,465,7386,8,465,1,465,1,465,3,465,7390,8,465,1,
		466,1,466,1,466,1,466,1,467,1,467,1,467,1,467,1,468,1,468,1,468,1,468,
		3,468,7404,8,468,1,469,1,469,1,469,1,469,1,469,3,469,7411,8,469,1,470,
		1,470,3,470,7415,8,470,1,470,5,470,7418,8,470,10,470,12,470,7421,9,470,
		1,471,4,471,7424,8,471,11,471,12,471,7425,1,472,1,472,3,472,7430,8,472,
		1,472,1,472,1,472,1,472,3,472,7436,8,472,1,472,1,472,3,472,7440,8,472,
		1,472,1,472,3,472,7444,8,472,1,472,1,472,1,472,3,472,7449,8,472,1,472,
		1,472,1,472,3,472,7454,8,472,1,472,1,472,1,472,3,472,7459,8,472,1,472,
		1,472,1,472,3,472,7464,8,472,1,472,1,472,1,472,1,472,3,472,7470,8,472,
		1,472,1,472,1,472,1,472,3,472,7476,8,472,1,472,1,472,1,472,3,472,7481,
		8,472,1,472,1,472,1,472,3,472,7486,8,472,1,472,1,472,1,472,3,472,7491,
		8,472,1,472,1,472,1,472,3,472,7496,8,472,1,472,1,472,1,472,3,472,7501,
		8,472,1,472,1,472,1,472,3,472,7506,8,472,1,472,1,472,1,472,3,472,7511,
		8,472,1,472,1,472,1,472,1,472,1,472,1,472,1,472,1,472,3,472,7521,8,472,
		1,472,1,472,1,472,1,472,3,472,7527,8,472,1,472,1,472,1,472,1,472,3,472,
		7533,8,472,1,472,1,472,1,472,1,472,3,472,7539,8,472,1,472,3,472,7542,8,
		472,1,472,1,472,1,472,1,472,1,472,3,472,7549,8,472,1,472,1,472,1,472,3,
		472,7554,8,472,1,472,3,472,7557,8,472,1,473,1,473,3,473,7561,8,473,1,474,
		3,474,7564,8,474,1,474,1,474,3,474,7568,8,474,1,474,1,474,1,475,3,475,
		7573,8,475,1,475,1,475,3,475,7577,8,475,1,475,1,475,1,476,3,476,7582,8,
		476,1,476,1,476,3,476,7586,8,476,1,476,1,476,1,477,1,477,1,477,1,477,1,
		477,3,477,7595,8,477,1,477,3,477,7598,8,477,1,477,3,477,7601,8,477,1,478,
		3,478,7604,8,478,1,478,1,478,3,478,7608,8,478,1,478,1,478,3,478,7612,8,
		478,1,478,1,478,3,478,7616,8,478,1,478,1,478,1,478,1,478,1,478,1,478,1,
		478,1,478,1,478,1,478,1,478,1,478,1,478,3,478,7631,8,478,1,478,3,478,7634,
		8,478,3,478,7636,8,478,1,479,1,479,1,479,3,479,7641,8,479,1,479,1,479,
		1,479,1,479,1,479,1,479,1,479,3,479,7650,8,479,1,479,3,479,7653,8,479,
		1,479,1,479,3,479,7657,8,479,1,480,1,480,1,480,1,480,1,480,1,481,1,481,
		1,481,1,481,5,481,7668,8,481,10,481,12,481,7671,9,481,1,481,1,481,1,482,
		1,482,1,482,1,482,1,482,1,482,1,482,3,482,7682,8,482,1,482,1,482,1,482,
		3,482,7687,8,482,1,482,5,482,7690,8,482,10,482,12,482,7693,9,482,1,482,
		1,482,1,482,1,482,5,482,7699,8,482,10,482,12,482,7702,9,482,1,482,1,482,
		3,482,7706,8,482,1,483,1,483,1,483,1,483,1,483,5,483,7713,8,483,10,483,
		12,483,7716,9,483,1,483,1,483,3,483,7720,8,483,1,484,1,484,3,484,7724,
		8,484,1,484,1,484,3,484,7728,8,484,1,484,1,484,3,484,7732,8,484,1,484,
		1,484,1,484,3,484,7737,8,484,1,484,1,484,1,484,3,484,7742,8,484,1,484,
		1,484,1,484,1,484,3,484,7748,8,484,1,484,1,484,1,484,3,484,7753,8,484,
		1,484,3,484,7756,8,484,1,485,1,485,1,485,5,485,7761,8,485,10,485,12,485,
		7764,9,485,1,486,1,486,1,486,1,486,5,486,7770,8,486,10,486,12,486,7773,
		9,486,1,486,1,486,1,487,1,487,3,487,7779,8,487,1,488,1,488,1,488,1,488,
		1,489,1,489,1,489,1,490,1,490,1,490,1,490,1,491,3,491,7793,8,491,1,491,
		1,491,1,492,1,492,1,492,1,493,1,493,1,493,1,494,1,494,3,494,7805,8,494,
		1,495,1,495,1,495,1,495,1,495,1,495,1,496,1,496,1,496,5,496,7816,8,496,
		10,496,12,496,7819,9,496,1,497,1,497,1,497,5,497,7824,8,497,10,497,12,
		497,7827,9,497,1,498,1,498,1,498,1,498,3,498,7833,8,498,1,499,1,499,1,
		499,1,500,1,500,4,500,7840,8,500,11,500,12,500,7841,1,501,1,501,1,501,
		1,501,3,501,7848,8,501,1,501,1,501,1,501,1,501,1,501,1,501,3,501,7856,
		8,501,1,502,1,502,4,502,7860,8,502,11,502,12,502,7861,1,503,1,503,1,503,
		1,503,1,504,1,504,1,504,5,504,7871,8,504,10,504,12,504,7874,9,504,1,505,
		1,505,1,505,5,505,7879,8,505,10,505,12,505,7882,9,505,1,506,1,506,1,506,
		5,506,7887,8,506,10,506,12,506,7890,9,506,1,507,1,507,1,507,1,507,1,507,
		3,507,7897,8,507,1,507,1,507,1,507,1,507,1,507,1,507,1,507,1,507,3,507,
		7907,8,507,1,507,1,507,1,507,3,507,7912,8,507,1,507,1,507,1,507,3,507,
		7917,8,507,3,507,7919,8,507,1,508,1,508,1,508,1,508,3,508,7925,8,508,1,
		508,1,508,1,508,1,508,3,508,7931,8,508,1,508,3,508,7934,8,508,1,508,1,
		508,1,508,1,508,1,508,3,508,7941,8,508,3,508,7943,8,508,3,508,7945,8,508,
		1,508,3,508,7948,8,508,3,508,7950,8,508,1,509,1,509,1,509,1,509,1,510,
		1,510,1,510,1,510,1,511,1,511,1,511,1,512,1,512,1,512,1,512,3,512,7967,
		8,512,1,513,1,513,1,513,3,513,7972,8,513,3,513,7974,8,513,1,514,1,514,
		1,514,1,515,1,515,3,515,7981,8,515,1,516,1,516,1,517,1,517,1,518,1,518,
		1,518,1,518,1,519,1,519,1,519,3,519,7994,8,519,3,519,7996,8,519,1,520,
		1,520,1,520,1,520,3,520,8002,8,520,1,521,1,521,1,522,1,522,1,522,1,522,
		5,522,8010,8,522,10,522,12,522,8013,9,522,1,522,1,522,1,523,1,523,1,524,
		1,524,3,524,8021,8,524,1,525,1,525,1,526,1,526,1,527,1,527,1,527,1,527,
		1,527,3,527,8032,8,527,1,527,1,527,1,528,1,528,1,529,1,529,1,530,1,530,
		1,531,1,531,1,532,1,532,1,533,1,533,1,534,1,534,1,535,1,535,1,536,1,536,
		3,536,8054,8,536,1,537,1,537,3,537,8058,8,537,1,538,1,538,1,539,1,539,
		1,540,1,540,1,541,1,541,1,542,1,542,1,543,1,543,1,544,1,544,1,545,1,545,
		1,546,1,546,1,547,1,547,1,548,1,548,3,548,8082,8,548,1,549,1,549,1,549,
		1,550,1,550,1,550,1,550,1,550,1,550,3,550,8093,8,550,3,550,8095,8,550,
		1,551,1,551,3,551,8099,8,551,1,552,1,552,1,552,5,552,8104,8,552,10,552,
		12,552,8107,9,552,1,553,1,553,1,553,5,553,8112,8,553,10,553,12,553,8115,
		9,553,1,554,1,554,1,555,1,555,3,555,8121,8,555,1,556,1,556,1,557,1,557,
		3,557,8127,8,557,1,558,1,558,1,559,1,559,1,560,1,560,1,561,1,561,1,562,
		1,562,1,563,1,563,1,563,3,563,8142,8,563,1,564,1,564,3,564,8146,8,564,
		1,565,1,565,1,565,5,565,8151,8,565,10,565,12,565,8154,9,565,1,566,1,566,
		1,566,1,566,1,567,1,567,3,567,8162,8,567,1,568,1,568,1,568,3,568,8167,
		8,568,3,568,8169,8,568,1,568,1,568,1,568,1,568,3,568,8175,8,568,1,569,
		1,569,1,569,1,570,1,570,1,571,1,571,1,572,1,572,1,573,1,573,1,573,1,573,
		1,573,3,573,8191,8,573,1,574,1,574,1,574,1,574,1,574,1,574,3,574,8199,
		8,574,1,574,3,574,8202,8,574,1,575,1,575,1,575,1,575,1,575,3,575,8209,
		8,575,1,576,1,576,1,576,1,576,5,576,8215,8,576,10,576,12,576,8218,9,576,
		1,576,1,576,1,577,1,577,1,577,3,577,8225,8,577,1,578,1,578,1,578,3,578,
		8230,8,578,1,579,1,579,1,579,3,579,8235,8,579,1,580,3,580,8238,8,580,1,
		580,1,580,3,580,8242,8,580,1,580,5,580,8245,8,580,10,580,12,580,8248,9,
		580,1,581,1,581,1,582,1,582,1,582,5,582,8255,8,582,10,582,12,582,8258,
		9,582,1,583,1,583,1,584,1,584,1,585,1,585,1,586,1,586,1,586,1,586,1,586,
		1,586,3,586,8272,8,586,1,587,1,587,3,587,8276,8,587,1,588,1,588,1,589,
		1,589,1,589,1,589,1,589,1,589,1,590,1,590,3,590,8288,8,590,1,591,1,591,
		3,591,8292,8,591,1,592,1,592,3,592,8296,8,592,1,593,1,593,3,593,8300,8,
		593,1,594,1,594,1,594,1,595,1,595,1,596,1,596,1,597,1,597,1,597,1,597,
		1,597,1,597,3,597,8315,8,597,1,598,1,598,1,598,1,598,1,598,1,598,1,598,
		1,598,1,598,1,598,3,598,8327,8,598,1,599,1,599,1,599,1,599,1,599,1,599,
		1,599,1,599,3,599,8337,8,599,1,599,1,599,1,599,1,599,1,599,3,599,8344,
		8,599,3,599,8346,8,599,1,600,1,600,1,601,1,601,1,602,1,602,1,602,1,602,
		1,602,1,602,1,602,1,602,1,602,1,602,1,602,3,602,8363,8,602,1,602,1,602,
		1,602,3,602,8368,8,602,3,602,8370,8,602,1,603,1,603,1,604,1,604,1,604,
		3,604,8377,8,604,1,605,1,605,1,605,3,605,8382,8,605,1,605,1,605,1,605,
		3,605,8387,8,605,3,605,8389,8,605,1,606,1,606,1,606,1,606,3,606,8395,8,
		606,1,607,1,607,1,608,1,608,1,608,1,608,1,608,3,608,8404,8,608,1,609,1,
		609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,3,609,8415,8,609,1,609,0,
		4,676,678,686,688,610,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
		36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,
		84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
		124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,
		160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,
		196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,
		232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,
		268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,
		304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,
		340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,
		376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,
		412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,444,446,
		448,450,452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,482,
		484,486,488,490,492,494,496,498,500,502,504,506,508,510,512,514,516,518,
		520,522,524,526,528,530,532,534,536,538,540,542,544,546,548,550,552,554,
		556,558,560,562,564,566,568,570,572,574,576,578,580,582,584,586,588,590,
		592,594,596,598,600,602,604,606,608,610,612,614,616,618,620,622,624,626,
		628,630,632,634,636,638,640,642,644,646,648,650,652,654,656,658,660,662,
		664,666,668,670,672,674,676,678,680,682,684,686,688,690,692,694,696,698,
		700,702,704,706,708,710,712,714,716,718,720,722,724,726,728,730,732,734,
		736,738,740,742,744,746,748,750,752,754,756,758,760,762,764,766,768,770,
		772,774,776,778,780,782,784,786,788,790,792,794,796,798,800,802,804,806,
		808,810,812,814,816,818,820,822,824,826,828,830,832,834,836,838,840,842,
		844,846,848,850,852,854,856,858,860,862,864,866,868,870,872,874,876,878,
		880,882,884,886,888,890,892,894,896,898,900,902,904,906,908,910,912,914,
		916,918,920,922,924,926,928,930,932,934,936,938,940,942,944,946,948,950,
		952,954,956,958,960,962,964,966,968,970,972,974,976,978,980,982,984,986,
		988,990,992,994,996,998,1000,1002,1004,1006,1008,1010,1012,1014,1016,1018,
		1020,1022,1024,1026,1028,1030,1032,1034,1036,1038,1040,1042,1044,1046,
		1048,1050,1052,1054,1056,1058,1060,1062,1064,1066,1068,1070,1072,1074,
		1076,1078,1080,1082,1084,1086,1088,1090,1092,1094,1096,1098,1100,1102,
		1104,1106,1108,1110,1112,1114,1116,1118,1120,1122,1124,1126,1128,1130,
		1132,1134,1136,1138,1140,1142,1144,1146,1148,1150,1152,1154,1156,1158,
		1160,1162,1164,1166,1168,1170,1172,1174,1176,1178,1180,1182,1184,1186,
		1188,1190,1192,1194,1196,1198,1200,1202,1204,1206,1208,1210,1212,1214,
		1216,1218,0,146,1,0,722,723,2,0,17,17,590,590,2,0,49,49,471,471,1,0,645,
		646,2,0,4,4,148,148,2,0,434,434,436,436,1,0,724,725,2,0,50,50,284,284,
		2,0,232,232,458,458,4,0,126,126,249,249,437,437,556,556,2,0,130,130,250,
		250,2,0,440,440,603,603,2,0,441,441,604,604,2,0,374,374,638,638,3,0,335,
		335,578,578,602,602,2,0,6,6,28,28,3,0,133,133,242,242,614,614,2,0,197,
		197,415,415,2,0,571,571,574,574,3,0,232,232,295,295,431,431,2,0,191,191,
		367,367,4,0,191,191,268,268,367,367,419,419,2,0,750,750,753,756,3,0,131,
		131,223,223,295,295,1,0,626,627,2,0,82,82,295,295,2,0,112,112,653,653,
		2,0,278,278,484,484,2,0,131,131,295,295,7,0,10,10,143,143,223,223,531,
		532,534,534,536,536,555,555,2,0,381,381,773,773,2,0,747,749,787,787,3,
		0,432,432,484,484,683,683,2,0,18,18,134,134,2,0,272,272,478,478,2,0,98,
		98,239,239,2,0,10,10,143,143,2,0,198,198,232,232,2,0,236,236,265,265,2,
		0,386,386,649,649,2,0,29,29,543,543,2,0,261,261,472,472,2,0,32,32,316,
		316,2,0,383,383,743,744,2,0,528,528,530,530,2,0,449,449,538,538,2,0,543,
		543,552,552,2,0,123,123,148,148,3,0,369,369,539,539,650,650,2,0,287,287,
		611,611,2,0,128,128,719,719,3,0,206,206,422,422,574,574,4,0,242,242,443,
		443,497,497,614,614,13,0,133,133,148,148,170,170,173,173,188,188,236,236,
		423,423,427,427,451,451,510,510,565,565,594,594,616,616,4,0,483,483,572,
		572,618,618,636,636,2,0,65,65,514,514,2,0,97,97,148,148,2,0,128,128,369,
		369,2,0,180,180,431,431,5,0,56,56,180,180,184,184,333,333,431,431,3,0,
		180,180,431,431,619,619,2,0,76,76,601,601,4,0,10,10,32,32,128,128,383,
		383,2,0,487,487,710,710,3,0,289,289,354,354,547,547,2,0,203,203,251,251,
		2,0,33,33,446,446,2,0,235,236,263,263,2,0,166,166,639,639,2,0,547,547,
		631,631,6,0,10,10,96,96,256,256,334,334,522,522,567,567,2,0,84,84,430,
		430,5,0,136,136,225,225,421,421,547,547,617,617,5,0,32,32,163,163,165,
		165,208,208,515,515,2,0,618,618,710,710,2,0,140,140,156,156,2,0,134,135,
		178,178,3,0,183,183,596,596,610,610,2,0,15,15,767,767,2,0,394,394,770,
		770,2,0,10,10,16,16,2,0,750,750,752,757,3,0,145,145,349,349,760,762,1,
		0,758,759,1,0,765,766,2,0,758,759,764,764,2,0,35,36,38,38,4,0,678,679,
		692,692,694,694,696,696,2,0,684,684,686,686,2,0,681,681,685,685,2,0,191,
		191,268,268,2,0,232,232,695,695,2,0,5,5,558,558,1,0,114,115,1,0,584,585,
		4,0,113,113,116,116,583,583,586,586,2,0,371,371,745,745,2,0,745,745,763,
		763,5,0,118,121,226,228,341,342,494,494,655,655,9,0,122,122,229,229,337,
		337,343,343,350,350,429,429,495,495,640,640,656,656,3,0,92,92,175,175,
		605,605,2,0,377,377,485,485,10,0,53,53,64,64,73,73,87,89,107,107,336,336,
		355,355,492,492,557,557,576,576,2,0,554,554,637,637,3,0,128,128,152,152,
		192,192,3,0,128,128,142,142,334,334,3,0,204,204,402,402,513,513,3,0,44,
		44,220,220,488,488,1,0,661,662,2,0,599,599,621,621,5,0,31,31,249,249,331,
		331,516,516,588,588,4,0,126,126,192,192,195,195,378,378,1,0,41,42,2,0,
		290,290,330,330,4,0,211,212,279,279,351,353,411,412,3,0,512,512,612,612,
		657,657,1,0,544,546,2,0,61,61,575,575,6,0,78,78,80,80,128,128,152,152,
		192,192,442,442,3,0,191,191,268,268,373,373,2,0,142,142,334,334,2,0,280,
		280,432,432,2,0,323,323,344,344,2,0,112,112,236,236,3,0,240,240,251,251,
		397,397,2,0,541,541,579,579,2,0,380,380,385,385,2,0,284,284,375,375,2,
		0,795,795,797,797,3,0,747,749,788,788,790,791,2,0,747,749,788,788,2,0,
		747,749,790,791,1,0,788,789,2,0,183,183,596,596,2,0,376,376,786,786,1,
		0,750,751,5,0,214,214,284,284,502,502,658,658,673,673,3,0,173,173,510,
		510,714,714,32,0,19,19,29,29,46,47,58,58,61,61,75,75,77,77,90,90,123,123,
		147,147,159,159,196,197,219,219,222,222,234,234,245,245,267,267,373,373,
		415,415,417,417,455,455,468,468,480,480,489,489,512,512,514,514,543,543,
		552,552,597,597,606,607,651,651,677,677,9,0,170,170,188,188,369,369,423,
		423,427,427,451,451,459,459,565,565,709,709,161,0,2,3,5,9,12,12,16,16,
		21,21,23,27,33,33,37,37,40,42,44,44,50,50,53,54,56,57,63,68,70,71,73,74,
		76,76,78,82,84,85,87,89,91,91,96,96,101,101,107,107,111,113,116,116,122,
		122,129,130,132,132,138,142,150,152,156,156,158,158,160,160,162,166,168,
		169,171,172,176,177,179,181,184,185,189,192,201,202,204,204,208,208,210,
		213,216,216,220,220,224,225,229,230,233,233,235,235,238,238,243,244,250,
		250,255,256,258,259,262,262,264,264,268,268,270,270,273,274,279,280,286,
		286,288,289,296,296,298,314,316,319,321,324,327,328,333,337,340,340,343,
		344,346,346,348,348,350,358,361,361,363,363,365,368,374,374,377,377,379,
		379,381,381,384,384,386,387,390,390,398,404,406,413,418,419,421,421,424,
		426,429,431,434,434,438,439,441,442,445,449,452,452,454,454,456,456,460,
		466,470,470,472,474,476,476,481,483,485,486,488,488,490,490,492,492,495,
		496,500,501,503,503,508,508,513,513,515,515,517,517,519,522,528,530,532,
		532,535,535,538,538,540,540,542,542,544,547,553,553,556,561,566,568,571,
		572,575,578,580,581,583,586,592,593,598,599,601,604,610,610,613,613,615,
		615,617,619,625,625,627,627,631,631,636,636,638,641,646,648,650,650,652,
		653,656,656,659,662,664,664,669,671,674,675,680,680,682,682,689,690,693,
		693,695,695,697,698,702,708,711,713,715,725,727,730,732,732,735,738,4,
		0,583,583,586,586,731,731,733,744,54,0,2,2,12,12,19,19,27,27,29,29,46,
		47,58,58,61,61,66,66,75,75,77,77,90,90,123,123,147,147,159,159,196,197,
		201,201,210,210,219,219,222,222,224,224,245,245,267,267,373,373,387,387,
		390,390,398,398,401,401,405,405,413,413,415,415,417,417,452,452,455,455,
		468,468,470,470,480,480,489,489,496,496,503,503,512,512,514,514,519,520,
		543,543,552,552,597,597,606,607,615,615,648,648,651,651,659,659,661,662,
		677,677,720,723,155,0,3,3,5,9,13,13,16,16,21,26,33,33,37,37,40,42,44,44,
		50,50,53,54,56,57,63,65,67,68,70,71,73,74,76,76,78,82,84,85,87,89,91,91,
		93,93,96,96,101,101,107,107,111,113,116,116,122,122,129,130,132,132,136,
		136,138,142,150,152,156,156,158,158,160,160,162,166,168,169,171,171,176,
		176,179,181,184,185,189,192,202,202,204,204,208,208,211,214,216,216,220,
		220,225,225,229,230,233,233,235,235,238,238,243,244,250,250,255,256,258,
		259,262,262,264,264,268,268,270,270,273,274,279,280,284,284,286,286,288,
		289,296,296,298,314,316,319,321,325,327,328,333,337,340,340,343,344,346,
		346,348,348,350,358,361,361,363,363,365,368,374,374,377,377,379,379,381,
		382,384,384,399,400,402,404,406,412,418,419,421,421,424,426,429,431,434,
		434,438,442,445,449,454,454,456,456,460,466,472,474,476,476,481,483,485,
		486,488,488,490,490,492,492,495,495,500,502,508,508,513,513,515,515,517,
		517,521,522,528,530,532,533,535,535,538,538,540,540,542,542,544,547,553,
		553,556,561,565,568,571,572,575,578,580,581,583,586,592,593,598,604,610,
		610,613,613,617,619,627,627,631,631,636,636,638,641,647,647,650,650,652,
		653,656,656,664,664,669,671,674,676,680,680,682,682,689,690,693,693,695,
		695,697,698,702,708,711,712,716,717,719,719,724,725,727,728,5,0,99,99,
		206,206,234,234,484,484,487,487,6,0,172,172,177,177,386,386,565,565,625,
		625,646,646,9536,0,1232,1,0,0,0,2,1268,1,0,0,0,4,1270,1,0,0,0,6,1299,1,
		0,0,0,8,1314,1,0,0,0,10,1352,1,0,0,0,12,1361,1,0,0,0,14,1374,1,0,0,0,16,
		1376,1,0,0,0,18,1381,1,0,0,0,20,1405,1,0,0,0,22,1414,1,0,0,0,24,1416,1,
		0,0,0,26,1431,1,0,0,0,28,1529,1,0,0,0,30,1533,1,0,0,0,32,1549,1,0,0,0,
		34,1696,1,0,0,0,36,1701,1,0,0,0,38,1703,1,0,0,0,40,1705,1,0,0,0,42,1719,
		1,0,0,0,44,1727,1,0,0,0,46,1743,1,0,0,0,48,1745,1,0,0,0,50,1749,1,0,0,
		0,52,1754,1,0,0,0,54,1756,1,0,0,0,56,1793,1,0,0,0,58,1801,1,0,0,0,60,1811,
		1,0,0,0,62,1813,1,0,0,0,64,1833,1,0,0,0,66,1842,1,0,0,0,68,1845,1,0,0,
		0,70,1858,1,0,0,0,72,1863,1,0,0,0,74,1867,1,0,0,0,76,1874,1,0,0,0,78,1895,
		1,0,0,0,80,1910,1,0,0,0,82,1913,1,0,0,0,84,1944,1,0,0,0,86,1954,1,0,0,
		0,88,1957,1,0,0,0,90,1966,1,0,0,0,92,1968,1,0,0,0,94,1980,1,0,0,0,96,2005,
		1,0,0,0,98,2032,1,0,0,0,100,2046,1,0,0,0,102,2049,1,0,0,0,104,2070,1,0,
		0,0,106,2073,1,0,0,0,108,2130,1,0,0,0,110,2132,1,0,0,0,112,2136,1,0,0,
		0,114,2145,1,0,0,0,116,2161,1,0,0,0,118,2163,1,0,0,0,120,2171,1,0,0,0,
		122,2197,1,0,0,0,124,2199,1,0,0,0,126,2211,1,0,0,0,128,2226,1,0,0,0,130,
		2228,1,0,0,0,132,2231,1,0,0,0,134,2253,1,0,0,0,136,2255,1,0,0,0,138,2261,
		1,0,0,0,140,2267,1,0,0,0,142,2273,1,0,0,0,144,2279,1,0,0,0,146,2285,1,
		0,0,0,148,2292,1,0,0,0,150,2300,1,0,0,0,152,2302,1,0,0,0,154,2308,1,0,
		0,0,156,2314,1,0,0,0,158,2321,1,0,0,0,160,2339,1,0,0,0,162,2341,1,0,0,
		0,164,2345,1,0,0,0,166,2350,1,0,0,0,168,2366,1,0,0,0,170,2371,1,0,0,0,
		172,2404,1,0,0,0,174,2435,1,0,0,0,176,2452,1,0,0,0,178,2454,1,0,0,0,180,
		2474,1,0,0,0,182,2480,1,0,0,0,184,2486,1,0,0,0,186,2492,1,0,0,0,188,2499,
		1,0,0,0,190,2508,1,0,0,0,192,2525,1,0,0,0,194,2527,1,0,0,0,196,2534,1,
		0,0,0,198,2544,1,0,0,0,200,2558,1,0,0,0,202,2564,1,0,0,0,204,2572,1,0,
		0,0,206,2578,1,0,0,0,208,2586,1,0,0,0,210,2592,1,0,0,0,212,2602,1,0,0,
		0,214,2606,1,0,0,0,216,2612,1,0,0,0,218,2617,1,0,0,0,220,2628,1,0,0,0,
		222,2671,1,0,0,0,224,2677,1,0,0,0,226,2679,1,0,0,0,228,2686,1,0,0,0,230,
		2716,1,0,0,0,232,2718,1,0,0,0,234,2749,1,0,0,0,236,2756,1,0,0,0,238,2760,
		1,0,0,0,240,2768,1,0,0,0,242,2778,1,0,0,0,244,2780,1,0,0,0,246,2798,1,
		0,0,0,248,2810,1,0,0,0,250,2815,1,0,0,0,252,2821,1,0,0,0,254,2854,1,0,
		0,0,256,2856,1,0,0,0,258,2864,1,0,0,0,260,2873,1,0,0,0,262,2881,1,0,0,
		0,264,2893,1,0,0,0,266,2916,1,0,0,0,268,2930,1,0,0,0,270,2934,1,0,0,0,
		272,2966,1,0,0,0,274,2981,1,0,0,0,276,2996,1,0,0,0,278,2998,1,0,0,0,280,
		3025,1,0,0,0,282,3027,1,0,0,0,284,3029,1,0,0,0,286,3032,1,0,0,0,288,3035,
		1,0,0,0,290,3042,1,0,0,0,292,3044,1,0,0,0,294,3074,1,0,0,0,296,3086,1,
		0,0,0,298,3089,1,0,0,0,300,3098,1,0,0,0,302,3102,1,0,0,0,304,3107,1,0,
		0,0,306,3120,1,0,0,0,308,3125,1,0,0,0,310,3129,1,0,0,0,312,3145,1,0,0,
		0,314,3147,1,0,0,0,316,3165,1,0,0,0,318,3167,1,0,0,0,320,3176,1,0,0,0,
		322,3188,1,0,0,0,324,3195,1,0,0,0,326,3206,1,0,0,0,328,3208,1,0,0,0,330,
		3212,1,0,0,0,332,3214,1,0,0,0,334,3219,1,0,0,0,336,3227,1,0,0,0,338,3236,
		1,0,0,0,340,3239,1,0,0,0,342,3254,1,0,0,0,344,3257,1,0,0,0,346,3276,1,
		0,0,0,348,3281,1,0,0,0,350,3286,1,0,0,0,352,3290,1,0,0,0,354,3304,1,0,
		0,0,356,3307,1,0,0,0,358,3313,1,0,0,0,360,3326,1,0,0,0,362,3334,1,0,0,
		0,364,3360,1,0,0,0,366,3373,1,0,0,0,368,3380,1,0,0,0,370,3382,1,0,0,0,
		372,3394,1,0,0,0,374,3396,1,0,0,0,376,3406,1,0,0,0,378,3430,1,0,0,0,380,
		3432,1,0,0,0,382,3439,1,0,0,0,384,3449,1,0,0,0,386,3484,1,0,0,0,388,3494,
		1,0,0,0,390,3496,1,0,0,0,392,3500,1,0,0,0,394,3508,1,0,0,0,396,3510,1,
		0,0,0,398,3515,1,0,0,0,400,3519,1,0,0,0,402,3547,1,0,0,0,404,3549,1,0,
		0,0,406,3551,1,0,0,0,408,3559,1,0,0,0,410,3561,1,0,0,0,412,3569,1,0,0,
		0,414,3579,1,0,0,0,416,3583,1,0,0,0,418,3608,1,0,0,0,420,3635,1,0,0,0,
		422,3637,1,0,0,0,424,3647,1,0,0,0,426,3678,1,0,0,0,428,3702,1,0,0,0,430,
		3704,1,0,0,0,432,3718,1,0,0,0,434,3720,1,0,0,0,436,3755,1,0,0,0,438,3757,
		1,0,0,0,440,3799,1,0,0,0,442,3815,1,0,0,0,444,3817,1,0,0,0,446,3825,1,
		0,0,0,448,3834,1,0,0,0,450,3841,1,0,0,0,452,3940,1,0,0,0,454,3944,1,0,
		0,0,456,3946,1,0,0,0,458,3950,1,0,0,0,460,3964,1,0,0,0,462,3966,1,0,0,
		0,464,3979,1,0,0,0,466,4043,1,0,0,0,468,4045,1,0,0,0,470,4053,1,0,0,0,
		472,4061,1,0,0,0,474,4069,1,0,0,0,476,4071,1,0,0,0,478,4100,1,0,0,0,480,
		4109,1,0,0,0,482,4140,1,0,0,0,484,4142,1,0,0,0,486,4150,1,0,0,0,488,4152,
		1,0,0,0,490,4166,1,0,0,0,492,4168,1,0,0,0,494,4174,1,0,0,0,496,4182,1,
		0,0,0,498,4219,1,0,0,0,500,4221,1,0,0,0,502,4236,1,0,0,0,504,4238,1,0,
		0,0,506,4300,1,0,0,0,508,4302,1,0,0,0,510,4305,1,0,0,0,512,4330,1,0,0,
		0,514,4339,1,0,0,0,516,4341,1,0,0,0,518,4346,1,0,0,0,520,4392,1,0,0,0,
		522,4394,1,0,0,0,524,4402,1,0,0,0,526,4451,1,0,0,0,528,4464,1,0,0,0,530,
		4466,1,0,0,0,532,4469,1,0,0,0,534,4480,1,0,0,0,536,4485,1,0,0,0,538,4488,
		1,0,0,0,540,4503,1,0,0,0,542,4553,1,0,0,0,544,4555,1,0,0,0,546,4557,1,
		0,0,0,548,4606,1,0,0,0,550,4624,1,0,0,0,552,4626,1,0,0,0,554,4642,1,0,
		0,0,556,4654,1,0,0,0,558,4679,1,0,0,0,560,4681,1,0,0,0,562,4689,1,0,0,
		0,564,4738,1,0,0,0,566,4753,1,0,0,0,568,4758,1,0,0,0,570,4760,1,0,0,0,
		572,4784,1,0,0,0,574,4786,1,0,0,0,576,4845,1,0,0,0,578,4856,1,0,0,0,580,
		4858,1,0,0,0,582,4861,1,0,0,0,584,4874,1,0,0,0,586,4902,1,0,0,0,588,4910,
		1,0,0,0,590,4912,1,0,0,0,592,4923,1,0,0,0,594,4925,1,0,0,0,596,4933,1,
		0,0,0,598,4935,1,0,0,0,600,5163,1,0,0,0,602,5170,1,0,0,0,604,5172,1,0,
		0,0,606,5174,1,0,0,0,608,5184,1,0,0,0,610,5223,1,0,0,0,612,5227,1,0,0,
		0,614,5229,1,0,0,0,616,5237,1,0,0,0,618,5241,1,0,0,0,620,5249,1,0,0,0,
		622,5258,1,0,0,0,624,5260,1,0,0,0,626,5283,1,0,0,0,628,5285,1,0,0,0,630,
		5287,1,0,0,0,632,5303,1,0,0,0,634,5315,1,0,0,0,636,5317,1,0,0,0,638,5325,
		1,0,0,0,640,5333,1,0,0,0,642,5342,1,0,0,0,644,5344,1,0,0,0,646,5362,1,
		0,0,0,648,5376,1,0,0,0,650,5381,1,0,0,0,652,5387,1,0,0,0,654,5389,1,0,
		0,0,656,5405,1,0,0,0,658,5413,1,0,0,0,660,5423,1,0,0,0,662,5436,1,0,0,
		0,664,5438,1,0,0,0,666,5444,1,0,0,0,668,5476,1,0,0,0,670,5478,1,0,0,0,
		672,5481,1,0,0,0,674,5484,1,0,0,0,676,5497,1,0,0,0,678,5513,1,0,0,0,680,
		5536,1,0,0,0,682,5538,1,0,0,0,684,5575,1,0,0,0,686,5577,1,0,0,0,688,5718,
		1,0,0,0,690,5731,1,0,0,0,692,5740,1,0,0,0,694,5873,1,0,0,0,696,5875,1,
		0,0,0,698,5922,1,0,0,0,700,5924,1,0,0,0,702,5929,1,0,0,0,704,5938,1,0,
		0,0,706,5957,1,0,0,0,708,5960,1,0,0,0,710,5969,1,0,0,0,712,5971,1,0,0,
		0,714,5994,1,0,0,0,716,6269,1,0,0,0,718,6302,1,0,0,0,720,6304,1,0,0,0,
		722,6310,1,0,0,0,724,6313,1,0,0,0,726,6328,1,0,0,0,728,6336,1,0,0,0,730,
		6338,1,0,0,0,732,6367,1,0,0,0,734,6400,1,0,0,0,736,6402,1,0,0,0,738,6410,
		1,0,0,0,740,6416,1,0,0,0,742,6421,1,0,0,0,744,6423,1,0,0,0,746,6445,1,
		0,0,0,748,6447,1,0,0,0,750,6450,1,0,0,0,752,6453,1,0,0,0,754,6501,1,0,
		0,0,756,6503,1,0,0,0,758,6514,1,0,0,0,760,6516,1,0,0,0,762,6518,1,0,0,
		0,764,6522,1,0,0,0,766,6524,1,0,0,0,768,6526,1,0,0,0,770,6530,1,0,0,0,
		772,6534,1,0,0,0,774,6538,1,0,0,0,776,6546,1,0,0,0,778,6550,1,0,0,0,780,
		6558,1,0,0,0,782,6560,1,0,0,0,784,6578,1,0,0,0,786,6580,1,0,0,0,788,6583,
		1,0,0,0,790,6588,1,0,0,0,792,6596,1,0,0,0,794,6602,1,0,0,0,796,6606,1,
		0,0,0,798,6623,1,0,0,0,800,6626,1,0,0,0,802,6631,1,0,0,0,804,6633,1,0,
		0,0,806,6636,1,0,0,0,808,6645,1,0,0,0,810,6653,1,0,0,0,812,6655,1,0,0,
		0,814,6660,1,0,0,0,816,6667,1,0,0,0,818,6677,1,0,0,0,820,6685,1,0,0,0,
		822,6687,1,0,0,0,824,6697,1,0,0,0,826,6705,1,0,0,0,828,6707,1,0,0,0,830,
		6713,1,0,0,0,832,6734,1,0,0,0,834,6736,1,0,0,0,836,6742,1,0,0,0,838,6745,
		1,0,0,0,840,6748,1,0,0,0,842,6778,1,0,0,0,844,6782,1,0,0,0,846,6789,1,
		0,0,0,848,6796,1,0,0,0,850,6798,1,0,0,0,852,6814,1,0,0,0,854,6830,1,0,
		0,0,856,6834,1,0,0,0,858,6837,1,0,0,0,860,6840,1,0,0,0,862,6864,1,0,0,
		0,864,6866,1,0,0,0,866,6874,1,0,0,0,868,6876,1,0,0,0,870,6880,1,0,0,0,
		872,6959,1,0,0,0,874,6961,1,0,0,0,876,6965,1,0,0,0,878,7055,1,0,0,0,880,
		7057,1,0,0,0,882,7059,1,0,0,0,884,7075,1,0,0,0,886,7077,1,0,0,0,888,7109,
		1,0,0,0,890,7111,1,0,0,0,892,7122,1,0,0,0,894,7129,1,0,0,0,896,7145,1,
		0,0,0,898,7151,1,0,0,0,900,7153,1,0,0,0,902,7157,1,0,0,0,904,7168,1,0,
		0,0,906,7170,1,0,0,0,908,7172,1,0,0,0,910,7179,1,0,0,0,912,7181,1,0,0,
		0,914,7183,1,0,0,0,916,7333,1,0,0,0,918,7338,1,0,0,0,920,7345,1,0,0,0,
		922,7347,1,0,0,0,924,7355,1,0,0,0,926,7373,1,0,0,0,928,7381,1,0,0,0,930,
		7389,1,0,0,0,932,7391,1,0,0,0,934,7395,1,0,0,0,936,7403,1,0,0,0,938,7410,
		1,0,0,0,940,7412,1,0,0,0,942,7423,1,0,0,0,944,7556,1,0,0,0,946,7560,1,
		0,0,0,948,7563,1,0,0,0,950,7572,1,0,0,0,952,7581,1,0,0,0,954,7589,1,0,
		0,0,956,7635,1,0,0,0,958,7637,1,0,0,0,960,7658,1,0,0,0,962,7663,1,0,0,
		0,964,7674,1,0,0,0,966,7719,1,0,0,0,968,7755,1,0,0,0,970,7757,1,0,0,0,
		972,7765,1,0,0,0,974,7778,1,0,0,0,976,7780,1,0,0,0,978,7784,1,0,0,0,980,
		7787,1,0,0,0,982,7792,1,0,0,0,984,7796,1,0,0,0,986,7799,1,0,0,0,988,7802,
		1,0,0,0,990,7806,1,0,0,0,992,7812,1,0,0,0,994,7820,1,0,0,0,996,7828,1,
		0,0,0,998,7834,1,0,0,0,1000,7837,1,0,0,0,1002,7855,1,0,0,0,1004,7857,1,
		0,0,0,1006,7863,1,0,0,0,1008,7867,1,0,0,0,1010,7875,1,0,0,0,1012,7883,
		1,0,0,0,1014,7891,1,0,0,0,1016,7920,1,0,0,0,1018,7951,1,0,0,0,1020,7955,
		1,0,0,0,1022,7959,1,0,0,0,1024,7962,1,0,0,0,1026,7973,1,0,0,0,1028,7975,
		1,0,0,0,1030,7980,1,0,0,0,1032,7982,1,0,0,0,1034,7984,1,0,0,0,1036,7986,
		1,0,0,0,1038,7995,1,0,0,0,1040,8001,1,0,0,0,1042,8003,1,0,0,0,1044,8005,
		1,0,0,0,1046,8016,1,0,0,0,1048,8020,1,0,0,0,1050,8022,1,0,0,0,1052,8024,
		1,0,0,0,1054,8026,1,0,0,0,1056,8035,1,0,0,0,1058,8037,1,0,0,0,1060,8039,
		1,0,0,0,1062,8041,1,0,0,0,1064,8043,1,0,0,0,1066,8045,1,0,0,0,1068,8047,
		1,0,0,0,1070,8049,1,0,0,0,1072,8053,1,0,0,0,1074,8057,1,0,0,0,1076,8059,
		1,0,0,0,1078,8061,1,0,0,0,1080,8063,1,0,0,0,1082,8065,1,0,0,0,1084,8067,
		1,0,0,0,1086,8069,1,0,0,0,1088,8071,1,0,0,0,1090,8073,1,0,0,0,1092,8075,
		1,0,0,0,1094,8077,1,0,0,0,1096,8081,1,0,0,0,1098,8083,1,0,0,0,1100,8086,
		1,0,0,0,1102,8098,1,0,0,0,1104,8100,1,0,0,0,1106,8108,1,0,0,0,1108,8116,
		1,0,0,0,1110,8120,1,0,0,0,1112,8122,1,0,0,0,1114,8126,1,0,0,0,1116,8128,
		1,0,0,0,1118,8130,1,0,0,0,1120,8132,1,0,0,0,1122,8134,1,0,0,0,1124,8136,
		1,0,0,0,1126,8141,1,0,0,0,1128,8145,1,0,0,0,1130,8147,1,0,0,0,1132,8155,
		1,0,0,0,1134,8159,1,0,0,0,1136,8174,1,0,0,0,1138,8176,1,0,0,0,1140,8179,
		1,0,0,0,1142,8181,1,0,0,0,1144,8183,1,0,0,0,1146,8190,1,0,0,0,1148,8201,
		1,0,0,0,1150,8208,1,0,0,0,1152,8210,1,0,0,0,1154,8224,1,0,0,0,1156,8229,
		1,0,0,0,1158,8234,1,0,0,0,1160,8241,1,0,0,0,1162,8249,1,0,0,0,1164,8251,
		1,0,0,0,1166,8259,1,0,0,0,1168,8261,1,0,0,0,1170,8263,1,0,0,0,1172,8271,
		1,0,0,0,1174,8275,1,0,0,0,1176,8277,1,0,0,0,1178,8279,1,0,0,0,1180,8287,
		1,0,0,0,1182,8291,1,0,0,0,1184,8295,1,0,0,0,1186,8299,1,0,0,0,1188,8301,
		1,0,0,0,1190,8304,1,0,0,0,1192,8306,1,0,0,0,1194,8314,1,0,0,0,1196,8326,
		1,0,0,0,1198,8345,1,0,0,0,1200,8347,1,0,0,0,1202,8349,1,0,0,0,1204,8369,
		1,0,0,0,1206,8371,1,0,0,0,1208,8376,1,0,0,0,1210,8388,1,0,0,0,1212,8394,
		1,0,0,0,1214,8396,1,0,0,0,1216,8403,1,0,0,0,1218,8414,1,0,0,0,1220,1233,
		5,0,0,1,1221,1224,3,2,1,0,1222,1224,3,422,211,0,1223,1221,1,0,0,0,1223,
		1222,1,0,0,0,1224,1230,1,0,0,0,1225,1227,5,774,0,0,1226,1228,5,0,0,1,1227,
		1226,1,0,0,0,1227,1228,1,0,0,0,1228,1231,1,0,0,0,1229,1231,5,0,0,1,1230,
		1225,1,0,0,0,1230,1229,1,0,0,0,1231,1233,1,0,0,0,1232,1220,1,0,0,0,1232,
		1223,1,0,0,0,1233,1,1,0,0,0,1234,1269,3,4,2,0,1235,1269,3,76,38,0,1236,
		1269,3,178,89,0,1237,1269,3,210,105,0,1238,1269,3,214,107,0,1239,1240,
		4,1,0,0,1240,1269,3,216,108,0,1241,1269,3,218,109,0,1242,1269,3,220,110,
		0,1243,1269,3,226,113,0,1244,1269,3,228,114,0,1245,1269,3,232,116,0,1246,
		1269,3,252,126,0,1247,1269,3,264,132,0,1248,1269,3,266,133,0,1249,1269,
		3,416,208,0,1250,1269,3,418,209,0,1251,1269,3,440,220,0,1252,1269,3,490,
		245,0,1253,1254,4,1,1,0,1254,1269,3,496,248,0,1255,1269,3,502,251,0,1256,
		1269,3,564,282,0,1257,1269,3,572,286,0,1258,1269,3,574,287,0,1259,1269,
		3,598,299,0,1260,1261,4,1,2,0,1261,1269,3,642,321,0,1262,1269,3,610,305,
		0,1263,1269,3,662,331,0,1264,1265,4,1,3,0,1265,1269,3,840,420,0,1266,1269,
		3,850,425,0,1267,1269,3,852,426,0,1268,1234,1,0,0,0,1268,1235,1,0,0,0,
		1268,1236,1,0,0,0,1268,1237,1,0,0,0,1268,1238,1,0,0,0,1268,1239,1,0,0,
		0,1268,1241,1,0,0,0,1268,1242,1,0,0,0,1268,1243,1,0,0,0,1268,1244,1,0,
		0,0,1268,1245,1,0,0,0,1268,1246,1,0,0,0,1268,1247,1,0,0,0,1268,1248,1,
		0,0,0,1268,1249,1,0,0,0,1268,1250,1,0,0,0,1268,1251,1,0,0,0,1268,1252,
		1,0,0,0,1268,1253,1,0,0,0,1268,1255,1,0,0,0,1268,1256,1,0,0,0,1268,1257,
		1,0,0,0,1268,1258,1,0,0,0,1268,1259,1,0,0,0,1268,1260,1,0,0,0,1268,1262,
		1,0,0,0,1268,1263,1,0,0,0,1268,1264,1,0,0,0,1268,1266,1,0,0,0,1268,1267,
		1,0,0,0,1269,3,1,0,0,0,1270,1297,5,11,0,0,1271,1298,3,18,9,0,1272,1298,
		3,6,3,0,1273,1274,5,422,0,0,1274,1276,3,1062,531,0,1275,1277,3,102,51,
		0,1276,1275,1,0,0,0,1276,1277,1,0,0,0,1277,1298,1,0,0,0,1278,1279,5,206,
		0,0,1279,1281,3,1066,533,0,1280,1282,3,102,51,0,1281,1280,1,0,0,0,1281,
		1282,1,0,0,0,1282,1298,1,0,0,0,1283,1298,3,68,34,0,1284,1298,3,8,4,0,1285,
		1298,3,54,27,0,1286,1287,4,2,4,0,1287,1298,3,56,28,0,1288,1298,3,10,5,
		0,1289,1298,3,16,8,0,1290,1291,4,2,5,0,1291,1292,5,244,0,0,1292,1293,5,
		482,0,0,1293,1294,3,1180,590,0,1294,1295,5,316,0,0,1295,1296,5,265,0,0,
		1296,1298,1,0,0,0,1297,1271,1,0,0,0,1297,1272,1,0,0,0,1297,1273,1,0,0,
		0,1297,1278,1,0,0,0,1297,1283,1,0,0,0,1297,1284,1,0,0,0,1297,1285,1,0,
		0,0,1297,1286,1,0,0,0,1297,1288,1,0,0,0,1297,1289,1,0,0,0,1297,1290,1,
		0,0,0,1298,5,1,0,0,0,1299,1300,5,109,0,0,1300,1311,3,1058,529,0,1301,1303,
		3,80,40,0,1302,1301,1,0,0,0,1303,1304,1,0,0,0,1304,1302,1,0,0,0,1304,1305,
		1,0,0,0,1305,1312,1,0,0,0,1306,1307,4,3,6,0,1307,1308,5,615,0,0,1308,1309,
		5,112,0,0,1309,1310,5,139,0,0,1310,1312,5,357,0,0,1311,1302,1,0,0,0,1311,
		1306,1,0,0,0,1312,7,1,0,0,0,1313,1315,3,976,488,0,1314,1313,1,0,0,0,1314,
		1315,1,0,0,0,1315,1316,1,0,0,0,1316,1317,5,170,0,0,1317,1321,3,1086,543,
		0,1318,1319,5,383,0,0,1319,1320,5,490,0,0,1320,1322,3,862,431,0,1321,1318,
		1,0,0,0,1321,1322,1,0,0,0,1322,1329,1,0,0,0,1323,1324,5,383,0,0,1324,1326,
		5,79,0,0,1325,1327,5,371,0,0,1326,1325,1,0,0,0,1326,1327,1,0,0,0,1327,
		1328,1,0,0,0,1328,1330,5,418,0,0,1329,1323,1,0,0,0,1329,1330,1,0,0,0,1330,
		1334,1,0,0,0,1331,1332,5,453,0,0,1332,1333,5,590,0,0,1333,1335,3,1128,
		564,0,1334,1331,1,0,0,0,1334,1335,1,0,0,0,1335,1342,1,0,0,0,1336,1343,
		5,156,0,0,1337,1340,5,140,0,0,1338,1339,5,383,0,0,1339,1341,5,514,0,0,
		1340,1338,1,0,0,0,1340,1341,1,0,0,0,1341,1343,1,0,0,0,1342,1336,1,0,0,
		0,1342,1337,1,0,0,0,1342,1343,1,0,0,0,1343,1346,1,0,0,0,1344,1345,5,75,
		0,0,1345,1347,3,1160,580,0,1346,1344,1,0,0,0,1346,1347,1,0,0,0,1347,1350,
		1,0,0,0,1348,1349,5,147,0,0,1349,1351,3,784,392,0,1350,1348,1,0,0,0,1350,
		1351,1,0,0,0,1351,9,1,0,0,0,1352,1353,5,288,0,0,1353,1354,5,217,0,0,1354,
		1355,3,1082,541,0,1355,1356,5,4,0,0,1356,1357,5,603,0,0,1357,1359,3,1160,
		580,0,1358,1360,3,12,6,0,1359,1358,1,0,0,0,1359,1360,1,0,0,0,1360,11,1,
		0,0,0,1361,1368,3,14,7,0,1362,1364,5,773,0,0,1363,1362,1,0,0,0,1363,1364,
		1,0,0,0,1364,1365,1,0,0,0,1365,1367,3,14,7,0,1366,1363,1,0,0,0,1367,1370,
		1,0,0,0,1368,1366,1,0,0,0,1368,1369,1,0,0,0,1369,13,1,0,0,0,1370,1368,
		1,0,0,0,1371,1375,3,136,68,0,1372,1375,3,148,74,0,1373,1375,3,150,75,0,
		1374,1371,1,0,0,0,1374,1372,1,0,0,0,1374,1373,1,0,0,0,1375,15,1,0,0,0,
		1376,1377,5,503,0,0,1377,1378,3,1092,546,0,1378,1379,3,120,60,0,1379,17,
		1,0,0,0,1380,1382,3,1032,516,0,1381,1380,1,0,0,0,1381,1382,1,0,0,0,1382,
		1385,1,0,0,0,1383,1384,4,9,7,0,1384,1386,5,232,0,0,1385,1383,1,0,0,0,1385,
		1386,1,0,0,0,1386,1387,1,0,0,0,1387,1388,5,574,0,0,1388,1390,3,1102,551,
		0,1389,1391,3,20,10,0,1390,1389,1,0,0,0,1390,1391,1,0,0,0,1391,19,1,0,
		0,0,1392,1395,3,22,11,0,1393,1396,3,954,477,0,1394,1396,3,50,25,0,1395,
		1393,1,0,0,0,1395,1394,1,0,0,0,1395,1396,1,0,0,0,1396,1406,1,0,0,0,1397,
		1406,3,954,477,0,1398,1406,3,50,25,0,1399,1400,3,24,12,0,1400,1401,5,773,
		0,0,1401,1403,1,0,0,0,1402,1399,1,0,0,0,1402,1403,1,0,0,0,1403,1404,1,
		0,0,0,1404,1406,3,26,13,0,1405,1392,1,0,0,0,1405,1397,1,0,0,0,1405,1398,
		1,0,0,0,1405,1402,1,0,0,0,1406,21,1,0,0,0,1407,1415,3,24,12,0,1408,1409,
		3,24,12,0,1409,1410,5,773,0,0,1410,1412,1,0,0,0,1411,1408,1,0,0,0,1411,
		1412,1,0,0,0,1412,1413,1,0,0,0,1413,1415,3,30,15,0,1414,1407,1,0,0,0,1414,
		1411,1,0,0,0,1415,23,1,0,0,0,1416,1421,3,32,16,0,1417,1418,5,773,0,0,1418,
		1420,3,32,16,0,1419,1417,1,0,0,0,1420,1423,1,0,0,0,1421,1419,1,0,0,0,1421,
		1422,1,0,0,0,1422,25,1,0,0,0,1423,1421,1,0,0,0,1424,1425,5,141,0,0,1425,
		1432,5,572,0,0,1426,1427,5,234,0,0,1427,1432,5,572,0,0,1428,1432,3,28,
		14,0,1429,1430,4,13,8,0,1430,1432,7,0,0,0,1431,1424,1,0,0,0,1431,1426,
		1,0,0,0,1431,1428,1,0,0,0,1431,1429,1,0,0,0,1432,27,1,0,0,0,1433,1434,
		5,4,0,0,1434,1436,5,405,0,0,1435,1437,3,1034,517,0,1436,1435,1,0,0,0,1436,
		1437,1,0,0,0,1437,1441,1,0,0,0,1438,1442,3,962,481,0,1439,1440,5,404,0,
		0,1440,1442,3,1142,571,0,1441,1438,1,0,0,0,1441,1439,1,0,0,0,1442,1530,
		1,0,0,0,1443,1444,5,148,0,0,1444,1445,5,405,0,0,1445,1530,3,1130,565,0,
		1446,1447,5,438,0,0,1447,1449,5,405,0,0,1448,1450,3,1034,517,0,1449,1448,
		1,0,0,0,1449,1450,1,0,0,0,1450,1451,1,0,0,0,1451,1530,3,52,26,0,1452,1453,
		5,388,0,0,1453,1455,5,405,0,0,1454,1456,3,1034,517,0,1455,1454,1,0,0,0,
		1455,1456,1,0,0,0,1456,1457,1,0,0,0,1457,1459,3,52,26,0,1458,1460,3,1034,
		517,0,1459,1458,1,0,0,0,1459,1460,1,0,0,0,1460,1530,1,0,0,0,1461,1462,
		5,14,0,0,1462,1464,5,405,0,0,1463,1465,3,1034,517,0,1464,1463,1,0,0,0,
		1464,1465,1,0,0,0,1465,1466,1,0,0,0,1466,1530,3,52,26,0,1467,1468,5,62,
		0,0,1468,1469,5,405,0,0,1469,1473,3,52,26,0,1470,1472,3,568,284,0,1471,
		1470,1,0,0,0,1472,1475,1,0,0,0,1473,1471,1,0,0,0,1473,1474,1,0,0,0,1474,
		1530,1,0,0,0,1475,1473,1,0,0,0,1476,1477,5,455,0,0,1477,1479,5,405,0,0,
		1478,1480,3,1034,517,0,1479,1478,1,0,0,0,1479,1480,1,0,0,0,1480,1481,1,
		0,0,0,1481,1485,3,52,26,0,1482,1484,3,570,285,0,1483,1482,1,0,0,0,1484,
		1487,1,0,0,0,1485,1483,1,0,0,0,1485,1486,1,0,0,0,1486,1530,1,0,0,0,1487,
		1485,1,0,0,0,1488,1489,5,67,0,0,1489,1491,5,405,0,0,1490,1492,3,1034,517,
		0,1491,1490,1,0,0,0,1491,1492,1,0,0,0,1492,1493,1,0,0,0,1493,1530,3,1142,
		571,0,1494,1495,5,597,0,0,1495,1496,5,405,0,0,1496,1530,3,52,26,0,1497,
		1498,5,454,0,0,1498,1500,5,405,0,0,1499,1501,3,1034,517,0,1500,1499,1,
		0,0,0,1500,1501,1,0,0,0,1501,1506,1,0,0,0,1502,1503,3,1130,565,0,1503,
		1504,5,248,0,0,1504,1505,3,962,481,0,1505,1507,1,0,0,0,1506,1502,1,0,0,
		0,1506,1507,1,0,0,0,1507,1530,1,0,0,0,1508,1509,5,172,0,0,1509,1510,5,
		405,0,0,1510,1511,3,1128,564,0,1511,1512,5,645,0,0,1512,1513,5,574,0,0,
		1513,1515,3,1102,551,0,1514,1516,3,48,24,0,1515,1514,1,0,0,0,1515,1516,
		1,0,0,0,1516,1530,1,0,0,0,1517,1518,4,14,9,0,1518,1519,5,141,0,0,1519,
		1520,5,405,0,0,1520,1521,3,52,26,0,1521,1522,5,572,0,0,1522,1530,1,0,0,
		0,1523,1524,4,14,10,0,1524,1525,5,234,0,0,1525,1526,5,405,0,0,1526,1527,
		3,52,26,0,1527,1528,5,572,0,0,1528,1530,1,0,0,0,1529,1433,1,0,0,0,1529,
		1443,1,0,0,0,1529,1446,1,0,0,0,1529,1452,1,0,0,0,1529,1461,1,0,0,0,1529,
		1467,1,0,0,0,1529,1476,1,0,0,0,1529,1488,1,0,0,0,1529,1494,1,0,0,0,1529,
		1497,1,0,0,0,1529,1508,1,0,0,0,1529,1517,1,0,0,0,1529,1523,1,0,0,0,1530,
		29,1,0,0,0,1531,1534,3,34,17,0,1532,1534,3,942,471,0,1533,1531,1,0,0,0,
		1533,1532,1,0,0,0,1534,1543,1,0,0,0,1535,1539,5,773,0,0,1536,1540,3,34,
		17,0,1537,1540,3,32,16,0,1538,1540,3,942,471,0,1539,1536,1,0,0,0,1539,
		1537,1,0,0,0,1539,1538,1,0,0,0,1540,1542,1,0,0,0,1541,1535,1,0,0,0,1542,
		1545,1,0,0,0,1543,1541,1,0,0,0,1543,1544,1,0,0,0,1544,31,1,0,0,0,1545,
		1543,1,0,0,0,1546,1550,3,42,21,0,1547,1550,3,44,22,0,1548,1550,3,48,24,
		0,1549,1546,1,0,0,0,1549,1547,1,0,0,0,1549,1548,1,0,0,0,1550,33,1,0,0,
		0,1551,1553,5,4,0,0,1552,1554,5,72,0,0,1553,1552,1,0,0,0,1553,1554,1,0,
		0,0,1554,1567,1,0,0,0,1555,1556,3,1128,564,0,1556,1558,3,876,438,0,1557,
		1559,3,866,433,0,1558,1557,1,0,0,0,1558,1559,1,0,0,0,1559,1561,1,0,0,0,
		1560,1562,3,36,18,0,1561,1560,1,0,0,0,1561,1562,1,0,0,0,1562,1568,1,0,
		0,0,1563,1564,5,776,0,0,1564,1565,3,84,42,0,1565,1566,5,777,0,0,1566,1568,
		1,0,0,0,1567,1555,1,0,0,0,1567,1563,1,0,0,0,1568,1697,1,0,0,0,1569,1570,
		5,4,0,0,1570,1697,3,872,436,0,1571,1573,5,55,0,0,1572,1574,5,72,0,0,1573,
		1572,1,0,0,0,1573,1574,1,0,0,0,1574,1575,1,0,0,0,1575,1576,3,1042,521,
		0,1576,1577,3,1128,564,0,1577,1579,3,876,438,0,1578,1580,3,36,18,0,1579,
		1578,1,0,0,0,1579,1580,1,0,0,0,1580,1697,1,0,0,0,1581,1583,5,348,0,0,1582,
		1584,5,72,0,0,1583,1582,1,0,0,0,1583,1584,1,0,0,0,1584,1585,1,0,0,0,1585,
		1586,3,1042,521,0,1586,1588,3,876,438,0,1587,1589,3,36,18,0,1588,1587,
		1,0,0,0,1588,1589,1,0,0,0,1589,1697,1,0,0,0,1590,1619,5,148,0,0,1591,1593,
		5,72,0,0,1592,1591,1,0,0,0,1592,1593,1,0,0,0,1593,1594,1,0,0,0,1594,1596,
		3,1042,521,0,1595,1597,3,38,19,0,1596,1595,1,0,0,0,1596,1597,1,0,0,0,1597,
		1620,1,0,0,0,1598,1599,5,199,0,0,1599,1606,5,265,0,0,1600,1601,4,17,11,
		0,1601,1607,3,1042,521,0,1602,1604,4,17,12,0,1603,1605,3,1042,521,0,1604,
		1603,1,0,0,0,1604,1605,1,0,0,0,1605,1607,1,0,0,0,1606,1600,1,0,0,0,1606,
		1602,1,0,0,0,1607,1620,1,0,0,0,1608,1609,5,420,0,0,1609,1620,5,265,0,0,
		1610,1611,3,406,203,0,1611,1612,3,1052,526,0,1612,1620,1,0,0,0,1613,1614,
		4,17,13,0,1614,1615,5,62,0,0,1615,1620,3,1128,564,0,1616,1617,4,17,14,
		0,1617,1618,5,86,0,0,1618,1620,3,1128,564,0,1619,1592,1,0,0,0,1619,1598,
		1,0,0,0,1619,1608,1,0,0,0,1619,1610,1,0,0,0,1619,1613,1,0,0,0,1619,1616,
		1,0,0,0,1620,1697,1,0,0,0,1621,1622,5,140,0,0,1622,1697,5,263,0,0,1623,
		1624,5,156,0,0,1624,1697,5,263,0,0,1625,1627,5,11,0,0,1626,1628,5,72,0,
		0,1627,1626,1,0,0,0,1627,1628,1,0,0,0,1628,1629,1,0,0,0,1629,1639,3,1042,
		521,0,1630,1631,5,506,0,0,1631,1635,5,128,0,0,1632,1633,4,17,15,0,1633,
		1636,3,770,385,0,1634,1636,3,1150,575,0,1635,1632,1,0,0,0,1635,1634,1,
		0,0,0,1636,1640,1,0,0,0,1637,1638,5,148,0,0,1638,1640,5,128,0,0,1639,1630,
		1,0,0,0,1639,1637,1,0,0,0,1640,1697,1,0,0,0,1641,1642,4,17,16,0,1642,1643,
		5,11,0,0,1643,1644,5,236,0,0,1644,1645,3,1052,526,0,1645,1646,3,906,453,
		0,1646,1697,1,0,0,0,1647,1648,4,17,17,0,1648,1649,5,11,0,0,1649,1650,5,
		62,0,0,1650,1651,3,1128,564,0,1651,1652,3,870,435,0,1652,1697,1,0,0,0,
		1653,1654,4,17,18,0,1654,1655,5,11,0,0,1655,1656,5,86,0,0,1656,1657,3,
		1128,564,0,1657,1658,3,870,435,0,1658,1697,1,0,0,0,1659,1660,4,17,19,0,
		1660,1661,5,453,0,0,1661,1662,5,72,0,0,1662,1663,3,1042,521,0,1663,1664,
		5,590,0,0,1664,1665,3,1128,564,0,1665,1697,1,0,0,0,1666,1668,5,453,0,0,
		1667,1669,7,1,0,0,1668,1667,1,0,0,0,1668,1669,1,0,0,0,1669,1670,1,0,0,
		0,1670,1697,3,1096,548,0,1671,1672,4,17,20,0,1672,1673,5,453,0,0,1673,
		1674,3,406,203,0,1674,1675,3,1052,526,0,1675,1676,5,590,0,0,1676,1677,
		3,1050,525,0,1677,1697,1,0,0,0,1678,1679,5,94,0,0,1679,1680,5,590,0,0,
		1680,1684,3,758,379,0,1681,1682,4,17,21,0,1682,1685,5,128,0,0,1683,1685,
		3,936,468,0,1684,1681,1,0,0,0,1684,1683,1,0,0,0,1685,1687,1,0,0,0,1686,
		1688,3,986,493,0,1687,1686,1,0,0,0,1687,1688,1,0,0,0,1688,1697,1,0,0,0,
		1689,1697,5,198,0,0,1690,1691,5,393,0,0,1691,1692,5,45,0,0,1692,1697,3,
		40,20,0,1693,1694,4,17,22,0,1694,1695,5,615,0,0,1695,1697,5,403,0,0,1696,
		1551,1,0,0,0,1696,1569,1,0,0,0,1696,1571,1,0,0,0,1696,1581,1,0,0,0,1696,
		1590,1,0,0,0,1696,1621,1,0,0,0,1696,1623,1,0,0,0,1696,1625,1,0,0,0,1696,
		1641,1,0,0,0,1696,1647,1,0,0,0,1696,1653,1,0,0,0,1696,1659,1,0,0,0,1696,
		1666,1,0,0,0,1696,1671,1,0,0,0,1696,1678,1,0,0,0,1696,1689,1,0,0,0,1696,
		1690,1,0,0,0,1696,1693,1,0,0,0,1697,35,1,0,0,0,1698,1699,5,6,0,0,1699,
		1702,3,1128,564,0,1700,1702,5,191,0,0,1701,1698,1,0,0,0,1701,1700,1,0,
		0,0,1702,37,1,0,0,0,1703,1704,7,2,0,0,1704,39,1,0,0,0,1705,1707,3,1128,
		564,0,1706,1708,3,330,165,0,1707,1706,1,0,0,0,1707,1708,1,0,0,0,1708,1716,
		1,0,0,0,1709,1710,5,773,0,0,1710,1712,3,1128,564,0,1711,1713,3,330,165,
		0,1712,1711,1,0,0,0,1712,1713,1,0,0,0,1713,1715,1,0,0,0,1714,1709,1,0,
		0,0,1715,1718,1,0,0,0,1716,1714,1,0,0,0,1716,1717,1,0,0,0,1717,41,1,0,
		0,0,1718,1716,1,0,0,0,1719,1721,5,9,0,0,1720,1722,5,750,0,0,1721,1720,
		1,0,0,0,1721,1722,1,0,0,0,1722,1725,1,0,0,0,1723,1726,5,128,0,0,1724,1726,
		3,1128,564,0,1725,1723,1,0,0,0,1725,1724,1,0,0,0,1726,43,1,0,0,0,1727,
		1729,5,287,0,0,1728,1730,5,750,0,0,1729,1728,1,0,0,0,1729,1730,1,0,0,0,
		1730,1733,1,0,0,0,1731,1734,5,128,0,0,1732,1734,3,1128,564,0,1733,1731,
		1,0,0,0,1733,1732,1,0,0,0,1734,45,1,0,0,0,1735,1737,3,42,21,0,1736,1738,
		3,44,22,0,1737,1736,1,0,0,0,1737,1738,1,0,0,0,1738,1744,1,0,0,0,1739,1741,
		3,44,22,0,1740,1742,3,42,21,0,1741,1740,1,0,0,0,1741,1742,1,0,0,0,1742,
		1744,1,0,0,0,1743,1735,1,0,0,0,1743,1739,1,0,0,0,1744,47,1,0,0,0,1745,
		1746,4,24,23,0,1746,1747,7,3,0,0,1747,1748,5,625,0,0,1748,49,1,0,0,0,1749,
		1750,5,452,0,0,1750,1751,5,403,0,0,1751,51,1,0,0,0,1752,1755,5,10,0,0,
		1753,1755,3,1130,565,0,1754,1752,1,0,0,0,1754,1753,1,0,0,0,1755,53,1,0,
		0,0,1756,1757,5,572,0,0,1757,1791,3,1078,539,0,1758,1759,7,4,0,0,1759,
		1760,5,111,0,0,1760,1762,3,1160,580,0,1761,1763,3,62,31,0,1762,1761,1,
		0,0,0,1762,1763,1,0,0,0,1763,1792,1,0,0,0,1764,1784,4,27,24,0,1765,1785,
		1,0,0,0,1766,1767,5,55,0,0,1767,1768,5,111,0,0,1768,1779,3,1160,580,0,
		1769,1776,3,66,33,0,1770,1772,5,773,0,0,1771,1770,1,0,0,0,1771,1772,1,
		0,0,0,1772,1773,1,0,0,0,1773,1775,3,66,33,0,1774,1771,1,0,0,0,1775,1778,
		1,0,0,0,1776,1774,1,0,0,0,1776,1777,1,0,0,0,1777,1780,1,0,0,0,1778,1776,
		1,0,0,0,1779,1769,1,0,0,0,1779,1780,1,0,0,0,1780,1785,1,0,0,0,1781,1785,
		7,5,0,0,1782,1783,5,371,0,0,1783,1785,5,1,0,0,1784,1765,1,0,0,0,1784,1766,
		1,0,0,0,1784,1781,1,0,0,0,1784,1782,1,0,0,0,1785,1792,1,0,0,0,1786,1787,
		5,453,0,0,1787,1788,5,590,0,0,1788,1792,3,1128,564,0,1789,1790,4,27,25,
		0,1790,1792,3,62,31,0,1791,1758,1,0,0,0,1791,1764,1,0,0,0,1791,1786,1,
		0,0,0,1791,1789,1,0,0,0,1792,55,1,0,0,0,1793,1794,5,605,0,0,1794,1795,
		5,572,0,0,1795,1796,3,1078,539,0,1796,1797,5,506,0,0,1797,1799,7,6,0,0,
		1798,1800,3,58,29,0,1799,1798,1,0,0,0,1799,1800,1,0,0,0,1800,57,1,0,0,
		0,1801,1808,3,60,30,0,1802,1804,5,773,0,0,1803,1802,1,0,0,0,1803,1804,
		1,0,0,0,1804,1805,1,0,0,0,1805,1807,3,60,30,0,1806,1803,1,0,0,0,1807,1810,
		1,0,0,0,1808,1806,1,0,0,0,1808,1809,1,0,0,0,1809,59,1,0,0,0,1810,1808,
		1,0,0,0,1811,1812,3,148,74,0,1812,61,1,0,0,0,1813,1820,3,64,32,0,1814,
		1816,5,773,0,0,1815,1814,1,0,0,0,1815,1816,1,0,0,0,1816,1817,1,0,0,0,1817,
		1819,3,64,32,0,1818,1815,1,0,0,0,1819,1822,1,0,0,0,1820,1818,1,0,0,0,1820,
		1821,1,0,0,0,1821,63,1,0,0,0,1822,1820,1,0,0,0,1823,1825,5,238,0,0,1824,
		1826,5,750,0,0,1825,1824,1,0,0,0,1825,1826,1,0,0,0,1826,1827,1,0,0,0,1827,
		1834,3,1186,593,0,1828,1834,3,140,70,0,1829,1834,3,142,71,0,1830,1834,
		3,148,74,0,1831,1834,3,150,75,0,1832,1834,3,156,78,0,1833,1823,1,0,0,0,
		1833,1828,1,0,0,0,1833,1829,1,0,0,0,1833,1830,1,0,0,0,1833,1831,1,0,0,
		0,1833,1832,1,0,0,0,1834,65,1,0,0,0,1835,1837,5,238,0,0,1836,1838,5,750,
		0,0,1837,1836,1,0,0,0,1837,1838,1,0,0,0,1838,1839,1,0,0,0,1839,1843,3,
		1186,593,0,1840,1843,3,140,70,0,1841,1843,3,142,71,0,1842,1835,1,0,0,0,
		1842,1840,1,0,0,0,1842,1841,1,0,0,0,1843,67,1,0,0,0,1844,1846,3,162,81,
		0,1845,1844,1,0,0,0,1845,1846,1,0,0,0,1846,1848,1,0,0,0,1847,1849,3,976,
		488,0,1848,1847,1,0,0,0,1848,1849,1,0,0,0,1849,1851,1,0,0,0,1850,1852,
		3,164,82,0,1851,1850,1,0,0,0,1851,1852,1,0,0,0,1852,1853,1,0,0,0,1853,
		1854,5,636,0,0,1854,1855,3,1074,537,0,1855,1856,3,70,35,0,1856,69,1,0,
		0,0,1857,1859,3,1044,522,0,1858,1857,1,0,0,0,1858,1859,1,0,0,0,1859,1860,
		1,0,0,0,1860,1861,5,17,0,0,1861,1862,3,72,36,0,1862,71,1,0,0,0,1863,1865,
		3,90,45,0,1864,1866,3,74,37,0,1865,1864,1,0,0,0,1865,1866,1,0,0,0,1866,
		73,1,0,0,0,1867,1869,5,645,0,0,1868,1870,7,7,0,0,1869,1868,1,0,0,0,1869,
		1870,1,0,0,0,1870,1871,1,0,0,0,1871,1872,5,62,0,0,1872,1873,5,391,0,0,
		1873,75,1,0,0,0,1874,1893,5,97,0,0,1875,1894,3,78,39,0,1876,1894,3,82,
		41,0,1877,1894,3,96,48,0,1878,1894,3,94,47,0,1879,1894,3,98,49,0,1880,
		1894,3,112,56,0,1881,1894,3,158,79,0,1882,1894,3,166,83,0,1883,1894,3,
		106,53,0,1884,1894,3,118,59,0,1885,1894,3,124,62,0,1886,1894,3,170,85,
		0,1887,1888,4,38,26,0,1888,1894,3,172,86,0,1889,1890,4,38,27,0,1890,1894,
		3,174,87,0,1891,1892,4,38,28,0,1892,1894,3,126,63,0,1893,1875,1,0,0,0,
		1893,1876,1,0,0,0,1893,1877,1,0,0,0,1893,1878,1,0,0,0,1893,1879,1,0,0,
		0,1893,1880,1,0,0,0,1893,1881,1,0,0,0,1893,1882,1,0,0,0,1893,1883,1,0,
		0,0,1893,1884,1,0,0,0,1893,1885,1,0,0,0,1893,1886,1,0,0,0,1893,1887,1,
		0,0,0,1893,1889,1,0,0,0,1893,1891,1,0,0,0,1894,77,1,0,0,0,1895,1897,5,
		109,0,0,1896,1898,3,980,490,0,1897,1896,1,0,0,0,1897,1898,1,0,0,0,1898,
		1899,1,0,0,0,1899,1903,3,1056,528,0,1900,1902,3,80,40,0,1901,1900,1,0,
		0,0,1902,1905,1,0,0,0,1903,1901,1,0,0,0,1903,1904,1,0,0,0,1904,79,1,0,
		0,0,1905,1903,1,0,0,0,1906,1911,3,952,476,0,1907,1911,3,948,474,0,1908,
		1909,4,40,29,0,1909,1911,3,950,475,0,1910,1906,1,0,0,0,1910,1907,1,0,0,
		0,1910,1908,1,0,0,0,1911,81,1,0,0,0,1912,1914,5,577,0,0,1913,1912,1,0,
		0,0,1913,1914,1,0,0,0,1914,1915,1,0,0,0,1915,1917,5,574,0,0,1916,1918,
		3,980,490,0,1917,1916,1,0,0,0,1917,1918,1,0,0,0,1918,1919,1,0,0,0,1919,
		1942,3,1096,548,0,1920,1921,5,776,0,0,1921,1922,3,84,42,0,1922,1923,5,
		777,0,0,1923,1925,1,0,0,0,1924,1920,1,0,0,0,1924,1925,1,0,0,0,1925,1927,
		1,0,0,0,1926,1928,3,940,470,0,1927,1926,1,0,0,0,1927,1928,1,0,0,0,1928,
		1930,1,0,0,0,1929,1931,3,954,477,0,1930,1929,1,0,0,0,1930,1931,1,0,0,0,
		1931,1933,1,0,0,0,1932,1934,3,88,44,0,1933,1932,1,0,0,0,1933,1934,1,0,
		0,0,1934,1943,1,0,0,0,1935,1936,5,275,0,0,1936,1943,3,1102,551,0,1937,
		1938,5,776,0,0,1938,1939,5,275,0,0,1939,1940,3,1102,551,0,1940,1941,5,
		777,0,0,1941,1943,1,0,0,0,1942,1924,1,0,0,0,1942,1935,1,0,0,0,1942,1937,
		1,0,0,0,1943,83,1,0,0,0,1944,1949,3,86,43,0,1945,1946,5,773,0,0,1946,1948,
		3,86,43,0,1947,1945,1,0,0,0,1948,1951,1,0,0,0,1949,1947,1,0,0,0,1949,1950,
		1,0,0,0,1950,85,1,0,0,0,1951,1949,1,0,0,0,1952,1955,3,864,432,0,1953,1955,
		3,872,436,0,1954,1952,1,0,0,0,1954,1953,1,0,0,0,1955,87,1,0,0,0,1956,1958,
		7,8,0,0,1957,1956,1,0,0,0,1957,1958,1,0,0,0,1958,1960,1,0,0,0,1959,1961,
		5,17,0,0,1960,1959,1,0,0,0,1960,1961,1,0,0,0,1961,1962,1,0,0,0,1962,1963,
		3,90,45,0,1963,89,1,0,0,0,1964,1967,3,270,135,0,1965,1967,3,274,137,0,
		1966,1964,1,0,0,0,1966,1965,1,0,0,0,1967,91,1,0,0,0,1968,1972,5,97,0,0,
		1969,1973,3,94,47,0,1970,1973,3,96,48,0,1971,1973,3,98,49,0,1972,1969,
		1,0,0,0,1972,1970,1,0,0,0,1972,1971,1,0,0,0,1973,1975,1,0,0,0,1974,1976,
		5,774,0,0,1975,1974,1,0,0,0,1975,1976,1,0,0,0,1976,1977,1,0,0,0,1977,1978,
		5,0,0,1,1978,93,1,0,0,0,1979,1981,3,976,488,0,1980,1979,1,0,0,0,1980,1981,
		1,0,0,0,1981,1982,1,0,0,0,1982,1983,5,422,0,0,1983,1984,3,1060,530,0,1984,
		1993,5,776,0,0,1985,1990,3,982,491,0,1986,1987,5,773,0,0,1987,1989,3,982,
		491,0,1988,1986,1,0,0,0,1989,1992,1,0,0,0,1990,1988,1,0,0,0,1990,1991,
		1,0,0,0,1991,1994,1,0,0,0,1992,1990,1,0,0,0,1993,1985,1,0,0,0,1993,1994,
		1,0,0,0,1994,1995,1,0,0,0,1995,1999,5,777,0,0,1996,1998,3,100,50,0,1997,
		1996,1,0,0,0,1998,2001,1,0,0,0,1999,1997,1,0,0,0,1999,2000,1,0,0,0,2000,
		2002,1,0,0,0,2001,1999,1,0,0,0,2002,2003,3,784,392,0,2003,95,1,0,0,0,2004,
		2006,3,976,488,0,2005,2004,1,0,0,0,2005,2006,1,0,0,0,2006,2007,1,0,0,0,
		2007,2008,5,206,0,0,2008,2009,3,1064,532,0,2009,2018,5,776,0,0,2010,2015,
		3,984,492,0,2011,2012,5,773,0,0,2012,2014,3,984,492,0,2013,2011,1,0,0,
		0,2014,2017,1,0,0,0,2015,2013,1,0,0,0,2015,2016,1,0,0,0,2016,2019,1,0,
		0,0,2017,2015,1,0,0,0,2018,2010,1,0,0,0,2018,2019,1,0,0,0,2019,2020,1,
		0,0,0,2020,2021,5,777,0,0,2021,2022,5,474,0,0,2022,2026,3,988,494,0,2023,
		2025,3,100,50,0,2024,2023,1,0,0,0,2025,2028,1,0,0,0,2026,2024,1,0,0,0,
		2026,2027,1,0,0,0,2027,2029,1,0,0,0,2028,2026,1,0,0,0,2029,2030,3,784,
		392,0,2030,97,1,0,0,0,2031,2033,5,8,0,0,2032,2031,1,0,0,0,2032,2033,1,
		0,0,0,2033,2034,1,0,0,0,2034,2035,5,206,0,0,2035,2036,3,1088,544,0,2036,
		2037,5,474,0,0,2037,2038,7,9,0,0,2038,2039,5,520,0,0,2039,2040,3,1160,
		580,0,2040,99,1,0,0,0,2041,2047,3,104,52,0,2042,2044,5,371,0,0,2043,2042,
		1,0,0,0,2043,2044,1,0,0,0,2044,2045,1,0,0,0,2045,2047,5,137,0,0,2046,2041,
		1,0,0,0,2046,2043,1,0,0,0,2047,101,1,0,0,0,2048,2050,3,100,50,0,2049,2048,
		1,0,0,0,2050,2051,1,0,0,0,2051,2049,1,0,0,0,2051,2052,1,0,0,0,2052,103,
		1,0,0,0,2053,2054,5,75,0,0,2054,2071,3,1160,580,0,2055,2056,5,267,0,0,
		2056,2071,5,537,0,0,2057,2058,5,373,0,0,2058,2071,5,537,0,0,2059,2060,
		5,90,0,0,2060,2071,5,537,0,0,2061,2062,5,433,0,0,2062,2063,5,537,0,0,2063,
		2071,5,112,0,0,2064,2065,5,347,0,0,2065,2066,5,537,0,0,2066,2071,5,112,
		0,0,2067,2068,5,537,0,0,2068,2069,5,496,0,0,2069,2071,7,10,0,0,2070,2053,
		1,0,0,0,2070,2055,1,0,0,0,2070,2057,1,0,0,0,2070,2059,1,0,0,0,2070,2061,
		1,0,0,0,2070,2064,1,0,0,0,2070,2067,1,0,0,0,2071,105,1,0,0,0,2072,2074,
		3,1032,516,0,2073,2072,1,0,0,0,2073,2074,1,0,0,0,2074,2116,1,0,0,0,2075,
		2077,5,609,0,0,2076,2075,1,0,0,0,2076,2077,1,0,0,0,2077,2078,1,0,0,0,2078,
		2087,5,236,0,0,2079,2080,4,53,30,0,2080,2082,3,1050,525,0,2081,2083,3,
		908,454,0,2082,2081,1,0,0,0,2082,2083,1,0,0,0,2083,2088,1,0,0,0,2084,2086,
		3,108,54,0,2085,2084,1,0,0,0,2085,2086,1,0,0,0,2086,2088,1,0,0,0,2087,
		2079,1,0,0,0,2087,2085,1,0,0,0,2088,2089,1,0,0,0,2089,2093,3,110,55,0,
		2090,2092,3,902,451,0,2091,2090,1,0,0,0,2092,2095,1,0,0,0,2093,2091,1,
		0,0,0,2093,2094,1,0,0,0,2094,2117,1,0,0,0,2095,2093,1,0,0,0,2096,2097,
		5,205,0,0,2097,2098,5,236,0,0,2098,2099,3,1050,525,0,2099,2103,3,110,55,
		0,2100,2102,3,910,455,0,2101,2100,1,0,0,0,2102,2105,1,0,0,0,2103,2101,
		1,0,0,0,2103,2104,1,0,0,0,2104,2117,1,0,0,0,2105,2103,1,0,0,0,2106,2107,
		5,523,0,0,2107,2108,5,236,0,0,2108,2109,3,1050,525,0,2109,2113,3,110,55,
		0,2110,2112,3,912,456,0,2111,2110,1,0,0,0,2112,2115,1,0,0,0,2113,2111,
		1,0,0,0,2113,2114,1,0,0,0,2114,2117,1,0,0,0,2115,2113,1,0,0,0,2116,2076,
		1,0,0,0,2116,2096,1,0,0,0,2116,2106,1,0,0,0,2117,2119,1,0,0,0,2118,2120,
		3,46,23,0,2119,2118,1,0,0,0,2119,2120,1,0,0,0,2120,107,1,0,0,0,2121,2124,
		3,1050,525,0,2122,2123,5,621,0,0,2123,2125,3,900,450,0,2124,2122,1,0,0,
		0,2124,2125,1,0,0,0,2125,2131,1,0,0,0,2126,2127,3,1050,525,0,2127,2128,
		5,599,0,0,2128,2129,3,900,450,0,2129,2131,1,0,0,0,2130,2121,1,0,0,0,2130,
		2126,1,0,0,0,2131,109,1,0,0,0,2132,2133,5,383,0,0,2133,2134,3,1102,551,
		0,2134,2135,3,898,449,0,2135,111,1,0,0,0,2136,2137,5,288,0,0,2137,2138,
		5,217,0,0,2138,2139,3,1080,540,0,2139,2140,5,4,0,0,2140,2141,7,11,0,0,
		2141,2143,3,1160,580,0,2142,2144,3,114,57,0,2143,2142,1,0,0,0,2143,2144,
		1,0,0,0,2144,113,1,0,0,0,2145,2152,3,116,58,0,2146,2148,5,773,0,0,2147,
		2146,1,0,0,0,2147,2148,1,0,0,0,2148,2149,1,0,0,0,2149,2151,3,116,58,0,
		2150,2147,1,0,0,0,2151,2154,1,0,0,0,2152,2150,1,0,0,0,2152,2153,1,0,0,
		0,2153,115,1,0,0,0,2154,2152,1,0,0,0,2155,2162,3,136,68,0,2156,2162,3,
		138,69,0,2157,2162,3,146,73,0,2158,2162,3,148,74,0,2159,2162,3,150,75,
		0,2160,2162,3,152,76,0,2161,2155,1,0,0,0,2161,2156,1,0,0,0,2161,2157,1,
		0,0,0,2161,2158,1,0,0,0,2161,2159,1,0,0,0,2161,2160,1,0,0,0,2162,117,1,
		0,0,0,2163,2164,5,503,0,0,2164,2165,3,1090,545,0,2165,2166,5,199,0,0,2166,
		2167,5,112,0,0,2167,2168,5,648,0,0,2168,2169,3,1180,590,0,2169,2170,3,
		120,60,0,2170,119,1,0,0,0,2171,2172,5,390,0,0,2172,2173,5,776,0,0,2173,
		2178,3,122,61,0,2174,2175,5,773,0,0,2175,2177,3,122,61,0,2176,2174,1,0,
		0,0,2177,2180,1,0,0,0,2178,2176,1,0,0,0,2178,2179,1,0,0,0,2179,2181,1,
		0,0,0,2180,2178,1,0,0,0,2181,2182,5,777,0,0,2182,121,1,0,0,0,2183,2184,
		5,224,0,0,2184,2198,3,1160,580,0,2185,2186,5,109,0,0,2186,2198,3,1160,
		580,0,2187,2188,5,618,0,0,2188,2198,3,1160,580,0,2189,2190,5,406,0,0,2190,
		2198,3,1160,580,0,2191,2192,5,519,0,0,2192,2198,3,1160,580,0,2193,2194,
		5,398,0,0,2194,2198,3,1160,580,0,2195,2196,5,413,0,0,2196,2198,3,1140,
		570,0,2197,2183,1,0,0,0,2197,2185,1,0,0,0,2197,2187,1,0,0,0,2197,2189,
		1,0,0,0,2197,2191,1,0,0,0,2197,2193,1,0,0,0,2197,2195,1,0,0,0,2198,123,
		1,0,0,0,2199,2200,5,572,0,0,2200,2201,3,1076,538,0,2201,2206,3,128,64,
		0,2202,2203,5,620,0,0,2203,2204,5,288,0,0,2204,2205,5,217,0,0,2205,2207,
		3,1082,541,0,2206,2202,1,0,0,0,2206,2207,1,0,0,0,2207,2209,1,0,0,0,2208,
		2210,3,132,66,0,2209,2208,1,0,0,0,2209,2210,1,0,0,0,2210,125,1,0,0,0,2211,
		2212,5,605,0,0,2212,2213,5,572,0,0,2213,2214,3,1076,538,0,2214,2215,5,
		4,0,0,2215,2217,3,130,65,0,2216,2218,3,58,29,0,2217,2216,1,0,0,0,2217,
		2218,1,0,0,0,2218,127,1,0,0,0,2219,2222,4,64,31,0,2220,2221,5,4,0,0,2221,
		2223,3,130,65,0,2222,2220,1,0,0,0,2222,2223,1,0,0,0,2223,2227,1,0,0,0,
		2224,2225,5,4,0,0,2225,2227,3,130,65,0,2226,2219,1,0,0,0,2226,2224,1,0,
		0,0,2227,129,1,0,0,0,2228,2229,5,111,0,0,2229,2230,3,1160,580,0,2230,131,
		1,0,0,0,2231,2238,3,134,67,0,2232,2234,5,773,0,0,2233,2232,1,0,0,0,2233,
		2234,1,0,0,0,2234,2235,1,0,0,0,2235,2237,3,134,67,0,2236,2233,1,0,0,0,
		2237,2240,1,0,0,0,2238,2236,1,0,0,0,2238,2239,1,0,0,0,2239,133,1,0,0,0,
		2240,2238,1,0,0,0,2241,2254,3,136,68,0,2242,2254,3,140,70,0,2243,2254,
		3,142,71,0,2244,2254,3,144,72,0,2245,2254,3,146,73,0,2246,2254,3,148,74,
		0,2247,2254,3,150,75,0,2248,2254,3,152,76,0,2249,2250,4,67,32,0,2250,2254,
		3,154,77,0,2251,2252,4,67,33,0,2252,2254,3,156,78,0,2253,2241,1,0,0,0,
		2253,2242,1,0,0,0,2253,2243,1,0,0,0,2253,2244,1,0,0,0,2253,2245,1,0,0,
		0,2253,2246,1,0,0,0,2253,2247,1,0,0,0,2253,2248,1,0,0,0,2253,2249,1,0,
		0,0,2253,2251,1,0,0,0,2254,135,1,0,0,0,2255,2257,5,238,0,0,2256,2258,5,
		750,0,0,2257,2256,1,0,0,0,2257,2258,1,0,0,0,2258,2259,1,0,0,0,2259,2260,
		3,1186,593,0,2260,137,1,0,0,0,2261,2263,7,12,0,0,2262,2264,5,750,0,0,2263,
		2262,1,0,0,0,2263,2264,1,0,0,0,2264,2265,1,0,0,0,2265,2266,3,1186,593,
		0,2266,139,1,0,0,0,2267,2269,5,23,0,0,2268,2270,5,750,0,0,2269,2268,1,
		0,0,0,2269,2270,1,0,0,0,2270,2271,1,0,0,0,2271,2272,3,1186,593,0,2272,
		141,1,0,0,0,2273,2275,5,324,0,0,2274,2276,5,750,0,0,2275,2274,1,0,0,0,
		2275,2276,1,0,0,0,2276,2277,1,0,0,0,2277,2278,3,1186,593,0,2278,143,1,
		0,0,0,2279,2281,5,181,0,0,2280,2282,5,750,0,0,2281,2280,1,0,0,0,2281,2282,
		1,0,0,0,2282,2283,1,0,0,0,2283,2284,3,1186,593,0,2284,145,1,0,0,0,2285,
		2287,5,368,0,0,2286,2288,5,750,0,0,2287,2286,1,0,0,0,2287,2288,1,0,0,0,
		2288,2289,1,0,0,0,2289,2290,3,1142,571,0,2290,147,1,0,0,0,2291,2293,5,
		553,0,0,2292,2291,1,0,0,0,2292,2293,1,0,0,0,2293,2294,1,0,0,0,2294,2296,
		5,163,0,0,2295,2297,5,750,0,0,2296,2295,1,0,0,0,2296,2297,1,0,0,0,2297,
		2298,1,0,0,0,2298,2299,3,1094,547,0,2299,149,1,0,0,0,2300,2301,7,13,0,
		0,2301,151,1,0,0,0,2302,2304,5,75,0,0,2303,2305,5,750,0,0,2304,2303,1,
		0,0,0,2304,2305,1,0,0,0,2305,2306,1,0,0,0,2306,2307,3,1160,580,0,2307,
		153,1,0,0,0,2308,2310,5,189,0,0,2309,2311,5,750,0,0,2310,2309,1,0,0,0,
		2310,2311,1,0,0,0,2311,2312,1,0,0,0,2312,2313,3,1186,593,0,2313,155,1,
		0,0,0,2314,2316,5,158,0,0,2315,2317,5,750,0,0,2316,2315,1,0,0,0,2316,2317,
		1,0,0,0,2317,2318,1,0,0,0,2318,2319,3,1154,577,0,2319,157,1,0,0,0,2320,
		2322,3,160,80,0,2321,2320,1,0,0,0,2321,2322,1,0,0,0,2322,2324,1,0,0,0,
		2323,2325,3,976,488,0,2324,2323,1,0,0,0,2324,2325,1,0,0,0,2325,2327,1,
		0,0,0,2326,2328,3,164,82,0,2327,2326,1,0,0,0,2327,2328,1,0,0,0,2328,2329,
		1,0,0,0,2329,2330,5,636,0,0,2330,2331,3,1072,536,0,2331,2332,3,70,35,0,
		2332,159,1,0,0,0,2333,2334,5,394,0,0,2334,2336,5,458,0,0,2335,2337,3,162,
		81,0,2336,2335,1,0,0,0,2336,2337,1,0,0,0,2337,2340,1,0,0,0,2338,2340,3,
		162,81,0,2339,2333,1,0,0,0,2339,2338,1,0,0,0,2340,161,1,0,0,0,2341,2342,
		5,9,0,0,2342,2343,5,750,0,0,2343,2344,7,14,0,0,2344,163,1,0,0,0,2345,2346,
		5,537,0,0,2346,2347,5,496,0,0,2347,2348,7,10,0,0,2348,165,1,0,0,0,2349,
		2351,3,976,488,0,2350,2349,1,0,0,0,2350,2351,1,0,0,0,2351,2352,1,0,0,0,
		2352,2353,5,594,0,0,2353,2354,3,1068,534,0,2354,2355,7,15,0,0,2355,2356,
		7,16,0,0,2356,2357,5,383,0,0,2357,2358,3,1102,551,0,2358,2359,5,200,0,
		0,2359,2360,5,153,0,0,2360,2362,5,487,0,0,2361,2363,3,168,84,0,2362,2361,
		1,0,0,0,2362,2363,1,0,0,0,2363,2364,1,0,0,0,2364,2365,3,784,392,0,2365,
		167,1,0,0,0,2366,2367,4,84,34,0,2367,2368,7,17,0,0,2368,2369,3,1180,590,
		0,2369,169,1,0,0,0,2370,2372,3,976,488,0,2371,2370,1,0,0,0,2371,2372,1,
		0,0,0,2372,2373,1,0,0,0,2373,2375,5,170,0,0,2374,2376,3,980,490,0,2375,
		2374,1,0,0,0,2375,2376,1,0,0,0,2376,2377,1,0,0,0,2377,2378,3,1084,542,
		0,2378,2379,5,383,0,0,2379,2380,5,490,0,0,2380,2387,3,862,431,0,2381,2382,
		5,383,0,0,2382,2384,5,79,0,0,2383,2385,5,371,0,0,2384,2383,1,0,0,0,2384,
		2385,1,0,0,0,2385,2386,1,0,0,0,2386,2388,5,418,0,0,2387,2381,1,0,0,0,2387,
		2388,1,0,0,0,2388,2395,1,0,0,0,2389,2396,5,156,0,0,2390,2393,5,140,0,0,
		2391,2392,5,383,0,0,2392,2394,5,514,0,0,2393,2391,1,0,0,0,2393,2394,1,
		0,0,0,2394,2396,1,0,0,0,2395,2389,1,0,0,0,2395,2390,1,0,0,0,2395,2396,
		1,0,0,0,2396,2399,1,0,0,0,2397,2398,5,75,0,0,2398,2400,3,1160,580,0,2399,
		2397,1,0,0,0,2399,2400,1,0,0,0,2400,2401,1,0,0,0,2401,2402,5,147,0,0,2402,
		2403,3,784,392,0,2403,171,1,0,0,0,2404,2406,5,659,0,0,2405,2407,3,980,
		490,0,2406,2405,1,0,0,0,2406,2407,1,0,0,0,2407,2408,1,0,0,0,2408,2409,
		3,560,280,0,2409,173,1,0,0,0,2410,2411,5,394,0,0,2411,2412,5,458,0,0,2412,
		2413,5,523,0,0,2413,2414,5,718,0,0,2414,2415,5,710,0,0,2415,2419,3,1146,
		573,0,2416,2418,3,176,88,0,2417,2416,1,0,0,0,2418,2421,1,0,0,0,2419,2417,
		1,0,0,0,2419,2420,1,0,0,0,2420,2436,1,0,0,0,2421,2419,1,0,0,0,2422,2423,
		5,523,0,0,2423,2424,5,718,0,0,2424,2426,5,710,0,0,2425,2427,3,980,490,
		0,2426,2425,1,0,0,0,2426,2427,1,0,0,0,2427,2428,1,0,0,0,2428,2432,3,1146,
		573,0,2429,2431,3,176,88,0,2430,2429,1,0,0,0,2431,2434,1,0,0,0,2432,2430,
		1,0,0,0,2432,2433,1,0,0,0,2433,2436,1,0,0,0,2434,2432,1,0,0,0,2435,2410,
		1,0,0,0,2435,2422,1,0,0,0,2436,175,1,0,0,0,2437,2438,5,357,0,0,2438,2439,
		5,580,0,0,2439,2453,3,1162,581,0,2440,2441,5,715,0,0,2441,2442,5,580,0,
		0,2442,2453,3,1162,581,0,2443,2444,5,717,0,0,2444,2445,3,1162,581,0,2445,
		2446,5,230,0,0,2446,2447,5,45,0,0,2447,2448,3,1146,573,0,2448,2453,1,0,
		0,0,2449,2450,5,716,0,0,2450,2451,5,580,0,0,2451,2453,3,1162,581,0,2452,
		2437,1,0,0,0,2452,2440,1,0,0,0,2452,2443,1,0,0,0,2452,2449,1,0,0,0,2453,
		177,1,0,0,0,2454,2472,5,148,0,0,2455,2473,3,180,90,0,2456,2473,3,182,91,
		0,2457,2473,3,184,92,0,2458,2473,3,186,93,0,2459,2473,3,188,94,0,2460,
		2473,3,190,95,0,2461,2473,3,194,97,0,2462,2473,3,196,98,0,2463,2473,3,
		198,99,0,2464,2473,3,200,100,0,2465,2473,3,202,101,0,2466,2467,4,89,35,
		0,2467,2473,3,204,102,0,2468,2469,4,89,36,0,2469,2473,3,206,103,0,2470,
		2471,4,89,37,0,2471,2473,3,208,104,0,2472,2455,1,0,0,0,2472,2456,1,0,0,
		0,2472,2457,1,0,0,0,2472,2458,1,0,0,0,2472,2459,1,0,0,0,2472,2460,1,0,
		0,0,2472,2461,1,0,0,0,2472,2462,1,0,0,0,2472,2463,1,0,0,0,2472,2464,1,
		0,0,0,2472,2465,1,0,0,0,2472,2466,1,0,0,0,2472,2468,1,0,0,0,2472,2470,
		1,0,0,0,2473,179,1,0,0,0,2474,2476,5,109,0,0,2475,2477,3,978,489,0,2476,
		2475,1,0,0,0,2476,2477,1,0,0,0,2477,2478,1,0,0,0,2478,2479,3,1058,529,
		0,2479,181,1,0,0,0,2480,2482,5,170,0,0,2481,2483,3,978,489,0,2482,2481,
		1,0,0,0,2482,2483,1,0,0,0,2483,2484,1,0,0,0,2484,2485,3,1086,543,0,2485,
		183,1,0,0,0,2486,2488,5,206,0,0,2487,2489,3,978,489,0,2488,2487,1,0,0,
		0,2488,2489,1,0,0,0,2489,2490,1,0,0,0,2490,2491,3,1066,533,0,2491,185,
		1,0,0,0,2492,2494,5,422,0,0,2493,2495,3,978,489,0,2494,2493,1,0,0,0,2494,
		2495,1,0,0,0,2495,2496,1,0,0,0,2496,2497,3,1062,531,0,2497,187,1,0,0,0,
		2498,2500,3,1032,516,0,2499,2498,1,0,0,0,2499,2500,1,0,0,0,2500,2501,1,
		0,0,0,2501,2502,5,236,0,0,2502,2503,3,1052,526,0,2503,2504,5,383,0,0,2504,
		2506,3,1102,551,0,2505,2507,3,46,23,0,2506,2505,1,0,0,0,2506,2507,1,0,
		0,0,2507,189,1,0,0,0,2508,2509,5,288,0,0,2509,2510,5,217,0,0,2510,2521,
		3,1082,541,0,2511,2518,3,192,96,0,2512,2514,5,773,0,0,2513,2512,1,0,0,
		0,2513,2514,1,0,0,0,2514,2515,1,0,0,0,2515,2517,3,192,96,0,2516,2513,1,
		0,0,0,2517,2520,1,0,0,0,2518,2516,1,0,0,0,2518,2519,1,0,0,0,2519,2522,
		1,0,0,0,2520,2518,1,0,0,0,2521,2511,1,0,0,0,2521,2522,1,0,0,0,2522,191,
		1,0,0,0,2523,2526,3,150,75,0,2524,2526,3,148,74,0,2525,2523,1,0,0,0,2525,
		2524,1,0,0,0,2526,193,1,0,0,0,2527,2529,5,503,0,0,2528,2530,3,978,489,
		0,2529,2528,1,0,0,0,2529,2530,1,0,0,0,2530,2531,1,0,0,0,2531,2532,3,1092,
		546,0,2532,195,1,0,0,0,2533,2535,5,577,0,0,2534,2533,1,0,0,0,2534,2535,
		1,0,0,0,2535,2536,1,0,0,0,2536,2538,7,18,0,0,2537,2539,3,978,489,0,2538,
		2537,1,0,0,0,2538,2539,1,0,0,0,2539,2540,1,0,0,0,2540,2542,3,1104,552,
		0,2541,2543,7,2,0,0,2542,2541,1,0,0,0,2542,2543,1,0,0,0,2543,197,1,0,0,
		0,2544,2545,5,572,0,0,2545,2556,3,1078,539,0,2546,2553,3,192,96,0,2547,
		2549,5,773,0,0,2548,2547,1,0,0,0,2548,2549,1,0,0,0,2549,2550,1,0,0,0,2550,
		2552,3,192,96,0,2551,2548,1,0,0,0,2552,2555,1,0,0,0,2553,2551,1,0,0,0,
		2553,2554,1,0,0,0,2554,2557,1,0,0,0,2555,2553,1,0,0,0,2556,2546,1,0,0,
		0,2556,2557,1,0,0,0,2557,199,1,0,0,0,2558,2560,5,594,0,0,2559,2561,3,978,
		489,0,2560,2559,1,0,0,0,2560,2561,1,0,0,0,2561,2562,1,0,0,0,2562,2563,
		3,1070,535,0,2563,201,1,0,0,0,2564,2566,5,636,0,0,2565,2567,3,978,489,
		0,2566,2565,1,0,0,0,2566,2567,1,0,0,0,2567,2568,1,0,0,0,2568,2570,3,992,
		496,0,2569,2571,7,2,0,0,2570,2569,1,0,0,0,2570,2571,1,0,0,0,2571,203,1,
		0,0,0,2572,2574,5,659,0,0,2573,2575,3,978,489,0,2574,2573,1,0,0,0,2574,
		2575,1,0,0,0,2575,2576,1,0,0,0,2576,2577,3,560,280,0,2577,205,1,0,0,0,
		2578,2579,5,523,0,0,2579,2580,5,718,0,0,2580,2582,5,710,0,0,2581,2583,
		3,978,489,0,2582,2581,1,0,0,0,2582,2583,1,0,0,0,2583,2584,1,0,0,0,2584,
		2585,3,1146,573,0,2585,207,1,0,0,0,2586,2587,5,605,0,0,2587,2588,5,572,
		0,0,2588,2590,3,1078,539,0,2589,2591,3,58,29,0,2590,2589,1,0,0,0,2590,
		2591,1,0,0,0,2591,209,1,0,0,0,2592,2593,5,453,0,0,2593,2594,7,18,0,0,2594,
		2599,3,212,106,0,2595,2596,5,773,0,0,2596,2598,3,212,106,0,2597,2595,1,
		0,0,0,2598,2601,1,0,0,0,2599,2597,1,0,0,0,2599,2600,1,0,0,0,2600,211,1,
		0,0,0,2601,2599,1,0,0,0,2602,2603,3,1102,551,0,2603,2604,5,590,0,0,2604,
		2605,3,1096,548,0,2605,213,1,0,0,0,2606,2608,5,597,0,0,2607,2609,5,574,
		0,0,2608,2607,1,0,0,0,2608,2609,1,0,0,0,2609,2610,1,0,0,0,2610,2611,3,
		1102,551,0,2611,215,1,0,0,0,2612,2613,5,234,0,0,2613,2614,5,574,0,0,2614,
		2615,5,203,0,0,2615,2616,3,1164,582,0,2616,217,1,0,0,0,2617,2618,5,48,
		0,0,2618,2624,3,1062,531,0,2619,2621,5,776,0,0,2620,2622,3,756,378,0,2621,
		2620,1,0,0,0,2621,2622,1,0,0,0,2622,2623,1,0,0,0,2623,2625,5,777,0,0,2624,
		2619,1,0,0,0,2624,2625,1,0,0,0,2625,219,1,0,0,0,2626,2627,4,110,38,0,2627,
		2629,3,320,160,0,2628,2626,1,0,0,0,2628,2629,1,0,0,0,2629,2630,1,0,0,0,
		2630,2634,5,133,0,0,2631,2633,3,224,112,0,2632,2631,1,0,0,0,2633,2636,
		1,0,0,0,2634,2632,1,0,0,0,2634,2635,1,0,0,0,2635,2669,1,0,0,0,2636,2634,
		1,0,0,0,2637,2661,5,203,0,0,2638,2639,3,1106,553,0,2639,2640,5,621,0,0,
		2640,2642,3,334,167,0,2641,2643,3,358,179,0,2642,2641,1,0,0,0,2642,2643,
		1,0,0,0,2643,2662,1,0,0,0,2644,2647,3,1102,551,0,2645,2646,4,110,39,0,
		2646,2648,3,398,199,0,2647,2645,1,0,0,0,2647,2648,1,0,0,0,2648,2650,1,
		0,0,0,2649,2651,3,222,111,0,2650,2649,1,0,0,0,2650,2651,1,0,0,0,2651,2653,
		1,0,0,0,2652,2654,3,358,179,0,2653,2652,1,0,0,0,2653,2654,1,0,0,0,2654,
		2656,1,0,0,0,2655,2657,3,328,164,0,2656,2655,1,0,0,0,2656,2657,1,0,0,0,
		2657,2659,1,0,0,0,2658,2660,3,286,143,0,2659,2658,1,0,0,0,2659,2660,1,
		0,0,0,2660,2662,1,0,0,0,2661,2638,1,0,0,0,2661,2644,1,0,0,0,2662,2670,
		1,0,0,0,2663,2664,3,1106,553,0,2664,2665,5,203,0,0,2665,2667,3,334,167,
		0,2666,2668,3,358,179,0,2667,2666,1,0,0,0,2667,2668,1,0,0,0,2668,2670,
		1,0,0,0,2669,2637,1,0,0,0,2669,2663,1,0,0,0,2670,221,1,0,0,0,2671,2672,
		4,111,40,0,2672,2673,5,405,0,0,2673,2674,5,776,0,0,2674,2675,3,1130,565,
		0,2675,2676,5,777,0,0,2676,223,1,0,0,0,2677,2678,7,19,0,0,2678,225,1,0,
		0,0,2679,2684,5,147,0,0,2680,2681,4,113,41,0,2681,2685,3,756,378,0,2682,
		2683,4,113,42,0,2683,2685,3,352,176,0,2684,2680,1,0,0,0,2684,2682,1,0,
		0,0,2685,227,1,0,0,0,2686,2704,5,219,0,0,2687,2688,3,1102,551,0,2688,2690,
		5,387,0,0,2689,2691,3,398,199,0,2690,2689,1,0,0,0,2690,2691,1,0,0,0,2691,
		2705,1,0,0,0,2692,2702,3,1128,564,0,2693,2703,5,66,0,0,2694,2695,5,435,
		0,0,2695,2697,3,230,115,0,2696,2698,3,358,179,0,2697,2696,1,0,0,0,2697,
		2698,1,0,0,0,2698,2700,1,0,0,0,2699,2701,3,284,142,0,2700,2699,1,0,0,0,
		2700,2701,1,0,0,0,2701,2703,1,0,0,0,2702,2693,1,0,0,0,2702,2694,1,0,0,
		0,2703,2705,1,0,0,0,2704,2687,1,0,0,0,2704,2692,1,0,0,0,2705,229,1,0,0,
		0,2706,2717,7,20,0,0,2707,2714,3,1128,564,0,2708,2715,7,21,0,0,2709,2710,
		7,22,0,0,2710,2711,5,776,0,0,2711,2712,3,246,123,0,2712,2713,5,777,0,0,
		2713,2715,1,0,0,0,2714,2708,1,0,0,0,2714,2709,1,0,0,0,2715,2717,1,0,0,
		0,2716,2706,1,0,0,0,2716,2707,1,0,0,0,2717,231,1,0,0,0,2718,2720,5,242,
		0,0,2719,2721,3,234,117,0,2720,2719,1,0,0,0,2720,2721,1,0,0,0,2721,2723,
		1,0,0,0,2722,2724,5,232,0,0,2723,2722,1,0,0,0,2723,2724,1,0,0,0,2724,2726,
		1,0,0,0,2725,2727,5,248,0,0,2726,2725,1,0,0,0,2726,2727,1,0,0,0,2727,2728,
		1,0,0,0,2728,2730,3,1102,551,0,2729,2731,3,1036,518,0,2730,2729,1,0,0,
		0,2730,2731,1,0,0,0,2731,2744,1,0,0,0,2732,2735,3,236,118,0,2733,2734,
		4,116,43,0,2734,2736,3,248,124,0,2735,2733,1,0,0,0,2735,2736,1,0,0,0,2736,
		2745,1,0,0,0,2737,2738,5,506,0,0,2738,2741,3,994,497,0,2739,2740,4,116,
		44,0,2740,2742,3,248,124,0,2741,2739,1,0,0,0,2741,2742,1,0,0,0,2742,2745,
		1,0,0,0,2743,2745,3,242,121,0,2744,2732,1,0,0,0,2744,2737,1,0,0,0,2744,
		2743,1,0,0,0,2745,2747,1,0,0,0,2746,2748,3,250,125,0,2747,2746,1,0,0,0,
		2747,2748,1,0,0,0,2748,233,1,0,0,0,2749,2750,7,23,0,0,2750,235,1,0,0,0,
		2751,2753,5,776,0,0,2752,2754,3,238,119,0,2753,2752,1,0,0,0,2753,2754,
		1,0,0,0,2754,2755,1,0,0,0,2755,2757,5,777,0,0,2756,2751,1,0,0,0,2756,2757,
		1,0,0,0,2757,2758,1,0,0,0,2758,2759,3,240,120,0,2759,237,1,0,0,0,2760,
		2765,3,1048,524,0,2761,2762,5,773,0,0,2762,2764,3,1048,524,0,2763,2761,
		1,0,0,0,2764,2767,1,0,0,0,2765,2763,1,0,0,0,2765,2766,1,0,0,0,2766,239,
		1,0,0,0,2767,2765,1,0,0,0,2768,2769,7,24,0,0,2769,2770,3,244,122,0,2770,
		241,1,0,0,0,2771,2779,3,90,45,0,2772,2774,5,776,0,0,2773,2775,3,238,119,
		0,2774,2773,1,0,0,0,2774,2775,1,0,0,0,2775,2776,1,0,0,0,2776,2777,5,777,
		0,0,2777,2779,3,90,45,0,2778,2771,1,0,0,0,2778,2772,1,0,0,0,2779,243,1,
		0,0,0,2780,2782,5,776,0,0,2781,2783,3,246,123,0,2782,2781,1,0,0,0,2782,
		2783,1,0,0,0,2783,2784,1,0,0,0,2784,2793,5,777,0,0,2785,2786,5,773,0,0,
		2786,2788,5,776,0,0,2787,2789,3,246,123,0,2788,2787,1,0,0,0,2788,2789,
		1,0,0,0,2789,2790,1,0,0,0,2790,2792,5,777,0,0,2791,2785,1,0,0,0,2792,2795,
		1,0,0,0,2793,2791,1,0,0,0,2793,2794,1,0,0,0,2794,245,1,0,0,0,2795,2793,
		1,0,0,0,2796,2799,3,676,338,0,2797,2799,5,128,0,0,2798,2796,1,0,0,0,2798,
		2797,1,0,0,0,2799,2807,1,0,0,0,2800,2803,5,773,0,0,2801,2804,3,676,338,
		0,2802,2804,5,128,0,0,2803,2801,1,0,0,0,2803,2802,1,0,0,0,2804,2806,1,
		0,0,0,2805,2800,1,0,0,0,2806,2809,1,0,0,0,2807,2805,1,0,0,0,2807,2808,
		1,0,0,0,2808,247,1,0,0,0,2809,2807,1,0,0,0,2810,2811,5,17,0,0,2811,2813,
		3,1128,564,0,2812,2814,3,1044,522,0,2813,2812,1,0,0,0,2813,2814,1,0,0,
		0,2814,249,1,0,0,0,2815,2816,5,383,0,0,2816,2817,5,151,0,0,2817,2818,5,
		265,0,0,2818,2819,5,614,0,0,2819,2820,3,994,497,0,2820,251,1,0,0,0,2821,
		2822,5,281,0,0,2822,2824,3,254,127,0,2823,2825,7,25,0,0,2824,2823,1,0,
		0,0,2824,2825,1,0,0,0,2825,2827,1,0,0,0,2826,2828,5,284,0,0,2827,2826,
		1,0,0,0,2827,2828,1,0,0,0,2828,2829,1,0,0,0,2829,2830,5,237,0,0,2830,2832,
		3,1160,580,0,2831,2833,7,8,0,0,2832,2831,1,0,0,0,2832,2833,1,0,0,0,2833,
		2834,1,0,0,0,2834,2835,5,248,0,0,2835,2836,5,574,0,0,2836,2838,3,1102,
		551,0,2837,2839,3,1036,518,0,2838,2837,1,0,0,0,2838,2839,1,0,0,0,2839,
		2841,1,0,0,0,2840,2842,3,998,499,0,2841,2840,1,0,0,0,2841,2842,1,0,0,0,
		2842,2844,1,0,0,0,2843,2845,3,256,128,0,2844,2843,1,0,0,0,2844,2845,1,
		0,0,0,2845,2847,1,0,0,0,2846,2848,3,1000,500,0,2847,2846,1,0,0,0,2847,
		2848,1,0,0,0,2848,2850,1,0,0,0,2849,2851,3,1004,502,0,2850,2849,1,0,0,
		0,2850,2851,1,0,0,0,2851,2852,1,0,0,0,2852,2853,3,258,129,0,2853,253,1,
		0,0,0,2854,2855,7,26,0,0,2855,255,1,0,0,0,2856,2857,5,484,0,0,2857,2858,
		5,230,0,0,2858,2859,5,45,0,0,2859,2860,3,1156,578,0,2860,257,1,0,0,0,2861,
		2862,5,232,0,0,2862,2863,5,747,0,0,2863,2865,7,27,0,0,2864,2861,1,0,0,
		0,2864,2865,1,0,0,0,2865,2867,1,0,0,0,2866,2868,3,260,130,0,2867,2866,
		1,0,0,0,2867,2868,1,0,0,0,2868,2871,1,0,0,0,2869,2870,5,506,0,0,2870,2872,
		3,994,497,0,2871,2869,1,0,0,0,2871,2872,1,0,0,0,2872,259,1,0,0,0,2873,
		2875,5,776,0,0,2874,2876,3,262,131,0,2875,2874,1,0,0,0,2875,2876,1,0,0,
		0,2876,2877,1,0,0,0,2877,2878,5,777,0,0,2878,261,1,0,0,0,2879,2882,3,1046,
		523,0,2880,2882,3,742,371,0,2881,2879,1,0,0,0,2881,2880,1,0,0,0,2882,2890,
		1,0,0,0,2883,2886,5,773,0,0,2884,2887,3,1046,523,0,2885,2887,3,742,371,
		0,2886,2884,1,0,0,0,2886,2885,1,0,0,0,2887,2889,1,0,0,0,2888,2883,1,0,
		0,0,2889,2892,1,0,0,0,2890,2888,1,0,0,0,2890,2891,1,0,0,0,2891,263,1,0,
		0,0,2892,2890,1,0,0,0,2893,2895,5,458,0,0,2894,2896,7,28,0,0,2895,2894,
		1,0,0,0,2895,2896,1,0,0,0,2896,2898,1,0,0,0,2897,2899,5,248,0,0,2898,2897,
		1,0,0,0,2898,2899,1,0,0,0,2899,2900,1,0,0,0,2900,2902,3,1102,551,0,2901,
		2903,3,1036,518,0,2902,2901,1,0,0,0,2902,2903,1,0,0,0,2903,2908,1,0,0,
		0,2904,2909,3,236,118,0,2905,2906,5,506,0,0,2906,2909,3,994,497,0,2907,
		2909,3,242,121,0,2908,2904,1,0,0,0,2908,2905,1,0,0,0,2908,2907,1,0,0,0,
		2909,265,1,0,0,0,2910,2912,3,270,135,0,2911,2913,3,344,172,0,2912,2911,
		1,0,0,0,2912,2913,1,0,0,0,2913,2917,1,0,0,0,2914,2917,3,274,137,0,2915,
		2917,3,268,134,0,2916,2910,1,0,0,0,2916,2914,1,0,0,0,2916,2915,1,0,0,0,
		2917,267,1,0,0,0,2918,2919,5,776,0,0,2919,2920,3,268,134,0,2920,2921,5,
		777,0,0,2921,2931,1,0,0,0,2922,2923,3,270,135,0,2923,2925,3,292,146,0,
		2924,2926,3,344,172,0,2925,2924,1,0,0,0,2925,2926,1,0,0,0,2926,2931,1,
		0,0,0,2927,2928,3,344,172,0,2928,2929,3,292,146,0,2929,2931,1,0,0,0,2930,
		2918,1,0,0,0,2930,2922,1,0,0,0,2930,2927,1,0,0,0,2931,269,1,0,0,0,2932,
		2933,4,135,45,0,2933,2935,3,320,160,0,2934,2932,1,0,0,0,2934,2935,1,0,
		0,0,2935,2950,1,0,0,0,2936,2938,3,272,136,0,2937,2939,3,328,164,0,2938,
		2937,1,0,0,0,2938,2939,1,0,0,0,2939,2941,1,0,0,0,2940,2942,3,284,142,0,
		2941,2940,1,0,0,0,2941,2942,1,0,0,0,2942,2951,1,0,0,0,2943,2945,3,274,
		137,0,2944,2946,3,328,164,0,2945,2944,1,0,0,0,2945,2946,1,0,0,0,2946,2948,
		1,0,0,0,2947,2949,3,284,142,0,2948,2947,1,0,0,0,2948,2949,1,0,0,0,2949,
		2951,1,0,0,0,2950,2936,1,0,0,0,2950,2943,1,0,0,0,2951,2954,1,0,0,0,2952,
		2953,4,135,46,0,2953,2955,3,294,147,0,2954,2952,1,0,0,0,2954,2955,1,0,
		0,0,2955,271,1,0,0,0,2956,2967,3,276,138,0,2957,2958,3,274,137,0,2958,
		2960,5,608,0,0,2959,2961,3,396,198,0,2960,2959,1,0,0,0,2960,2961,1,0,0,
		0,2961,2964,1,0,0,0,2962,2965,3,276,138,0,2963,2965,3,274,137,0,2964,2962,
		1,0,0,0,2964,2963,1,0,0,0,2965,2967,1,0,0,0,2966,2956,1,0,0,0,2966,2957,
		1,0,0,0,2967,2978,1,0,0,0,2968,2970,5,608,0,0,2969,2971,3,396,198,0,2970,
		2969,1,0,0,0,2970,2971,1,0,0,0,2971,2974,1,0,0,0,2972,2975,3,276,138,0,
		2973,2975,3,274,137,0,2974,2972,1,0,0,0,2974,2973,1,0,0,0,2975,2977,1,
		0,0,0,2976,2968,1,0,0,0,2977,2980,1,0,0,0,2978,2976,1,0,0,0,2978,2979,
		1,0,0,0,2979,273,1,0,0,0,2980,2978,1,0,0,0,2981,2987,5,776,0,0,2982,2988,
		3,274,137,0,2983,2985,3,270,135,0,2984,2986,3,344,172,0,2985,2984,1,0,
		0,0,2985,2986,1,0,0,0,2986,2988,1,0,0,0,2987,2982,1,0,0,0,2987,2983,1,
		0,0,0,2988,2989,1,0,0,0,2989,2990,5,777,0,0,2990,275,1,0,0,0,2991,2997,
		3,278,139,0,2992,2993,4,138,47,0,2993,2997,3,336,168,0,2994,2995,4,138,
		48,0,2995,2997,3,338,169,0,2996,2991,1,0,0,0,2996,2992,1,0,0,0,2996,2994,
		1,0,0,0,2997,277,1,0,0,0,2998,3002,5,497,0,0,2999,3001,3,342,171,0,3000,
		2999,1,0,0,0,3001,3004,1,0,0,0,3002,3000,1,0,0,0,3002,3003,1,0,0,0,3003,
		3005,1,0,0,0,3004,3002,1,0,0,0,3005,3007,3,352,176,0,3006,3008,3,292,146,
		0,3007,3006,1,0,0,0,3007,3008,1,0,0,0,3008,3010,1,0,0,0,3009,3011,3,332,
		166,0,3010,3009,1,0,0,0,3010,3011,1,0,0,0,3011,3013,1,0,0,0,3012,3014,
		3,358,179,0,3013,3012,1,0,0,0,3013,3014,1,0,0,0,3014,3016,1,0,0,0,3015,
		3017,3,324,162,0,3016,3015,1,0,0,0,3016,3017,1,0,0,0,3017,3019,1,0,0,0,
		3018,3020,3,296,148,0,3019,3018,1,0,0,0,3019,3020,1,0,0,0,3020,3023,1,
		0,0,0,3021,3022,4,139,49,0,3022,3024,3,298,149,0,3023,3021,1,0,0,0,3023,
		3024,1,0,0,0,3024,279,1,0,0,0,3025,3026,3,274,137,0,3026,281,1,0,0,0,3027,
		3028,7,29,0,0,3028,283,1,0,0,0,3029,3030,5,276,0,0,3030,3031,3,288,144,
		0,3031,285,1,0,0,0,3032,3033,5,276,0,0,3033,3034,3,290,145,0,3034,287,
		1,0,0,0,3035,3038,3,290,145,0,3036,3037,7,30,0,0,3037,3039,3,290,145,0,
		3038,3036,1,0,0,0,3038,3039,1,0,0,0,3039,289,1,0,0,0,3040,3043,3,1128,
		564,0,3041,3043,7,31,0,0,3042,3040,1,0,0,0,3042,3041,1,0,0,0,3043,291,
		1,0,0,0,3044,3072,5,248,0,0,3045,3046,5,396,0,0,3046,3048,3,1154,577,0,
		3047,3049,3,998,499,0,3048,3047,1,0,0,0,3048,3049,1,0,0,0,3049,3051,1,
		0,0,0,3050,3052,3,1000,500,0,3051,3050,1,0,0,0,3051,3052,1,0,0,0,3052,
		3054,1,0,0,0,3053,3055,3,1004,502,0,3054,3053,1,0,0,0,3054,3055,1,0,0,
		0,3055,3073,1,0,0,0,3056,3057,5,150,0,0,3057,3073,3,1154,577,0,3058,3061,
		3,1180,590,0,3059,3061,3,742,371,0,3060,3058,1,0,0,0,3060,3059,1,0,0,0,
		3061,3069,1,0,0,0,3062,3065,5,773,0,0,3063,3066,3,1180,590,0,3064,3066,
		3,742,371,0,3065,3063,1,0,0,0,3065,3064,1,0,0,0,3066,3068,1,0,0,0,3067,
		3062,1,0,0,0,3068,3071,1,0,0,0,3069,3067,1,0,0,0,3069,3070,1,0,0,0,3070,
		3073,1,0,0,0,3071,3069,1,0,0,0,3072,3045,1,0,0,0,3072,3056,1,0,0,0,3072,
		3060,1,0,0,0,3073,293,1,0,0,0,3074,3075,5,422,0,0,3075,3076,5,13,0,0,3076,
		3082,5,776,0,0,3077,3080,5,747,0,0,3078,3079,5,773,0,0,3079,3081,5,747,
		0,0,3080,3078,1,0,0,0,3080,3081,1,0,0,0,3081,3083,1,0,0,0,3082,3077,1,
		0,0,0,3082,3083,1,0,0,0,3083,3084,1,0,0,0,3084,3085,5,777,0,0,3085,295,
		1,0,0,0,3086,3087,5,221,0,0,3087,3088,3,676,338,0,3088,297,1,0,0,0,3089,
		3090,5,699,0,0,3090,3095,3,300,150,0,3091,3092,5,773,0,0,3092,3094,3,300,
		150,0,3093,3091,1,0,0,0,3094,3097,1,0,0,0,3095,3093,1,0,0,0,3095,3096,
		1,0,0,0,3096,299,1,0,0,0,3097,3095,1,0,0,0,3098,3099,3,1124,562,0,3099,
		3100,5,17,0,0,3100,3101,3,302,151,0,3101,301,1,0,0,0,3102,3103,5,776,0,
		0,3103,3104,3,304,152,0,3104,3105,5,777,0,0,3105,303,1,0,0,0,3106,3108,
		3,1124,562,0,3107,3106,1,0,0,0,3107,3108,1,0,0,0,3108,3112,1,0,0,0,3109,
		3110,5,405,0,0,3110,3111,5,45,0,0,3111,3113,3,774,387,0,3112,3109,1,0,
		0,0,3112,3113,1,0,0,0,3113,3115,1,0,0,0,3114,3116,3,328,164,0,3115,3114,
		1,0,0,0,3115,3116,1,0,0,0,3116,3118,1,0,0,0,3117,3119,3,306,153,0,3118,
		3117,1,0,0,0,3118,3119,1,0,0,0,3119,305,1,0,0,0,3120,3121,3,308,154,0,
		3121,3123,3,310,155,0,3122,3124,3,318,159,0,3123,3122,1,0,0,0,3123,3124,
		1,0,0,0,3124,307,1,0,0,0,3125,3126,7,32,0,0,3126,309,1,0,0,0,3127,3130,
		3,312,156,0,3128,3130,3,314,157,0,3129,3127,1,0,0,0,3129,3128,1,0,0,0,
		3130,311,1,0,0,0,3131,3132,5,698,0,0,3132,3146,5,693,0,0,3133,3134,3,1144,
		572,0,3134,3135,5,693,0,0,3135,3146,1,0,0,0,3136,3137,5,787,0,0,3137,3146,
		5,693,0,0,3138,3139,5,247,0,0,3139,3140,3,676,338,0,3140,3141,3,764,382,
		0,3141,3142,5,693,0,0,3142,3146,1,0,0,0,3143,3144,5,101,0,0,3144,3146,
		5,487,0,0,3145,3131,1,0,0,0,3145,3133,1,0,0,0,3145,3136,1,0,0,0,3145,3138,
		1,0,0,0,3145,3143,1,0,0,0,3146,313,1,0,0,0,3147,3148,5,30,0,0,3148,3149,
		3,316,158,0,3149,3150,5,15,0,0,3150,3151,3,316,158,0,3151,315,1,0,0,0,
		3152,3166,3,312,156,0,3153,3154,5,698,0,0,3154,3166,5,682,0,0,3155,3156,
		3,1144,572,0,3156,3157,5,682,0,0,3157,3166,1,0,0,0,3158,3159,5,787,0,0,
		3159,3166,5,682,0,0,3160,3161,5,247,0,0,3161,3162,3,676,338,0,3162,3163,
		3,764,382,0,3163,3164,5,682,0,0,3164,3166,1,0,0,0,3165,3152,1,0,0,0,3165,
		3153,1,0,0,0,3165,3155,1,0,0,0,3165,3158,1,0,0,0,3165,3160,1,0,0,0,3166,
		317,1,0,0,0,3167,3174,5,680,0,0,3168,3169,5,101,0,0,3169,3175,5,487,0,
		0,3170,3175,5,217,0,0,3171,3175,5,697,0,0,3172,3173,5,373,0,0,3173,3175,
		5,690,0,0,3174,3168,1,0,0,0,3174,3170,1,0,0,0,3174,3171,1,0,0,0,3174,3172,
		1,0,0,0,3175,319,1,0,0,0,3176,3178,5,645,0,0,3177,3179,5,665,0,0,3178,
		3177,1,0,0,0,3178,3179,1,0,0,0,3179,3180,1,0,0,0,3180,3185,3,322,161,0,
		3181,3182,5,773,0,0,3182,3184,3,322,161,0,3183,3181,1,0,0,0,3184,3187,
		1,0,0,0,3185,3183,1,0,0,0,3185,3186,1,0,0,0,3186,321,1,0,0,0,3187,3185,
		1,0,0,0,3188,3190,3,1128,564,0,3189,3191,3,1044,522,0,3190,3189,1,0,0,
		0,3190,3191,1,0,0,0,3191,3192,1,0,0,0,3192,3193,5,17,0,0,3193,3194,3,280,
		140,0,3194,323,1,0,0,0,3195,3196,5,217,0,0,3196,3197,5,45,0,0,3197,3199,
		3,774,387,0,3198,3200,3,326,163,0,3199,3198,1,0,0,0,3199,3200,1,0,0,0,
		3200,325,1,0,0,0,3201,3202,5,645,0,0,3202,3207,5,481,0,0,3203,3204,4,163,
		50,0,3204,3205,5,645,0,0,3205,3207,5,99,0,0,3206,3201,1,0,0,0,3206,3203,
		1,0,0,0,3207,327,1,0,0,0,3208,3209,5,393,0,0,3209,3210,5,45,0,0,3210,3211,
		3,774,387,0,3211,329,1,0,0,0,3212,3213,7,33,0,0,3213,331,1,0,0,0,3214,
		3217,5,203,0,0,3215,3218,5,149,0,0,3216,3218,3,334,167,0,3217,3215,1,0,
		0,0,3217,3216,1,0,0,0,3218,333,1,0,0,0,3219,3224,3,360,180,0,3220,3221,
		5,773,0,0,3221,3223,3,360,180,0,3222,3220,1,0,0,0,3223,3226,1,0,0,0,3224,
		3222,1,0,0,0,3224,3225,1,0,0,0,3225,335,1,0,0,0,3226,3224,1,0,0,0,3227,
		3228,5,626,0,0,3228,3233,3,340,170,0,3229,3230,5,773,0,0,3230,3232,3,340,
		170,0,3231,3229,1,0,0,0,3232,3235,1,0,0,0,3233,3231,1,0,0,0,3233,3234,
		1,0,0,0,3234,337,1,0,0,0,3235,3233,1,0,0,0,3236,3237,5,574,0,0,3237,3238,
		3,1102,551,0,3238,339,1,0,0,0,3239,3240,5,487,0,0,3240,3242,5,776,0,0,
		3241,3243,3,246,123,0,3242,3241,1,0,0,0,3242,3243,1,0,0,0,3243,3244,1,
		0,0,0,3244,3245,5,777,0,0,3245,341,1,0,0,0,3246,3255,3,282,141,0,3247,
		3255,5,535,0,0,3248,3249,4,171,51,0,3249,3255,5,533,0,0,3250,3251,4,171,
		52,0,3251,3252,5,325,0,0,3252,3253,5,750,0,0,3253,3255,3,1142,571,0,3254,
		3246,1,0,0,0,3254,3247,1,0,0,0,3254,3248,1,0,0,0,3254,3250,1,0,0,0,3255,
		343,1,0,0,0,3256,3258,3,346,173,0,3257,3256,1,0,0,0,3258,3259,1,0,0,0,
		3259,3257,1,0,0,0,3259,3260,1,0,0,0,3260,345,1,0,0,0,3261,3262,5,200,0,
		0,3262,3266,3,348,174,0,3263,3264,4,173,53,0,3264,3265,5,668,0,0,3265,
		3267,3,1106,553,0,3266,3263,1,0,0,0,3266,3267,1,0,0,0,3267,3270,1,0,0,
		0,3268,3269,4,173,54,0,3269,3271,3,350,175,0,3270,3268,1,0,0,0,3270,3271,
		1,0,0,0,3271,3277,1,0,0,0,3272,3273,5,287,0,0,3273,3274,5,251,0,0,3274,
		3275,5,508,0,0,3275,3277,5,346,0,0,3276,3261,1,0,0,0,3276,3272,1,0,0,0,
		3277,347,1,0,0,0,3278,3282,5,614,0,0,3279,3280,4,174,55,0,3280,3282,5,
		508,0,0,3281,3278,1,0,0,0,3281,3279,1,0,0,0,3282,349,1,0,0,0,3283,3284,
		5,669,0,0,3284,3287,5,670,0,0,3285,3287,5,671,0,0,3286,3283,1,0,0,0,3286,
		3285,1,0,0,0,3287,351,1,0,0,0,3288,3291,3,354,177,0,3289,3291,5,760,0,
		0,3290,3288,1,0,0,0,3290,3289,1,0,0,0,3291,3296,1,0,0,0,3292,3293,5,773,
		0,0,3293,3295,3,354,177,0,3294,3292,1,0,0,0,3295,3298,1,0,0,0,3296,3294,
		1,0,0,0,3296,3297,1,0,0,0,3297,353,1,0,0,0,3298,3296,1,0,0,0,3299,3305,
		3,1054,527,0,3300,3302,3,676,338,0,3301,3303,3,356,178,0,3302,3301,1,0,
		0,0,3302,3303,1,0,0,0,3303,3305,1,0,0,0,3304,3299,1,0,0,0,3304,3300,1,
		0,0,0,3305,355,1,0,0,0,3306,3308,5,17,0,0,3307,3306,1,0,0,0,3307,3308,
		1,0,0,0,3308,3311,1,0,0,0,3309,3312,3,1128,564,0,3310,3312,3,1154,577,
		0,3311,3309,1,0,0,0,3311,3310,1,0,0,0,3312,357,1,0,0,0,3313,3314,5,643,
		0,0,3314,3315,3,676,338,0,3315,359,1,0,0,0,3316,3327,3,372,186,0,3317,
		3321,5,778,0,0,3318,3319,4,180,56,0,3319,3322,3,1128,564,0,3320,3322,5,
		732,0,0,3321,3318,1,0,0,0,3321,3320,1,0,0,0,3322,3323,1,0,0,0,3323,3324,
		3,362,181,0,3324,3325,5,779,0,0,3325,3327,1,0,0,0,3326,3316,1,0,0,0,3326,
		3317,1,0,0,0,3327,3331,1,0,0,0,3328,3330,3,364,182,0,3329,3328,1,0,0,0,
		3330,3333,1,0,0,0,3331,3329,1,0,0,0,3331,3332,1,0,0,0,3332,361,1,0,0,0,
		3333,3331,1,0,0,0,3334,3338,3,372,186,0,3335,3337,3,364,182,0,3336,3335,
		1,0,0,0,3337,3340,1,0,0,0,3338,3336,1,0,0,0,3338,3339,1,0,0,0,3339,363,
		1,0,0,0,3340,3338,1,0,0,0,3341,3342,3,368,184,0,3342,3347,3,360,180,0,
		3343,3344,5,383,0,0,3344,3348,3,676,338,0,3345,3346,5,621,0,0,3346,3348,
		3,1132,566,0,3347,3343,1,0,0,0,3347,3345,1,0,0,0,3347,3348,1,0,0,0,3348,
		3361,1,0,0,0,3349,3350,3,370,185,0,3350,3355,3,360,180,0,3351,3352,5,383,
		0,0,3352,3356,3,676,338,0,3353,3354,5,621,0,0,3354,3356,3,1132,566,0,3355,
		3351,1,0,0,0,3355,3353,1,0,0,0,3356,3361,1,0,0,0,3357,3358,3,366,183,0,
		3358,3359,3,372,186,0,3359,3361,1,0,0,0,3360,3341,1,0,0,0,3360,3349,1,
		0,0,0,3360,3357,1,0,0,0,3361,365,1,0,0,0,3362,3364,5,359,0,0,3363,3365,
		5,239,0,0,3364,3363,1,0,0,0,3364,3365,1,0,0,0,3365,3366,1,0,0,0,3366,3374,
		5,261,0,0,3367,3368,5,359,0,0,3368,3370,7,34,0,0,3369,3371,5,395,0,0,3370,
		3369,1,0,0,0,3370,3371,1,0,0,0,3371,3372,1,0,0,0,3372,3374,5,261,0,0,3373,
		3362,1,0,0,0,3373,3367,1,0,0,0,3374,367,1,0,0,0,3375,3377,7,35,0,0,3376,
		3375,1,0,0,0,3376,3377,1,0,0,0,3377,3378,1,0,0,0,3378,3381,5,261,0,0,3379,
		3381,5,555,0,0,3380,3376,1,0,0,0,3380,3379,1,0,0,0,3381,369,1,0,0,0,3382,
		3384,7,34,0,0,3383,3385,5,395,0,0,3384,3383,1,0,0,0,3384,3385,1,0,0,0,
		3385,3386,1,0,0,0,3386,3387,5,261,0,0,3387,371,1,0,0,0,3388,3395,3,374,
		187,0,3389,3395,3,376,188,0,3390,3395,3,378,189,0,3391,3395,3,380,190,
		0,3392,3393,4,186,57,0,3393,3395,3,382,191,0,3394,3388,1,0,0,0,3394,3389,
		1,0,0,0,3394,3390,1,0,0,0,3394,3391,1,0,0,0,3394,3392,1,0,0,0,3395,373,
		1,0,0,0,3396,3398,3,1102,551,0,3397,3399,3,1036,518,0,3398,3397,1,0,0,
		0,3398,3399,1,0,0,0,3399,3401,1,0,0,0,3400,3402,3,398,199,0,3401,3400,
		1,0,0,0,3401,3402,1,0,0,0,3402,3404,1,0,0,0,3403,3405,3,400,200,0,3404,
		3403,1,0,0,0,3404,3405,1,0,0,0,3405,375,1,0,0,0,3406,3409,5,776,0,0,3407,
		3410,3,374,187,0,3408,3410,3,376,188,0,3409,3407,1,0,0,0,3409,3408,1,0,
		0,0,3410,3411,1,0,0,0,3411,3412,5,777,0,0,3412,377,1,0,0,0,3413,3415,3,
		280,140,0,3414,3416,3,398,199,0,3415,3414,1,0,0,0,3415,3416,1,0,0,0,3416,
		3419,1,0,0,0,3417,3418,4,189,58,0,3418,3420,3,1044,522,0,3419,3417,1,0,
		0,0,3419,3420,1,0,0,0,3420,3431,1,0,0,0,3421,3422,4,189,59,0,3422,3423,
		5,726,0,0,3423,3425,3,280,140,0,3424,3426,3,398,199,0,3425,3424,1,0,0,
		0,3425,3426,1,0,0,0,3426,3428,1,0,0,0,3427,3429,3,1044,522,0,3428,3427,
		1,0,0,0,3428,3429,1,0,0,0,3429,3431,1,0,0,0,3430,3413,1,0,0,0,3430,3421,
		1,0,0,0,3431,379,1,0,0,0,3432,3435,5,776,0,0,3433,3436,3,334,167,0,3434,
		3436,3,380,190,0,3435,3433,1,0,0,0,3435,3434,1,0,0,0,3436,3437,1,0,0,0,
		3437,3438,5,777,0,0,3438,381,1,0,0,0,3439,3440,5,701,0,0,3440,3441,5,776,
		0,0,3441,3442,3,676,338,0,3442,3443,5,773,0,0,3443,3444,3,1154,577,0,3444,
		3445,3,384,192,0,3445,3447,5,777,0,0,3446,3448,3,398,199,0,3447,3446,1,
		0,0,0,3447,3448,1,0,0,0,3448,383,1,0,0,0,3449,3450,5,71,0,0,3450,3451,
		5,776,0,0,3451,3456,3,386,193,0,3452,3453,5,773,0,0,3453,3455,3,386,193,
		0,3454,3452,1,0,0,0,3455,3458,1,0,0,0,3456,3454,1,0,0,0,3456,3457,1,0,
		0,0,3457,3459,1,0,0,0,3458,3456,1,0,0,0,3459,3460,5,777,0,0,3460,385,1,
		0,0,0,3461,3462,3,1128,564,0,3462,3463,5,200,0,0,3463,3464,5,703,0,0,3464,
		3485,1,0,0,0,3465,3466,3,1128,564,0,3466,3469,3,916,458,0,3467,3468,4,
		193,60,0,3468,3470,3,986,493,0,3469,3467,1,0,0,0,3469,3470,1,0,0,0,3470,
		3472,1,0,0,0,3471,3473,5,174,0,0,3472,3471,1,0,0,0,3472,3473,1,0,0,0,3473,
		3474,1,0,0,0,3474,3475,5,704,0,0,3475,3477,3,1154,577,0,3476,3478,3,388,
		194,0,3477,3476,1,0,0,0,3477,3478,1,0,0,0,3478,3485,1,0,0,0,3479,3480,
		5,702,0,0,3480,3481,5,704,0,0,3481,3482,3,1154,577,0,3482,3483,3,384,192,
		0,3483,3485,1,0,0,0,3484,3461,1,0,0,0,3484,3465,1,0,0,0,3484,3479,1,0,
		0,0,3485,387,1,0,0,0,3486,3488,3,390,195,0,3487,3489,3,392,196,0,3488,
		3487,1,0,0,0,3488,3489,1,0,0,0,3489,3495,1,0,0,0,3490,3492,3,392,196,0,
		3491,3493,3,390,195,0,3492,3491,1,0,0,0,3492,3493,1,0,0,0,3493,3495,1,
		0,0,0,3494,3486,1,0,0,0,3494,3490,1,0,0,0,3495,389,1,0,0,0,3496,3497,3,
		394,197,0,3497,3498,5,383,0,0,3498,3499,5,700,0,0,3499,391,1,0,0,0,3500,
		3501,3,394,197,0,3501,3502,5,383,0,0,3502,3503,5,165,0,0,3503,393,1,0,
		0,0,3504,3509,5,165,0,0,3505,3509,5,376,0,0,3506,3507,5,128,0,0,3507,3509,
		3,1154,577,0,3508,3504,1,0,0,0,3508,3505,1,0,0,0,3508,3506,1,0,0,0,3509,
		395,1,0,0,0,3510,3511,7,36,0,0,3511,397,1,0,0,0,3512,3516,5,17,0,0,3513,
		3514,4,199,61,0,3514,3516,5,750,0,0,3515,3512,1,0,0,0,3515,3513,1,0,0,
		0,3515,3516,1,0,0,0,3516,3517,1,0,0,0,3517,3518,3,1128,564,0,3518,399,
		1,0,0,0,3519,3524,3,402,201,0,3520,3521,5,773,0,0,3521,3523,3,402,201,
		0,3522,3520,1,0,0,0,3523,3526,1,0,0,0,3524,3522,1,0,0,0,3524,3525,1,0,
		0,0,3525,401,1,0,0,0,3526,3524,1,0,0,0,3527,3528,3,404,202,0,3528,3530,
		3,406,203,0,3529,3531,3,410,205,0,3530,3529,1,0,0,0,3530,3531,1,0,0,0,
		3531,3532,1,0,0,0,3532,3533,5,776,0,0,3533,3534,3,412,206,0,3534,3535,
		5,777,0,0,3535,3548,1,0,0,0,3536,3537,5,620,0,0,3537,3539,3,406,203,0,
		3538,3540,3,410,205,0,3539,3538,1,0,0,0,3539,3540,1,0,0,0,3540,3541,1,
		0,0,0,3541,3543,5,776,0,0,3542,3544,3,412,206,0,3543,3542,1,0,0,0,3543,
		3544,1,0,0,0,3544,3545,1,0,0,0,3545,3546,5,777,0,0,3546,3548,1,0,0,0,3547,
		3527,1,0,0,0,3547,3536,1,0,0,0,3548,403,1,0,0,0,3549,3550,7,37,0,0,3550,
		405,1,0,0,0,3551,3552,7,38,0,0,3552,407,1,0,0,0,3553,3554,5,420,0,0,3554,
		3560,5,265,0,0,3555,3557,5,609,0,0,3556,3558,3,406,203,0,3557,3556,1,0,
		0,0,3557,3558,1,0,0,0,3558,3560,1,0,0,0,3559,3553,1,0,0,0,3559,3555,1,
		0,0,0,3560,409,1,0,0,0,3561,3567,5,200,0,0,3562,3568,5,261,0,0,3563,3564,
		5,393,0,0,3564,3568,5,45,0,0,3565,3566,5,217,0,0,3566,3568,5,45,0,0,3567,
		3562,1,0,0,0,3567,3563,1,0,0,0,3567,3565,1,0,0,0,3568,411,1,0,0,0,3569,
		3574,3,414,207,0,3570,3571,5,773,0,0,3571,3573,3,414,207,0,3572,3570,1,
		0,0,0,3573,3576,1,0,0,0,3574,3572,1,0,0,0,3574,3575,1,0,0,0,3575,413,1,
		0,0,0,3576,3574,1,0,0,0,3577,3580,3,1128,564,0,3578,3580,5,420,0,0,3579,
		3577,1,0,0,0,3579,3578,1,0,0,0,3580,415,1,0,0,0,3581,3582,4,208,62,0,3582,
		3584,3,320,160,0,3583,3581,1,0,0,0,3583,3584,1,0,0,0,3584,3585,1,0,0,0,
		3585,3587,5,614,0,0,3586,3588,5,295,0,0,3587,3586,1,0,0,0,3587,3588,1,
		0,0,0,3588,3590,1,0,0,0,3589,3591,5,232,0,0,3590,3589,1,0,0,0,3590,3591,
		1,0,0,0,3591,3592,1,0,0,0,3592,3593,3,334,167,0,3593,3594,5,506,0,0,3594,
		3596,3,994,497,0,3595,3597,3,358,179,0,3596,3595,1,0,0,0,3596,3597,1,0,
		0,0,3597,3599,1,0,0,0,3598,3600,3,328,164,0,3599,3598,1,0,0,0,3599,3600,
		1,0,0,0,3600,3602,1,0,0,0,3601,3603,3,286,143,0,3602,3601,1,0,0,0,3602,
		3603,1,0,0,0,3603,417,1,0,0,0,3604,3609,3,420,210,0,3605,3609,3,426,213,
		0,3606,3609,3,428,214,0,3607,3609,3,434,217,0,3608,3604,1,0,0,0,3608,3605,
		1,0,0,0,3608,3606,1,0,0,0,3608,3607,1,0,0,0,3609,419,1,0,0,0,3610,3611,
		5,543,0,0,3611,3615,5,592,0,0,3612,3614,3,424,212,0,3613,3612,1,0,0,0,
		3614,3617,1,0,0,0,3615,3613,1,0,0,0,3615,3616,1,0,0,0,3616,3636,1,0,0,
		0,3617,3615,1,0,0,0,3618,3620,5,77,0,0,3619,3621,5,647,0,0,3620,3619,1,
		0,0,0,3620,3621,1,0,0,0,3621,3627,1,0,0,0,3622,3624,5,15,0,0,3623,3625,
		5,373,0,0,3624,3623,1,0,0,0,3624,3625,1,0,0,0,3625,3626,1,0,0,0,3626,3628,
		5,54,0,0,3627,3622,1,0,0,0,3627,3628,1,0,0,0,3628,3633,1,0,0,0,3629,3631,
		5,373,0,0,3630,3629,1,0,0,0,3630,3631,1,0,0,0,3631,3632,1,0,0,0,3632,3634,
		5,450,0,0,3633,3630,1,0,0,0,3633,3634,1,0,0,0,3634,3636,1,0,0,0,3635,3610,
		1,0,0,0,3635,3618,1,0,0,0,3636,421,1,0,0,0,3637,3639,5,29,0,0,3638,3640,
		5,647,0,0,3639,3638,1,0,0,0,3639,3640,1,0,0,0,3640,423,1,0,0,0,3641,3642,
		5,645,0,0,3642,3643,5,85,0,0,3643,3648,5,517,0,0,3644,3645,4,212,63,0,
		3645,3646,5,435,0,0,3646,3648,7,39,0,0,3647,3641,1,0,0,0,3647,3644,1,0,
		0,0,3648,425,1,0,0,0,3649,3650,5,489,0,0,3650,3679,3,1128,564,0,3651,3653,
		5,480,0,0,3652,3654,5,647,0,0,3653,3652,1,0,0,0,3653,3654,1,0,0,0,3654,
		3673,1,0,0,0,3655,3657,5,590,0,0,3656,3658,5,489,0,0,3657,3656,1,0,0,0,
		3657,3658,1,0,0,0,3658,3659,1,0,0,0,3659,3674,3,1128,564,0,3660,3662,5,
		15,0,0,3661,3663,5,373,0,0,3662,3661,1,0,0,0,3662,3663,1,0,0,0,3663,3664,
		1,0,0,0,3664,3666,5,54,0,0,3665,3660,1,0,0,0,3665,3666,1,0,0,0,3666,3671,
		1,0,0,0,3667,3669,5,373,0,0,3668,3667,1,0,0,0,3668,3669,1,0,0,0,3669,3670,
		1,0,0,0,3670,3672,5,450,0,0,3671,3668,1,0,0,0,3671,3672,1,0,0,0,3672,3674,
		1,0,0,0,3673,3655,1,0,0,0,3673,3665,1,0,0,0,3674,3679,1,0,0,0,3675,3676,
		5,450,0,0,3676,3677,5,489,0,0,3677,3679,3,1128,564,0,3678,3649,1,0,0,0,
		3678,3651,1,0,0,0,3678,3675,1,0,0,0,3679,427,1,0,0,0,3680,3681,5,287,0,
		0,3681,3682,7,18,0,0,3682,3687,3,430,215,0,3683,3684,5,773,0,0,3684,3686,
		3,430,215,0,3685,3683,1,0,0,0,3686,3689,1,0,0,0,3687,3685,1,0,0,0,3687,
		3688,1,0,0,0,3688,3703,1,0,0,0,3689,3687,1,0,0,0,3690,3691,4,214,64,0,
		3691,3692,5,287,0,0,3692,3693,5,244,0,0,3693,3694,5,200,0,0,3694,3703,
		5,27,0,0,3695,3700,5,611,0,0,3696,3701,5,571,0,0,3697,3701,5,574,0,0,3698,
		3699,4,214,65,0,3699,3701,5,244,0,0,3700,3696,1,0,0,0,3700,3697,1,0,0,
		0,3700,3698,1,0,0,0,3701,3703,1,0,0,0,3702,3680,1,0,0,0,3702,3690,1,0,
		0,0,3702,3695,1,0,0,0,3703,429,1,0,0,0,3704,3706,3,1102,551,0,3705,3707,
		3,398,199,0,3706,3705,1,0,0,0,3706,3707,1,0,0,0,3707,3708,1,0,0,0,3708,
		3709,3,432,216,0,3709,431,1,0,0,0,3710,3712,5,435,0,0,3711,3713,5,284,
		0,0,3712,3711,1,0,0,0,3712,3713,1,0,0,0,3713,3719,1,0,0,0,3714,3716,5,
		295,0,0,3715,3714,1,0,0,0,3715,3716,1,0,0,0,3716,3717,1,0,0,0,3717,3719,
		5,649,0,0,3718,3710,1,0,0,0,3718,3715,1,0,0,0,3719,433,1,0,0,0,3720,3747,
		5,651,0,0,3721,3722,7,40,0,0,3722,3724,3,438,219,0,3723,3725,7,41,0,0,
		3724,3723,1,0,0,0,3724,3725,1,0,0,0,3725,3748,1,0,0,0,3726,3727,5,159,
		0,0,3727,3733,3,438,219,0,3728,3731,5,566,0,0,3729,3730,5,200,0,0,3730,
		3732,5,340,0,0,3731,3729,1,0,0,0,3731,3732,1,0,0,0,3732,3734,1,0,0,0,3733,
		3728,1,0,0,0,3733,3734,1,0,0,0,3734,3748,1,0,0,0,3735,3736,5,417,0,0,3736,
		3748,3,438,219,0,3737,3738,5,77,0,0,3738,3741,3,438,219,0,3739,3740,5,
		384,0,0,3740,3742,5,407,0,0,3741,3739,1,0,0,0,3741,3742,1,0,0,0,3742,3748,
		1,0,0,0,3743,3744,5,480,0,0,3744,3748,3,438,219,0,3745,3746,5,439,0,0,
		3746,3748,3,436,218,0,3747,3721,1,0,0,0,3747,3726,1,0,0,0,3747,3735,1,
		0,0,0,3747,3737,1,0,0,0,3747,3743,1,0,0,0,3747,3745,1,0,0,0,3748,435,1,
		0,0,0,3749,3752,4,218,66,0,3750,3751,5,94,0,0,3751,3753,5,652,0,0,3752,
		3750,1,0,0,0,3752,3753,1,0,0,0,3753,3756,1,0,0,0,3754,3756,1,0,0,0,3755,
		3749,1,0,0,0,3755,3754,1,0,0,0,3756,437,1,0,0,0,3757,3764,3,1156,578,0,
		3758,3759,5,773,0,0,3759,3762,3,1156,578,0,3760,3761,5,773,0,0,3761,3763,
		3,1140,570,0,3762,3760,1,0,0,0,3762,3763,1,0,0,0,3763,3765,1,0,0,0,3764,
		3758,1,0,0,0,3764,3765,1,0,0,0,3765,439,1,0,0,0,3766,3767,5,428,0,0,3767,
		3768,7,42,0,0,3768,3773,5,289,0,0,3769,3770,5,590,0,0,3770,3774,3,1160,
		580,0,3771,3772,5,28,0,0,3772,3774,3,676,338,0,3773,3769,1,0,0,0,3773,
		3771,1,0,0,0,3774,3800,1,0,0,0,3775,3800,3,448,224,0,3776,3777,5,468,0,
		0,3777,3782,3,442,221,0,3778,3779,5,773,0,0,3779,3781,3,442,221,0,3780,
		3778,1,0,0,0,3781,3784,1,0,0,0,3782,3780,1,0,0,0,3782,3783,1,0,0,0,3783,
		3800,1,0,0,0,3784,3782,1,0,0,0,3785,3786,4,220,67,0,3786,3787,5,468,0,
		0,3787,3791,5,658,0,0,3788,3789,3,978,489,0,3789,3790,3,1128,564,0,3790,
		3792,1,0,0,0,3791,3788,1,0,0,0,3791,3792,1,0,0,0,3792,3800,1,0,0,0,3793,
		3800,3,478,239,0,3794,3795,4,220,68,0,3795,3800,3,464,232,0,3796,3800,
		3,446,223,0,3797,3798,4,220,69,0,3798,3800,3,488,244,0,3799,3766,1,0,0,
		0,3799,3775,1,0,0,0,3799,3776,1,0,0,0,3799,3785,1,0,0,0,3799,3793,1,0,
		0,0,3799,3794,1,0,0,0,3799,3796,1,0,0,0,3799,3797,1,0,0,0,3800,441,1,0,
		0,0,3801,3803,5,316,0,0,3802,3804,3,444,222,0,3803,3802,1,0,0,0,3803,3804,
		1,0,0,0,3804,3816,1,0,0,0,3805,3806,4,221,70,0,3806,3807,5,430,0,0,3807,
		3816,5,47,0,0,3808,3810,5,514,0,0,3809,3811,5,10,0,0,3810,3809,1,0,0,0,
		3810,3811,1,0,0,0,3811,3813,1,0,0,0,3812,3814,3,782,391,0,3813,3812,1,
		0,0,0,3813,3814,1,0,0,0,3814,3816,1,0,0,0,3815,3801,1,0,0,0,3815,3805,
		1,0,0,0,3815,3808,1,0,0,0,3816,443,1,0,0,0,3817,3818,4,222,71,0,3818,3823,
		5,590,0,0,3819,3820,4,222,72,0,3820,3824,3,1142,571,0,3821,3822,4,222,
		73,0,3822,3824,3,1146,573,0,3823,3819,1,0,0,0,3823,3821,1,0,0,0,3824,445,
		1,0,0,0,3825,3829,5,281,0,0,3826,3830,5,112,0,0,3827,3828,5,574,0,0,3828,
		3830,3,1102,551,0,3829,3826,1,0,0,0,3829,3827,1,0,0,0,3830,3831,1,0,0,
		0,3831,3832,5,203,0,0,3832,3833,5,316,0,0,3833,447,1,0,0,0,3834,3835,5,
		55,0,0,3835,3836,5,316,0,0,3836,3837,5,590,0,0,3837,3839,3,450,225,0,3838,
		3840,3,782,391,0,3839,3838,1,0,0,0,3839,3840,1,0,0,0,3840,449,1,0,0,0,
		3841,3846,3,452,226,0,3842,3843,5,773,0,0,3843,3845,3,452,226,0,3844,3842,
		1,0,0,0,3845,3848,1,0,0,0,3846,3844,1,0,0,0,3846,3847,1,0,0,0,3847,451,
		1,0,0,0,3848,3846,1,0,0,0,3849,3850,5,300,0,0,3850,3851,5,750,0,0,3851,
		3941,3,1162,581,0,3852,3853,5,729,0,0,3853,3854,5,750,0,0,3854,3941,3,
		1162,581,0,3855,3856,5,297,0,0,3856,3857,5,750,0,0,3857,3941,3,1162,581,
		0,3858,3859,5,318,0,0,3859,3860,5,750,0,0,3860,3941,3,1162,581,0,3861,
		3862,5,303,0,0,3862,3863,5,750,0,0,3863,3941,3,1162,581,0,3864,3865,5,
		304,0,0,3865,3866,5,750,0,0,3866,3941,3,1140,570,0,3867,3868,5,298,0,0,
		3868,3869,5,750,0,0,3869,3941,3,1140,570,0,3870,3871,5,305,0,0,3871,3872,
		5,750,0,0,3872,3941,3,1140,570,0,3873,3874,5,299,0,0,3874,3875,5,750,0,
		0,3875,3941,3,1140,570,0,3876,3877,5,314,0,0,3877,3878,5,750,0,0,3878,
		3941,3,1140,570,0,3879,3880,5,308,0,0,3880,3881,5,750,0,0,3881,3941,3,
		1162,581,0,3882,3883,5,307,0,0,3883,3884,5,750,0,0,3884,3941,3,1162,581,
		0,3885,3886,5,317,0,0,3886,3887,5,750,0,0,3887,3941,3,1162,581,0,3888,
		3889,5,309,0,0,3889,3890,5,750,0,0,3890,3941,3,1162,581,0,3891,3892,5,
		738,0,0,3892,3893,5,750,0,0,3893,3941,3,458,229,0,3894,3895,5,310,0,0,
		3895,3896,5,750,0,0,3896,3941,3,1162,581,0,3897,3898,5,313,0,0,3898,3899,
		5,750,0,0,3899,3941,3,1162,581,0,3900,3901,5,315,0,0,3901,3902,5,750,0,
		0,3902,3941,3,1140,570,0,3903,3904,5,311,0,0,3904,3905,5,750,0,0,3905,
		3941,3,1160,580,0,3906,3907,5,312,0,0,3907,3908,5,750,0,0,3908,3941,3,
		1162,581,0,3909,3910,5,712,0,0,3910,3911,5,750,0,0,3911,3941,3,1162,581,
		0,3912,3913,5,713,0,0,3913,3914,5,750,0,0,3914,3941,3,1140,570,0,3915,
		3916,5,319,0,0,3916,3917,5,750,0,0,3917,3941,3,1140,570,0,3918,3919,5,
		233,0,0,3919,3920,5,750,0,0,3920,3941,3,462,231,0,3921,3922,5,735,0,0,
		3922,3923,5,750,0,0,3923,3941,3,1154,577,0,3924,3925,5,736,0,0,3925,3926,
		5,750,0,0,3926,3941,3,1140,570,0,3927,3928,5,296,0,0,3928,3929,5,750,0,
		0,3929,3941,3,1140,570,0,3930,3931,5,737,0,0,3931,3932,5,750,0,0,3932,
		3941,3,454,227,0,3933,3934,5,739,0,0,3934,3935,5,750,0,0,3935,3941,3,1140,
		570,0,3936,3937,5,742,0,0,3937,3938,5,750,0,0,3938,3941,3,456,228,0,3939,
		3941,3,460,230,0,3940,3849,1,0,0,0,3940,3852,1,0,0,0,3940,3855,1,0,0,0,
		3940,3858,1,0,0,0,3940,3861,1,0,0,0,3940,3864,1,0,0,0,3940,3867,1,0,0,
		0,3940,3870,1,0,0,0,3940,3873,1,0,0,0,3940,3876,1,0,0,0,3940,3879,1,0,
		0,0,3940,3882,1,0,0,0,3940,3885,1,0,0,0,3940,3888,1,0,0,0,3940,3891,1,
		0,0,0,3940,3894,1,0,0,0,3940,3897,1,0,0,0,3940,3900,1,0,0,0,3940,3903,
		1,0,0,0,3940,3906,1,0,0,0,3940,3909,1,0,0,0,3940,3912,1,0,0,0,3940,3915,
		1,0,0,0,3940,3918,1,0,0,0,3940,3921,1,0,0,0,3940,3924,1,0,0,0,3940,3927,
		1,0,0,0,3940,3930,1,0,0,0,3940,3933,1,0,0,0,3940,3936,1,0,0,0,3940,3939,
		1,0,0,0,3941,453,1,0,0,0,3942,3945,3,1024,512,0,3943,3945,5,376,0,0,3944,
		3942,1,0,0,0,3944,3943,1,0,0,0,3945,455,1,0,0,0,3946,3947,7,43,0,0,3947,
		457,1,0,0,0,3948,3951,3,1162,581,0,3949,3951,5,376,0,0,3950,3948,1,0,0,
		0,3950,3949,1,0,0,0,3951,459,1,0,0,0,3952,3953,5,301,0,0,3953,3954,5,750,
		0,0,3954,3965,3,1162,581,0,3955,3956,5,302,0,0,3956,3957,5,750,0,0,3957,
		3965,3,1144,572,0,3958,3959,5,447,0,0,3959,3960,5,750,0,0,3960,3965,3,
		1162,581,0,3961,3962,5,448,0,0,3962,3963,5,750,0,0,3963,3965,3,1140,570,
		0,3964,3952,1,0,0,0,3964,3955,1,0,0,0,3964,3958,1,0,0,0,3964,3961,1,0,
		0,0,3965,461,1,0,0,0,3966,3975,5,776,0,0,3967,3972,3,1140,570,0,3968,3969,
		5,773,0,0,3969,3971,3,1140,570,0,3970,3968,1,0,0,0,3971,3974,1,0,0,0,3972,
		3970,1,0,0,0,3972,3973,1,0,0,0,3973,3976,1,0,0,0,3974,3972,1,0,0,0,3975,
		3967,1,0,0,0,3975,3976,1,0,0,0,3976,3977,1,0,0,0,3977,3978,5,777,0,0,3978,
		463,1,0,0,0,3979,3980,5,55,0,0,3980,3981,5,459,0,0,3981,3982,5,190,0,0,
		3982,3987,3,466,233,0,3983,3984,5,773,0,0,3984,3986,3,466,233,0,3985,3983,
		1,0,0,0,3986,3989,1,0,0,0,3987,3985,1,0,0,0,3987,3988,1,0,0,0,3988,3992,
		1,0,0,0,3989,3987,1,0,0,0,3990,3991,4,232,74,0,3991,3993,3,782,391,0,3992,
		3990,1,0,0,0,3992,3993,1,0,0,0,3993,465,1,0,0,0,3994,3995,5,460,0,0,3995,
		3996,5,750,0,0,3996,3998,5,776,0,0,3997,3999,3,468,234,0,3998,3997,1,0,
		0,0,3998,3999,1,0,0,0,3999,4000,1,0,0,0,4000,4044,5,777,0,0,4001,4002,
		5,461,0,0,4002,4003,5,750,0,0,4003,4005,5,776,0,0,4004,4006,3,468,234,
		0,4005,4004,1,0,0,0,4005,4006,1,0,0,0,4006,4007,1,0,0,0,4007,4044,5,777,
		0,0,4008,4009,5,462,0,0,4009,4010,5,750,0,0,4010,4012,5,776,0,0,4011,4013,
		3,470,235,0,4012,4011,1,0,0,0,4012,4013,1,0,0,0,4013,4014,1,0,0,0,4014,
		4044,5,777,0,0,4015,4016,5,463,0,0,4016,4017,5,750,0,0,4017,4019,5,776,
		0,0,4018,4020,3,470,235,0,4019,4018,1,0,0,0,4019,4020,1,0,0,0,4020,4021,
		1,0,0,0,4021,4044,5,777,0,0,4022,4023,5,464,0,0,4023,4024,5,750,0,0,4024,
		4026,5,776,0,0,4025,4027,3,472,236,0,4026,4025,1,0,0,0,4026,4027,1,0,0,
		0,4027,4028,1,0,0,0,4028,4044,5,777,0,0,4029,4030,5,465,0,0,4030,4031,
		5,750,0,0,4031,4033,5,776,0,0,4032,4034,3,472,236,0,4033,4032,1,0,0,0,
		4033,4034,1,0,0,0,4034,4035,1,0,0,0,4035,4044,5,777,0,0,4036,4037,5,466,
		0,0,4037,4038,5,750,0,0,4038,4040,5,776,0,0,4039,4041,3,476,238,0,4040,
		4039,1,0,0,0,4040,4041,1,0,0,0,4041,4042,1,0,0,0,4042,4044,5,777,0,0,4043,
		3994,1,0,0,0,4043,4001,1,0,0,0,4043,4008,1,0,0,0,4043,4015,1,0,0,0,4043,
		4022,1,0,0,0,4043,4029,1,0,0,0,4043,4036,1,0,0,0,4044,467,1,0,0,0,4045,
		4050,3,1058,529,0,4046,4047,5,773,0,0,4047,4049,3,1058,529,0,4048,4046,
		1,0,0,0,4049,4052,1,0,0,0,4050,4048,1,0,0,0,4050,4051,1,0,0,0,4051,469,
		1,0,0,0,4052,4050,1,0,0,0,4053,4058,3,1098,549,0,4054,4055,5,773,0,0,4055,
		4057,3,1098,549,0,4056,4054,1,0,0,0,4057,4060,1,0,0,0,4058,4056,1,0,0,
		0,4058,4059,1,0,0,0,4059,471,1,0,0,0,4060,4058,1,0,0,0,4061,4066,3,474,
		237,0,4062,4063,5,773,0,0,4063,4065,3,474,237,0,4064,4062,1,0,0,0,4065,
		4068,1,0,0,0,4066,4064,1,0,0,0,4066,4067,1,0,0,0,4067,473,1,0,0,0,4068,
		4066,1,0,0,0,4069,4070,3,1162,581,0,4070,475,1,0,0,0,4071,4076,3,990,495,
		0,4072,4073,5,773,0,0,4073,4075,3,990,495,0,4074,4072,1,0,0,0,4075,4078,
		1,0,0,0,4076,4074,1,0,0,0,4076,4077,1,0,0,0,4077,477,1,0,0,0,4078,4076,
		1,0,0,0,4079,4080,5,543,0,0,4080,4082,5,514,0,0,4081,4083,3,484,242,0,
		4082,4081,1,0,0,0,4082,4083,1,0,0,0,4083,4086,1,0,0,0,4084,4085,5,613,
		0,0,4085,4087,3,480,240,0,4086,4084,1,0,0,0,4086,4087,1,0,0,0,4087,4088,
		1,0,0,0,4088,4090,3,482,241,0,4089,4091,3,782,391,0,4090,4089,1,0,0,0,
		4090,4091,1,0,0,0,4091,4101,1,0,0,0,4092,4093,5,552,0,0,4093,4095,5,514,
		0,0,4094,4096,3,484,242,0,4095,4094,1,0,0,0,4095,4096,1,0,0,0,4096,4098,
		1,0,0,0,4097,4099,3,782,391,0,4098,4097,1,0,0,0,4098,4099,1,0,0,0,4099,
		4101,1,0,0,0,4100,4079,1,0,0,0,4100,4092,1,0,0,0,4101,479,1,0,0,0,4102,
		4110,3,460,230,0,4103,4104,4,240,75,0,4104,4105,7,44,0,0,4105,4106,5,750,
		0,0,4106,4110,3,1156,578,0,4107,4108,4,240,76,0,4108,4110,5,529,0,0,4109,
		4102,1,0,0,0,4109,4103,1,0,0,0,4109,4107,1,0,0,0,4110,4115,1,0,0,0,4111,
		4112,5,773,0,0,4112,4114,3,460,230,0,4113,4111,1,0,0,0,4114,4117,1,0,0,
		0,4115,4113,1,0,0,0,4115,4116,1,0,0,0,4116,481,1,0,0,0,4117,4115,1,0,0,
		0,4118,4122,4,241,77,0,4119,4120,5,618,0,0,4120,4121,5,750,0,0,4121,4123,
		3,1156,578,0,4122,4119,1,0,0,0,4122,4123,1,0,0,0,4123,4127,1,0,0,0,4124,
		4125,5,406,0,0,4125,4126,5,750,0,0,4126,4128,3,1156,578,0,4127,4124,1,
		0,0,0,4127,4128,1,0,0,0,4128,4132,1,0,0,0,4129,4130,5,129,0,0,4130,4131,
		5,750,0,0,4131,4133,3,1156,578,0,4132,4129,1,0,0,0,4132,4133,1,0,0,0,4133,
		4137,1,0,0,0,4134,4135,5,409,0,0,4135,4136,5,750,0,0,4136,4138,3,1156,
		578,0,4137,4134,1,0,0,0,4137,4138,1,0,0,0,4138,4141,1,0,0,0,4139,4141,
		1,0,0,0,4140,4118,1,0,0,0,4140,4139,1,0,0,0,4141,483,1,0,0,0,4142,4147,
		3,486,243,0,4143,4144,5,773,0,0,4144,4146,3,486,243,0,4145,4143,1,0,0,
		0,4146,4149,1,0,0,0,4147,4145,1,0,0,0,4147,4148,1,0,0,0,4148,485,1,0,0,
		0,4149,4147,1,0,0,0,4150,4151,7,45,0,0,4151,487,1,0,0,0,4152,4153,7,46,
		0,0,4153,4154,5,210,0,0,4154,489,1,0,0,0,4155,4156,5,417,0,0,4156,4157,
		3,1128,564,0,4157,4160,5,203,0,0,4158,4161,3,1160,580,0,4159,4161,3,742,
		371,0,4160,4158,1,0,0,0,4160,4159,1,0,0,0,4161,4167,1,0,0,0,4162,4167,
		3,492,246,0,4163,4164,7,47,0,0,4164,4165,5,417,0,0,4165,4167,3,1128,564,
		0,4166,4155,1,0,0,0,4166,4162,1,0,0,0,4166,4163,1,0,0,0,4167,491,1,0,0,
		0,4168,4169,5,173,0,0,4169,4172,3,1128,564,0,4170,4171,5,621,0,0,4171,
		4173,3,494,247,0,4172,4170,1,0,0,0,4172,4173,1,0,0,0,4173,493,1,0,0,0,
		4174,4179,3,742,371,0,4175,4176,5,773,0,0,4176,4178,3,742,371,0,4177,4175,
		1,0,0,0,4178,4181,1,0,0,0,4179,4177,1,0,0,0,4179,4180,1,0,0,0,4180,495,
		1,0,0,0,4181,4179,1,0,0,0,4182,4207,5,677,0,0,4183,4184,5,284,0,0,4184,
		4185,5,112,0,0,4185,4187,5,139,0,0,4186,4188,3,1190,595,0,4187,4186,1,
		0,0,0,4187,4188,1,0,0,0,4188,4189,1,0,0,0,4189,4208,3,1154,577,0,4190,
		4193,5,676,0,0,4191,4192,5,200,0,0,4192,4194,5,459,0,0,4193,4191,1,0,0,
		0,4193,4194,1,0,0,0,4194,4208,1,0,0,0,4195,4196,4,248,78,0,4196,4197,5,
		244,0,0,4197,4198,5,203,0,0,4198,4199,3,1026,513,0,4199,4200,5,775,0,0,
		4200,4201,3,1140,570,0,4201,4202,5,230,0,0,4202,4203,5,45,0,0,4203,4205,
		3,1154,577,0,4204,4206,3,498,249,0,4205,4204,1,0,0,0,4205,4206,1,0,0,0,
		4206,4208,1,0,0,0,4207,4183,1,0,0,0,4207,4190,1,0,0,0,4207,4195,1,0,0,
		0,4208,497,1,0,0,0,4209,4220,3,500,250,0,4210,4211,5,112,0,0,4211,4213,
		5,139,0,0,4212,4214,3,1190,595,0,4213,4212,1,0,0,0,4213,4214,1,0,0,0,4214,
		4215,1,0,0,0,4215,4217,3,1154,577,0,4216,4218,3,500,250,0,4217,4216,1,
		0,0,0,4217,4218,1,0,0,0,4218,4220,1,0,0,0,4219,4209,1,0,0,0,4219,4210,
		1,0,0,0,4220,499,1,0,0,0,4221,4223,5,467,0,0,4222,4224,5,373,0,0,4223,
		4222,1,0,0,0,4223,4224,1,0,0,0,4224,4225,1,0,0,0,4225,4226,5,539,0,0,4226,
		501,1,0,0,0,4227,4228,4,251,79,0,4228,4237,3,504,252,0,4229,4237,3,510,
		255,0,4230,4237,3,522,261,0,4231,4237,3,524,262,0,4232,4237,3,538,269,
		0,4233,4237,3,540,270,0,4234,4235,4,251,80,0,4235,4237,3,558,279,0,4236,
		4227,1,0,0,0,4236,4229,1,0,0,0,4236,4230,1,0,0,0,4236,4231,1,0,0,0,4236,
		4232,1,0,0,0,4236,4233,1,0,0,0,4236,4234,1,0,0,0,4237,503,1,0,0,0,4238,
		4239,5,11,0,0,4239,4242,5,618,0,0,4240,4241,4,252,81,0,4241,4243,3,978,
		489,0,4242,4240,1,0,0,0,4242,4243,1,0,0,0,4243,4244,1,0,0,0,4244,4245,
		3,506,253,0,4245,505,1,0,0,0,4246,4247,4,253,82,0,4247,4251,3,1010,505,
		0,4248,4249,4,253,83,0,4249,4251,3,1012,506,0,4250,4246,1,0,0,0,4250,4248,
		1,0,0,0,4251,4252,1,0,0,0,4252,4253,3,512,256,0,4253,4301,1,0,0,0,4254,
		4255,4,253,84,0,4255,4256,3,1026,513,0,4256,4257,5,230,0,0,4257,4258,5,
		45,0,0,4258,4261,3,1156,578,0,4259,4260,4,253,85,0,4260,4262,3,1022,511,
		0,4261,4259,1,0,0,0,4261,4262,1,0,0,0,4262,4265,1,0,0,0,4263,4264,4,253,
		86,0,4264,4266,3,1018,509,0,4265,4263,1,0,0,0,4265,4266,1,0,0,0,4266,4301,
		1,0,0,0,4267,4268,4,253,87,0,4268,4269,3,1026,513,0,4269,4270,3,1020,510,
		0,4270,4301,1,0,0,0,4271,4272,4,253,88,0,4272,4273,3,1026,513,0,4273,4274,
		5,128,0,0,4274,4278,5,659,0,0,4275,4279,5,10,0,0,4276,4279,5,369,0,0,4277,
		4279,3,560,280,0,4278,4275,1,0,0,0,4278,4276,1,0,0,0,4278,4277,1,0,0,0,
		4279,4301,1,0,0,0,4280,4281,4,253,89,0,4281,4282,3,1026,513,0,4282,4285,
		5,230,0,0,4283,4284,5,645,0,0,4284,4286,3,1180,590,0,4285,4283,1,0,0,0,
		4285,4286,1,0,0,0,4286,4287,1,0,0,0,4287,4288,5,45,0,0,4288,4289,5,734,
		0,0,4289,4291,5,406,0,0,4290,4292,3,1018,509,0,4291,4290,1,0,0,0,4291,
		4292,1,0,0,0,4292,4301,1,0,0,0,4293,4294,5,741,0,0,4294,4301,3,1142,571,
		0,4295,4298,5,740,0,0,4296,4299,3,1142,571,0,4297,4299,5,698,0,0,4298,
		4296,1,0,0,0,4298,4297,1,0,0,0,4299,4301,1,0,0,0,4300,4250,1,0,0,0,4300,
		4254,1,0,0,0,4300,4267,1,0,0,0,4300,4271,1,0,0,0,4300,4280,1,0,0,0,4300,
		4293,1,0,0,0,4300,4295,1,0,0,0,4301,507,1,0,0,0,4302,4303,5,618,0,0,4303,
		4304,3,1188,594,0,4304,509,1,0,0,0,4305,4306,5,97,0,0,4306,4310,5,618,
		0,0,4307,4308,4,255,90,0,4308,4311,3,980,490,0,4309,4311,1,0,0,0,4310,
		4307,1,0,0,0,4310,4309,1,0,0,0,4311,4312,1,0,0,0,4312,4313,3,1010,505,
		0,4313,4314,3,514,257,0,4314,4315,3,512,256,0,4315,511,1,0,0,0,4316,4318,
		4,256,91,0,4317,4319,3,516,258,0,4318,4317,1,0,0,0,4318,4319,1,0,0,0,4319,
		4321,1,0,0,0,4320,4322,3,518,259,0,4321,4320,1,0,0,0,4321,4322,1,0,0,0,
		4322,4326,1,0,0,0,4323,4325,3,520,260,0,4324,4323,1,0,0,0,4325,4328,1,
		0,0,0,4326,4324,1,0,0,0,4326,4327,1,0,0,0,4327,4331,1,0,0,0,4328,4326,
		1,0,0,0,4329,4331,1,0,0,0,4330,4316,1,0,0,0,4330,4329,1,0,0,0,4331,513,
		1,0,0,0,4332,4336,4,257,92,0,4333,4334,5,128,0,0,4334,4335,5,659,0,0,4335,
		4337,3,560,280,0,4336,4333,1,0,0,0,4336,4337,1,0,0,0,4337,4340,1,0,0,0,
		4338,4340,1,0,0,0,4339,4332,1,0,0,0,4339,4338,1,0,0,0,4340,515,1,0,0,0,
		4341,4344,5,467,0,0,4342,4345,3,552,276,0,4343,4345,7,48,0,0,4344,4342,
		1,0,0,0,4344,4343,1,0,0,0,4345,517,1,0,0,0,4346,4355,5,645,0,0,4347,4348,
		5,322,0,0,4348,4356,3,1140,570,0,4349,4350,5,327,0,0,4350,4356,3,1140,
		570,0,4351,4352,5,321,0,0,4352,4356,3,1140,570,0,4353,4354,5,328,0,0,4354,
		4356,3,1140,570,0,4355,4347,1,0,0,0,4355,4349,1,0,0,0,4355,4351,1,0,0,
		0,4355,4353,1,0,0,0,4356,4357,1,0,0,0,4357,4355,1,0,0,0,4357,4358,1,0,
		0,0,4358,519,1,0,0,0,4359,4360,5,2,0,0,4360,4393,7,49,0,0,4361,4390,5,
		406,0,0,4362,4369,5,177,0,0,4363,4364,5,247,0,0,4364,4365,3,1142,571,0,
		4365,4366,5,122,0,0,4366,4370,1,0,0,0,4367,4370,5,365,0,0,4368,4370,5,
		128,0,0,4369,4363,1,0,0,0,4369,4367,1,0,0,0,4369,4368,1,0,0,0,4369,4370,
		1,0,0,0,4370,4391,1,0,0,0,4371,4374,5,705,0,0,4372,4375,3,1142,571,0,4373,
		4375,5,128,0,0,4374,4372,1,0,0,0,4374,4373,1,0,0,0,4375,4391,1,0,0,0,4376,
		4377,5,706,0,0,4377,4382,5,247,0,0,4378,4379,3,1142,571,0,4379,4380,5,
		122,0,0,4380,4383,1,0,0,0,4381,4383,5,128,0,0,4382,4378,1,0,0,0,4382,4381,
		1,0,0,0,4383,4391,1,0,0,0,4384,4385,4,260,93,0,4385,4386,5,467,0,0,4386,
		4388,5,101,0,0,4387,4389,7,50,0,0,4388,4387,1,0,0,0,4388,4389,1,0,0,0,
		4389,4391,1,0,0,0,4390,4362,1,0,0,0,4390,4371,1,0,0,0,4390,4376,1,0,0,
		0,4390,4384,1,0,0,0,4391,4393,1,0,0,0,4392,4359,1,0,0,0,4392,4361,1,0,
		0,0,4393,521,1,0,0,0,4394,4395,5,148,0,0,4395,4398,5,618,0,0,4396,4397,
		4,261,94,0,4397,4399,3,978,489,0,4398,4396,1,0,0,0,4398,4399,1,0,0,0,4399,
		4400,1,0,0,0,4400,4401,3,1008,504,0,4401,523,1,0,0,0,4402,4445,5,215,0,
		0,4403,4404,4,262,95,0,4404,4405,3,546,273,0,4405,4406,5,590,0,0,4406,
		4410,3,1008,504,0,4407,4408,5,645,0,0,4408,4409,5,660,0,0,4409,4411,5,
		391,0,0,4410,4407,1,0,0,0,4410,4411,1,0,0,0,4411,4446,1,0,0,0,4412,4418,
		3,546,273,0,4413,4415,5,10,0,0,4414,4416,5,421,0,0,4415,4414,1,0,0,0,4415,
		4416,1,0,0,0,4416,4418,1,0,0,0,4417,4412,1,0,0,0,4417,4413,1,0,0,0,4418,
		4419,1,0,0,0,4419,4421,5,383,0,0,4420,4422,3,544,272,0,4421,4420,1,0,0,
		0,4421,4422,1,0,0,0,4422,4423,1,0,0,0,4423,4424,3,550,275,0,4424,4425,
		5,590,0,0,4425,4427,3,526,263,0,4426,4428,3,536,268,0,4427,4426,1,0,0,
		0,4427,4428,1,0,0,0,4428,4430,1,0,0,0,4429,4431,3,528,264,0,4430,4429,
		1,0,0,0,4430,4431,1,0,0,0,4431,4433,1,0,0,0,4432,4434,3,534,267,0,4433,
		4432,1,0,0,0,4433,4434,1,0,0,0,4434,4446,1,0,0,0,4435,4436,5,427,0,0,4436,
		4437,5,383,0,0,4437,4438,3,1026,513,0,4438,4439,5,590,0,0,4439,4443,3,
		526,263,0,4440,4441,5,645,0,0,4441,4442,5,215,0,0,4442,4444,5,391,0,0,
		4443,4440,1,0,0,0,4443,4444,1,0,0,0,4444,4446,1,0,0,0,4445,4403,1,0,0,
		0,4445,4417,1,0,0,0,4445,4435,1,0,0,0,4446,525,1,0,0,0,4447,4448,4,263,
		96,0,4448,4452,3,1010,505,0,4449,4450,4,263,97,0,4450,4452,3,1008,504,
		0,4451,4447,1,0,0,0,4451,4449,1,0,0,0,4452,527,1,0,0,0,4453,4454,4,264,
		98,0,4454,4456,5,645,0,0,4455,4457,3,556,278,0,4456,4455,1,0,0,0,4457,
		4458,1,0,0,0,4458,4456,1,0,0,0,4458,4459,1,0,0,0,4459,4465,1,0,0,0,4460,
		4461,4,264,99,0,4461,4462,5,645,0,0,4462,4463,5,215,0,0,4463,4465,5,391,
		0,0,4464,4453,1,0,0,0,4464,4460,1,0,0,0,4465,529,1,0,0,0,4466,4467,5,663,
		0,0,4467,4468,3,560,280,0,4468,531,1,0,0,0,4469,4470,5,645,0,0,4470,4478,
		5,659,0,0,4471,4479,3,560,280,0,4472,4474,5,10,0,0,4473,4475,3,530,265,
		0,4474,4473,1,0,0,0,4474,4475,1,0,0,0,4475,4479,1,0,0,0,4476,4479,5,369,
		0,0,4477,4479,5,128,0,0,4478,4471,1,0,0,0,4478,4472,1,0,0,0,4478,4476,
		1,0,0,0,4478,4477,1,0,0,0,4479,533,1,0,0,0,4480,4481,5,17,0,0,4481,4483,
		5,618,0,0,4482,4484,3,532,266,0,4483,4482,1,0,0,0,4483,4484,1,0,0,0,4484,
		535,1,0,0,0,4485,4486,4,268,100,0,4486,4487,3,516,258,0,4487,537,1,0,0,
		0,4488,4489,5,453,0,0,4489,4490,5,618,0,0,4490,4491,3,1026,513,0,4491,
		4492,5,590,0,0,4492,4500,3,1026,513,0,4493,4494,5,773,0,0,4494,4495,3,
		1026,513,0,4495,4496,5,590,0,0,4496,4497,3,1026,513,0,4497,4499,1,0,0,
		0,4498,4493,1,0,0,0,4499,4502,1,0,0,0,4500,4498,1,0,0,0,4500,4501,1,0,
		0,0,4501,539,1,0,0,0,4502,4500,1,0,0,0,4503,4537,5,477,0,0,4504,4505,4,
		270,101,0,4505,4506,3,546,273,0,4506,4507,5,203,0,0,4507,4508,3,1008,504,
		0,4508,4538,1,0,0,0,4509,4510,3,546,273,0,4510,4511,3,542,271,0,4511,4512,
		5,203,0,0,4512,4513,3,1008,504,0,4513,4538,1,0,0,0,4514,4516,5,10,0,0,
		4515,4517,5,421,0,0,4516,4515,1,0,0,0,4516,4517,1,0,0,0,4517,4529,1,0,
		0,0,4518,4519,4,270,102,0,4519,4521,5,383,0,0,4520,4522,3,544,272,0,4521,
		4520,1,0,0,0,4521,4522,1,0,0,0,4522,4523,1,0,0,0,4523,4530,3,550,275,0,
		4524,4525,5,773,0,0,4525,4526,5,215,0,0,4526,4527,5,391,0,0,4527,4528,
		5,203,0,0,4528,4530,3,1008,504,0,4529,4518,1,0,0,0,4529,4524,1,0,0,0,4530,
		4538,1,0,0,0,4531,4532,5,427,0,0,4532,4533,5,383,0,0,4533,4534,3,1026,
		513,0,4534,4535,5,203,0,0,4535,4536,3,1008,504,0,4536,4538,1,0,0,0,4537,
		4504,1,0,0,0,4537,4509,1,0,0,0,4537,4514,1,0,0,0,4537,4531,1,0,0,0,4538,
		541,1,0,0,0,4539,4540,4,271,103,0,4540,4542,5,383,0,0,4541,4543,3,544,
		272,0,4542,4541,1,0,0,0,4542,4543,1,0,0,0,4543,4544,1,0,0,0,4544,4554,
		3,550,275,0,4545,4551,4,271,104,0,4546,4548,5,383,0,0,4547,4549,3,544,
		272,0,4548,4547,1,0,0,0,4548,4549,1,0,0,0,4549,4550,1,0,0,0,4550,4552,
		3,550,275,0,4551,4546,1,0,0,0,4551,4552,1,0,0,0,4552,4554,1,0,0,0,4553,
		4539,1,0,0,0,4553,4545,1,0,0,0,4554,543,1,0,0,0,4555,4556,7,51,0,0,4556,
		545,1,0,0,0,4557,4562,3,548,274,0,4558,4559,5,773,0,0,4559,4561,3,548,
		274,0,4560,4558,1,0,0,0,4561,4564,1,0,0,0,4562,4560,1,0,0,0,4562,4563,
		1,0,0,0,4563,547,1,0,0,0,4564,4562,1,0,0,0,4565,4576,4,274,105,0,4566,
		4568,3,1184,592,0,4567,4569,3,1044,522,0,4568,4567,1,0,0,0,4568,4569,1,
		0,0,0,4569,4577,1,0,0,0,4570,4574,3,1184,592,0,4571,4575,5,784,0,0,4572,
		4573,5,783,0,0,4573,4575,3,1180,590,0,4574,4571,1,0,0,0,4574,4572,1,0,
		0,0,4575,4577,1,0,0,0,4576,4566,1,0,0,0,4576,4570,1,0,0,0,4577,4607,1,
		0,0,0,4578,4580,7,52,0,0,4579,4581,3,1044,522,0,4580,4579,1,0,0,0,4580,
		4581,1,0,0,0,4581,4607,1,0,0,0,4582,4607,7,53,0,0,4583,4584,5,215,0,0,
		4584,4607,5,391,0,0,4585,4586,5,509,0,0,4586,4607,5,110,0,0,4587,4591,
		5,97,0,0,4588,4589,5,577,0,0,4589,4592,5,571,0,0,4590,4592,7,54,0,0,4591,
		4588,1,0,0,0,4591,4590,1,0,0,0,4591,4592,1,0,0,0,4592,4607,1,0,0,0,4593,
		4594,5,287,0,0,4594,4607,5,571,0,0,4595,4596,5,459,0,0,4596,4607,7,55,
		0,0,4597,4598,5,509,0,0,4598,4607,5,636,0,0,4599,4601,5,11,0,0,4600,4602,
		5,483,0,0,4601,4600,1,0,0,0,4601,4602,1,0,0,0,4602,4607,1,0,0,0,4603,4604,
		4,274,106,0,4604,4605,7,56,0,0,4605,4607,5,659,0,0,4606,4565,1,0,0,0,4606,
		4578,1,0,0,0,4606,4582,1,0,0,0,4606,4583,1,0,0,0,4606,4585,1,0,0,0,4606,
		4587,1,0,0,0,4606,4593,1,0,0,0,4606,4595,1,0,0,0,4606,4597,1,0,0,0,4606,
		4599,1,0,0,0,4606,4603,1,0,0,0,4607,549,1,0,0,0,4608,4611,5,760,0,0,4609,
		4610,5,772,0,0,4610,4612,5,760,0,0,4611,4609,1,0,0,0,4611,4612,1,0,0,0,
		4612,4625,1,0,0,0,4613,4616,3,1058,529,0,4614,4615,5,772,0,0,4615,4617,
		5,760,0,0,4616,4614,1,0,0,0,4616,4617,1,0,0,0,4617,4625,1,0,0,0,4618,4625,
		3,1102,551,0,4619,4620,4,275,107,0,4620,4621,3,1058,529,0,4621,4622,5,
		772,0,0,4622,4623,3,1102,551,0,4623,4625,1,0,0,0,4624,4608,1,0,0,0,4624,
		4613,1,0,0,0,4624,4618,1,0,0,0,4624,4619,1,0,0,0,4625,551,1,0,0,0,4626,
		4633,3,554,277,0,4627,4629,5,15,0,0,4628,4627,1,0,0,0,4628,4629,1,0,0,
		0,4629,4630,1,0,0,0,4630,4632,3,554,277,0,4631,4628,1,0,0,0,4632,4635,
		1,0,0,0,4633,4631,1,0,0,0,4633,4634,1,0,0,0,4634,553,1,0,0,0,4635,4633,
		1,0,0,0,4636,4637,5,63,0,0,4637,4643,3,1156,578,0,4638,4639,5,259,0,0,
		4639,4643,3,1156,578,0,4640,4641,5,559,0,0,4641,4643,3,1156,578,0,4642,
		4636,1,0,0,0,4642,4638,1,0,0,0,4642,4640,1,0,0,0,4643,555,1,0,0,0,4644,
		4645,5,215,0,0,4645,4655,5,391,0,0,4646,4647,5,322,0,0,4647,4655,3,1140,
		570,0,4648,4649,5,327,0,0,4649,4655,3,1140,570,0,4650,4651,5,321,0,0,4651,
		4655,3,1140,570,0,4652,4653,5,328,0,0,4653,4655,3,1140,570,0,4654,4644,
		1,0,0,0,4654,4646,1,0,0,0,4654,4648,1,0,0,0,4654,4650,1,0,0,0,4654,4652,
		1,0,0,0,4655,557,1,0,0,0,4656,4657,5,506,0,0,4657,4658,5,659,0,0,4658,
		4680,3,560,280,0,4659,4660,5,506,0,0,4660,4661,5,659,0,0,4661,4680,7,57,
		0,0,4662,4663,5,506,0,0,4663,4664,5,128,0,0,4664,4668,5,659,0,0,4665,4669,
		3,560,280,0,4666,4669,5,369,0,0,4667,4669,5,10,0,0,4668,4665,1,0,0,0,4668,
		4666,1,0,0,0,4668,4667,1,0,0,0,4669,4670,1,0,0,0,4670,4671,5,590,0,0,4671,
		4680,3,560,280,0,4672,4673,5,506,0,0,4673,4674,5,659,0,0,4674,4677,5,10,
		0,0,4675,4676,5,663,0,0,4676,4678,3,560,280,0,4677,4675,1,0,0,0,4677,4678,
		1,0,0,0,4678,4680,1,0,0,0,4679,4656,1,0,0,0,4679,4659,1,0,0,0,4679,4662,
		1,0,0,0,4679,4672,1,0,0,0,4680,559,1,0,0,0,4681,4686,3,562,281,0,4682,
		4683,5,773,0,0,4683,4685,3,562,281,0,4684,4682,1,0,0,0,4685,4688,1,0,0,
		0,4686,4684,1,0,0,0,4686,4687,1,0,0,0,4687,561,1,0,0,0,4688,4686,1,0,0,
		0,4689,4693,3,1184,592,0,4690,4691,5,783,0,0,4691,4694,3,1180,590,0,4692,
		4694,5,784,0,0,4693,4690,1,0,0,0,4693,4692,1,0,0,0,4693,4694,1,0,0,0,4694,
		563,1,0,0,0,4695,4697,5,14,0,0,4696,4698,3,1034,517,0,4697,4696,1,0,0,
		0,4697,4698,1,0,0,0,4698,4699,1,0,0,0,4699,4700,5,574,0,0,4700,4703,3,
		1104,552,0,4701,4702,4,282,108,0,4702,4704,3,566,283,0,4703,4701,1,0,0,
		0,4703,4704,1,0,0,0,4704,4739,1,0,0,0,4705,4706,5,62,0,0,4706,4707,5,574,
		0,0,4707,4711,3,1104,552,0,4708,4710,3,568,284,0,4709,4708,1,0,0,0,4710,
		4713,1,0,0,0,4711,4709,1,0,0,0,4711,4712,1,0,0,0,4712,4739,1,0,0,0,4713,
		4711,1,0,0,0,4714,4715,5,61,0,0,4715,4716,5,574,0,0,4716,4718,3,1104,552,
		0,4717,4719,7,58,0,0,4718,4717,1,0,0,0,4718,4719,1,0,0,0,4719,4739,1,0,
		0,0,4720,4722,5,388,0,0,4721,4723,3,1034,517,0,4722,4721,1,0,0,0,4722,
		4723,1,0,0,0,4723,4724,1,0,0,0,4724,4725,5,574,0,0,4725,4739,3,1104,552,
		0,4726,4728,5,455,0,0,4727,4729,3,1034,517,0,4728,4727,1,0,0,0,4728,4729,
		1,0,0,0,4729,4730,1,0,0,0,4730,4731,5,574,0,0,4731,4735,3,1104,552,0,4732,
		4734,3,570,285,0,4733,4732,1,0,0,0,4734,4737,1,0,0,0,4735,4733,1,0,0,0,
		4735,4736,1,0,0,0,4736,4739,1,0,0,0,4737,4735,1,0,0,0,4738,4695,1,0,0,
		0,4738,4705,1,0,0,0,4738,4714,1,0,0,0,4738,4720,1,0,0,0,4738,4726,1,0,
		0,0,4739,565,1,0,0,0,4740,4741,5,614,0,0,4741,4742,5,674,0,0,4742,4743,
		5,383,0,0,4743,4747,3,1130,565,0,4744,4745,5,645,0,0,4745,4746,5,747,0,
		0,4746,4748,5,675,0,0,4747,4744,1,0,0,0,4747,4748,1,0,0,0,4748,4754,1,
		0,0,0,4749,4750,5,148,0,0,4750,4751,5,674,0,0,4751,4752,5,383,0,0,4752,
		4754,3,1130,565,0,4753,4740,1,0,0,0,4753,4749,1,0,0,0,4754,567,1,0,0,0,
		4755,4756,5,200,0,0,4756,4759,5,615,0,0,4757,4759,7,59,0,0,4758,4755,1,
		0,0,0,4758,4757,1,0,0,0,4759,569,1,0,0,0,4760,4761,7,60,0,0,4761,571,1,
		0,0,0,4762,4763,5,245,0,0,4763,4764,5,410,0,0,4764,4765,3,1128,564,0,4765,
		4766,5,520,0,0,4766,4767,3,1154,577,0,4767,4785,1,0,0,0,4768,4769,5,245,
		0,0,4769,4770,5,664,0,0,4770,4785,3,1164,582,0,4771,4772,5,607,0,0,4772,
		4773,5,410,0,0,4773,4785,3,1118,559,0,4774,4775,5,607,0,0,4775,4776,5,
		664,0,0,4776,4781,3,1120,560,0,4777,4778,5,773,0,0,4778,4780,3,1120,560,
		0,4779,4777,1,0,0,0,4780,4783,1,0,0,0,4781,4779,1,0,0,0,4781,4782,1,0,
		0,0,4782,4785,1,0,0,0,4783,4781,1,0,0,0,4784,4762,1,0,0,0,4784,4768,1,
		0,0,0,4784,4771,1,0,0,0,4784,4774,1,0,0,0,4785,573,1,0,0,0,4786,4787,5,
		506,0,0,4787,4788,3,576,288,0,4788,575,1,0,0,0,4789,4790,3,586,293,0,4790,
		4791,3,584,292,0,4791,4846,1,0,0,0,4792,4793,5,592,0,0,4793,4846,3,578,
		289,0,4794,4795,3,1192,596,0,4795,4796,3,592,296,0,4796,4846,1,0,0,0,4797,
		4800,5,406,0,0,4798,4799,5,200,0,0,4799,4801,3,1026,513,0,4800,4798,1,
		0,0,0,4800,4801,1,0,0,0,4801,4802,1,0,0,0,4802,4829,3,1190,595,0,4803,
		4805,3,1156,578,0,4804,4806,3,1022,511,0,4805,4804,1,0,0,0,4805,4806,1,
		0,0,0,4806,4808,1,0,0,0,4807,4809,3,1018,509,0,4808,4807,1,0,0,0,4808,
		4809,1,0,0,0,4809,4830,1,0,0,0,4810,4812,3,1156,578,0,4811,4813,3,1022,
		511,0,4812,4811,1,0,0,0,4812,4813,1,0,0,0,4813,4815,1,0,0,0,4814,4816,
		3,1018,509,0,4815,4814,1,0,0,0,4815,4816,1,0,0,0,4816,4830,1,0,0,0,4817,
		4818,4,288,109,0,4818,4819,5,382,0,0,4819,4820,5,776,0,0,4820,4821,3,1156,
		578,0,4821,4822,5,777,0,0,4822,4830,1,0,0,0,4823,4824,4,288,110,0,4824,
		4825,5,406,0,0,4825,4826,5,776,0,0,4826,4827,3,1156,578,0,4827,4828,5,
		777,0,0,4828,4830,1,0,0,0,4829,4803,1,0,0,0,4829,4810,1,0,0,0,4829,4817,
		1,0,0,0,4829,4823,1,0,0,0,4830,4846,1,0,0,0,4831,4832,4,288,111,0,4832,
		4835,5,406,0,0,4833,4834,5,200,0,0,4834,4836,3,1026,513,0,4835,4833,1,
		0,0,0,4835,4836,1,0,0,0,4836,4837,1,0,0,0,4837,4838,5,590,0,0,4838,4840,
		5,734,0,0,4839,4841,3,1022,511,0,4840,4839,1,0,0,0,4840,4841,1,0,0,0,4841,
		4843,1,0,0,0,4842,4844,3,1018,509,0,4843,4842,1,0,0,0,4843,4844,1,0,0,
		0,4844,4846,1,0,0,0,4845,4789,1,0,0,0,4845,4792,1,0,0,0,4845,4794,1,0,
		0,0,4845,4797,1,0,0,0,4845,4831,1,0,0,0,4846,577,1,0,0,0,4847,4849,3,580,
		290,0,4848,4850,3,582,291,0,4849,4848,1,0,0,0,4849,4850,1,0,0,0,4850,4857,
		1,0,0,0,4851,4854,3,582,291,0,4852,4853,5,773,0,0,4853,4855,3,580,290,
		0,4854,4852,1,0,0,0,4854,4855,1,0,0,0,4855,4857,1,0,0,0,4856,4847,1,0,
		0,0,4856,4851,1,0,0,0,4857,579,1,0,0,0,4858,4859,5,435,0,0,4859,4860,7,
		39,0,0,4860,581,1,0,0,0,4861,4862,5,258,0,0,4862,4868,5,274,0,0,4863,4864,
		5,456,0,0,4864,4869,5,435,0,0,4865,4866,5,435,0,0,4866,4869,7,61,0,0,4867,
		4869,5,500,0,0,4868,4863,1,0,0,0,4868,4865,1,0,0,0,4868,4867,1,0,0,0,4869,
		583,1,0,0,0,4870,4871,5,773,0,0,4871,4873,3,588,294,0,4872,4870,1,0,0,
		0,4873,4876,1,0,0,0,4874,4872,1,0,0,0,4874,4875,1,0,0,0,4875,585,1,0,0,
		0,4876,4874,1,0,0,0,4877,4878,3,746,373,0,4878,4879,3,1190,595,0,4879,
		4880,3,596,298,0,4880,4903,1,0,0,0,4881,4903,3,998,499,0,4882,4883,3,742,
		371,0,4883,4884,3,1190,595,0,4884,4885,3,676,338,0,4885,4903,1,0,0,0,4886,
		4887,3,590,295,0,4887,4888,3,1190,595,0,4888,4889,3,596,298,0,4889,4903,
		1,0,0,0,4890,4900,5,356,0,0,4891,4892,3,1190,595,0,4892,4893,3,676,338,
		0,4893,4901,1,0,0,0,4894,4896,3,936,468,0,4895,4897,3,986,493,0,4896,4895,
		1,0,0,0,4896,4897,1,0,0,0,4897,4901,1,0,0,0,4898,4899,4,293,112,0,4899,
		4901,5,128,0,0,4900,4891,1,0,0,0,4900,4894,1,0,0,0,4900,4898,1,0,0,0,4901,
		4903,1,0,0,0,4902,4877,1,0,0,0,4902,4881,1,0,0,0,4902,4882,1,0,0,0,4902,
		4886,1,0,0,0,4902,4890,1,0,0,0,4903,587,1,0,0,0,4904,4905,3,1192,596,0,
		4905,4906,3,746,373,0,4906,4907,3,1190,595,0,4907,4908,3,596,298,0,4908,
		4911,1,0,0,0,4909,4911,3,586,293,0,4910,4904,1,0,0,0,4910,4909,1,0,0,0,
		4911,589,1,0,0,0,4912,4914,5,785,0,0,4913,4915,3,1196,598,0,4914,4913,
		1,0,0,0,4914,4915,1,0,0,0,4915,4916,1,0,0,0,4916,4917,3,746,373,0,4917,
		591,1,0,0,0,4918,4919,3,594,297,0,4919,4920,3,584,292,0,4920,4924,1,0,
		0,0,4921,4922,5,592,0,0,4922,4924,3,578,289,0,4923,4918,1,0,0,0,4923,4921,
		1,0,0,0,4924,593,1,0,0,0,4925,4926,3,746,373,0,4926,4927,3,1190,595,0,
		4927,4928,3,596,298,0,4928,595,1,0,0,0,4929,4934,3,676,338,0,4930,4934,
		7,62,0,0,4931,4932,4,298,113,0,4932,4934,7,63,0,0,4933,4929,1,0,0,0,4933,
		4930,1,0,0,0,4933,4931,1,0,0,0,4934,597,1,0,0,0,4935,5155,5,509,0,0,4936,
		4937,4,299,114,0,4937,5156,5,22,0,0,4938,4940,5,110,0,0,4939,4941,3,1030,
		515,0,4940,4939,1,0,0,0,4940,4941,1,0,0,0,4941,5156,1,0,0,0,4942,4944,
		3,600,300,0,4943,4942,1,0,0,0,4943,4944,1,0,0,0,4944,4945,1,0,0,0,4945,
		4947,5,571,0,0,4946,4948,3,606,303,0,4947,4946,1,0,0,0,4947,4948,1,0,0,
		0,4948,4950,1,0,0,0,4949,4951,3,1030,515,0,4950,4949,1,0,0,0,4950,4951,
		1,0,0,0,4951,5156,1,0,0,0,4952,4954,5,204,0,0,4953,4952,1,0,0,0,4953,4954,
		1,0,0,0,4954,4955,1,0,0,0,4955,4957,5,593,0,0,4956,4958,3,606,303,0,4957,
		4956,1,0,0,0,4957,4958,1,0,0,0,4958,4960,1,0,0,0,4959,4961,3,1030,515,
		0,4960,4959,1,0,0,0,4960,4961,1,0,0,0,4961,5156,1,0,0,0,4962,4964,5,169,
		0,0,4963,4965,3,606,303,0,4964,4963,1,0,0,0,4964,4965,1,0,0,0,4965,4967,
		1,0,0,0,4966,4968,3,1030,515,0,4967,4966,1,0,0,0,4967,4968,1,0,0,0,4968,
		5156,1,0,0,0,4969,4970,5,574,0,0,4970,4972,5,547,0,0,4971,4973,3,606,303,
		0,4972,4971,1,0,0,0,4972,4973,1,0,0,0,4973,4975,1,0,0,0,4974,4976,3,1030,
		515,0,4975,4974,1,0,0,0,4975,4976,1,0,0,0,4976,5156,1,0,0,0,4977,4978,
		5,387,0,0,4978,4980,5,571,0,0,4979,4981,3,606,303,0,4980,4979,1,0,0,0,
		4980,4981,1,0,0,0,4981,4983,1,0,0,0,4982,4984,3,1030,515,0,4983,4982,1,
		0,0,0,4983,4984,1,0,0,0,4984,5156,1,0,0,0,4985,5156,5,408,0,0,4986,4989,
		5,163,0,0,4987,4990,3,1094,547,0,4988,4990,5,10,0,0,4989,4987,1,0,0,0,
		4989,4988,1,0,0,0,4990,4991,1,0,0,0,4991,5156,7,64,0,0,4992,4994,3,600,
		300,0,4993,4992,1,0,0,0,4993,4994,1,0,0,0,4994,4995,1,0,0,0,4995,4996,
		5,71,0,0,4996,4997,7,65,0,0,4997,4999,3,1102,551,0,4998,5000,3,606,303,
		0,4999,4998,1,0,0,0,4999,5000,1,0,0,0,5000,5002,1,0,0,0,5001,5003,3,1030,
		515,0,5002,5001,1,0,0,0,5002,5003,1,0,0,0,5003,5156,1,0,0,0,5004,5005,
		7,42,0,0,5005,5156,5,289,0,0,5006,5013,5,514,0,0,5007,5014,5,225,0,0,5008,
		5009,5,547,0,0,5009,5011,3,602,301,0,5010,5012,3,782,391,0,5011,5010,1,
		0,0,0,5011,5012,1,0,0,0,5012,5014,1,0,0,0,5013,5007,1,0,0,0,5013,5008,
		1,0,0,0,5014,5156,1,0,0,0,5015,5016,7,66,0,0,5016,5019,5,169,0,0,5017,
		5018,5,251,0,0,5018,5020,3,1156,578,0,5019,5017,1,0,0,0,5019,5020,1,0,
		0,0,5020,5023,1,0,0,0,5021,5022,5,203,0,0,5022,5024,3,1144,572,0,5023,
		5021,1,0,0,0,5023,5024,1,0,0,0,5024,5026,1,0,0,0,5025,5027,3,284,142,0,
		5026,5025,1,0,0,0,5026,5027,1,0,0,0,5027,5029,1,0,0,0,5028,5030,3,782,
		391,0,5029,5028,1,0,0,0,5029,5030,1,0,0,0,5030,5156,1,0,0,0,5031,5032,
		4,299,115,0,5032,5034,5,180,0,0,5033,5031,1,0,0,0,5033,5034,1,0,0,0,5034,
		5035,1,0,0,0,5035,5036,7,67,0,0,5036,5037,3,604,302,0,5037,5039,3,1102,
		551,0,5038,5040,3,606,303,0,5039,5038,1,0,0,0,5039,5040,1,0,0,0,5040,5042,
		1,0,0,0,5041,5043,3,358,179,0,5042,5041,1,0,0,0,5042,5043,1,0,0,0,5043,
		5156,1,0,0,0,5044,5046,5,553,0,0,5045,5044,1,0,0,0,5045,5046,1,0,0,0,5046,
		5047,1,0,0,0,5047,5156,5,162,0,0,5048,5049,5,95,0,0,5049,5050,5,776,0,
		0,5050,5051,5,760,0,0,5051,5052,5,777,0,0,5052,5156,7,68,0,0,5053,5055,
		5,639,0,0,5054,5056,3,284,142,0,5055,5054,1,0,0,0,5055,5056,1,0,0,0,5056,
		5156,1,0,0,0,5057,5059,5,166,0,0,5058,5060,3,284,142,0,5059,5058,1,0,0,
		0,5059,5060,1,0,0,0,5060,5156,1,0,0,0,5061,5156,5,426,0,0,5062,5071,5,
		425,0,0,5063,5068,3,608,304,0,5064,5065,5,773,0,0,5065,5067,3,608,304,
		0,5066,5064,1,0,0,0,5067,5070,1,0,0,0,5068,5066,1,0,0,0,5068,5069,1,0,
		0,0,5069,5072,1,0,0,0,5070,5068,1,0,0,0,5071,5063,1,0,0,0,5071,5072,1,
		0,0,0,5072,5076,1,0,0,0,5073,5074,5,200,0,0,5074,5075,5,430,0,0,5075,5077,
		5,747,0,0,5076,5073,1,0,0,0,5076,5077,1,0,0,0,5077,5079,1,0,0,0,5078,5080,
		3,284,142,0,5079,5078,1,0,0,0,5079,5080,1,0,0,0,5080,5156,1,0,0,0,5081,
		5083,3,1192,596,0,5082,5081,1,0,0,0,5082,5083,1,0,0,0,5083,5084,1,0,0,
		0,5084,5086,7,69,0,0,5085,5087,3,1030,515,0,5086,5085,1,0,0,0,5086,5087,
		1,0,0,0,5087,5156,1,0,0,0,5088,5090,5,204,0,0,5089,5088,1,0,0,0,5089,5090,
		1,0,0,0,5090,5091,1,0,0,0,5091,5156,5,424,0,0,5092,5094,3,758,379,0,5093,
		5095,3,1030,515,0,5094,5093,1,0,0,0,5094,5095,1,0,0,0,5095,5156,1,0,0,
		0,5096,5098,5,70,0,0,5097,5099,3,1030,515,0,5098,5097,1,0,0,0,5098,5099,
		1,0,0,0,5099,5156,1,0,0,0,5100,5101,4,299,116,0,5101,5156,5,93,0,0,5102,
		5156,5,421,0,0,5103,5106,5,216,0,0,5104,5105,5,200,0,0,5105,5107,3,1026,
		513,0,5106,5104,1,0,0,0,5106,5107,1,0,0,0,5107,5156,1,0,0,0,5108,5109,
		5,216,0,0,5109,5110,5,200,0,0,5110,5111,3,1026,513,0,5111,5112,5,621,0,
		0,5112,5113,3,1008,504,0,5113,5156,1,0,0,0,5114,5115,5,316,0,0,5115,5156,
		5,547,0,0,5116,5137,5,97,0,0,5117,5119,5,109,0,0,5118,5120,3,980,490,0,
		5119,5118,1,0,0,0,5119,5120,1,0,0,0,5120,5121,1,0,0,0,5121,5138,3,1058,
		529,0,5122,5123,5,170,0,0,5123,5138,3,1086,543,0,5124,5125,5,206,0,0,5125,
		5138,3,1066,533,0,5126,5127,5,422,0,0,5127,5138,3,1062,531,0,5128,5129,
		5,574,0,0,5129,5138,3,1102,551,0,5130,5131,5,594,0,0,5131,5138,3,1070,
		535,0,5132,5133,5,636,0,0,5133,5138,3,1074,537,0,5134,5135,4,299,117,0,
		5135,5136,5,618,0,0,5136,5138,3,1026,513,0,5137,5117,1,0,0,0,5137,5122,
		1,0,0,0,5137,5124,1,0,0,0,5137,5126,1,0,0,0,5137,5128,1,0,0,0,5137,5130,
		1,0,0,0,5137,5132,1,0,0,0,5137,5134,1,0,0,0,5138,5156,1,0,0,0,5139,5140,
		5,422,0,0,5140,5142,5,547,0,0,5141,5143,3,1030,515,0,5142,5141,1,0,0,0,
		5142,5143,1,0,0,0,5143,5156,1,0,0,0,5144,5145,5,206,0,0,5145,5147,5,547,
		0,0,5146,5148,3,1030,515,0,5147,5146,1,0,0,0,5147,5148,1,0,0,0,5148,5156,
		1,0,0,0,5149,5150,5,422,0,0,5150,5151,5,68,0,0,5151,5156,3,1062,531,0,
		5152,5153,5,206,0,0,5153,5154,5,68,0,0,5154,5156,3,1066,533,0,5155,4936,
		1,0,0,0,5155,4938,1,0,0,0,5155,4943,1,0,0,0,5155,4953,1,0,0,0,5155,4962,
		1,0,0,0,5155,4969,1,0,0,0,5155,4977,1,0,0,0,5155,4985,1,0,0,0,5155,4986,
		1,0,0,0,5155,4993,1,0,0,0,5155,5004,1,0,0,0,5155,5006,1,0,0,0,5155,5015,
		1,0,0,0,5155,5033,1,0,0,0,5155,5045,1,0,0,0,5155,5048,1,0,0,0,5155,5053,
		1,0,0,0,5155,5057,1,0,0,0,5155,5061,1,0,0,0,5155,5062,1,0,0,0,5155,5082,
		1,0,0,0,5155,5089,1,0,0,0,5155,5092,1,0,0,0,5155,5096,1,0,0,0,5155,5100,
		1,0,0,0,5155,5102,1,0,0,0,5155,5103,1,0,0,0,5155,5108,1,0,0,0,5155,5114,
		1,0,0,0,5155,5116,1,0,0,0,5155,5139,1,0,0,0,5155,5144,1,0,0,0,5155,5149,
		1,0,0,0,5155,5152,1,0,0,0,5156,599,1,0,0,0,5157,5164,5,204,0,0,5158,5159,
		4,300,118,0,5159,5161,5,180,0,0,5160,5162,5,204,0,0,5161,5160,1,0,0,0,
		5161,5162,1,0,0,0,5162,5164,1,0,0,0,5163,5157,1,0,0,0,5163,5158,1,0,0,
		0,5164,601,1,0,0,0,5165,5167,4,301,119,0,5166,5168,5,370,0,0,5167,5166,
		1,0,0,0,5167,5168,1,0,0,0,5168,5171,1,0,0,0,5169,5171,1,0,0,0,5170,5165,
		1,0,0,0,5170,5169,1,0,0,0,5171,603,1,0,0,0,5172,5173,7,65,0,0,5173,605,
		1,0,0,0,5174,5175,3,604,302,0,5175,5176,3,1128,564,0,5176,607,1,0,0,0,
		5177,5178,5,40,0,0,5178,5185,5,255,0,0,5179,5180,5,91,0,0,5180,5185,5,
		568,0,0,5181,5182,5,400,0,0,5182,5185,5,185,0,0,5183,5185,7,70,0,0,5184,
		5177,1,0,0,0,5184,5179,1,0,0,0,5184,5181,1,0,0,0,5184,5183,1,0,0,0,5185,
		609,1,0,0,0,5186,5187,5,33,0,0,5187,5224,3,1160,580,0,5188,5189,5,47,0,
		0,5189,5190,5,236,0,0,5190,5191,3,612,306,0,5191,5194,5,251,0,0,5192,5195,
		3,1128,564,0,5193,5195,5,128,0,0,5194,5192,1,0,0,0,5194,5193,1,0,0,0,5195,
		5224,1,0,0,0,5196,5198,5,196,0,0,5197,5199,3,1034,517,0,5198,5197,1,0,
		0,0,5198,5199,1,0,0,0,5199,5209,1,0,0,0,5200,5210,3,630,315,0,5201,5206,
		3,626,313,0,5202,5203,5,773,0,0,5203,5205,3,626,313,0,5204,5202,1,0,0,
		0,5205,5208,1,0,0,0,5206,5204,1,0,0,0,5206,5207,1,0,0,0,5207,5210,1,0,
		0,0,5208,5206,1,0,0,0,5209,5200,1,0,0,0,5209,5201,1,0,0,0,5210,5224,1,
		0,0,0,5211,5213,5,266,0,0,5212,5214,7,71,0,0,5213,5212,1,0,0,0,5213,5214,
		1,0,0,0,5214,5215,1,0,0,0,5215,5224,3,676,338,0,5216,5217,5,281,0,0,5217,
		5218,5,236,0,0,5218,5219,5,248,0,0,5219,5220,5,47,0,0,5220,5224,3,634,
		317,0,5221,5222,4,305,120,0,5222,5224,5,510,0,0,5223,5186,1,0,0,0,5223,
		5188,1,0,0,0,5223,5196,1,0,0,0,5223,5211,1,0,0,0,5223,5216,1,0,0,0,5223,
		5221,1,0,0,0,5224,611,1,0,0,0,5225,5228,3,614,307,0,5226,5228,3,618,309,
		0,5227,5225,1,0,0,0,5227,5226,1,0,0,0,5228,613,1,0,0,0,5229,5234,3,616,
		308,0,5230,5231,5,773,0,0,5231,5233,3,616,308,0,5232,5230,1,0,0,0,5233,
		5236,1,0,0,0,5234,5232,1,0,0,0,5234,5235,1,0,0,0,5235,615,1,0,0,0,5236,
		5234,1,0,0,0,5237,5239,3,1102,551,0,5238,5240,3,620,310,0,5239,5238,1,
		0,0,0,5239,5240,1,0,0,0,5240,617,1,0,0,0,5241,5242,3,1102,551,0,5242,5243,
		5,405,0,0,5243,5244,5,776,0,0,5244,5245,3,52,26,0,5245,5247,5,777,0,0,
		5246,5248,3,620,310,0,5247,5246,1,0,0,0,5247,5248,1,0,0,0,5248,619,1,0,
		0,0,5249,5250,3,406,203,0,5250,5252,5,776,0,0,5251,5253,3,624,312,0,5252,
		5251,1,0,0,0,5252,5253,1,0,0,0,5253,5254,1,0,0,0,5254,5255,5,777,0,0,5255,
		621,1,0,0,0,5256,5259,3,1128,564,0,5257,5259,5,420,0,0,5258,5256,1,0,0,
		0,5258,5257,1,0,0,0,5259,623,1,0,0,0,5260,5265,3,622,311,0,5261,5262,5,
		773,0,0,5262,5264,3,622,311,0,5263,5261,1,0,0,0,5264,5267,1,0,0,0,5265,
		5263,1,0,0,0,5265,5266,1,0,0,0,5266,625,1,0,0,0,5267,5265,1,0,0,0,5268,
		5284,7,72,0,0,5269,5271,3,628,314,0,5270,5269,1,0,0,0,5270,5271,1,0,0,
		0,5271,5272,1,0,0,0,5272,5284,5,289,0,0,5273,5274,5,445,0,0,5274,5276,
		5,289,0,0,5275,5277,3,782,391,0,5276,5275,1,0,0,0,5276,5277,1,0,0,0,5277,
		5284,1,0,0,0,5278,5279,4,313,121,0,5279,5280,5,430,0,0,5280,5284,5,47,
		0,0,5281,5282,4,313,122,0,5282,5284,5,389,0,0,5283,5268,1,0,0,0,5283,5270,
		1,0,0,0,5283,5273,1,0,0,0,5283,5278,1,0,0,0,5283,5281,1,0,0,0,5284,627,
		1,0,0,0,5285,5286,7,73,0,0,5286,629,1,0,0,0,5287,5295,7,18,0,0,5288,5289,
		5,645,0,0,5289,5290,5,435,0,0,5290,5296,5,287,0,0,5291,5293,3,1130,565,
		0,5292,5294,3,632,316,0,5293,5292,1,0,0,0,5293,5294,1,0,0,0,5294,5296,
		1,0,0,0,5295,5288,1,0,0,0,5295,5291,1,0,0,0,5295,5296,1,0,0,0,5296,631,
		1,0,0,0,5297,5298,4,316,123,0,5298,5299,5,200,0,0,5299,5304,5,179,0,0,
		5300,5301,5,645,0,0,5301,5302,5,435,0,0,5302,5304,5,287,0,0,5303,5297,
		1,0,0,0,5303,5300,1,0,0,0,5304,633,1,0,0,0,5305,5306,3,1102,551,0,5306,
		5308,3,640,320,0,5307,5309,3,620,310,0,5308,5307,1,0,0,0,5308,5309,1,0,
		0,0,5309,5312,1,0,0,0,5310,5311,5,232,0,0,5311,5313,5,270,0,0,5312,5310,
		1,0,0,0,5312,5313,1,0,0,0,5313,5316,1,0,0,0,5314,5316,3,636,318,0,5315,
		5305,1,0,0,0,5315,5314,1,0,0,0,5316,635,1,0,0,0,5317,5322,3,638,319,0,
		5318,5319,5,773,0,0,5319,5321,3,638,319,0,5320,5318,1,0,0,0,5321,5324,
		1,0,0,0,5322,5320,1,0,0,0,5322,5323,1,0,0,0,5323,637,1,0,0,0,5324,5322,
		1,0,0,0,5325,5327,3,1102,551,0,5326,5328,3,620,310,0,5327,5326,1,0,0,0,
		5327,5328,1,0,0,0,5328,5331,1,0,0,0,5329,5330,5,232,0,0,5330,5332,5,270,
		0,0,5331,5329,1,0,0,0,5331,5332,1,0,0,0,5332,639,1,0,0,0,5333,5334,5,405,
		0,0,5334,5335,5,776,0,0,5335,5336,3,52,26,0,5336,5337,5,777,0,0,5337,641,
		1,0,0,0,5338,5343,3,644,322,0,5339,5343,3,654,327,0,5340,5343,3,656,328,
		0,5341,5343,3,660,330,0,5342,5338,1,0,0,0,5342,5339,1,0,0,0,5342,5340,
		1,0,0,0,5342,5341,1,0,0,0,5343,643,1,0,0,0,5344,5345,5,97,0,0,5345,5346,
		5,709,0,0,5346,5347,5,217,0,0,5347,5348,3,1128,564,0,5348,5350,5,599,0,
		0,5349,5351,3,1190,595,0,5350,5349,1,0,0,0,5350,5351,1,0,0,0,5351,5352,
		1,0,0,0,5352,5354,7,74,0,0,5353,5355,3,646,323,0,5354,5353,1,0,0,0,5354,
		5355,1,0,0,0,5355,5357,1,0,0,0,5356,5358,3,650,325,0,5357,5356,1,0,0,0,
		5357,5358,1,0,0,0,5358,5360,1,0,0,0,5359,5361,3,652,326,0,5360,5359,1,
		0,0,0,5360,5361,1,0,0,0,5361,645,1,0,0,0,5362,5364,5,711,0,0,5363,5365,
		3,1190,595,0,5364,5363,1,0,0,0,5364,5365,1,0,0,0,5365,5366,1,0,0,0,5366,
		5373,3,648,324,0,5367,5369,5,773,0,0,5368,5367,1,0,0,0,5368,5369,1,0,0,
		0,5369,5370,1,0,0,0,5370,5372,3,648,324,0,5371,5368,1,0,0,0,5372,5375,
		1,0,0,0,5373,5371,1,0,0,0,5373,5374,1,0,0,0,5374,647,1,0,0,0,5375,5373,
		1,0,0,0,5376,5379,5,747,0,0,5377,5378,5,759,0,0,5378,5380,5,747,0,0,5379,
		5377,1,0,0,0,5379,5380,1,0,0,0,5380,649,1,0,0,0,5381,5383,5,708,0,0,5382,
		5384,3,1190,595,0,5383,5382,1,0,0,0,5383,5384,1,0,0,0,5384,5385,1,0,0,
		0,5385,5386,5,747,0,0,5386,651,1,0,0,0,5387,5388,7,75,0,0,5388,653,1,0,
		0,0,5389,5390,5,11,0,0,5390,5391,5,709,0,0,5391,5392,5,217,0,0,5392,5394,
		3,1122,561,0,5393,5395,3,646,323,0,5394,5393,1,0,0,0,5394,5395,1,0,0,0,
		5395,5397,1,0,0,0,5396,5398,3,650,325,0,5397,5396,1,0,0,0,5397,5398,1,
		0,0,0,5398,5400,1,0,0,0,5399,5401,3,652,326,0,5400,5399,1,0,0,0,5400,5401,
		1,0,0,0,5401,5403,1,0,0,0,5402,5404,5,198,0,0,5403,5402,1,0,0,0,5403,5404,
		1,0,0,0,5404,655,1,0,0,0,5405,5406,5,506,0,0,5406,5407,5,709,0,0,5407,
		5408,5,217,0,0,5408,5411,3,1128,564,0,5409,5410,5,200,0,0,5410,5412,3,
		658,329,0,5411,5409,1,0,0,0,5411,5412,1,0,0,0,5412,657,1,0,0,0,5413,5420,
		3,1142,571,0,5414,5416,5,773,0,0,5415,5414,1,0,0,0,5415,5416,1,0,0,0,5416,
		5417,1,0,0,0,5417,5419,3,1142,571,0,5418,5415,1,0,0,0,5419,5422,1,0,0,
		0,5420,5418,1,0,0,0,5420,5421,1,0,0,0,5421,659,1,0,0,0,5422,5420,1,0,0,
		0,5423,5424,5,148,0,0,5424,5425,5,709,0,0,5425,5426,5,217,0,0,5426,5428,
		3,1122,561,0,5427,5429,5,198,0,0,5428,5427,1,0,0,0,5428,5429,1,0,0,0,5429,
		661,1,0,0,0,5430,5437,3,664,332,0,5431,5437,3,666,333,0,5432,5437,3,670,
		335,0,5433,5437,3,672,336,0,5434,5435,4,331,124,0,5435,5437,3,674,337,
		0,5436,5430,1,0,0,0,5436,5431,1,0,0,0,5436,5432,1,0,0,0,5436,5433,1,0,
		0,0,5436,5434,1,0,0,0,5437,663,1,0,0,0,5438,5439,7,76,0,0,5439,5442,3,
		1102,551,0,5440,5443,3,1156,578,0,5441,5443,3,1046,523,0,5442,5440,1,0,
		0,0,5442,5441,1,0,0,0,5442,5443,1,0,0,0,5443,665,1,0,0,0,5444,5460,7,76,
		0,0,5445,5446,4,333,125,0,5446,5461,5,180,0,0,5447,5448,4,333,126,0,5448,
		5461,5,404,0,0,5449,5450,4,333,127,0,5450,5451,5,201,0,0,5451,5452,5,750,
		0,0,5452,5461,3,1180,590,0,5453,5454,4,333,128,0,5454,5461,5,14,0,0,5455,
		5456,4,333,129,0,5456,5457,5,14,0,0,5457,5458,5,201,0,0,5458,5459,5,750,
		0,0,5459,5461,3,1180,590,0,5460,5445,1,0,0,0,5460,5447,1,0,0,0,5460,5449,
		1,0,0,0,5460,5453,1,0,0,0,5460,5455,1,0,0,0,5460,5461,1,0,0,0,5461,5462,
		1,0,0,0,5462,5463,3,668,334,0,5463,667,1,0,0,0,5464,5477,3,266,133,0,5465,
		5470,4,334,130,0,5466,5471,3,220,110,0,5467,5471,3,232,116,0,5468,5471,
		3,264,132,0,5469,5471,3,416,208,0,5470,5466,1,0,0,0,5470,5467,1,0,0,0,
		5470,5468,1,0,0,0,5470,5469,1,0,0,0,5471,5477,1,0,0,0,5472,5473,4,334,
		131,0,5473,5474,5,200,0,0,5474,5475,5,84,0,0,5475,5477,3,1142,571,0,5476,
		5464,1,0,0,0,5476,5465,1,0,0,0,5476,5472,1,0,0,0,5477,669,1,0,0,0,5478,
		5479,5,222,0,0,5479,5480,3,1180,590,0,5480,671,1,0,0,0,5481,5482,5,620,
		0,0,5482,5483,3,1128,564,0,5483,673,1,0,0,0,5484,5485,5,714,0,0,5485,675,
		1,0,0,0,5486,5487,6,338,-1,0,5487,5493,3,678,339,0,5488,5490,5,257,0,0,
		5489,5491,3,760,380,0,5490,5489,1,0,0,0,5490,5491,1,0,0,0,5491,5492,1,
		0,0,0,5492,5494,7,77,0,0,5493,5488,1,0,0,0,5493,5494,1,0,0,0,5494,5498,
		1,0,0,0,5495,5496,5,371,0,0,5496,5498,3,676,338,4,5497,5486,1,0,0,0,5497,
		5495,1,0,0,0,5498,5510,1,0,0,0,5499,5500,10,3,0,0,5500,5501,7,78,0,0,5501,
		5509,3,676,338,4,5502,5503,10,2,0,0,5503,5504,5,654,0,0,5504,5509,3,676,
		338,3,5505,5506,10,1,0,0,5506,5507,7,79,0,0,5507,5509,3,676,338,2,5508,
		5499,1,0,0,0,5508,5502,1,0,0,0,5508,5505,1,0,0,0,5509,5512,1,0,0,0,5510,
		5508,1,0,0,0,5510,5511,1,0,0,0,5511,677,1,0,0,0,5512,5510,1,0,0,0,5513,
		5514,6,339,-1,0,5514,5515,3,682,341,0,5515,5533,1,0,0,0,5516,5517,10,3,
		0,0,5517,5519,5,257,0,0,5518,5520,3,760,380,0,5519,5518,1,0,0,0,5519,5520,
		1,0,0,0,5520,5521,1,0,0,0,5521,5532,5,376,0,0,5522,5523,10,2,0,0,5523,
		5524,3,680,340,0,5524,5525,3,682,341,0,5525,5532,1,0,0,0,5526,5527,10,
		1,0,0,5527,5528,3,680,340,0,5528,5529,7,80,0,0,5529,5530,3,280,140,0,5530,
		5532,1,0,0,0,5531,5516,1,0,0,0,5531,5522,1,0,0,0,5531,5526,1,0,0,0,5532,
		5535,1,0,0,0,5533,5531,1,0,0,0,5533,5534,1,0,0,0,5534,679,1,0,0,0,5535,
		5533,1,0,0,0,5536,5537,7,81,0,0,5537,681,1,0,0,0,5538,5552,3,686,343,0,
		5539,5541,3,760,380,0,5540,5539,1,0,0,0,5540,5541,1,0,0,0,5541,5542,1,
		0,0,0,5542,5553,3,684,342,0,5543,5544,4,341,138,0,5544,5546,5,733,0,0,
		5545,5547,5,668,0,0,5546,5545,1,0,0,0,5546,5547,1,0,0,0,5547,5548,1,0,
		0,0,5548,5553,3,772,386,0,5549,5550,5,521,0,0,5550,5551,5,275,0,0,5551,
		5553,3,686,343,0,5552,5540,1,0,0,0,5552,5543,1,0,0,0,5552,5549,1,0,0,0,
		5552,5553,1,0,0,0,5553,683,1,0,0,0,5554,5560,5,251,0,0,5555,5561,3,280,
		140,0,5556,5557,5,776,0,0,5557,5558,3,756,378,0,5558,5559,5,777,0,0,5559,
		5561,1,0,0,0,5560,5555,1,0,0,0,5560,5556,1,0,0,0,5561,5576,1,0,0,0,5562,
		5563,5,30,0,0,5563,5564,3,686,343,0,5564,5565,5,15,0,0,5565,5566,3,682,
		341,0,5566,5576,1,0,0,0,5567,5568,5,275,0,0,5568,5571,3,688,344,0,5569,
		5570,5,168,0,0,5570,5572,3,688,344,0,5571,5569,1,0,0,0,5571,5572,1,0,0,
		0,5572,5576,1,0,0,0,5573,5574,5,444,0,0,5574,5576,3,686,343,0,5575,5554,
		1,0,0,0,5575,5562,1,0,0,0,5575,5567,1,0,0,0,5575,5573,1,0,0,0,5576,685,
		1,0,0,0,5577,5578,6,343,-1,0,5578,5579,3,688,344,0,5579,5606,1,0,0,0,5580,
		5581,10,7,0,0,5581,5582,5,769,0,0,5582,5605,3,686,343,8,5583,5584,10,6,
		0,0,5584,5585,7,82,0,0,5585,5605,3,686,343,7,5586,5587,10,5,0,0,5587,5588,
		7,83,0,0,5588,5605,3,686,343,6,5589,5590,10,3,0,0,5590,5591,7,84,0,0,5591,
		5605,3,686,343,4,5592,5593,10,2,0,0,5593,5594,5,768,0,0,5594,5605,3,686,
		343,3,5595,5596,10,1,0,0,5596,5597,5,771,0,0,5597,5605,3,686,343,2,5598,
		5599,10,4,0,0,5599,5600,7,83,0,0,5600,5601,5,247,0,0,5601,5602,3,676,338,
		0,5602,5603,3,764,382,0,5603,5605,1,0,0,0,5604,5580,1,0,0,0,5604,5583,
		1,0,0,0,5604,5586,1,0,0,0,5604,5589,1,0,0,0,5604,5592,1,0,0,0,5604,5595,
		1,0,0,0,5604,5598,1,0,0,0,5605,5608,1,0,0,0,5606,5604,1,0,0,0,5606,5607,
		1,0,0,0,5607,687,1,0,0,0,5608,5606,1,0,0,0,5609,5610,6,344,-1,0,5610,5614,
		3,740,370,0,5611,5612,3,1190,595,0,5612,5613,3,676,338,0,5613,5615,1,0,
		0,0,5614,5611,1,0,0,0,5614,5615,1,0,0,0,5615,5719,1,0,0,0,5616,5618,3,
		1046,523,0,5617,5619,3,692,346,0,5618,5617,1,0,0,0,5618,5619,1,0,0,0,5619,
		5719,1,0,0,0,5620,5719,3,716,358,0,5621,5719,3,734,367,0,5622,5719,3,1148,
		574,0,5623,5719,5,787,0,0,5624,5719,3,694,347,0,5625,5626,4,344,146,0,
		5626,5719,3,696,348,0,5627,5628,4,344,147,0,5628,5719,3,698,349,0,5629,
		5630,7,85,0,0,5630,5719,3,688,344,14,5631,5632,3,762,381,0,5632,5633,3,
		688,344,13,5633,5719,1,0,0,0,5634,5636,5,487,0,0,5635,5634,1,0,0,0,5635,
		5636,1,0,0,0,5636,5637,1,0,0,0,5637,5638,5,776,0,0,5638,5639,3,756,378,
		0,5639,5640,5,777,0,0,5640,5719,1,0,0,0,5641,5643,5,174,0,0,5642,5641,
		1,0,0,0,5642,5643,1,0,0,0,5643,5644,1,0,0,0,5644,5719,3,280,140,0,5645,
		5646,5,778,0,0,5646,5647,3,1128,564,0,5647,5648,3,676,338,0,5648,5649,
		5,779,0,0,5649,5719,1,0,0,0,5650,5651,5,320,0,0,5651,5652,3,710,355,0,
		5652,5653,5,7,0,0,5653,5654,5,776,0,0,5654,5656,3,686,343,0,5655,5657,
		3,714,357,0,5656,5655,1,0,0,0,5656,5657,1,0,0,0,5657,5658,1,0,0,0,5658,
		5659,5,777,0,0,5659,5719,1,0,0,0,5660,5661,5,32,0,0,5661,5719,3,688,344,
		8,5662,5663,5,52,0,0,5663,5664,5,776,0,0,5664,5665,3,676,338,0,5665,5666,
		5,17,0,0,5666,5668,3,754,377,0,5667,5669,3,690,345,0,5668,5667,1,0,0,0,
		5668,5669,1,0,0,0,5669,5670,1,0,0,0,5670,5671,5,777,0,0,5671,5719,1,0,
		0,0,5672,5674,5,51,0,0,5673,5675,3,676,338,0,5674,5673,1,0,0,0,5674,5675,
		1,0,0,0,5675,5679,1,0,0,0,5676,5677,3,748,374,0,5677,5678,3,750,375,0,
		5678,5680,1,0,0,0,5679,5676,1,0,0,0,5680,5681,1,0,0,0,5681,5679,1,0,0,
		0,5681,5682,1,0,0,0,5682,5684,1,0,0,0,5683,5685,3,752,376,0,5684,5683,
		1,0,0,0,5684,5685,1,0,0,0,5685,5686,1,0,0,0,5686,5687,5,159,0,0,5687,5719,
		1,0,0,0,5688,5689,5,94,0,0,5689,5690,5,776,0,0,5690,5691,3,676,338,0,5691,
		5692,5,773,0,0,5692,5693,3,754,377,0,5693,5694,5,777,0,0,5694,5719,1,0,
		0,0,5695,5696,5,94,0,0,5696,5697,5,776,0,0,5697,5698,3,676,338,0,5698,
		5699,5,621,0,0,5699,5700,3,936,468,0,5700,5701,5,777,0,0,5701,5719,1,0,
		0,0,5702,5703,5,128,0,0,5703,5704,5,776,0,0,5704,5705,3,1136,568,0,5705,
		5706,5,777,0,0,5706,5719,1,0,0,0,5707,5708,5,626,0,0,5708,5709,5,776,0,
		0,5709,5710,3,1136,568,0,5710,5711,5,777,0,0,5711,5719,1,0,0,0,5712,5713,
		5,247,0,0,5713,5714,3,676,338,0,5714,5715,3,764,382,0,5715,5716,5,758,
		0,0,5716,5717,3,676,338,0,5717,5719,1,0,0,0,5718,5609,1,0,0,0,5718,5616,
		1,0,0,0,5718,5620,1,0,0,0,5718,5621,1,0,0,0,5718,5622,1,0,0,0,5718,5623,
		1,0,0,0,5718,5624,1,0,0,0,5718,5625,1,0,0,0,5718,5627,1,0,0,0,5718,5629,
		1,0,0,0,5718,5631,1,0,0,0,5718,5635,1,0,0,0,5718,5642,1,0,0,0,5718,5645,
		1,0,0,0,5718,5650,1,0,0,0,5718,5660,1,0,0,0,5718,5662,1,0,0,0,5718,5672,
		1,0,0,0,5718,5688,1,0,0,0,5718,5695,1,0,0,0,5718,5702,1,0,0,0,5718,5707,
		1,0,0,0,5718,5712,1,0,0,0,5719,5728,1,0,0,0,5720,5721,10,15,0,0,5721,5722,
		5,746,0,0,5722,5727,3,688,344,16,5723,5724,10,21,0,0,5724,5725,5,69,0,
		0,5725,5727,3,1180,590,0,5726,5720,1,0,0,0,5726,5723,1,0,0,0,5727,5730,
		1,0,0,0,5728,5726,1,0,0,0,5728,5729,1,0,0,0,5729,689,1,0,0,0,5730,5728,
		1,0,0,0,5731,5732,4,345,150,0,5732,5733,5,731,0,0,5733,691,1,0,0,0,5734,
		5735,4,346,151,0,5735,5736,5,781,0,0,5736,5741,3,1154,577,0,5737,5738,
		4,346,152,0,5738,5739,5,782,0,0,5739,5741,3,1154,577,0,5740,5734,1,0,0,
		0,5740,5737,1,0,0,0,5741,693,1,0,0,0,5742,5743,5,26,0,0,5743,5745,5,776,
		0,0,5744,5746,5,143,0,0,5745,5744,1,0,0,0,5745,5746,1,0,0,0,5746,5747,
		1,0,0,0,5747,5748,3,708,354,0,5748,5751,5,777,0,0,5749,5750,4,347,153,
		0,5750,5752,3,700,350,0,5751,5749,1,0,0,0,5751,5752,1,0,0,0,5752,5874,
		1,0,0,0,5753,5754,7,86,0,0,5754,5755,5,776,0,0,5755,5756,3,708,354,0,5756,
		5759,5,777,0,0,5757,5758,4,347,154,0,5758,5760,3,700,350,0,5759,5757,1,
		0,0,0,5759,5760,1,0,0,0,5760,5874,1,0,0,0,5761,5762,4,347,155,0,5762,5874,
		3,706,353,0,5763,5764,5,95,0,0,5764,5766,5,776,0,0,5765,5767,5,10,0,0,
		5766,5765,1,0,0,0,5766,5767,1,0,0,0,5767,5768,1,0,0,0,5768,5769,5,760,
		0,0,5769,5772,5,777,0,0,5770,5771,4,347,156,0,5771,5773,3,700,350,0,5772,
		5770,1,0,0,0,5772,5773,1,0,0,0,5773,5874,1,0,0,0,5774,5775,5,95,0,0,5775,
		5783,5,776,0,0,5776,5778,5,10,0,0,5777,5776,1,0,0,0,5777,5778,1,0,0,0,
		5778,5779,1,0,0,0,5779,5784,5,760,0,0,5780,5784,3,708,354,0,5781,5782,
		5,143,0,0,5782,5784,3,756,378,0,5783,5777,1,0,0,0,5783,5780,1,0,0,0,5783,
		5781,1,0,0,0,5784,5785,1,0,0,0,5785,5788,5,777,0,0,5786,5787,4,347,157,
		0,5787,5789,3,700,350,0,5788,5786,1,0,0,0,5788,5789,1,0,0,0,5789,5874,
		1,0,0,0,5790,5791,5,345,0,0,5791,5793,5,776,0,0,5792,5794,5,143,0,0,5793,
		5792,1,0,0,0,5793,5794,1,0,0,0,5794,5795,1,0,0,0,5795,5796,3,708,354,0,
		5796,5799,5,777,0,0,5797,5798,4,347,158,0,5798,5800,3,700,350,0,5799,5797,
		1,0,0,0,5799,5800,1,0,0,0,5800,5874,1,0,0,0,5801,5802,5,326,0,0,5802,5804,
		5,776,0,0,5803,5805,5,143,0,0,5804,5803,1,0,0,0,5804,5805,1,0,0,0,5805,
		5806,1,0,0,0,5806,5807,3,708,354,0,5807,5810,5,777,0,0,5808,5809,4,347,
		159,0,5809,5811,3,700,350,0,5810,5808,1,0,0,0,5810,5811,1,0,0,0,5811,5874,
		1,0,0,0,5812,5813,5,551,0,0,5813,5814,5,776,0,0,5814,5815,3,708,354,0,
		5815,5818,5,777,0,0,5816,5817,4,347,160,0,5817,5819,3,700,350,0,5818,5816,
		1,0,0,0,5818,5819,1,0,0,0,5819,5874,1,0,0,0,5820,5821,5,632,0,0,5821,5822,
		5,776,0,0,5822,5823,3,708,354,0,5823,5826,5,777,0,0,5824,5825,4,347,161,
		0,5825,5827,3,700,350,0,5826,5824,1,0,0,0,5826,5827,1,0,0,0,5827,5874,
		1,0,0,0,5828,5829,5,548,0,0,5829,5830,5,776,0,0,5830,5831,3,708,354,0,
		5831,5834,5,777,0,0,5832,5833,4,347,162,0,5833,5835,3,700,350,0,5834,5832,
		1,0,0,0,5834,5835,1,0,0,0,5835,5874,1,0,0,0,5836,5837,5,635,0,0,5837,5838,
		5,776,0,0,5838,5839,3,708,354,0,5839,5842,5,777,0,0,5840,5841,4,347,163,
		0,5841,5843,3,700,350,0,5842,5840,1,0,0,0,5842,5843,1,0,0,0,5843,5874,
		1,0,0,0,5844,5845,5,564,0,0,5845,5847,5,776,0,0,5846,5848,5,143,0,0,5847,
		5846,1,0,0,0,5847,5848,1,0,0,0,5848,5849,1,0,0,0,5849,5850,3,708,354,0,
		5850,5853,5,777,0,0,5851,5852,4,347,164,0,5852,5854,3,700,350,0,5853,5851,
		1,0,0,0,5853,5854,1,0,0,0,5854,5874,1,0,0,0,5855,5856,5,218,0,0,5856,5858,
		5,776,0,0,5857,5859,5,143,0,0,5858,5857,1,0,0,0,5858,5859,1,0,0,0,5859,
		5860,1,0,0,0,5860,5862,3,756,378,0,5861,5863,3,328,164,0,5862,5861,1,0,
		0,0,5862,5863,1,0,0,0,5863,5866,1,0,0,0,5864,5865,5,499,0,0,5865,5867,
		3,1156,578,0,5866,5864,1,0,0,0,5866,5867,1,0,0,0,5867,5868,1,0,0,0,5868,
		5871,5,777,0,0,5869,5870,4,347,165,0,5870,5872,3,700,350,0,5871,5869,1,
		0,0,0,5871,5872,1,0,0,0,5872,5874,1,0,0,0,5873,5742,1,0,0,0,5873,5753,
		1,0,0,0,5873,5761,1,0,0,0,5873,5763,1,0,0,0,5873,5774,1,0,0,0,5873,5790,
		1,0,0,0,5873,5801,1,0,0,0,5873,5812,1,0,0,0,5873,5820,1,0,0,0,5873,5828,
		1,0,0,0,5873,5836,1,0,0,0,5873,5844,1,0,0,0,5873,5855,1,0,0,0,5874,695,
		1,0,0,0,5875,5876,5,672,0,0,5876,5877,5,776,0,0,5877,5878,3,756,378,0,
		5878,5879,5,777,0,0,5879,697,1,0,0,0,5880,5881,7,87,0,0,5881,5882,3,1188,
		594,0,5882,5883,3,700,350,0,5883,5923,1,0,0,0,5884,5885,5,688,0,0,5885,
		5886,3,772,386,0,5886,5887,3,700,350,0,5887,5923,1,0,0,0,5888,5889,7,88,
		0,0,5889,5890,5,776,0,0,5890,5892,3,676,338,0,5891,5893,3,702,351,0,5892,
		5891,1,0,0,0,5892,5893,1,0,0,0,5893,5894,1,0,0,0,5894,5896,5,777,0,0,5895,
		5897,3,704,352,0,5896,5895,1,0,0,0,5896,5897,1,0,0,0,5897,5898,1,0,0,0,
		5898,5899,3,700,350,0,5899,5923,1,0,0,0,5900,5901,7,89,0,0,5901,5903,3,
		770,385,0,5902,5904,3,704,352,0,5903,5902,1,0,0,0,5903,5904,1,0,0,0,5904,
		5905,1,0,0,0,5905,5906,3,700,350,0,5906,5923,1,0,0,0,5907,5908,5,687,0,
		0,5908,5909,5,776,0,0,5909,5910,3,676,338,0,5910,5911,5,773,0,0,5911,5912,
		3,688,344,0,5912,5915,5,777,0,0,5913,5914,5,203,0,0,5914,5916,7,90,0,0,
		5915,5913,1,0,0,0,5915,5916,1,0,0,0,5916,5918,1,0,0,0,5917,5919,3,704,
		352,0,5918,5917,1,0,0,0,5918,5919,1,0,0,0,5919,5920,1,0,0,0,5920,5921,
		3,700,350,0,5921,5923,1,0,0,0,5922,5880,1,0,0,0,5922,5884,1,0,0,0,5922,
		5888,1,0,0,0,5922,5900,1,0,0,0,5922,5907,1,0,0,0,5923,699,1,0,0,0,5924,
		5927,5,691,0,0,5925,5928,3,1124,562,0,5926,5928,3,302,151,0,5927,5925,
		1,0,0,0,5927,5926,1,0,0,0,5928,701,1,0,0,0,5929,5932,5,773,0,0,5930,5933,
		3,1144,572,0,5931,5933,5,787,0,0,5932,5930,1,0,0,0,5932,5931,1,0,0,0,5933,
		5936,1,0,0,0,5934,5935,5,773,0,0,5935,5937,3,676,338,0,5936,5934,1,0,0,
		0,5936,5937,1,0,0,0,5937,703,1,0,0,0,5938,5939,7,91,0,0,5939,5940,5,689,
		0,0,5940,705,1,0,0,0,5941,5942,5,667,0,0,5942,5943,5,776,0,0,5943,5944,
		3,708,354,0,5944,5946,5,777,0,0,5945,5947,3,700,350,0,5946,5945,1,0,0,
		0,5946,5947,1,0,0,0,5947,5958,1,0,0,0,5948,5949,5,666,0,0,5949,5950,5,
		776,0,0,5950,5951,3,708,354,0,5951,5952,5,773,0,0,5952,5953,3,708,354,
		0,5953,5955,5,777,0,0,5954,5956,3,700,350,0,5955,5954,1,0,0,0,5955,5956,
		1,0,0,0,5956,5958,1,0,0,0,5957,5941,1,0,0,0,5957,5948,1,0,0,0,5958,707,
		1,0,0,0,5959,5961,5,10,0,0,5960,5959,1,0,0,0,5960,5961,1,0,0,0,5961,5962,
		1,0,0,0,5962,5963,3,676,338,0,5963,709,1,0,0,0,5964,5970,3,712,356,0,5965,
		5966,5,776,0,0,5966,5967,3,712,356,0,5967,5968,5,777,0,0,5968,5970,1,0,
		0,0,5969,5964,1,0,0,0,5969,5965,1,0,0,0,5970,711,1,0,0,0,5971,5976,3,1136,
		568,0,5972,5973,5,773,0,0,5973,5975,3,1136,568,0,5974,5972,1,0,0,0,5975,
		5978,1,0,0,0,5976,5974,1,0,0,0,5976,5977,1,0,0,0,5977,713,1,0,0,0,5978,
		5976,1,0,0,0,5979,5980,5,251,0,0,5980,5981,5,41,0,0,5981,5995,5,346,0,
		0,5982,5983,5,251,0,0,5983,5984,5,359,0,0,5984,5985,5,267,0,0,5985,5989,
		5,346,0,0,5986,5987,5,645,0,0,5987,5988,5,430,0,0,5988,5990,5,176,0,0,
		5989,5986,1,0,0,0,5989,5990,1,0,0,0,5990,5995,1,0,0,0,5991,5992,5,645,
		0,0,5992,5993,5,430,0,0,5993,5995,5,176,0,0,5994,5979,1,0,0,0,5994,5982,
		1,0,0,0,5994,5991,1,0,0,0,5995,715,1,0,0,0,5996,5997,5,60,0,0,5997,5998,
		5,776,0,0,5998,6001,3,756,378,0,5999,6000,5,621,0,0,6000,6002,3,936,468,
		0,6001,5999,1,0,0,0,6001,6002,1,0,0,0,6002,6003,1,0,0,0,6003,6004,5,777,
		0,0,6004,6270,1,0,0,0,6005,6007,5,105,0,0,6006,6008,3,1188,594,0,6007,
		6006,1,0,0,0,6007,6008,1,0,0,0,6008,6270,1,0,0,0,6009,6010,5,116,0,0,6010,
		6270,3,770,385,0,6011,6012,5,122,0,0,6012,6270,3,770,385,0,6013,6014,5,
		229,0,0,6014,6270,3,770,385,0,6015,6016,5,242,0,0,6016,6017,5,776,0,0,
		6017,6018,3,676,338,0,6018,6019,5,773,0,0,6019,6020,3,676,338,0,6020,6021,
		5,773,0,0,6021,6022,3,676,338,0,6022,6023,5,773,0,0,6023,6024,3,676,338,
		0,6024,6025,5,777,0,0,6025,6270,1,0,0,0,6026,6027,5,247,0,0,6027,6028,
		5,776,0,0,6028,6031,3,676,338,0,6029,6030,5,773,0,0,6030,6032,3,676,338,
		0,6031,6029,1,0,0,0,6032,6033,1,0,0,0,6033,6031,1,0,0,0,6033,6034,1,0,
		0,0,6034,6035,1,0,0,0,6035,6036,5,777,0,0,6036,6270,1,0,0,0,6037,6038,
		5,272,0,0,6038,6039,5,776,0,0,6039,6040,3,676,338,0,6040,6041,5,773,0,
		0,6041,6042,3,676,338,0,6042,6043,5,777,0,0,6043,6270,1,0,0,0,6044,6045,
		5,343,0,0,6045,6270,3,770,385,0,6046,6047,5,350,0,0,6047,6270,3,770,385,
		0,6048,6049,5,478,0,0,6049,6050,5,776,0,0,6050,6051,3,676,338,0,6051,6052,
		5,773,0,0,6052,6053,3,676,338,0,6053,6054,5,777,0,0,6054,6270,1,0,0,0,
		6055,6056,5,495,0,0,6056,6270,3,770,385,0,6057,6058,5,586,0,0,6058,6270,
		3,770,385,0,6059,6060,5,583,0,0,6060,6061,5,776,0,0,6061,6064,3,676,338,
		0,6062,6063,5,773,0,0,6063,6065,3,676,338,0,6064,6062,1,0,0,0,6064,6065,
		1,0,0,0,6065,6066,1,0,0,0,6066,6067,5,777,0,0,6067,6270,1,0,0,0,6068,6270,
		3,730,365,0,6069,6070,5,618,0,0,6070,6270,3,1188,594,0,6071,6072,5,626,
		0,0,6072,6270,3,770,385,0,6073,6074,5,656,0,0,6074,6270,3,770,385,0,6075,
		6076,7,92,0,0,6076,6077,5,776,0,0,6077,6078,3,676,338,0,6078,6084,5,773,
		0,0,6079,6085,3,676,338,0,6080,6081,5,247,0,0,6081,6082,3,676,338,0,6082,
		6083,3,764,382,0,6083,6085,1,0,0,0,6084,6079,1,0,0,0,6084,6080,1,0,0,0,
		6085,6086,1,0,0,0,6086,6087,5,777,0,0,6087,6270,1,0,0,0,6088,6090,5,100,
		0,0,6089,6091,3,1188,594,0,6090,6089,1,0,0,0,6090,6091,1,0,0,0,6091,6270,
		1,0,0,0,6092,6094,5,108,0,0,6093,6095,3,720,360,0,6094,6093,1,0,0,0,6094,
		6095,1,0,0,0,6095,6270,1,0,0,0,6096,6097,7,93,0,0,6097,6098,5,776,0,0,
		6098,6099,3,676,338,0,6099,6100,5,773,0,0,6100,6101,5,247,0,0,6101,6102,
		3,676,338,0,6102,6103,3,764,382,0,6103,6104,5,777,0,0,6104,6270,1,0,0,
		0,6105,6106,5,182,0,0,6106,6107,5,776,0,0,6107,6108,3,764,382,0,6108,6109,
		5,203,0,0,6109,6110,3,676,338,0,6110,6111,5,777,0,0,6111,6270,1,0,0,0,
		6112,6113,5,213,0,0,6113,6114,5,776,0,0,6114,6115,3,728,364,0,6115,6116,
		5,773,0,0,6116,6117,3,676,338,0,6117,6118,5,777,0,0,6118,6270,1,0,0,0,
		6119,6121,5,372,0,0,6120,6122,3,720,360,0,6121,6120,1,0,0,0,6121,6122,
		1,0,0,0,6122,6270,1,0,0,0,6123,6124,5,414,0,0,6124,6125,5,776,0,0,6125,
		6126,3,686,343,0,6126,6127,5,251,0,0,6127,6128,3,676,338,0,6128,6129,5,
		777,0,0,6129,6270,1,0,0,0,6130,6270,3,732,366,0,6131,6133,5,569,0,0,6132,
		6134,3,720,360,0,6133,6132,1,0,0,0,6133,6134,1,0,0,0,6134,6270,1,0,0,0,
		6135,6136,7,94,0,0,6136,6137,5,776,0,0,6137,6138,3,766,383,0,6138,6139,
		5,773,0,0,6139,6140,3,676,338,0,6140,6141,5,773,0,0,6141,6142,3,676,338,
		0,6142,6143,5,777,0,0,6143,6270,1,0,0,0,6144,6146,5,622,0,0,6145,6147,
		3,1188,594,0,6146,6145,1,0,0,0,6146,6147,1,0,0,0,6147,6270,1,0,0,0,6148,
		6150,5,624,0,0,6149,6151,3,720,360,0,6150,6149,1,0,0,0,6150,6151,1,0,0,
		0,6151,6270,1,0,0,0,6152,6154,5,623,0,0,6153,6155,3,720,360,0,6154,6153,
		1,0,0,0,6154,6155,1,0,0,0,6155,6270,1,0,0,0,6156,6157,5,19,0,0,6157,6270,
		3,770,385,0,6158,6159,5,58,0,0,6159,6270,3,770,385,0,6160,6161,5,67,0,
		0,6161,6270,3,768,384,0,6162,6163,5,70,0,0,6163,6270,3,770,385,0,6164,
		6165,5,109,0,0,6165,6270,3,1188,594,0,6166,6167,5,231,0,0,6167,6168,5,
		776,0,0,6168,6169,3,676,338,0,6169,6170,5,773,0,0,6170,6171,3,676,338,
		0,6171,6172,5,773,0,0,6172,6173,3,676,338,0,6173,6174,5,777,0,0,6174,6270,
		1,0,0,0,6175,6176,5,201,0,0,6176,6177,5,776,0,0,6177,6178,3,676,338,0,
		6178,6179,5,773,0,0,6179,6182,3,676,338,0,6180,6181,5,773,0,0,6181,6183,
		3,676,338,0,6182,6180,1,0,0,0,6182,6183,1,0,0,0,6183,6184,1,0,0,0,6184,
		6185,5,777,0,0,6185,6270,1,0,0,0,6186,6187,5,337,0,0,6187,6270,3,770,385,
		0,6188,6189,5,349,0,0,6189,6190,5,776,0,0,6190,6191,3,676,338,0,6191,6192,
		5,773,0,0,6192,6193,3,676,338,0,6193,6194,5,777,0,0,6194,6270,1,0,0,0,
		6195,6196,4,358,166,0,6196,6197,5,382,0,0,6197,6198,5,776,0,0,6198,6199,
		3,1160,580,0,6199,6200,5,777,0,0,6200,6270,1,0,0,0,6201,6202,4,358,167,
		0,6202,6203,5,406,0,0,6203,6270,3,770,385,0,6204,6205,5,429,0,0,6205,6270,
		3,770,385,0,6206,6207,5,457,0,0,6207,6208,5,776,0,0,6208,6209,3,676,338,
		0,6209,6210,5,773,0,0,6210,6211,3,676,338,0,6211,6212,5,777,0,0,6212,6270,
		1,0,0,0,6213,6214,5,458,0,0,6214,6215,5,776,0,0,6215,6216,3,676,338,0,
		6216,6217,5,773,0,0,6217,6218,3,676,338,0,6218,6219,5,773,0,0,6219,6220,
		3,676,338,0,6220,6221,5,777,0,0,6221,6270,1,0,0,0,6222,6223,5,476,0,0,
		6223,6270,3,770,385,0,6224,6225,5,485,0,0,6225,6270,3,1188,594,0,6226,
		6227,5,597,0,0,6227,6228,5,776,0,0,6228,6229,3,676,338,0,6229,6230,5,773,
		0,0,6230,6231,3,676,338,0,6231,6232,5,777,0,0,6232,6270,1,0,0,0,6233,6234,
		5,640,0,0,6234,6235,5,776,0,0,6235,6238,3,676,338,0,6236,6237,5,773,0,
		0,6237,6239,3,676,338,0,6238,6236,1,0,0,0,6238,6239,1,0,0,0,6239,6240,
		1,0,0,0,6240,6241,5,777,0,0,6241,6270,1,0,0,0,6242,6243,5,641,0,0,6243,
		6244,5,776,0,0,6244,6264,3,676,338,0,6245,6246,5,17,0,0,6246,6247,5,60,
		0,0,6247,6249,3,932,466,0,6248,6245,1,0,0,0,6248,6249,1,0,0,0,6249,6252,
		1,0,0,0,6250,6251,4,358,168,0,6251,6253,3,724,362,0,6252,6250,1,0,0,0,
		6252,6253,1,0,0,0,6253,6265,1,0,0,0,6254,6255,5,17,0,0,6255,6256,5,32,
		0,0,6256,6265,3,932,466,0,6257,6258,5,773,0,0,6258,6259,3,1140,570,0,6259,
		6260,5,773,0,0,6260,6261,3,1140,570,0,6261,6262,5,773,0,0,6262,6263,3,
		1140,570,0,6263,6265,1,0,0,0,6264,6248,1,0,0,0,6264,6254,1,0,0,0,6264,
		6257,1,0,0,0,6265,6266,1,0,0,0,6266,6267,5,777,0,0,6267,6270,1,0,0,0,6268,
		6270,3,718,359,0,6269,5996,1,0,0,0,6269,6005,1,0,0,0,6269,6009,1,0,0,0,
		6269,6011,1,0,0,0,6269,6013,1,0,0,0,6269,6015,1,0,0,0,6269,6026,1,0,0,
		0,6269,6037,1,0,0,0,6269,6044,1,0,0,0,6269,6046,1,0,0,0,6269,6048,1,0,
		0,0,6269,6055,1,0,0,0,6269,6057,1,0,0,0,6269,6059,1,0,0,0,6269,6068,1,
		0,0,0,6269,6069,1,0,0,0,6269,6071,1,0,0,0,6269,6073,1,0,0,0,6269,6075,
		1,0,0,0,6269,6088,1,0,0,0,6269,6092,1,0,0,0,6269,6096,1,0,0,0,6269,6105,
		1,0,0,0,6269,6112,1,0,0,0,6269,6119,1,0,0,0,6269,6123,1,0,0,0,6269,6130,
		1,0,0,0,6269,6131,1,0,0,0,6269,6135,1,0,0,0,6269,6144,1,0,0,0,6269,6148,
		1,0,0,0,6269,6152,1,0,0,0,6269,6156,1,0,0,0,6269,6158,1,0,0,0,6269,6160,
		1,0,0,0,6269,6162,1,0,0,0,6269,6164,1,0,0,0,6269,6166,1,0,0,0,6269,6175,
		1,0,0,0,6269,6186,1,0,0,0,6269,6188,1,0,0,0,6269,6195,1,0,0,0,6269,6201,
		1,0,0,0,6269,6204,1,0,0,0,6269,6206,1,0,0,0,6269,6213,1,0,0,0,6269,6222,
		1,0,0,0,6269,6224,1,0,0,0,6269,6226,1,0,0,0,6269,6233,1,0,0,0,6269,6242,
		1,0,0,0,6269,6268,1,0,0,0,6270,717,1,0,0,0,6271,6272,4,359,169,0,6272,
		6273,5,90,0,0,6273,6274,5,776,0,0,6274,6275,3,676,338,0,6275,6276,5,773,
		0,0,6276,6277,3,676,338,0,6277,6278,5,777,0,0,6278,6303,1,0,0,0,6279,6280,
		5,211,0,0,6280,6282,5,776,0,0,6281,6283,3,756,378,0,6282,6281,1,0,0,0,
		6282,6283,1,0,0,0,6283,6284,1,0,0,0,6284,6303,5,777,0,0,6285,6286,5,279,
		0,0,6286,6303,3,768,384,0,6287,6288,5,351,0,0,6288,6303,3,768,384,0,6289,
		6290,5,352,0,0,6290,6303,3,768,384,0,6291,6292,5,353,0,0,6292,6303,3,768,
		384,0,6293,6294,5,411,0,0,6294,6295,5,776,0,0,6295,6296,3,676,338,0,6296,
		6297,5,773,0,0,6297,6298,3,676,338,0,6298,6299,5,777,0,0,6299,6303,1,0,
		0,0,6300,6301,5,412,0,0,6301,6303,3,768,384,0,6302,6271,1,0,0,0,6302,6279,
		1,0,0,0,6302,6285,1,0,0,0,6302,6287,1,0,0,0,6302,6289,1,0,0,0,6302,6291,
		1,0,0,0,6302,6293,1,0,0,0,6302,6300,1,0,0,0,6303,719,1,0,0,0,6304,6306,
		5,776,0,0,6305,6307,3,722,361,0,6306,6305,1,0,0,0,6306,6307,1,0,0,0,6307,
		6308,1,0,0,0,6308,6309,5,777,0,0,6309,721,1,0,0,0,6310,6311,4,361,170,
		0,6311,6312,5,747,0,0,6312,723,1,0,0,0,6313,6326,5,274,0,0,6314,6315,3,
		1142,571,0,6315,6316,5,759,0,0,6316,6317,3,1142,571,0,6317,6327,1,0,0,
		0,6318,6323,3,726,363,0,6319,6320,5,773,0,0,6320,6322,3,726,363,0,6321,
		6319,1,0,0,0,6322,6325,1,0,0,0,6323,6321,1,0,0,0,6323,6324,1,0,0,0,6324,
		6327,1,0,0,0,6325,6323,1,0,0,0,6326,6314,1,0,0,0,6326,6318,1,0,0,0,6327,
		725,1,0,0,0,6328,6334,3,1142,571,0,6329,6331,7,33,0,0,6330,6332,5,476,
		0,0,6331,6330,1,0,0,0,6331,6332,1,0,0,0,6332,6335,1,0,0,0,6333,6335,5,
		476,0,0,6334,6329,1,0,0,0,6334,6333,1,0,0,0,6334,6335,1,0,0,0,6335,727,
		1,0,0,0,6336,6337,7,95,0,0,6337,729,1,0,0,0,6338,6339,5,595,0,0,6339,6363,
		5,776,0,0,6340,6343,3,676,338,0,6341,6342,5,203,0,0,6342,6344,3,676,338,
		0,6343,6341,1,0,0,0,6343,6344,1,0,0,0,6344,6364,1,0,0,0,6345,6347,5,269,
		0,0,6346,6348,3,676,338,0,6347,6346,1,0,0,0,6347,6348,1,0,0,0,6348,6349,
		1,0,0,0,6349,6350,5,203,0,0,6350,6364,3,676,338,0,6351,6353,5,591,0,0,
		6352,6354,3,676,338,0,6353,6352,1,0,0,0,6353,6354,1,0,0,0,6354,6355,1,
		0,0,0,6355,6356,5,203,0,0,6356,6364,3,676,338,0,6357,6359,5,43,0,0,6358,
		6360,3,676,338,0,6359,6358,1,0,0,0,6359,6360,1,0,0,0,6360,6361,1,0,0,0,
		6361,6362,5,203,0,0,6362,6364,3,676,338,0,6363,6340,1,0,0,0,6363,6345,
		1,0,0,0,6363,6351,1,0,0,0,6363,6357,1,0,0,0,6364,6365,1,0,0,0,6365,6366,
		5,777,0,0,6366,731,1,0,0,0,6367,6368,5,563,0,0,6368,6369,5,776,0,0,6369,
		6382,3,676,338,0,6370,6371,5,773,0,0,6371,6374,3,676,338,0,6372,6373,5,
		773,0,0,6373,6375,3,676,338,0,6374,6372,1,0,0,0,6374,6375,1,0,0,0,6375,
		6383,1,0,0,0,6376,6377,5,203,0,0,6377,6380,3,676,338,0,6378,6379,5,200,
		0,0,6379,6381,3,676,338,0,6380,6378,1,0,0,0,6380,6381,1,0,0,0,6381,6383,
		1,0,0,0,6382,6370,1,0,0,0,6382,6376,1,0,0,0,6383,6384,1,0,0,0,6384,6385,
		5,777,0,0,6385,733,1,0,0,0,6386,6387,3,1126,563,0,6387,6389,5,776,0,0,
		6388,6390,3,736,368,0,6389,6388,1,0,0,0,6389,6390,1,0,0,0,6390,6391,1,
		0,0,0,6391,6392,5,777,0,0,6392,6401,1,0,0,0,6393,6394,3,1134,567,0,6394,
		6396,5,776,0,0,6395,6397,3,756,378,0,6396,6395,1,0,0,0,6396,6397,1,0,0,
		0,6397,6398,1,0,0,0,6398,6399,5,777,0,0,6399,6401,1,0,0,0,6400,6386,1,
		0,0,0,6400,6393,1,0,0,0,6401,735,1,0,0,0,6402,6407,3,738,369,0,6403,6404,
		5,773,0,0,6404,6406,3,738,369,0,6405,6403,1,0,0,0,6406,6409,1,0,0,0,6407,
		6405,1,0,0,0,6407,6408,1,0,0,0,6408,737,1,0,0,0,6409,6407,1,0,0,0,6410,
		6412,3,676,338,0,6411,6413,3,356,178,0,6412,6411,1,0,0,0,6412,6413,1,0,
		0,0,6413,739,1,0,0,0,6414,6417,3,742,371,0,6415,6417,3,744,372,0,6416,
		6414,1,0,0,0,6416,6415,1,0,0,0,6417,741,1,0,0,0,6418,6419,5,783,0,0,6419,
		6422,3,1180,590,0,6420,6422,5,784,0,0,6421,6418,1,0,0,0,6421,6420,1,0,
		0,0,6422,743,1,0,0,0,6423,6425,5,785,0,0,6424,6426,3,1194,597,0,6425,6424,
		1,0,0,0,6425,6426,1,0,0,0,6426,6427,1,0,0,0,6427,6429,3,1180,590,0,6428,
		6430,3,1138,569,0,6429,6428,1,0,0,0,6429,6430,1,0,0,0,6430,745,1,0,0,0,
		6431,6432,4,373,171,0,6432,6434,3,1128,564,0,6433,6435,3,1138,569,0,6434,
		6433,1,0,0,0,6434,6435,1,0,0,0,6435,6442,1,0,0,0,6436,6437,4,373,172,0,
		6437,6439,3,1182,591,0,6438,6440,3,1138,569,0,6439,6438,1,0,0,0,6439,6440,
		1,0,0,0,6440,6442,1,0,0,0,6441,6431,1,0,0,0,6441,6436,1,0,0,0,6442,6446,
		1,0,0,0,6443,6444,5,128,0,0,6444,6446,3,1138,569,0,6445,6441,1,0,0,0,6445,
		6443,1,0,0,0,6446,747,1,0,0,0,6447,6448,5,642,0,0,6448,6449,3,676,338,
		0,6449,749,1,0,0,0,6450,6451,5,582,0,0,6451,6452,3,676,338,0,6452,751,
		1,0,0,0,6453,6454,5,154,0,0,6454,6455,3,676,338,0,6455,753,1,0,0,0,6456,
		6458,5,32,0,0,6457,6459,3,922,461,0,6458,6457,1,0,0,0,6458,6459,1,0,0,
		0,6459,6502,1,0,0,0,6460,6462,5,60,0,0,6461,6463,3,922,461,0,6462,6461,
		1,0,0,0,6462,6463,1,0,0,0,6463,6465,1,0,0,0,6464,6466,3,926,463,0,6465,
		6464,1,0,0,0,6465,6466,1,0,0,0,6466,6502,1,0,0,0,6467,6469,3,918,459,0,
		6468,6470,3,922,461,0,6469,6468,1,0,0,0,6469,6470,1,0,0,0,6470,6502,1,
		0,0,0,6471,6473,5,512,0,0,6472,6474,5,249,0,0,6473,6472,1,0,0,0,6473,6474,
		1,0,0,0,6474,6502,1,0,0,0,6475,6477,5,612,0,0,6476,6478,5,249,0,0,6477,
		6476,1,0,0,0,6477,6478,1,0,0,0,6478,6502,1,0,0,0,6479,6502,5,116,0,0,6480,
		6482,5,586,0,0,6481,6483,3,934,467,0,6482,6481,1,0,0,0,6482,6483,1,0,0,
		0,6483,6502,1,0,0,0,6484,6486,5,113,0,0,6485,6487,3,934,467,0,6486,6485,
		1,0,0,0,6486,6487,1,0,0,0,6487,6502,1,0,0,0,6488,6490,5,126,0,0,6489,6491,
		3,1174,587,0,6490,6489,1,0,0,0,6490,6491,1,0,0,0,6491,6502,1,0,0,0,6492,
		6493,4,377,173,0,6493,6502,5,262,0,0,6494,6495,4,377,174,0,6495,6502,3,
		920,460,0,6496,6497,4,377,175,0,6497,6499,5,195,0,0,6498,6500,3,1176,588,
		0,6499,6498,1,0,0,0,6499,6500,1,0,0,0,6500,6502,1,0,0,0,6501,6456,1,0,
		0,0,6501,6460,1,0,0,0,6501,6467,1,0,0,0,6501,6471,1,0,0,0,6501,6475,1,
		0,0,0,6501,6479,1,0,0,0,6501,6480,1,0,0,0,6501,6484,1,0,0,0,6501,6488,
		1,0,0,0,6501,6492,1,0,0,0,6501,6494,1,0,0,0,6501,6496,1,0,0,0,6502,755,
		1,0,0,0,6503,6508,3,676,338,0,6504,6505,5,773,0,0,6505,6507,3,676,338,
		0,6506,6504,1,0,0,0,6507,6510,1,0,0,0,6508,6506,1,0,0,0,6508,6509,1,0,
		0,0,6509,757,1,0,0,0,6510,6508,1,0,0,0,6511,6512,5,60,0,0,6512,6515,5,
		506,0,0,6513,6515,5,58,0,0,6514,6511,1,0,0,0,6514,6513,1,0,0,0,6515,759,
		1,0,0,0,6516,6517,7,96,0,0,6517,761,1,0,0,0,6518,6519,7,97,0,0,6519,763,
		1,0,0,0,6520,6523,3,766,383,0,6521,6523,7,98,0,0,6522,6520,1,0,0,0,6522,
		6521,1,0,0,0,6523,765,1,0,0,0,6524,6525,7,99,0,0,6525,767,1,0,0,0,6526,
		6527,5,776,0,0,6527,6528,3,756,378,0,6528,6529,5,777,0,0,6529,769,1,0,
		0,0,6530,6531,5,776,0,0,6531,6532,3,676,338,0,6532,6533,5,777,0,0,6533,
		771,1,0,0,0,6534,6535,5,776,0,0,6535,6536,3,688,344,0,6536,6537,5,777,
		0,0,6537,773,1,0,0,0,6538,6543,3,776,388,0,6539,6540,5,773,0,0,6540,6542,
		3,776,388,0,6541,6539,1,0,0,0,6542,6545,1,0,0,0,6543,6541,1,0,0,0,6543,
		6544,1,0,0,0,6544,775,1,0,0,0,6545,6543,1,0,0,0,6546,6548,3,676,338,0,
		6547,6549,3,330,165,0,6548,6547,1,0,0,0,6548,6549,1,0,0,0,6549,777,1,0,
		0,0,6550,6555,3,780,390,0,6551,6552,5,773,0,0,6552,6554,3,780,390,0,6553,
		6551,1,0,0,0,6554,6557,1,0,0,0,6555,6553,1,0,0,0,6555,6556,1,0,0,0,6556,
		779,1,0,0,0,6557,6555,1,0,0,0,6558,6559,3,676,338,0,6559,781,1,0,0,0,6560,
		6561,4,391,176,0,6561,6562,5,200,0,0,6562,6563,5,57,0,0,6563,6564,3,1162,
		581,0,6564,783,1,0,0,0,6565,6579,3,2,1,0,6566,6579,3,786,393,0,6567,6579,
		3,788,394,0,6568,6579,3,796,398,0,6569,6579,3,800,400,0,6570,6579,3,802,
		401,0,6571,6579,3,808,404,0,6572,6579,3,810,405,0,6573,6579,3,838,419,
		0,6574,6579,3,836,418,0,6575,6579,3,856,428,0,6576,6579,3,860,430,0,6577,
		6579,3,858,429,0,6578,6565,1,0,0,0,6578,6566,1,0,0,0,6578,6567,1,0,0,0,
		6578,6568,1,0,0,0,6578,6569,1,0,0,0,6578,6570,1,0,0,0,6578,6571,1,0,0,
		0,6578,6572,1,0,0,0,6578,6573,1,0,0,0,6578,6574,1,0,0,0,6578,6575,1,0,
		0,0,6578,6576,1,0,0,0,6578,6577,1,0,0,0,6579,785,1,0,0,0,6580,6581,5,475,
		0,0,6581,6582,3,676,338,0,6582,787,1,0,0,0,6583,6584,5,231,0,0,6584,6585,
		3,790,395,0,6585,6586,5,159,0,0,6586,6587,5,231,0,0,6587,789,1,0,0,0,6588,
		6589,3,676,338,0,6589,6594,3,792,396,0,6590,6591,5,155,0,0,6591,6595,3,
		790,395,0,6592,6593,5,154,0,0,6593,6595,3,794,397,0,6594,6590,1,0,0,0,
		6594,6592,1,0,0,0,6594,6595,1,0,0,0,6595,791,1,0,0,0,6596,6597,5,582,0,
		0,6597,6598,3,794,397,0,6598,793,1,0,0,0,6599,6600,3,784,392,0,6600,6601,
		5,774,0,0,6601,6603,1,0,0,0,6602,6599,1,0,0,0,6603,6604,1,0,0,0,6604,6602,
		1,0,0,0,6604,6605,1,0,0,0,6605,795,1,0,0,0,6606,6608,5,51,0,0,6607,6609,
		3,676,338,0,6608,6607,1,0,0,0,6608,6609,1,0,0,0,6609,6613,1,0,0,0,6610,
		6611,3,748,374,0,6611,6612,3,792,396,0,6612,6614,1,0,0,0,6613,6610,1,0,
		0,0,6614,6615,1,0,0,0,6615,6613,1,0,0,0,6615,6616,1,0,0,0,6616,6618,1,
		0,0,0,6617,6619,3,798,399,0,6618,6617,1,0,0,0,6618,6619,1,0,0,0,6619,6620,
		1,0,0,0,6620,6621,5,159,0,0,6621,6622,5,51,0,0,6622,797,1,0,0,0,6623,6624,
		5,154,0,0,6624,6625,3,794,397,0,6625,799,1,0,0,0,6626,6627,3,804,402,0,
		6627,6629,3,806,403,0,6628,6630,3,1112,556,0,6629,6628,1,0,0,0,6629,6630,
		1,0,0,0,6630,801,1,0,0,0,6631,6632,3,806,403,0,6632,803,1,0,0,0,6633,6634,
		3,1110,555,0,6634,6635,5,775,0,0,6635,805,1,0,0,0,6636,6638,5,29,0,0,6637,
		6639,3,818,409,0,6638,6637,1,0,0,0,6638,6639,1,0,0,0,6639,6641,1,0,0,0,
		6640,6642,3,794,397,0,6641,6640,1,0,0,0,6641,6642,1,0,0,0,6642,6643,1,
		0,0,0,6643,6644,5,159,0,0,6644,807,1,0,0,0,6645,6646,3,804,402,0,6646,
		6648,3,810,405,0,6647,6649,3,1112,556,0,6648,6647,1,0,0,0,6648,6649,1,
		0,0,0,6649,809,1,0,0,0,6650,6654,3,812,406,0,6651,6654,3,814,407,0,6652,
		6654,3,816,408,0,6653,6650,1,0,0,0,6653,6651,1,0,0,0,6653,6652,1,0,0,0,
		6654,811,1,0,0,0,6655,6656,5,294,0,0,6656,6657,3,794,397,0,6657,6658,5,
		159,0,0,6658,6659,5,294,0,0,6659,813,1,0,0,0,6660,6661,5,644,0,0,6661,
		6662,3,676,338,0,6662,6663,5,147,0,0,6663,6664,3,794,397,0,6664,6665,5,
		159,0,0,6665,6666,5,644,0,0,6666,815,1,0,0,0,6667,6668,5,457,0,0,6668,
		6669,3,794,397,0,6669,6670,5,613,0,0,6670,6671,3,676,338,0,6671,6672,5,
		159,0,0,6672,6673,5,457,0,0,6673,817,1,0,0,0,6674,6675,3,820,410,0,6675,
		6676,5,774,0,0,6676,6678,1,0,0,0,6677,6674,1,0,0,0,6678,6679,1,0,0,0,6679,
		6677,1,0,0,0,6679,6680,1,0,0,0,6680,819,1,0,0,0,6681,6686,3,822,411,0,
		6682,6686,3,824,412,0,6683,6686,3,830,415,0,6684,6686,3,834,417,0,6685,
		6681,1,0,0,0,6685,6682,1,0,0,0,6685,6683,1,0,0,0,6685,6684,1,0,0,0,6686,
		821,1,0,0,0,6687,6688,5,127,0,0,6688,6689,3,1130,565,0,6689,6691,3,916,
		458,0,6690,6692,3,986,493,0,6691,6690,1,0,0,0,6691,6692,1,0,0,0,6692,6695,
		1,0,0,0,6693,6694,5,128,0,0,6694,6696,3,676,338,0,6695,6693,1,0,0,0,6695,
		6696,1,0,0,0,6696,823,1,0,0,0,6697,6698,5,127,0,0,6698,6699,3,1128,564,
		0,6699,6700,5,83,0,0,6700,6701,5,200,0,0,6701,6702,3,826,413,0,6702,825,
		1,0,0,0,6703,6706,3,1140,570,0,6704,6706,3,828,414,0,6705,6703,1,0,0,0,
		6705,6704,1,0,0,0,6706,827,1,0,0,0,6707,6709,5,526,0,0,6708,6710,5,627,
		0,0,6709,6708,1,0,0,0,6709,6710,1,0,0,0,6710,6711,1,0,0,0,6711,6712,3,
		1160,580,0,6712,829,1,0,0,0,6713,6714,5,127,0,0,6714,6715,7,100,0,0,6715,
		6716,5,219,0,0,6716,6717,5,200,0,0,6717,6722,3,832,416,0,6718,6719,5,773,
		0,0,6719,6721,3,832,416,0,6720,6718,1,0,0,0,6721,6724,1,0,0,0,6722,6720,
		1,0,0,0,6722,6723,1,0,0,0,6723,6725,1,0,0,0,6724,6722,1,0,0,0,6725,6726,
		3,784,392,0,6726,831,1,0,0,0,6727,6735,3,826,413,0,6728,6735,3,1128,564,
		0,6729,6735,5,527,0,0,6730,6731,3,760,380,0,6731,6732,5,202,0,0,6732,6735,
		1,0,0,0,6733,6735,5,525,0,0,6734,6727,1,0,0,0,6734,6728,1,0,0,0,6734,6729,
		1,0,0,0,6734,6730,1,0,0,0,6734,6733,1,0,0,0,6735,833,1,0,0,0,6736,6737,
		5,127,0,0,6737,6738,3,1128,564,0,6738,6739,5,106,0,0,6739,6740,5,200,0,
		0,6740,6741,3,266,133,0,6741,835,1,0,0,0,6742,6743,5,260,0,0,6743,6744,
		3,1112,556,0,6744,837,1,0,0,0,6745,6746,5,271,0,0,6746,6747,3,1112,556,
		0,6747,839,1,0,0,0,6748,6752,5,207,0,0,6749,6753,5,101,0,0,6750,6751,4,
		420,177,0,6751,6753,5,540,0,0,6752,6749,1,0,0,0,6752,6750,1,0,0,0,6752,
		6753,1,0,0,0,6753,6754,1,0,0,0,6754,6773,5,138,0,0,6755,6760,3,844,422,
		0,6756,6757,5,773,0,0,6757,6759,3,844,422,0,6758,6756,1,0,0,0,6759,6762,
		1,0,0,0,6760,6758,1,0,0,0,6760,6761,1,0,0,0,6761,6774,1,0,0,0,6762,6760,
		1,0,0,0,6763,6764,5,83,0,0,6764,6765,3,842,421,0,6765,6770,3,846,423,0,
		6766,6767,5,773,0,0,6767,6769,3,846,423,0,6768,6766,1,0,0,0,6769,6772,
		1,0,0,0,6770,6768,1,0,0,0,6770,6771,1,0,0,0,6771,6774,1,0,0,0,6772,6770,
		1,0,0,0,6773,6755,1,0,0,0,6773,6763,1,0,0,0,6774,841,1,0,0,0,6775,6779,
		3,1148,574,0,6776,6779,3,740,370,0,6777,6779,3,1134,567,0,6778,6775,1,
		0,0,0,6778,6776,1,0,0,0,6778,6777,1,0,0,0,6779,843,1,0,0,0,6780,6783,3,
		740,370,0,6781,6783,3,1128,564,0,6782,6780,1,0,0,0,6782,6781,1,0,0,0,6783,
		6784,1,0,0,0,6784,6785,5,750,0,0,6785,6786,7,101,0,0,6786,845,1,0,0,0,
		6787,6790,3,740,370,0,6788,6790,3,1128,564,0,6789,6787,1,0,0,0,6789,6788,
		1,0,0,0,6790,6791,1,0,0,0,6791,6794,5,750,0,0,6792,6795,3,848,424,0,6793,
		6795,5,473,0,0,6794,6792,1,0,0,0,6794,6793,1,0,0,0,6795,847,1,0,0,0,6796,
		6797,7,102,0,0,6797,849,1,0,0,0,6798,6801,5,511,0,0,6799,6802,3,1128,564,
		0,6800,6802,3,828,414,0,6801,6799,1,0,0,0,6801,6800,1,0,0,0,6802,6812,
		1,0,0,0,6803,6804,5,506,0,0,6804,6809,3,854,427,0,6805,6806,5,773,0,0,
		6806,6808,3,854,427,0,6807,6805,1,0,0,0,6808,6811,1,0,0,0,6809,6807,1,
		0,0,0,6809,6810,1,0,0,0,6810,6813,1,0,0,0,6811,6809,1,0,0,0,6812,6803,
		1,0,0,0,6812,6813,1,0,0,0,6813,851,1,0,0,0,6814,6817,5,469,0,0,6815,6818,
		3,1128,564,0,6816,6818,3,828,414,0,6817,6815,1,0,0,0,6817,6816,1,0,0,0,
		6817,6818,1,0,0,0,6818,6828,1,0,0,0,6819,6820,5,506,0,0,6820,6825,3,854,
		427,0,6821,6822,5,773,0,0,6822,6824,3,854,427,0,6823,6821,1,0,0,0,6824,
		6827,1,0,0,0,6825,6823,1,0,0,0,6825,6826,1,0,0,0,6826,6829,1,0,0,0,6827,
		6825,1,0,0,0,6828,6819,1,0,0,0,6828,6829,1,0,0,0,6829,853,1,0,0,0,6830,
		6831,3,848,424,0,6831,6832,5,750,0,0,6832,6833,3,842,421,0,6833,855,1,
		0,0,0,6834,6835,5,387,0,0,6835,6836,3,1128,564,0,6836,857,1,0,0,0,6837,
		6838,5,66,0,0,6838,6839,3,1128,564,0,6839,859,1,0,0,0,6840,6845,5,186,
		0,0,6841,6843,5,367,0,0,6842,6841,1,0,0,0,6842,6843,1,0,0,0,6843,6844,
		1,0,0,0,6844,6846,5,203,0,0,6845,6842,1,0,0,0,6845,6846,1,0,0,0,6846,6847,
		1,0,0,0,6847,6848,3,1128,564,0,6848,6849,5,248,0,0,6849,6850,3,1130,565,
		0,6850,861,1,0,0,0,6851,6852,5,21,0,0,6852,6865,3,676,338,0,6853,6854,
		5,171,0,0,6854,6855,3,676,338,0,6855,6858,3,764,382,0,6856,6857,5,542,
		0,0,6857,6859,3,676,338,0,6858,6856,1,0,0,0,6858,6859,1,0,0,0,6859,6862,
		1,0,0,0,6860,6861,5,160,0,0,6861,6863,3,676,338,0,6862,6860,1,0,0,0,6862,
		6863,1,0,0,0,6863,6865,1,0,0,0,6864,6851,1,0,0,0,6864,6853,1,0,0,0,6865,
		863,1,0,0,0,6866,6867,3,1040,520,0,6867,6869,3,876,438,0,6868,6870,3,866,
		433,0,6869,6868,1,0,0,0,6869,6870,1,0,0,0,6870,865,1,0,0,0,6871,6872,4,
		433,178,0,6872,6875,3,868,434,0,6873,6875,3,886,443,0,6874,6871,1,0,0,
		0,6874,6873,1,0,0,0,6875,867,1,0,0,0,6876,6877,5,62,0,0,6877,6878,3,770,
		385,0,6878,869,1,0,0,0,6879,6881,5,371,0,0,6880,6879,1,0,0,0,6880,6881,
		1,0,0,0,6881,6882,1,0,0,0,6882,6883,5,730,0,0,6883,871,1,0,0,0,6884,6886,
		7,38,0,0,6885,6887,3,108,54,0,6886,6885,1,0,0,0,6886,6887,1,0,0,0,6887,
		6888,1,0,0,0,6888,6892,3,898,449,0,6889,6891,3,902,451,0,6890,6889,1,0,
		0,0,6891,6894,1,0,0,0,6892,6890,1,0,0,0,6892,6893,1,0,0,0,6893,6960,1,
		0,0,0,6894,6892,1,0,0,0,6895,6897,5,205,0,0,6896,6898,3,406,203,0,6897,
		6896,1,0,0,0,6897,6898,1,0,0,0,6898,6900,1,0,0,0,6899,6901,3,1050,525,
		0,6900,6899,1,0,0,0,6900,6901,1,0,0,0,6901,6902,1,0,0,0,6902,6906,3,898,
		449,0,6903,6905,3,910,455,0,6904,6903,1,0,0,0,6905,6908,1,0,0,0,6906,6904,
		1,0,0,0,6906,6907,1,0,0,0,6907,6960,1,0,0,0,6908,6906,1,0,0,0,6909,6911,
		5,523,0,0,6910,6912,3,406,203,0,6911,6910,1,0,0,0,6911,6912,1,0,0,0,6912,
		6914,1,0,0,0,6913,6915,3,1050,525,0,6914,6913,1,0,0,0,6914,6915,1,0,0,
		0,6915,6916,1,0,0,0,6916,6920,3,898,449,0,6917,6919,3,912,456,0,6918,6917,
		1,0,0,0,6919,6922,1,0,0,0,6920,6918,1,0,0,0,6920,6921,1,0,0,0,6921,6960,
		1,0,0,0,6922,6920,1,0,0,0,6923,6925,3,874,437,0,6924,6923,1,0,0,0,6924,
		6925,1,0,0,0,6925,6957,1,0,0,0,6926,6927,5,420,0,0,6927,6933,5,265,0,0,
		6928,6930,5,609,0,0,6929,6931,3,406,203,0,6930,6929,1,0,0,0,6930,6931,
		1,0,0,0,6931,6933,1,0,0,0,6932,6926,1,0,0,0,6932,6928,1,0,0,0,6933,6935,
		1,0,0,0,6934,6936,3,108,54,0,6935,6934,1,0,0,0,6935,6936,1,0,0,0,6936,
		6937,1,0,0,0,6937,6941,3,898,449,0,6938,6940,3,902,451,0,6939,6938,1,0,
		0,0,6940,6943,1,0,0,0,6941,6939,1,0,0,0,6941,6942,1,0,0,0,6942,6958,1,
		0,0,0,6943,6941,1,0,0,0,6944,6945,5,199,0,0,6945,6947,5,265,0,0,6946,6948,
		3,1050,525,0,6947,6946,1,0,0,0,6947,6948,1,0,0,0,6948,6949,1,0,0,0,6949,
		6950,3,890,445,0,6950,6951,3,886,443,0,6951,6958,1,0,0,0,6952,6955,3,868,
		434,0,6953,6954,4,436,179,0,6954,6956,3,870,435,0,6955,6953,1,0,0,0,6955,
		6956,1,0,0,0,6956,6958,1,0,0,0,6957,6932,1,0,0,0,6957,6944,1,0,0,0,6957,
		6952,1,0,0,0,6958,6960,1,0,0,0,6959,6884,1,0,0,0,6959,6895,1,0,0,0,6959,
		6909,1,0,0,0,6959,6924,1,0,0,0,6960,873,1,0,0,0,6961,6963,5,86,0,0,6962,
		6964,3,1128,564,0,6963,6962,1,0,0,0,6963,6964,1,0,0,0,6964,875,1,0,0,0,
		6965,7001,3,916,458,0,6966,6968,3,878,439,0,6967,6966,1,0,0,0,6968,6971,
		1,0,0,0,6969,6967,1,0,0,0,6969,6970,1,0,0,0,6970,7002,1,0,0,0,6971,6969,
		1,0,0,0,6972,6974,4,438,180,0,6973,6975,3,986,493,0,6974,6973,1,0,0,0,
		6974,6975,1,0,0,0,6975,6978,1,0,0,0,6976,6977,5,209,0,0,6977,6979,5,12,
		0,0,6978,6976,1,0,0,0,6978,6979,1,0,0,0,6979,6980,1,0,0,0,6980,6981,5,
		17,0,0,6981,6983,3,770,385,0,6982,6984,7,103,0,0,6983,6982,1,0,0,0,6983,
		6984,1,0,0,0,6984,6999,1,0,0,0,6985,6989,4,438,181,0,6986,6988,3,884,442,
		0,6987,6986,1,0,0,0,6988,6991,1,0,0,0,6989,6987,1,0,0,0,6989,6990,1,0,
		0,0,6990,7000,1,0,0,0,6991,6989,1,0,0,0,6992,6996,4,438,182,0,6993,6995,
		3,878,439,0,6994,6993,1,0,0,0,6995,6998,1,0,0,0,6996,6994,1,0,0,0,6996,
		6997,1,0,0,0,6997,7000,1,0,0,0,6998,6996,1,0,0,0,6999,6985,1,0,0,0,6999,
		6992,1,0,0,0,7000,7002,1,0,0,0,7001,6969,1,0,0,0,7001,6972,1,0,0,0,7002,
		877,1,0,0,0,7003,7005,5,371,0,0,7004,7003,1,0,0,0,7004,7005,1,0,0,0,7005,
		7006,1,0,0,0,7006,7056,3,1170,585,0,7007,7008,4,439,183,0,7008,7009,5,
		371,0,0,7009,7056,5,720,0,0,7010,7018,5,128,0,0,7011,7019,3,1150,575,0,
		7012,7014,5,372,0,0,7013,7015,3,720,360,0,7014,7013,1,0,0,0,7014,7015,
		1,0,0,0,7015,7019,1,0,0,0,7016,7017,4,439,184,0,7017,7019,3,770,385,0,
		7018,7011,1,0,0,0,7018,7012,1,0,0,0,7018,7016,1,0,0,0,7019,7056,1,0,0,
		0,7020,7021,5,383,0,0,7021,7022,5,614,0,0,7022,7024,5,372,0,0,7023,7025,
		3,720,360,0,7024,7023,1,0,0,0,7024,7025,1,0,0,0,7025,7056,1,0,0,0,7026,
		7056,5,24,0,0,7027,7028,5,501,0,0,7028,7029,5,128,0,0,7029,7056,5,627,
		0,0,7030,7032,5,420,0,0,7031,7030,1,0,0,0,7031,7032,1,0,0,0,7032,7033,
		1,0,0,0,7033,7056,5,265,0,0,7034,7036,5,609,0,0,7035,7037,5,265,0,0,7036,
		7035,1,0,0,0,7036,7037,1,0,0,0,7037,7056,1,0,0,0,7038,7039,5,75,0,0,7039,
		7056,3,1160,580,0,7040,7056,3,986,493,0,7041,7042,5,74,0,0,7042,7056,3,
		880,440,0,7043,7044,5,553,0,0,7044,7056,3,882,441,0,7045,7046,4,439,185,
		0,7046,7047,5,707,0,0,7047,7056,3,1146,573,0,7048,7050,4,439,186,0,7049,
		7051,3,874,437,0,7050,7049,1,0,0,0,7050,7051,1,0,0,0,7051,7052,1,0,0,0,
		7052,7056,3,868,434,0,7053,7054,4,439,187,0,7054,7056,3,870,435,0,7055,
		7004,1,0,0,0,7055,7007,1,0,0,0,7055,7010,1,0,0,0,7055,7020,1,0,0,0,7055,
		7026,1,0,0,0,7055,7027,1,0,0,0,7055,7031,1,0,0,0,7055,7034,1,0,0,0,7055,
		7038,1,0,0,0,7055,7040,1,0,0,0,7055,7041,1,0,0,0,7055,7043,1,0,0,0,7055,
		7045,1,0,0,0,7055,7048,1,0,0,0,7055,7053,1,0,0,0,7056,879,1,0,0,0,7057,
		7058,7,104,0,0,7058,881,1,0,0,0,7059,7060,7,105,0,0,7060,883,1,0,0,0,7061,
		7063,5,609,0,0,7062,7064,5,265,0,0,7063,7062,1,0,0,0,7063,7064,1,0,0,0,
		7064,7076,1,0,0,0,7065,7066,5,75,0,0,7066,7076,3,1156,578,0,7067,7069,
		3,760,380,0,7068,7067,1,0,0,0,7068,7069,1,0,0,0,7069,7070,1,0,0,0,7070,
		7076,5,376,0,0,7071,7073,5,420,0,0,7072,7071,1,0,0,0,7072,7073,1,0,0,0,
		7073,7074,1,0,0,0,7074,7076,5,265,0,0,7075,7061,1,0,0,0,7075,7065,1,0,
		0,0,7075,7068,1,0,0,0,7075,7072,1,0,0,0,7076,885,1,0,0,0,7077,7078,5,443,
		0,0,7078,7080,3,1102,551,0,7079,7081,3,1132,566,0,7080,7079,1,0,0,0,7080,
		7081,1,0,0,0,7081,7084,1,0,0,0,7082,7083,5,320,0,0,7083,7085,7,106,0,0,
		7084,7082,1,0,0,0,7084,7085,1,0,0,0,7085,7102,1,0,0,0,7086,7087,5,383,
		0,0,7087,7088,5,614,0,0,7088,7092,3,888,444,0,7089,7090,5,383,0,0,7090,
		7091,5,133,0,0,7091,7093,3,888,444,0,7092,7089,1,0,0,0,7092,7093,1,0,0,
		0,7093,7103,1,0,0,0,7094,7095,5,383,0,0,7095,7096,5,133,0,0,7096,7100,
		3,888,444,0,7097,7098,5,383,0,0,7098,7099,5,614,0,0,7099,7101,3,888,444,
		0,7100,7097,1,0,0,0,7100,7101,1,0,0,0,7101,7103,1,0,0,0,7102,7086,1,0,
		0,0,7102,7094,1,0,0,0,7102,7103,1,0,0,0,7103,887,1,0,0,0,7104,7110,7,2,
		0,0,7105,7106,5,506,0,0,7106,7110,3,1170,585,0,7107,7108,5,373,0,0,7108,
		7110,5,3,0,0,7109,7104,1,0,0,0,7109,7105,1,0,0,0,7109,7107,1,0,0,0,7110,
		889,1,0,0,0,7111,7112,5,776,0,0,7112,7117,3,892,446,0,7113,7114,5,773,
		0,0,7114,7116,3,892,446,0,7115,7113,1,0,0,0,7116,7119,1,0,0,0,7117,7115,
		1,0,0,0,7117,7118,1,0,0,0,7118,7120,1,0,0,0,7119,7117,1,0,0,0,7120,7121,
		5,777,0,0,7121,891,1,0,0,0,7122,7124,3,1128,564,0,7123,7125,3,922,461,
		0,7124,7123,1,0,0,0,7124,7125,1,0,0,0,7125,7127,1,0,0,0,7126,7128,3,330,
		165,0,7127,7126,1,0,0,0,7127,7128,1,0,0,0,7128,893,1,0,0,0,7129,7130,5,
		776,0,0,7130,7135,3,896,448,0,7131,7132,5,773,0,0,7132,7134,3,896,448,
		0,7133,7131,1,0,0,0,7134,7137,1,0,0,0,7135,7133,1,0,0,0,7135,7136,1,0,
		0,0,7136,7138,1,0,0,0,7137,7135,1,0,0,0,7138,7139,5,777,0,0,7139,895,1,
		0,0,0,7140,7146,3,892,446,0,7141,7143,3,770,385,0,7142,7144,3,330,165,
		0,7143,7142,1,0,0,0,7143,7144,1,0,0,0,7144,7146,1,0,0,0,7145,7140,1,0,
		0,0,7145,7141,1,0,0,0,7146,897,1,0,0,0,7147,7148,4,449,188,0,7148,7152,
		3,894,447,0,7149,7150,4,449,189,0,7150,7152,3,890,445,0,7151,7147,1,0,
		0,0,7151,7149,1,0,0,0,7152,899,1,0,0,0,7153,7154,7,107,0,0,7154,901,1,
		0,0,0,7155,7158,3,904,452,0,7156,7158,3,908,454,0,7157,7155,1,0,0,0,7157,
		7156,1,0,0,0,7158,903,1,0,0,0,7159,7161,5,264,0,0,7160,7162,5,750,0,0,
		7161,7160,1,0,0,0,7161,7162,1,0,0,0,7162,7163,1,0,0,0,7163,7169,3,1140,
		570,0,7164,7165,5,75,0,0,7165,7169,3,1160,580,0,7166,7167,4,452,190,0,
		7167,7169,3,906,453,0,7168,7159,1,0,0,0,7168,7164,1,0,0,0,7168,7166,1,
		0,0,0,7169,905,1,0,0,0,7170,7171,7,108,0,0,7171,907,1,0,0,0,7172,7173,
		7,109,0,0,7173,7174,3,900,450,0,7174,909,1,0,0,0,7175,7180,3,904,452,0,
		7176,7177,5,645,0,0,7177,7178,5,401,0,0,7178,7180,3,1128,564,0,7179,7175,
		1,0,0,0,7179,7176,1,0,0,0,7180,911,1,0,0,0,7181,7182,3,904,452,0,7182,
		913,1,0,0,0,7183,7184,3,916,458,0,7184,7185,5,0,0,1,7185,915,1,0,0,0,7186,
		7188,7,110,0,0,7187,7189,3,922,461,0,7188,7187,1,0,0,0,7188,7189,1,0,0,
		0,7189,7191,1,0,0,0,7190,7192,3,924,462,0,7191,7190,1,0,0,0,7191,7192,
		1,0,0,0,7192,7334,1,0,0,0,7193,7199,5,437,0,0,7194,7196,5,146,0,0,7195,
		7197,5,416,0,0,7196,7195,1,0,0,0,7196,7197,1,0,0,0,7197,7199,1,0,0,0,7198,
		7193,1,0,0,0,7198,7194,1,0,0,0,7199,7201,1,0,0,0,7200,7202,3,1178,589,
		0,7201,7200,1,0,0,0,7201,7202,1,0,0,0,7202,7204,1,0,0,0,7203,7205,3,924,
		462,0,7204,7203,1,0,0,0,7204,7205,1,0,0,0,7205,7334,1,0,0,0,7206,7208,
		7,111,0,0,7207,7209,3,1174,587,0,7208,7207,1,0,0,0,7208,7209,1,0,0,0,7209,
		7211,1,0,0,0,7210,7212,3,924,462,0,7211,7210,1,0,0,0,7211,7212,1,0,0,0,
		7212,7334,1,0,0,0,7213,7215,5,37,0,0,7214,7216,3,922,461,0,7215,7214,1,
		0,0,0,7215,7216,1,0,0,0,7216,7334,1,0,0,0,7217,7334,7,112,0,0,7218,7220,
		5,60,0,0,7219,7221,3,922,461,0,7220,7219,1,0,0,0,7220,7221,1,0,0,0,7221,
		7223,1,0,0,0,7222,7224,3,926,463,0,7223,7222,1,0,0,0,7223,7224,1,0,0,0,
		7224,7334,1,0,0,0,7225,7227,3,918,459,0,7226,7228,3,922,461,0,7227,7226,
		1,0,0,0,7227,7228,1,0,0,0,7228,7230,1,0,0,0,7229,7231,5,32,0,0,7230,7229,
		1,0,0,0,7230,7231,1,0,0,0,7231,7334,1,0,0,0,7232,7234,5,32,0,0,7233,7235,
		3,922,461,0,7234,7233,1,0,0,0,7234,7235,1,0,0,0,7235,7334,1,0,0,0,7236,
		7237,5,60,0,0,7237,7240,5,633,0,0,7238,7240,5,629,0,0,7239,7236,1,0,0,
		0,7239,7238,1,0,0,0,7240,7241,1,0,0,0,7241,7243,3,922,461,0,7242,7244,
		3,926,463,0,7243,7242,1,0,0,0,7243,7244,1,0,0,0,7244,7334,1,0,0,0,7245,
		7246,5,358,0,0,7246,7256,5,629,0,0,7247,7256,5,379,0,0,7248,7249,5,361,
		0,0,7249,7256,5,629,0,0,7250,7251,5,358,0,0,7251,7252,5,60,0,0,7252,7256,
		5,633,0,0,7253,7254,5,361,0,0,7254,7256,5,633,0,0,7255,7245,1,0,0,0,7255,
		7247,1,0,0,0,7255,7248,1,0,0,0,7255,7250,1,0,0,0,7255,7253,1,0,0,0,7256,
		7257,1,0,0,0,7257,7259,3,922,461,0,7258,7260,5,32,0,0,7259,7258,1,0,0,
		0,7259,7260,1,0,0,0,7260,7334,1,0,0,0,7261,7262,5,628,0,0,7262,7334,3,
		922,461,0,7263,7265,5,656,0,0,7264,7266,3,922,461,0,7265,7264,1,0,0,0,
		7265,7266,1,0,0,0,7266,7268,1,0,0,0,7267,7269,3,924,462,0,7268,7267,1,
		0,0,0,7268,7269,1,0,0,0,7269,7334,1,0,0,0,7270,7334,5,116,0,0,7271,7273,
		5,586,0,0,7272,7274,3,934,467,0,7273,7272,1,0,0,0,7273,7274,1,0,0,0,7274,
		7334,1,0,0,0,7275,7277,5,583,0,0,7276,7278,3,934,467,0,7277,7276,1,0,0,
		0,7277,7278,1,0,0,0,7278,7334,1,0,0,0,7279,7281,5,113,0,0,7280,7282,3,
		934,467,0,7281,7280,1,0,0,0,7281,7282,1,0,0,0,7282,7334,1,0,0,0,7283,7334,
		5,587,0,0,7284,7286,5,39,0,0,7285,7287,3,922,461,0,7286,7285,1,0,0,0,7286,
		7287,1,0,0,0,7287,7334,1,0,0,0,7288,7334,7,113,0,0,7289,7290,5,293,0,0,
		7290,7334,5,628,0,0,7291,7295,5,293,0,0,7292,7293,5,60,0,0,7293,7296,5,
		633,0,0,7294,7296,5,629,0,0,7295,7292,1,0,0,0,7295,7294,1,0,0,0,7295,7296,
		1,0,0,0,7296,7298,1,0,0,0,7297,7299,3,926,463,0,7298,7297,1,0,0,0,7298,
		7299,1,0,0,0,7299,7334,1,0,0,0,7300,7302,5,589,0,0,7301,7303,3,926,463,
		0,7302,7301,1,0,0,0,7302,7303,1,0,0,0,7303,7334,1,0,0,0,7304,7306,5,580,
		0,0,7305,7307,3,922,461,0,7306,7305,1,0,0,0,7306,7307,1,0,0,0,7307,7309,
		1,0,0,0,7308,7310,3,926,463,0,7309,7308,1,0,0,0,7309,7310,1,0,0,0,7310,
		7334,1,0,0,0,7311,7313,5,332,0,0,7312,7314,3,926,463,0,7313,7312,1,0,0,
		0,7313,7314,1,0,0,0,7314,7334,1,0,0,0,7315,7317,5,291,0,0,7316,7318,3,
		926,463,0,7317,7316,1,0,0,0,7317,7318,1,0,0,0,7318,7334,1,0,0,0,7319,7320,
		5,164,0,0,7320,7322,3,1152,576,0,7321,7323,3,926,463,0,7322,7321,1,0,0,
		0,7322,7323,1,0,0,0,7323,7334,1,0,0,0,7324,7325,5,506,0,0,7325,7327,3,
		1152,576,0,7326,7328,3,926,463,0,7327,7326,1,0,0,0,7327,7328,1,0,0,0,7328,
		7334,1,0,0,0,7329,7334,5,501,0,0,7330,7331,4,458,191,0,7331,7334,5,262,
		0,0,7332,7334,7,114,0,0,7333,7186,1,0,0,0,7333,7198,1,0,0,0,7333,7206,
		1,0,0,0,7333,7213,1,0,0,0,7333,7217,1,0,0,0,7333,7218,1,0,0,0,7333,7225,
		1,0,0,0,7333,7232,1,0,0,0,7333,7239,1,0,0,0,7333,7255,1,0,0,0,7333,7261,
		1,0,0,0,7333,7263,1,0,0,0,7333,7270,1,0,0,0,7333,7271,1,0,0,0,7333,7275,
		1,0,0,0,7333,7279,1,0,0,0,7333,7283,1,0,0,0,7333,7284,1,0,0,0,7333,7288,
		1,0,0,0,7333,7289,1,0,0,0,7333,7291,1,0,0,0,7333,7300,1,0,0,0,7333,7304,
		1,0,0,0,7333,7311,1,0,0,0,7333,7315,1,0,0,0,7333,7319,1,0,0,0,7333,7324,
		1,0,0,0,7333,7329,1,0,0,0,7333,7330,1,0,0,0,7333,7332,1,0,0,0,7334,917,
		1,0,0,0,7335,7339,5,361,0,0,7336,7337,5,358,0,0,7337,7339,5,60,0,0,7338,
		7335,1,0,0,0,7338,7336,1,0,0,0,7339,919,1,0,0,0,7340,7346,5,437,0,0,7341,
		7343,5,146,0,0,7342,7344,5,416,0,0,7343,7342,1,0,0,0,7343,7344,1,0,0,0,
		7344,7346,1,0,0,0,7345,7340,1,0,0,0,7345,7341,1,0,0,0,7346,921,1,0,0,0,
		7347,7350,5,776,0,0,7348,7351,3,1146,573,0,7349,7351,5,790,0,0,7350,7348,
		1,0,0,0,7350,7349,1,0,0,0,7351,7352,1,0,0,0,7352,7353,5,777,0,0,7353,923,
		1,0,0,0,7354,7356,7,115,0,0,7355,7354,1,0,0,0,7356,7357,1,0,0,0,7357,7355,
		1,0,0,0,7357,7358,1,0,0,0,7358,925,1,0,0,0,7359,7374,3,928,464,0,7360,
		7374,3,930,465,0,7361,7374,5,46,0,0,7362,7363,3,758,379,0,7363,7365,3,
		936,468,0,7364,7366,5,32,0,0,7365,7364,1,0,0,0,7365,7366,1,0,0,0,7366,
		7374,1,0,0,0,7367,7371,5,32,0,0,7368,7369,3,758,379,0,7369,7370,3,936,
		468,0,7370,7372,1,0,0,0,7371,7368,1,0,0,0,7371,7372,1,0,0,0,7372,7374,
		1,0,0,0,7373,7359,1,0,0,0,7373,7360,1,0,0,0,7373,7361,1,0,0,0,7373,7362,
		1,0,0,0,7373,7367,1,0,0,0,7374,927,1,0,0,0,7375,7377,5,19,0,0,7376,7378,
		5,32,0,0,7377,7376,1,0,0,0,7377,7378,1,0,0,0,7378,7382,1,0,0,0,7379,7380,
		5,32,0,0,7380,7382,5,19,0,0,7381,7375,1,0,0,0,7381,7379,1,0,0,0,7382,929,
		1,0,0,0,7383,7385,5,606,0,0,7384,7386,5,32,0,0,7385,7384,1,0,0,0,7385,
		7386,1,0,0,0,7386,7390,1,0,0,0,7387,7388,5,32,0,0,7388,7390,5,606,0,0,
		7389,7383,1,0,0,0,7389,7387,1,0,0,0,7390,931,1,0,0,0,7391,7392,5,776,0,
		0,7392,7393,3,1142,571,0,7393,7394,5,777,0,0,7394,933,1,0,0,0,7395,7396,
		5,776,0,0,7396,7397,5,747,0,0,7397,7398,5,777,0,0,7398,935,1,0,0,0,7399,
		7404,3,1180,590,0,7400,7404,5,32,0,0,7401,7402,4,468,192,0,7402,7404,5,
		128,0,0,7403,7399,1,0,0,0,7403,7400,1,0,0,0,7403,7401,1,0,0,0,7404,937,
		1,0,0,0,7405,7411,3,1180,590,0,7406,7407,4,469,193,0,7407,7411,5,128,0,
		0,7408,7409,4,469,194,0,7409,7411,5,32,0,0,7410,7405,1,0,0,0,7410,7406,
		1,0,0,0,7410,7408,1,0,0,0,7411,939,1,0,0,0,7412,7419,3,944,472,0,7413,
		7415,5,773,0,0,7414,7413,1,0,0,0,7414,7415,1,0,0,0,7415,7416,1,0,0,0,7416,
		7418,3,944,472,0,7417,7414,1,0,0,0,7418,7421,1,0,0,0,7419,7417,1,0,0,0,
		7419,7420,1,0,0,0,7420,941,1,0,0,0,7421,7419,1,0,0,0,7422,7424,3,944,472,
		0,7423,7422,1,0,0,0,7424,7425,1,0,0,0,7425,7423,1,0,0,0,7425,7426,1,0,
		0,0,7426,943,1,0,0,0,7427,7429,5,163,0,0,7428,7430,5,750,0,0,7429,7428,
		1,0,0,0,7429,7430,1,0,0,0,7430,7431,1,0,0,0,7431,7557,3,1094,547,0,7432,
		7433,4,472,195,0,7433,7435,5,721,0,0,7434,7436,3,1190,595,0,7435,7434,
		1,0,0,0,7435,7436,1,0,0,0,7436,7439,1,0,0,0,7437,7440,5,376,0,0,7438,7440,
		3,1180,590,0,7439,7437,1,0,0,0,7439,7438,1,0,0,0,7440,7557,1,0,0,0,7441,
		7443,5,323,0,0,7442,7444,5,750,0,0,7443,7442,1,0,0,0,7443,7444,1,0,0,0,
		7444,7445,1,0,0,0,7445,7557,3,1144,572,0,7446,7448,5,344,0,0,7447,7449,
		5,750,0,0,7448,7447,1,0,0,0,7448,7449,1,0,0,0,7449,7450,1,0,0,0,7450,7557,
		3,1144,572,0,7451,7453,5,25,0,0,7452,7454,5,750,0,0,7453,7452,1,0,0,0,
		7453,7454,1,0,0,0,7454,7455,1,0,0,0,7455,7557,3,1140,570,0,7456,7458,5,
		406,0,0,7457,7459,5,750,0,0,7458,7457,1,0,0,0,7458,7459,1,0,0,0,7459,7460,
		1,0,0,0,7460,7557,3,1154,577,0,7461,7463,5,75,0,0,7462,7464,5,750,0,0,
		7463,7462,1,0,0,0,7463,7464,1,0,0,0,7464,7465,1,0,0,0,7465,7557,3,1154,
		577,0,7466,7467,4,472,196,0,7467,7469,5,81,0,0,7468,7470,5,750,0,0,7469,
		7468,1,0,0,0,7469,7470,1,0,0,0,7470,7471,1,0,0,0,7471,7557,3,1156,578,
		0,7472,7473,4,472,197,0,7473,7475,5,158,0,0,7474,7476,5,750,0,0,7475,7474,
		1,0,0,0,7475,7476,1,0,0,0,7476,7477,1,0,0,0,7477,7557,3,1156,578,0,7478,
		7480,5,24,0,0,7479,7481,5,750,0,0,7480,7479,1,0,0,0,7480,7481,1,0,0,0,
		7481,7482,1,0,0,0,7482,7557,3,1144,572,0,7483,7485,5,399,0,0,7484,7486,
		5,750,0,0,7485,7484,1,0,0,0,7485,7486,1,0,0,0,7486,7487,1,0,0,0,7487,7557,
		3,946,473,0,7488,7490,7,116,0,0,7489,7491,5,750,0,0,7490,7489,1,0,0,0,
		7490,7491,1,0,0,0,7491,7492,1,0,0,0,7492,7557,3,946,473,0,7493,7495,7,
		117,0,0,7494,7496,5,750,0,0,7495,7494,1,0,0,0,7495,7496,1,0,0,0,7496,7497,
		1,0,0,0,7497,7557,3,1140,570,0,7498,7500,5,132,0,0,7499,7501,5,750,0,0,
		7500,7499,1,0,0,0,7500,7501,1,0,0,0,7501,7502,1,0,0,0,7502,7557,3,1140,
		570,0,7503,7505,5,486,0,0,7504,7506,5,750,0,0,7505,7504,1,0,0,0,7505,7506,
		1,0,0,0,7506,7507,1,0,0,0,7507,7557,7,118,0,0,7508,7510,5,608,0,0,7509,
		7511,5,750,0,0,7510,7509,1,0,0,0,7510,7511,1,0,0,0,7511,7512,1,0,0,0,7512,
		7513,5,776,0,0,7513,7514,3,1104,552,0,7514,7515,5,777,0,0,7515,7557,1,
		0,0,0,7516,7557,3,952,476,0,7517,7557,3,948,474,0,7518,7520,5,243,0,0,
		7519,7521,5,750,0,0,7520,7519,1,0,0,0,7520,7521,1,0,0,0,7521,7522,1,0,
		0,0,7522,7557,7,119,0,0,7523,7524,5,112,0,0,7524,7526,5,139,0,0,7525,7527,
		5,750,0,0,7526,7525,1,0,0,0,7526,7527,1,0,0,0,7527,7528,1,0,0,0,7528,7557,
		3,1156,578,0,7529,7530,5,236,0,0,7530,7532,5,139,0,0,7531,7533,5,750,0,
		0,7532,7531,1,0,0,0,7532,7533,1,0,0,0,7533,7534,1,0,0,0,7534,7557,3,1156,
		578,0,7535,7541,5,572,0,0,7536,7538,4,472,198,0,7537,7539,5,750,0,0,7538,
		7537,1,0,0,0,7538,7539,1,0,0,0,7539,7542,1,0,0,0,7540,7542,1,0,0,0,7541,
		7536,1,0,0,0,7541,7540,1,0,0,0,7542,7543,1,0,0,0,7543,7557,3,1128,564,
		0,7544,7545,5,553,0,0,7545,7557,7,120,0,0,7546,7548,5,84,0,0,7547,7549,
		5,750,0,0,7548,7547,1,0,0,0,7548,7549,1,0,0,0,7549,7550,1,0,0,0,7550,7557,
		3,1156,578,0,7551,7553,5,264,0,0,7552,7554,5,750,0,0,7553,7552,1,0,0,0,
		7553,7554,1,0,0,0,7554,7555,1,0,0,0,7555,7557,3,1140,570,0,7556,7427,1,
		0,0,0,7556,7432,1,0,0,0,7556,7441,1,0,0,0,7556,7446,1,0,0,0,7556,7451,
		1,0,0,0,7556,7456,1,0,0,0,7556,7461,1,0,0,0,7556,7466,1,0,0,0,7556,7472,
		1,0,0,0,7556,7478,1,0,0,0,7556,7483,1,0,0,0,7556,7488,1,0,0,0,7556,7493,
		1,0,0,0,7556,7498,1,0,0,0,7556,7503,1,0,0,0,7556,7508,1,0,0,0,7556,7516,
		1,0,0,0,7556,7517,1,0,0,0,7556,7518,1,0,0,0,7556,7523,1,0,0,0,7556,7529,
		1,0,0,0,7556,7535,1,0,0,0,7556,7544,1,0,0,0,7556,7546,1,0,0,0,7556,7551,
		1,0,0,0,7557,945,1,0,0,0,7558,7561,3,1140,570,0,7559,7561,5,128,0,0,7560,
		7558,1,0,0,0,7560,7559,1,0,0,0,7561,947,1,0,0,0,7562,7564,5,128,0,0,7563,
		7562,1,0,0,0,7563,7564,1,0,0,0,7564,7565,1,0,0,0,7565,7567,5,69,0,0,7566,
		7568,5,750,0,0,7567,7566,1,0,0,0,7567,7568,1,0,0,0,7568,7569,1,0,0,0,7569,
		7570,3,938,469,0,7570,949,1,0,0,0,7571,7573,5,128,0,0,7572,7571,1,0,0,
		0,7572,7573,1,0,0,0,7573,7574,1,0,0,0,7574,7576,5,158,0,0,7575,7577,5,
		750,0,0,7576,7575,1,0,0,0,7576,7577,1,0,0,0,7577,7578,1,0,0,0,7578,7579,
		3,1154,577,0,7579,951,1,0,0,0,7580,7582,5,128,0,0,7581,7580,1,0,0,0,7581,
		7582,1,0,0,0,7582,7583,1,0,0,0,7583,7585,3,758,379,0,7584,7586,5,750,0,
		0,7585,7584,1,0,0,0,7585,7586,1,0,0,0,7586,7587,1,0,0,0,7587,7588,3,936,
		468,0,7588,953,1,0,0,0,7589,7590,5,405,0,0,7590,7591,5,45,0,0,7591,7594,
		3,956,478,0,7592,7593,5,404,0,0,7593,7595,3,1142,571,0,7594,7592,1,0,0,
		0,7594,7595,1,0,0,0,7595,7597,1,0,0,0,7596,7598,3,958,479,0,7597,7596,
		1,0,0,0,7597,7598,1,0,0,0,7598,7600,1,0,0,0,7599,7601,3,962,481,0,7600,
		7599,1,0,0,0,7600,7601,1,0,0,0,7601,955,1,0,0,0,7602,7604,5,277,0,0,7603,
		7602,1,0,0,0,7603,7604,1,0,0,0,7604,7605,1,0,0,0,7605,7607,5,265,0,0,7606,
		7608,3,960,480,0,7607,7606,1,0,0,0,7607,7608,1,0,0,0,7608,7609,1,0,0,0,
		7609,7611,5,776,0,0,7610,7612,3,1130,565,0,7611,7610,1,0,0,0,7611,7612,
		1,0,0,0,7612,7613,1,0,0,0,7613,7636,5,777,0,0,7614,7616,5,277,0,0,7615,
		7614,1,0,0,0,7615,7616,1,0,0,0,7616,7617,1,0,0,0,7617,7618,5,220,0,0,7618,
		7619,5,776,0,0,7619,7620,3,686,343,0,7620,7621,5,777,0,0,7621,7636,1,0,
		0,0,7622,7633,7,121,0,0,7623,7624,5,776,0,0,7624,7625,3,686,343,0,7625,
		7626,5,777,0,0,7626,7634,1,0,0,0,7627,7628,5,71,0,0,7628,7630,5,776,0,
		0,7629,7631,3,1130,565,0,7630,7629,1,0,0,0,7630,7631,1,0,0,0,7631,7632,
		1,0,0,0,7632,7634,5,777,0,0,7633,7623,1,0,0,0,7633,7627,1,0,0,0,7634,7636,
		1,0,0,0,7635,7603,1,0,0,0,7635,7615,1,0,0,0,7635,7622,1,0,0,0,7636,957,
		1,0,0,0,7637,7638,5,561,0,0,7638,7640,5,45,0,0,7639,7641,5,277,0,0,7640,
		7639,1,0,0,0,7640,7641,1,0,0,0,7641,7652,1,0,0,0,7642,7643,5,220,0,0,7643,
		7644,5,776,0,0,7644,7645,3,686,343,0,7645,7646,5,777,0,0,7646,7653,1,0,
		0,0,7647,7649,5,265,0,0,7648,7650,3,960,480,0,7649,7648,1,0,0,0,7649,7650,
		1,0,0,0,7650,7651,1,0,0,0,7651,7653,3,1132,566,0,7652,7642,1,0,0,0,7652,
		7647,1,0,0,0,7653,7656,1,0,0,0,7654,7655,5,560,0,0,7655,7657,3,1142,571,
		0,7656,7654,1,0,0,0,7656,7657,1,0,0,0,7657,959,1,0,0,0,7658,7659,4,480,
		199,0,7659,7660,5,9,0,0,7660,7661,5,750,0,0,7661,7662,3,1142,571,0,7662,
		961,1,0,0,0,7663,7664,5,776,0,0,7664,7669,3,964,482,0,7665,7666,5,773,
		0,0,7666,7668,3,964,482,0,7667,7665,1,0,0,0,7668,7671,1,0,0,0,7669,7667,
		1,0,0,0,7669,7670,1,0,0,0,7670,7672,1,0,0,0,7671,7669,1,0,0,0,7672,7673,
		5,777,0,0,7673,963,1,0,0,0,7674,7675,5,405,0,0,7675,7686,3,1128,564,0,
		7676,7677,5,626,0,0,7677,7678,5,273,0,0,7678,7681,5,581,0,0,7679,7682,
		3,972,486,0,7680,7682,5,329,0,0,7681,7679,1,0,0,0,7681,7680,1,0,0,0,7682,
		7687,1,0,0,0,7683,7684,5,626,0,0,7684,7685,5,251,0,0,7685,7687,3,966,483,
		0,7686,7676,1,0,0,0,7686,7683,1,0,0,0,7686,7687,1,0,0,0,7687,7691,1,0,
		0,0,7688,7690,3,968,484,0,7689,7688,1,0,0,0,7690,7693,1,0,0,0,7691,7689,
		1,0,0,0,7691,7692,1,0,0,0,7692,7705,1,0,0,0,7693,7691,1,0,0,0,7694,7695,
		5,776,0,0,7695,7700,3,970,485,0,7696,7697,5,773,0,0,7697,7699,3,970,485,
		0,7698,7696,1,0,0,0,7699,7702,1,0,0,0,7700,7698,1,0,0,0,7700,7701,1,0,
		0,0,7701,7703,1,0,0,0,7702,7700,1,0,0,0,7703,7704,5,777,0,0,7704,7706,
		1,0,0,0,7705,7694,1,0,0,0,7705,7706,1,0,0,0,7706,965,1,0,0,0,7707,7720,
		3,972,486,0,7708,7709,5,776,0,0,7709,7714,3,972,486,0,7710,7711,5,773,
		0,0,7711,7713,3,972,486,0,7712,7710,1,0,0,0,7713,7716,1,0,0,0,7714,7712,
		1,0,0,0,7714,7715,1,0,0,0,7715,7717,1,0,0,0,7716,7714,1,0,0,0,7717,7718,
		5,777,0,0,7718,7720,1,0,0,0,7719,7707,1,0,0,0,7719,7708,1,0,0,0,7720,967,
		1,0,0,0,7721,7723,5,572,0,0,7722,7724,5,750,0,0,7723,7722,1,0,0,0,7723,
		7724,1,0,0,0,7724,7725,1,0,0,0,7725,7756,3,1128,564,0,7726,7728,5,553,
		0,0,7727,7726,1,0,0,0,7727,7728,1,0,0,0,7728,7729,1,0,0,0,7729,7731,5,
		163,0,0,7730,7732,5,750,0,0,7731,7730,1,0,0,0,7731,7732,1,0,0,0,7732,7733,
		1,0,0,0,7733,7756,3,1094,547,0,7734,7736,5,368,0,0,7735,7737,5,750,0,0,
		7736,7735,1,0,0,0,7736,7737,1,0,0,0,7737,7738,1,0,0,0,7738,7756,3,1142,
		571,0,7739,7741,7,122,0,0,7740,7742,5,750,0,0,7741,7740,1,0,0,0,7741,7742,
		1,0,0,0,7742,7743,1,0,0,0,7743,7756,3,1142,571,0,7744,7745,7,123,0,0,7745,
		7747,5,139,0,0,7746,7748,5,750,0,0,7747,7746,1,0,0,0,7747,7748,1,0,0,0,
		7748,7749,1,0,0,0,7749,7756,3,1160,580,0,7750,7752,5,75,0,0,7751,7753,
		5,750,0,0,7752,7751,1,0,0,0,7752,7753,1,0,0,0,7753,7754,1,0,0,0,7754,7756,
		3,1160,580,0,7755,7721,1,0,0,0,7755,7727,1,0,0,0,7755,7734,1,0,0,0,7755,
		7739,1,0,0,0,7755,7744,1,0,0,0,7755,7750,1,0,0,0,7756,969,1,0,0,0,7757,
		7758,5,561,0,0,7758,7762,3,1180,590,0,7759,7761,3,968,484,0,7760,7759,
		1,0,0,0,7761,7764,1,0,0,0,7762,7760,1,0,0,0,7762,7763,1,0,0,0,7763,971,
		1,0,0,0,7764,7762,1,0,0,0,7765,7766,5,776,0,0,7766,7771,3,974,487,0,7767,
		7768,5,773,0,0,7768,7770,3,974,487,0,7769,7767,1,0,0,0,7770,7773,1,0,0,
		0,7771,7769,1,0,0,0,7771,7772,1,0,0,0,7772,7774,1,0,0,0,7773,7771,1,0,
		0,0,7774,7775,5,777,0,0,7775,973,1,0,0,0,7776,7779,3,686,343,0,7777,7779,
		5,329,0,0,7778,7776,1,0,0,0,7778,7777,1,0,0,0,7779,975,1,0,0,0,7780,7781,
		5,130,0,0,7781,7782,5,750,0,0,7782,7783,3,1026,513,0,7783,977,1,0,0,0,
		7784,7785,5,231,0,0,7785,7786,5,174,0,0,7786,979,1,0,0,0,7787,7788,5,231,
		0,0,7788,7789,3,760,380,0,7789,7790,5,174,0,0,7790,981,1,0,0,0,7791,7793,
		7,124,0,0,7792,7791,1,0,0,0,7792,7793,1,0,0,0,7793,7794,1,0,0,0,7794,7795,
		3,984,492,0,7795,983,1,0,0,0,7796,7797,3,1108,554,0,7797,7798,3,988,494,
		0,7798,985,1,0,0,0,7799,7800,5,69,0,0,7800,7801,3,938,469,0,7801,987,1,
		0,0,0,7802,7804,3,916,458,0,7803,7805,3,986,493,0,7804,7803,1,0,0,0,7804,
		7805,1,0,0,0,7805,989,1,0,0,0,7806,7807,5,776,0,0,7807,7808,3,1058,529,
		0,7808,7809,5,773,0,0,7809,7810,3,1058,529,0,7810,7811,5,777,0,0,7811,
		991,1,0,0,0,7812,7817,3,1074,537,0,7813,7814,5,773,0,0,7814,7816,3,1074,
		537,0,7815,7813,1,0,0,0,7816,7819,1,0,0,0,7817,7815,1,0,0,0,7817,7818,
		1,0,0,0,7818,993,1,0,0,0,7819,7817,1,0,0,0,7820,7825,3,996,498,0,7821,
		7822,5,773,0,0,7822,7824,3,996,498,0,7823,7821,1,0,0,0,7824,7827,1,0,0,
		0,7825,7823,1,0,0,0,7825,7826,1,0,0,0,7826,995,1,0,0,0,7827,7825,1,0,0,
		0,7828,7829,3,1046,523,0,7829,7832,5,750,0,0,7830,7833,3,676,338,0,7831,
		7833,5,128,0,0,7832,7830,1,0,0,0,7832,7831,1,0,0,0,7833,997,1,0,0,0,7834,
		7835,3,758,379,0,7835,7836,3,936,468,0,7836,999,1,0,0,0,7837,7839,5,71,
		0,0,7838,7840,3,1002,501,0,7839,7838,1,0,0,0,7840,7841,1,0,0,0,7841,7839,
		1,0,0,0,7841,7842,1,0,0,0,7842,1001,1,0,0,0,7843,7844,5,579,0,0,7844,7845,
		5,45,0,0,7845,7856,3,1156,578,0,7846,7848,5,392,0,0,7847,7846,1,0,0,0,
		7847,7848,1,0,0,0,7848,7849,1,0,0,0,7849,7850,5,157,0,0,7850,7851,5,45,
		0,0,7851,7856,3,1156,578,0,7852,7853,5,167,0,0,7853,7854,5,45,0,0,7854,
		7856,3,1156,578,0,7855,7843,1,0,0,0,7855,7847,1,0,0,0,7855,7852,1,0,0,
		0,7856,1003,1,0,0,0,7857,7859,5,278,0,0,7858,7860,3,1006,503,0,7859,7858,
		1,0,0,0,7860,7861,1,0,0,0,7861,7859,1,0,0,0,7861,7862,1,0,0,0,7862,1005,
		1,0,0,0,7863,7864,7,125,0,0,7864,7865,5,45,0,0,7865,7866,3,1156,578,0,
		7866,1007,1,0,0,0,7867,7872,3,1026,513,0,7868,7869,5,773,0,0,7869,7871,
		3,1026,513,0,7870,7868,1,0,0,0,7871,7874,1,0,0,0,7872,7870,1,0,0,0,7872,
		7873,1,0,0,0,7873,1009,1,0,0,0,7874,7872,1,0,0,0,7875,7880,3,1014,507,
		0,7876,7877,5,773,0,0,7877,7879,3,1014,507,0,7878,7876,1,0,0,0,7879,7882,
		1,0,0,0,7880,7878,1,0,0,0,7880,7881,1,0,0,0,7881,1011,1,0,0,0,7882,7880,
		1,0,0,0,7883,7888,3,1016,508,0,7884,7885,5,773,0,0,7885,7887,3,1016,508,
		0,7886,7884,1,0,0,0,7887,7890,1,0,0,0,7888,7886,1,0,0,0,7888,7889,1,0,
		0,0,7889,1013,1,0,0,0,7890,7888,1,0,0,0,7891,7918,3,1026,513,0,7892,7916,
		5,230,0,0,7893,7896,5,45,0,0,7894,7895,4,507,200,0,7895,7897,5,406,0,0,
		7896,7894,1,0,0,0,7896,7897,1,0,0,0,7897,7898,1,0,0,0,7898,7917,3,1156,
		578,0,7899,7900,5,645,0,0,7900,7906,3,1180,590,0,7901,7902,5,17,0,0,7902,
		7907,3,1158,579,0,7903,7904,4,507,201,0,7904,7905,5,45,0,0,7905,7907,3,
		1156,578,0,7906,7901,1,0,0,0,7906,7903,1,0,0,0,7906,7907,1,0,0,0,7907,
		7917,1,0,0,0,7908,7911,4,507,202,0,7909,7910,5,645,0,0,7910,7912,3,1180,
		590,0,7911,7909,1,0,0,0,7911,7912,1,0,0,0,7912,7913,1,0,0,0,7913,7914,
		5,45,0,0,7914,7915,5,734,0,0,7915,7917,5,406,0,0,7916,7893,1,0,0,0,7916,
		7899,1,0,0,0,7916,7908,1,0,0,0,7917,7919,1,0,0,0,7918,7892,1,0,0,0,7918,
		7919,1,0,0,0,7919,1015,1,0,0,0,7920,7949,3,1026,513,0,7921,7944,5,230,
		0,0,7922,7923,5,645,0,0,7923,7925,3,1180,590,0,7924,7922,1,0,0,0,7924,
		7925,1,0,0,0,7925,7926,1,0,0,0,7926,7927,5,45,0,0,7927,7930,3,1156,578,
		0,7928,7929,5,458,0,0,7929,7931,3,1156,578,0,7930,7928,1,0,0,0,7930,7931,
		1,0,0,0,7931,7933,1,0,0,0,7932,7934,3,1018,509,0,7933,7932,1,0,0,0,7933,
		7934,1,0,0,0,7934,7945,1,0,0,0,7935,7936,5,645,0,0,7936,7942,3,1180,590,
		0,7937,7938,5,17,0,0,7938,7940,3,1158,579,0,7939,7941,3,1018,509,0,7940,
		7939,1,0,0,0,7940,7941,1,0,0,0,7941,7943,1,0,0,0,7942,7937,1,0,0,0,7942,
		7943,1,0,0,0,7943,7945,1,0,0,0,7944,7924,1,0,0,0,7944,7935,1,0,0,0,7944,
		7945,1,0,0,0,7945,7950,1,0,0,0,7946,7948,3,1020,510,0,7947,7946,1,0,0,
		0,7947,7948,1,0,0,0,7948,7950,1,0,0,0,7949,7921,1,0,0,0,7949,7947,1,0,
		0,0,7950,1017,1,0,0,0,7951,7952,5,727,0,0,7952,7953,5,101,0,0,7953,7954,
		5,406,0,0,7954,1019,1,0,0,0,7955,7956,5,141,0,0,7956,7957,5,728,0,0,7957,
		7958,5,406,0,0,7958,1021,1,0,0,0,7959,7960,5,458,0,0,7960,7961,3,1156,
		578,0,7961,1023,1,0,0,0,7962,7966,3,1180,590,0,7963,7964,5,783,0,0,7964,
		7967,3,1180,590,0,7965,7967,5,784,0,0,7966,7963,1,0,0,0,7966,7965,1,0,
		0,0,7966,7967,1,0,0,0,7967,1025,1,0,0,0,7968,7974,3,1024,512,0,7969,7971,
		5,105,0,0,7970,7972,3,1188,594,0,7971,7970,1,0,0,0,7971,7972,1,0,0,0,7972,
		7974,1,0,0,0,7973,7968,1,0,0,0,7973,7969,1,0,0,0,7974,1027,1,0,0,0,7975,
		7976,5,275,0,0,7976,7977,3,1154,577,0,7977,1029,1,0,0,0,7978,7981,3,1028,
		514,0,7979,7981,3,358,179,0,7980,7978,1,0,0,0,7980,7979,1,0,0,0,7981,1031,
		1,0,0,0,7982,7983,7,126,0,0,7983,1033,1,0,0,0,7984,7985,7,127,0,0,7985,
		1035,1,0,0,0,7986,7987,4,518,203,0,7987,7988,5,405,0,0,7988,7989,3,1132,
		566,0,7989,1037,1,0,0,0,7990,7996,3,1138,569,0,7991,7993,3,1134,567,0,
		7992,7994,3,1138,569,0,7993,7992,1,0,0,0,7993,7994,1,0,0,0,7994,7996,1,
		0,0,0,7995,7990,1,0,0,0,7995,7991,1,0,0,0,7996,1039,1,0,0,0,7997,7998,
		4,520,204,0,7998,8002,3,1128,564,0,7999,8000,4,520,205,0,8000,8002,3,1038,
		519,0,8001,7997,1,0,0,0,8001,7999,1,0,0,0,8002,1041,1,0,0,0,8003,8004,
		3,1128,564,0,8004,1043,1,0,0,0,8005,8006,5,776,0,0,8006,8011,3,1042,521,
		0,8007,8008,5,773,0,0,8008,8010,3,1042,521,0,8009,8007,1,0,0,0,8010,8013,
		1,0,0,0,8011,8009,1,0,0,0,8011,8012,1,0,0,0,8012,8014,1,0,0,0,8013,8011,
		1,0,0,0,8014,8015,5,777,0,0,8015,1045,1,0,0,0,8016,8017,3,1038,519,0,8017,
		1047,1,0,0,0,8018,8021,3,1046,523,0,8019,8021,3,1054,527,0,8020,8018,1,
		0,0,0,8020,8019,1,0,0,0,8021,1049,1,0,0,0,8022,8023,3,1128,564,0,8023,
		1051,1,0,0,0,8024,8025,3,1038,519,0,8025,1053,1,0,0,0,8026,8027,3,1128,
		564,0,8027,8031,5,772,0,0,8028,8029,3,1128,564,0,8029,8030,5,772,0,0,8030,
		8032,1,0,0,0,8031,8028,1,0,0,0,8031,8032,1,0,0,0,8032,8033,1,0,0,0,8033,
		8034,5,760,0,0,8034,1055,1,0,0,0,8035,8036,3,1128,564,0,8036,1057,1,0,
		0,0,8037,8038,3,1128,564,0,8038,1059,1,0,0,0,8039,8040,3,1134,567,0,8040,
		1061,1,0,0,0,8041,8042,3,1134,567,0,8042,1063,1,0,0,0,8043,8044,3,1134,
		567,0,8044,1065,1,0,0,0,8045,8046,3,1134,567,0,8046,1067,1,0,0,0,8047,
		8048,3,1134,567,0,8048,1069,1,0,0,0,8049,8050,3,1134,567,0,8050,1071,1,
		0,0,0,8051,8054,3,1134,567,0,8052,8054,3,1138,569,0,8053,8051,1,0,0,0,
		8053,8052,1,0,0,0,8054,1073,1,0,0,0,8055,8058,3,1134,567,0,8056,8058,3,
		1138,569,0,8057,8055,1,0,0,0,8057,8056,1,0,0,0,8058,1075,1,0,0,0,8059,
		8060,3,1128,564,0,8060,1077,1,0,0,0,8061,8062,3,1128,564,0,8062,1079,1,
		0,0,0,8063,8064,3,1128,564,0,8064,1081,1,0,0,0,8065,8066,3,1128,564,0,
		8066,1083,1,0,0,0,8067,8068,3,1134,567,0,8068,1085,1,0,0,0,8069,8070,3,
		1134,567,0,8070,1087,1,0,0,0,8071,8072,3,1128,564,0,8072,1089,1,0,0,0,
		8073,8074,3,1180,590,0,8074,1091,1,0,0,0,8075,8076,3,1180,590,0,8076,1093,
		1,0,0,0,8077,8078,3,1180,590,0,8078,1095,1,0,0,0,8079,8082,3,1134,567,
		0,8080,8082,3,1138,569,0,8081,8079,1,0,0,0,8081,8080,1,0,0,0,8082,1097,
		1,0,0,0,8083,8084,3,1058,529,0,8084,8085,3,1138,569,0,8085,1099,1,0,0,
		0,8086,8094,3,1128,564,0,8087,8088,5,772,0,0,8088,8095,5,760,0,0,8089,
		8092,3,1138,569,0,8090,8091,5,772,0,0,8091,8093,5,760,0,0,8092,8090,1,
		0,0,0,8092,8093,1,0,0,0,8093,8095,1,0,0,0,8094,8087,1,0,0,0,8094,8089,
		1,0,0,0,8094,8095,1,0,0,0,8095,1101,1,0,0,0,8096,8099,3,1134,567,0,8097,
		8099,3,1138,569,0,8098,8096,1,0,0,0,8098,8097,1,0,0,0,8099,1103,1,0,0,
		0,8100,8105,3,1102,551,0,8101,8102,5,773,0,0,8102,8104,3,1102,551,0,8103,
		8101,1,0,0,0,8104,8107,1,0,0,0,8105,8103,1,0,0,0,8105,8106,1,0,0,0,8106,
		1105,1,0,0,0,8107,8105,1,0,0,0,8108,8113,3,1100,550,0,8109,8110,5,773,
		0,0,8110,8112,3,1100,550,0,8111,8109,1,0,0,0,8112,8115,1,0,0,0,8113,8111,
		1,0,0,0,8113,8114,1,0,0,0,8114,1107,1,0,0,0,8115,8113,1,0,0,0,8116,8117,
		3,1128,564,0,8117,1109,1,0,0,0,8118,8121,3,1126,563,0,8119,8121,3,1204,
		602,0,8120,8118,1,0,0,0,8120,8119,1,0,0,0,8121,1111,1,0,0,0,8122,8123,
		3,1110,555,0,8123,1113,1,0,0,0,8124,8127,3,1126,563,0,8125,8127,3,1210,
		605,0,8126,8124,1,0,0,0,8126,8125,1,0,0,0,8127,1115,1,0,0,0,8128,8129,
		3,1114,557,0,8129,1117,1,0,0,0,8130,8131,3,1128,564,0,8131,1119,1,0,0,
		0,8132,8133,3,1154,577,0,8133,1121,1,0,0,0,8134,8135,3,1128,564,0,8135,
		1123,1,0,0,0,8136,8137,3,1128,564,0,8137,1125,1,0,0,0,8138,8142,7,128,
		0,0,8139,8140,4,563,206,0,8140,8142,5,798,0,0,8141,8138,1,0,0,0,8141,8139,
		1,0,0,0,8142,1127,1,0,0,0,8143,8146,3,1126,563,0,8144,8146,3,1198,599,
		0,8145,8143,1,0,0,0,8145,8144,1,0,0,0,8146,1129,1,0,0,0,8147,8152,3,1128,
		564,0,8148,8149,5,773,0,0,8149,8151,3,1128,564,0,8150,8148,1,0,0,0,8151,
		8154,1,0,0,0,8152,8150,1,0,0,0,8152,8153,1,0,0,0,8153,1131,1,0,0,0,8154,
		8152,1,0,0,0,8155,8156,5,776,0,0,8156,8157,3,1130,565,0,8157,8158,5,777,
		0,0,8158,1133,1,0,0,0,8159,8161,3,1128,564,0,8160,8162,3,1138,569,0,8161,
		8160,1,0,0,0,8161,8162,1,0,0,0,8162,1135,1,0,0,0,8163,8168,3,1128,564,
		0,8164,8166,3,1138,569,0,8165,8167,3,1138,569,0,8166,8165,1,0,0,0,8166,
		8167,1,0,0,0,8167,8169,1,0,0,0,8168,8164,1,0,0,0,8168,8169,1,0,0,0,8169,
		8175,1,0,0,0,8170,8171,4,568,207,0,8171,8172,3,1138,569,0,8172,8173,3,
		1138,569,0,8173,8175,1,0,0,0,8174,8163,1,0,0,0,8174,8170,1,0,0,0,8175,
		1137,1,0,0,0,8176,8177,5,772,0,0,8177,8178,3,1128,564,0,8178,1139,1,0,
		0,0,8179,8180,7,129,0,0,8180,1141,1,0,0,0,8181,8182,7,130,0,0,8182,1143,
		1,0,0,0,8183,8184,7,131,0,0,8184,1145,1,0,0,0,8185,8191,5,747,0,0,8186,
		8187,4,573,208,0,8187,8191,5,788,0,0,8188,8191,5,749,0,0,8189,8191,5,748,
		0,0,8190,8185,1,0,0,0,8190,8186,1,0,0,0,8190,8188,1,0,0,0,8190,8189,1,
		0,0,0,8191,1147,1,0,0,0,8192,8202,3,1160,580,0,8193,8202,3,1166,583,0,
		8194,8202,3,1172,586,0,8195,8202,3,1170,585,0,8196,8202,3,1168,584,0,8197,
		8199,5,794,0,0,8198,8197,1,0,0,0,8198,8199,1,0,0,0,8199,8200,1,0,0,0,8200,
		8202,7,132,0,0,8201,8192,1,0,0,0,8201,8193,1,0,0,0,8201,8194,1,0,0,0,8201,
		8195,1,0,0,0,8201,8196,1,0,0,0,8201,8198,1,0,0,0,8202,1149,1,0,0,0,8203,
		8209,3,1148,574,0,8204,8205,5,758,0,0,8205,8209,3,1140,570,0,8206,8207,
		5,759,0,0,8207,8209,3,1140,570,0,8208,8203,1,0,0,0,8208,8204,1,0,0,0,8208,
		8206,1,0,0,0,8209,1151,1,0,0,0,8210,8211,5,776,0,0,8211,8216,3,1156,578,
		0,8212,8213,5,773,0,0,8213,8215,3,1156,578,0,8214,8212,1,0,0,0,8215,8218,
		1,0,0,0,8216,8214,1,0,0,0,8216,8217,1,0,0,0,8217,8219,1,0,0,0,8218,8216,
		1,0,0,0,8219,8220,5,777,0,0,8220,1153,1,0,0,0,8221,8225,5,799,0,0,8222,
		8223,4,577,209,0,8223,8225,5,798,0,0,8224,8221,1,0,0,0,8224,8222,1,0,0,
		0,8225,1155,1,0,0,0,8226,8230,3,1154,577,0,8227,8230,5,788,0,0,8228,8230,
		5,789,0,0,8229,8226,1,0,0,0,8229,8227,1,0,0,0,8229,8228,1,0,0,0,8230,1157,
		1,0,0,0,8231,8235,3,1154,577,0,8232,8233,4,579,210,0,8233,8235,5,788,0,
		0,8234,8231,1,0,0,0,8234,8232,1,0,0,0,8235,1159,1,0,0,0,8236,8238,5,794,
		0,0,8237,8236,1,0,0,0,8237,8238,1,0,0,0,8238,8239,1,0,0,0,8239,8242,3,
		1154,577,0,8240,8242,5,796,0,0,8241,8237,1,0,0,0,8241,8240,1,0,0,0,8242,
		8246,1,0,0,0,8243,8245,3,1154,577,0,8244,8243,1,0,0,0,8245,8248,1,0,0,
		0,8246,8244,1,0,0,0,8246,8247,1,0,0,0,8247,1161,1,0,0,0,8248,8246,1,0,
		0,0,8249,8250,3,1154,577,0,8250,1163,1,0,0,0,8251,8256,3,1154,577,0,8252,
		8253,5,773,0,0,8253,8255,3,1154,577,0,8254,8252,1,0,0,0,8255,8258,1,0,
		0,0,8256,8254,1,0,0,0,8256,8257,1,0,0,0,8257,1165,1,0,0,0,8258,8256,1,
		0,0,0,8259,8260,7,131,0,0,8260,1167,1,0,0,0,8261,8262,7,133,0,0,8262,1169,
		1,0,0,0,8263,8264,7,134,0,0,8264,1171,1,0,0,0,8265,8266,5,116,0,0,8266,
		8272,5,799,0,0,8267,8268,5,586,0,0,8268,8272,5,799,0,0,8269,8270,5,583,
		0,0,8270,8272,5,799,0,0,8271,8265,1,0,0,0,8271,8267,1,0,0,0,8271,8269,
		1,0,0,0,8272,1173,1,0,0,0,8273,8276,3,922,461,0,8274,8276,3,1178,589,0,
		8275,8273,1,0,0,0,8275,8274,1,0,0,0,8276,1175,1,0,0,0,8277,8278,3,1178,
		589,0,8278,1177,1,0,0,0,8279,8280,5,776,0,0,8280,8281,5,747,0,0,8281,8282,
		5,773,0,0,8282,8283,5,747,0,0,8283,8284,5,777,0,0,8284,1179,1,0,0,0,8285,
		8288,3,1128,564,0,8286,8288,3,1154,577,0,8287,8285,1,0,0,0,8287,8286,1,
		0,0,0,8288,1181,1,0,0,0,8289,8292,3,1126,563,0,8290,8292,3,1212,606,0,
		8291,8289,1,0,0,0,8291,8290,1,0,0,0,8292,1183,1,0,0,0,8293,8296,3,1114,
		557,0,8294,8296,3,1154,577,0,8295,8293,1,0,0,0,8295,8294,1,0,0,0,8296,
		1185,1,0,0,0,8297,8300,3,1146,573,0,8298,8300,3,1126,563,0,8299,8297,1,
		0,0,0,8299,8298,1,0,0,0,8300,1187,1,0,0,0,8301,8302,5,776,0,0,8302,8303,
		5,777,0,0,8303,1189,1,0,0,0,8304,8305,7,135,0,0,8305,1191,1,0,0,0,8306,
		8307,7,136,0,0,8307,1193,1,0,0,0,8308,8309,5,214,0,0,8309,8315,5,772,0,
		0,8310,8311,5,284,0,0,8311,8315,5,772,0,0,8312,8313,5,502,0,0,8313,8315,
		5,772,0,0,8314,8308,1,0,0,0,8314,8310,1,0,0,0,8314,8312,1,0,0,0,8315,1195,
		1,0,0,0,8316,8317,5,658,0,0,8317,8327,5,772,0,0,8318,8319,5,673,0,0,8319,
		8327,5,772,0,0,8320,8321,5,214,0,0,8321,8327,5,772,0,0,8322,8323,5,284,
		0,0,8323,8327,5,772,0,0,8324,8325,5,502,0,0,8325,8327,5,772,0,0,8326,8316,
		1,0,0,0,8326,8318,1,0,0,0,8326,8320,1,0,0,0,8326,8322,1,0,0,0,8326,8324,
		1,0,0,0,8327,1197,1,0,0,0,8328,8336,4,599,211,0,8329,8337,3,1204,602,0,
		8330,8337,3,1216,608,0,8331,8337,5,173,0,0,8332,8333,4,599,212,0,8333,
		8337,5,510,0,0,8334,8335,4,599,213,0,8335,8337,5,714,0,0,8336,8329,1,0,
		0,0,8336,8330,1,0,0,0,8336,8331,1,0,0,0,8336,8332,1,0,0,0,8336,8334,1,
		0,0,0,8337,8346,1,0,0,0,8338,8344,3,1208,604,0,8339,8344,3,1200,600,0,
		8340,8344,3,1202,601,0,8341,8344,3,1206,603,0,8342,8344,3,1214,607,0,8343,
		8338,1,0,0,0,8343,8339,1,0,0,0,8343,8340,1,0,0,0,8343,8341,1,0,0,0,8343,
		8342,1,0,0,0,8344,8346,1,0,0,0,8345,8328,1,0,0,0,8345,8343,1,0,0,0,8346,
		1199,1,0,0,0,8347,8348,7,137,0,0,8348,1201,1,0,0,0,8349,8350,7,138,0,0,
		8350,1203,1,0,0,0,8351,8362,4,602,214,0,8352,8363,3,1218,609,0,8353,8363,
		5,170,0,0,8354,8363,5,188,0,0,8355,8363,5,369,0,0,8356,8363,5,423,0,0,
		8357,8363,5,427,0,0,8358,8363,5,451,0,0,8359,8363,5,459,0,0,8360,8363,
		5,709,0,0,8361,8363,5,565,0,0,8362,8352,1,0,0,0,8362,8353,1,0,0,0,8362,
		8354,1,0,0,0,8362,8355,1,0,0,0,8362,8356,1,0,0,0,8362,8357,1,0,0,0,8362,
		8358,1,0,0,0,8362,8359,1,0,0,0,8362,8360,1,0,0,0,8362,8361,1,0,0,0,8363,
		8370,1,0,0,0,8364,8368,3,1208,604,0,8365,8368,3,1206,603,0,8366,8368,3,
		1214,607,0,8367,8364,1,0,0,0,8367,8365,1,0,0,0,8367,8366,1,0,0,0,8368,
		8370,1,0,0,0,8369,8351,1,0,0,0,8369,8367,1,0,0,0,8370,1205,1,0,0,0,8371,
		8372,7,139,0,0,8372,1207,1,0,0,0,8373,8377,7,140,0,0,8374,8375,4,604,215,
		0,8375,8377,7,141,0,0,8376,8373,1,0,0,0,8376,8374,1,0,0,0,8377,1209,1,
		0,0,0,8378,8381,4,605,216,0,8379,8382,3,1218,609,0,8380,8382,3,1216,608,
		0,8381,8379,1,0,0,0,8381,8380,1,0,0,0,8382,8389,1,0,0,0,8383,8387,3,1208,
		604,0,8384,8387,3,1202,601,0,8385,8387,3,1214,607,0,8386,8383,1,0,0,0,
		8386,8384,1,0,0,0,8386,8385,1,0,0,0,8387,8389,1,0,0,0,8388,8378,1,0,0,
		0,8388,8386,1,0,0,0,8389,1211,1,0,0,0,8390,8395,3,1208,604,0,8391,8395,
		3,1200,600,0,8392,8395,3,1202,601,0,8393,8395,3,1206,603,0,8394,8390,1,
		0,0,0,8394,8391,1,0,0,0,8394,8392,1,0,0,0,8394,8393,1,0,0,0,8395,1213,
		1,0,0,0,8396,8397,7,136,0,0,8397,1215,1,0,0,0,8398,8404,7,142,0,0,8399,
		8400,4,608,217,0,8400,8404,5,510,0,0,8401,8402,4,608,218,0,8402,8404,5,
		234,0,0,8403,8398,1,0,0,0,8403,8399,1,0,0,0,8403,8401,1,0,0,0,8404,1217,
		1,0,0,0,8405,8415,7,143,0,0,8406,8407,4,609,219,0,8407,8415,5,510,0,0,
		8408,8409,4,609,220,0,8409,8415,7,144,0,0,8410,8411,4,609,221,0,8411,8415,
		7,145,0,0,8412,8413,4,609,222,0,8413,8415,5,660,0,0,8414,8405,1,0,0,0,
		8414,8406,1,0,0,0,8414,8408,1,0,0,0,8414,8410,1,0,0,0,8414,8412,1,0,0,
		0,8415,1219,1,0,0,0,1123,1223,1227,1230,1232,1268,1276,1281,1297,1304,
		1311,1314,1321,1326,1329,1334,1340,1342,1346,1350,1359,1363,1368,1374,
		1381,1385,1390,1395,1402,1405,1411,1414,1421,1431,1436,1441,1449,1455,
		1459,1464,1473,1479,1485,1491,1500,1506,1515,1529,1533,1539,1543,1549,
		1553,1558,1561,1567,1573,1579,1583,1588,1592,1596,1604,1606,1619,1627,
		1635,1639,1668,1684,1687,1696,1701,1707,1712,1716,1721,1725,1729,1733,
		1737,1741,1743,1754,1762,1771,1776,1779,1784,1791,1799,1803,1808,1815,
		1820,1825,1833,1837,1842,1845,1848,1851,1858,1865,1869,1893,1897,1903,
		1910,1913,1917,1924,1927,1930,1933,1942,1949,1954,1957,1960,1966,1972,
		1975,1980,1990,1993,1999,2005,2015,2018,2026,2032,2043,2046,2051,2070,
		2073,2076,2082,2085,2087,2093,2103,2113,2116,2119,2124,2130,2143,2147,
		2152,2161,2178,2197,2206,2209,2217,2222,2226,2233,2238,2253,2257,2263,
		2269,2275,2281,2287,2292,2296,2304,2310,2316,2321,2324,2327,2336,2339,
		2350,2362,2371,2375,2384,2387,2393,2395,2399,2406,2419,2426,2432,2435,
		2452,2472,2476,2482,2488,2494,2499,2506,2513,2518,2521,2525,2529,2534,
		2538,2542,2548,2553,2556,2560,2566,2570,2574,2582,2590,2599,2608,2621,
		2624,2628,2634,2642,2647,2650,2653,2656,2659,2661,2667,2669,2684,2690,
		2697,2700,2702,2704,2714,2716,2720,2723,2726,2730,2735,2741,2744,2747,
		2753,2756,2765,2774,2778,2782,2788,2793,2798,2803,2807,2813,2824,2827,
		2832,2838,2841,2844,2847,2850,2864,2867,2871,2875,2881,2886,2890,2895,
		2898,2902,2908,2912,2916,2925,2930,2934,2938,2941,2945,2948,2950,2954,
		2960,2964,2966,2970,2974,2978,2985,2987,2996,3002,3007,3010,3013,3016,
		3019,3023,3038,3042,3048,3051,3054,3060,3065,3069,3072,3080,3082,3095,
		3107,3112,3115,3118,3123,3129,3145,3165,3174,3178,3185,3190,3199,3206,
		3217,3224,3233,3242,3254,3259,3266,3270,3276,3281,3286,3290,3296,3302,
		3304,3307,3311,3321,3326,3331,3338,3347,3355,3360,3364,3370,3373,3376,
		3380,3384,3394,3398,3401,3404,3409,3415,3419,3425,3428,3430,3435,3447,
		3456,3469,3472,3477,3484,3488,3492,3494,3508,3515,3524,3530,3539,3543,
		3547,3557,3559,3567,3574,3579,3583,3587,3590,3596,3599,3602,3608,3615,
		3620,3624,3627,3630,3633,3635,3639,3647,3653,3657,3662,3665,3668,3671,
		3673,3678,3687,3700,3702,3706,3712,3715,3718,3724,3731,3733,3741,3747,
		3752,3755,3762,3764,3773,3782,3791,3799,3803,3810,3813,3815,3823,3829,
		3839,3846,3940,3944,3950,3964,3972,3975,3987,3992,3998,4005,4012,4019,
		4026,4033,4040,4043,4050,4058,4066,4076,4082,4086,4090,4095,4098,4100,
		4109,4115,4122,4127,4132,4137,4140,4147,4160,4166,4172,4179,4187,4193,
		4205,4207,4213,4217,4219,4223,4236,4242,4250,4261,4265,4278,4285,4291,
		4298,4300,4310,4318,4321,4326,4330,4336,4339,4344,4355,4357,4369,4374,
		4382,4388,4390,4392,4398,4410,4415,4417,4421,4427,4430,4433,4443,4445,
		4451,4458,4464,4474,4478,4483,4500,4516,4521,4529,4537,4542,4548,4551,
		4553,4562,4568,4574,4576,4580,4591,4601,4606,4611,4616,4624,4628,4633,
		4642,4654,4668,4677,4679,4686,4693,4697,4703,4711,4718,4722,4728,4735,
		4738,4747,4753,4758,4781,4784,4800,4805,4808,4812,4815,4829,4835,4840,
		4843,4845,4849,4854,4856,4868,4874,4896,4900,4902,4910,4914,4923,4933,
		4940,4943,4947,4950,4953,4957,4960,4964,4967,4972,4975,4980,4983,4989,
		4993,4999,5002,5011,5013,5019,5023,5026,5029,5033,5039,5042,5045,5055,
		5059,5068,5071,5076,5079,5082,5086,5089,5094,5098,5106,5119,5137,5142,
		5147,5155,5161,5163,5167,5170,5184,5194,5198,5206,5209,5213,5223,5227,
		5234,5239,5247,5252,5258,5265,5270,5276,5283,5293,5295,5303,5308,5312,
		5315,5322,5327,5331,5342,5350,5354,5357,5360,5364,5368,5373,5379,5383,
		5394,5397,5400,5403,5411,5415,5420,5428,5436,5442,5460,5470,5476,5490,
		5493,5497,5508,5510,5519,5531,5533,5540,5546,5552,5560,5571,5575,5604,
		5606,5614,5618,5635,5642,5656,5668,5674,5681,5684,5718,5726,5728,5740,
		5745,5751,5759,5766,5772,5777,5783,5788,5793,5799,5804,5810,5818,5826,
		5834,5842,5847,5853,5858,5862,5866,5871,5873,5892,5896,5903,5915,5918,
		5922,5927,5932,5936,5946,5955,5957,5960,5969,5976,5989,5994,6001,6007,
		6033,6064,6084,6090,6094,6121,6133,6146,6150,6154,6182,6238,6248,6252,
		6264,6269,6282,6302,6306,6323,6326,6331,6334,6343,6347,6353,6359,6363,
		6374,6380,6382,6389,6396,6400,6407,6412,6416,6421,6425,6429,6434,6439,
		6441,6445,6458,6462,6465,6469,6473,6477,6482,6486,6490,6499,6501,6508,
		6514,6522,6543,6548,6555,6578,6594,6604,6608,6615,6618,6629,6638,6641,
		6648,6653,6679,6685,6691,6695,6705,6709,6722,6734,6752,6760,6770,6773,
		6778,6782,6789,6794,6801,6809,6812,6817,6825,6828,6842,6845,6858,6862,
		6864,6869,6874,6880,6886,6892,6897,6900,6906,6911,6914,6920,6924,6930,
		6932,6935,6941,6947,6955,6957,6959,6963,6969,6974,6978,6983,6989,6996,
		6999,7001,7004,7014,7018,7024,7031,7036,7050,7055,7063,7068,7072,7075,
		7080,7084,7092,7100,7102,7109,7117,7124,7127,7135,7143,7145,7151,7157,
		7161,7168,7179,7188,7191,7196,7198,7201,7204,7208,7211,7215,7220,7223,
		7227,7230,7234,7239,7243,7255,7259,7265,7268,7273,7277,7281,7286,7295,
		7298,7302,7306,7309,7313,7317,7322,7327,7333,7338,7343,7345,7350,7357,
		7365,7371,7373,7377,7381,7385,7389,7403,7410,7414,7419,7425,7429,7435,
		7439,7443,7448,7453,7458,7463,7469,7475,7480,7485,7490,7495,7500,7505,
		7510,7520,7526,7532,7538,7541,7548,7553,7556,7560,7563,7567,7572,7576,
		7581,7585,7594,7597,7600,7603,7607,7611,7615,7630,7633,7635,7640,7649,
		7652,7656,7669,7681,7686,7691,7700,7705,7714,7719,7723,7727,7731,7736,
		7741,7747,7752,7755,7762,7771,7778,7792,7804,7817,7825,7832,7841,7847,
		7855,7861,7872,7880,7888,7896,7906,7911,7916,7918,7924,7930,7933,7940,
		7942,7944,7947,7949,7966,7971,7973,7980,7993,7995,8001,8011,8020,8031,
		8053,8057,8081,8092,8094,8098,8105,8113,8120,8126,8141,8145,8152,8161,
		8166,8168,8174,8190,8198,8201,8208,8216,8224,8229,8234,8237,8241,8246,
		8256,8271,8275,8287,8291,8295,8299,8314,8326,8336,8343,8345,8362,8367,
		8369,8376,8381,8386,8388,8394,8403,8414
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
